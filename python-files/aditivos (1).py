# -*- coding: utf-8 -*-
"""Aditivos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DGilEE-68c4UFWs9gbM1-K2t2SkohqZH
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import matplotlib
matplotlib.use('TkAgg') # Asegura que Matplotlib use el backend TkAgg
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk # Importar NavigationToolbar2Tk también

import pandas as pd # Asegurarse de que pandas esté bien importado

# --- Funciones de Cálculo (Reutilizadas de la versión de consola) ---

def obtener_float_valido_gui(entry_widget, min_val=0):
    """Obtiene un float de un widget Entry y valida. Retorna valor o None."""
    try:
        valor = float(entry_widget.get())
        if valor < min_val:
            messagebox.showerror("Error de Entrada", f"El valor debe ser al menos {min_val}.")
            return None
        return valor
    except ValueError:
        messagebox.showerror("Error de Entrada", "Entrada inválida. Por favor, ingresa un número.")
        return None

def obtener_porcentaje_valido_gui(entry_widget):
    """Obtiene un porcentaje de un widget Entry y valida. Retorna valor o None."""
    valor = obtener_float_valido_gui(entry_widget, 0)
    if valor is not None:
        if 0 <= valor <= 100:
            return valor
        else:
            messagebox.showerror("Error de Entrada", "El porcentaje debe estar entre 0 y 100.")
            return None
    return None

def calcular_costo_cemento(composicion, costos_componentes, aditivo_gramos_ton=0, costo_aditivo_kg=0):
    """
    Calcula el costo por tonelada de cemento.
    Considera que el aditivo se añade a la composición base y su peso se suma.
    """
    clinker_pct, caliza_pct, yeso_pct, flyash_pct = composicion
    costo_clinker_ton, costo_caliza_ton, costo_yeso_ton, costo_flyash_ton = costos_componentes

    # Convertir porcentajes a fracciones de 1 (para 1000 kg de base)
    peso_clinker = clinker_pct / 100 * 1000 # kg
    peso_caliza = caliza_pct / 100 * 1000   # kg
    peso_yeso = yeso_pct / 100 * 1000     # kg
    peso_flyash = flyash_pct / 100 * 1000   # kg

    costo_componentes_base = (peso_clinker * costo_clinker_ton / 1000) + \
                             (peso_caliza * costo_caliza_ton / 1000) + \
                             (peso_yeso * costo_yeso_ton / 1000) + \
                             (peso_flyash * costo_flyash_ton / 1000)

    # Costo del aditivo y su peso
    costo_aditivo = (aditivo_gramos_ton / 1000) * costo_aditivo_kg # Costo por kg de aditivo * kg de aditivo por tonelada base
    peso_aditivo_kg = aditivo_gramos_ton / 1000 # Convertir gramos a kg

    peso_total_cemento_con_aditivo = 1000 + peso_aditivo_kg # kg

    costo_total = costo_componentes_base + costo_aditivo
    costo_por_tonelada_final = costo_total / (peso_total_cemento_con_aditivo / 1000) # Costo por tonelada de producto final

    return costo_por_tonelada_final, peso_total_cemento_con_aditivo

# --- Clase Principal de la Aplicación GUI ---

class CementOptimizerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculador y Optimizador de Costos de Cemento")
        self.root.geometry("1200x800") # Tamaño inicial de la ventana

        # Variables para almacenar datos
        self.moneda_seleccionada = tk.StringVar(value="USD")
        self.costo_total_cemento_original = 0.0
        self.composicion_base = (0, 0, 0, 0)
        self.costos_componentes_base = (0, 0, 0, 0)
        self.aditivo_gramos_ton_original = 0
        self.costo_aditivo_kg_original = 0

        # Crear un Notebook (pestañas) para organizar la interfaz
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(expand=True, fill="both", padx=10, pady=10)

        # Pestaña 1: Datos del Cemento Original
        self.frame_original_cement = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.frame_original_cement, text="Datos Cemento Original")
        self.create_original_cement_widgets(self.frame_original_cement)

        # Pestaña 2: Optimización y Simulación
        self.frame_optimization = ttk.Frame(self.notebook, padding="10 10 10 10")
        self.notebook.add(self.frame_optimization, text="Optimización y Simulación")
        self.create_optimization_widgets(self.frame_optimization)

        # Configurar filas y columnas para que se expandan
        for i in range(10): # Ajustar según el número de widgets
            self.frame_original_cement.grid_rowconfigure(i, weight=1)
            self.frame_original_cement.grid_columnconfigure(i, weight=1)
            self.frame_optimization.grid_rowconfigure(i, weight=1)
            self.frame_optimization.grid_columnconfigure(i, weight=1)


    def create_original_cement_widgets(self, parent_frame):
        # Sección de Moneda
        moneda_frame = ttk.LabelFrame(parent_frame, text="Moneda", padding="10")
        moneda_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=5, padx=5)
        ttk.Label(moneda_frame, text="Selecciona la Moneda:").pack(side="left", padx=5)
        self.moneda_combo = ttk.Combobox(moneda_frame, textvariable=self.moneda_seleccionada,
                                         values=["USD", "MXN", "EUR", "GBP", "JPY"], state="readonly")
        self.moneda_combo.pack(side="left", padx=5)
        self.moneda_combo.set("USD") # Valor por defecto

        # Sección de Datos del Cemento
        cement_data_frame = ttk.LabelFrame(parent_frame, text="Datos del Cemento Original", padding="10")
        cement_data_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5, padx=5)

        ttk.Label(cement_data_frame, text="Tipo de Cemento:").grid(row=0, column=0, sticky="w", pady=2)
        self.entry_tipo_cemento = ttk.Entry(cement_data_frame)
        self.entry_tipo_cemento.grid(row=0, column=1, sticky="ew", pady=2)

        # Composición Mineral
        comp_frame = ttk.LabelFrame(cement_data_frame, text="Composición Mineral (%)", padding="5")
        comp_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5)

        labels = ["Clinker:", "Caliza:", "Yeso:", "Flyash:"]
        self.comp_entries = {}
        for i, text in enumerate(labels):
            ttk.Label(comp_frame, text=text).grid(row=i, column=0, sticky="w", pady=2)
            entry = ttk.Entry(comp_frame)
            entry.grid(row=i, column=1, sticky="ew", pady=2)
            self.comp_entries[text.replace(":", "").strip().lower()] = entry
            # Valores por defecto para pruebas rápidas
            if text == "Clinker:": entry.insert(0, "80")
            elif text == "Caliza:": entry.insert(0, "10")
            elif text == "Yeso:": entry.insert(0, "5")
            elif text == "Flyash:": entry.insert(0, "5")


        # Costos por Tonelada
        costos_frame = ttk.LabelFrame(cement_data_frame, text="Costos por Tonelada de Componentes", padding="5")
        costos_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=5)

        self.costo_entries = {}
        for i, text in enumerate(labels):
            ttk.Label(costos_frame, text=f"Costo {text.replace(':', '')} / Ton:").grid(row=i, column=0, sticky="w", pady=2)
            entry = ttk.Entry(costos_frame)
            entry.grid(row=i, column=1, sticky="ew", pady=2)
            self.costo_entries[text.replace(":", "").strip().lower()] = entry
            # Valores por defecto para pruebas rápidas
            if text == "Clinker:": entry.insert(0, "100")
            elif text == "Caliza:": entry.insert(0, "10")
            elif text == "Yeso:": entry.insert(0, "20")
            elif text == "Flyash:": entry.insert(0, "15")

        # Aditivo Original
        aditivo_original_frame = ttk.LabelFrame(parent_frame, text="Aditivo Original (Opcional)", padding="10")
        aditivo_original_frame.grid(row=3, column=0, columnspan=2, sticky="ew", pady=5, padx=5)

        ttk.Label(aditivo_original_frame, text="Gramos por Ton (composición base):").grid(row=0, column=0, sticky="w", pady=2)
        self.entry_aditivo_gr_original = ttk.Entry(aditivo_original_frame)
        self.entry_aditivo_gr_original.grid(row=0, column=1, sticky="ew", pady=2)
        self.entry_aditivo_gr_original.insert(0, "0") # Default

        ttk.Label(aditivo_original_frame, text="Costo Aditivo / Kg:").grid(row=1, column=0, sticky="w", pady=2)
        self.entry_costo_aditivo_kg_original = ttk.Entry(aditivo_original_frame)
        self.entry_costo_aditivo_kg_original.grid(row=1, column=1, sticky="ew", pady=2)
        self.entry_costo_aditivo_kg_original.insert(0, "0") # Default

        # Botón de Calcular Costo Original
        btn_calc_original = ttk.Button(parent_frame, text="Calcular Costo Cemento Original", command=self.calculate_original_cost)
        btn_calc_original.grid(row=4, column=0, columnspan=2, pady=10)

        # Área de Resultados Original
        self.results_original_text = scrolledtext.ScrolledText(parent_frame, wrap=tk.WORD, height=8, width=50)
        self.results_original_text.grid(row=5, column=0, columnspan=2, sticky="nsew", pady=5, padx=5)

        # Configuración de columnas para expandirse dentro de los frames
        cement_data_frame.grid_columnconfigure(1, weight=1)
        comp_frame.grid_columnconfigure(1, weight=1)
        costos_frame.grid_columnconfigure(1, weight=1)
        aditivo_original_frame.grid_columnconfigure(1, weight=1)


    def calculate_original_cost(self):
        self.results_original_text.delete(1.0, tk.END) # Limpiar texto anterior

        # 1. Obtener Composición Mineral
        clinker = obtener_porcentaje_valido_gui(self.comp_entries['clinker'])
        caliza = obtener_porcentaje_valido_gui(self.comp_entries['caliza'])
        yeso = obtener_porcentaje_valido_gui(self.comp_entries['yeso'])
        flyash = obtener_porcentaje_valido_gui(self.comp_entries['flyash'])

        if any(x is None for x in [clinker, caliza, yeso, flyash]):
            return

        current_comp_sum = clinker + caliza + yeso + flyash
        if abs(current_comp_sum - 100) > 0.01:
            messagebox.showerror("Error de Validación", f"La suma de la composición mineral es {current_comp_sum:.2f}%. Debe sumar 100%.")
            return
        self.composicion_base = (clinker, caliza, yeso, flyash)

        # 2. Obtener Costos por Tonelada