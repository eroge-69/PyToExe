import requests
import json
import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, date, timedelta
from icalendar import Calendar
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TELEGRAM_TOKEN = "8429629815:AAFIY8J0tzeQZsMFkL1-emxDARk9TMoSejk"
ICS_URL = "https://schedule.sevsu.ru/calendar/group/F5C5E2EC5F63B649"
OPENWEATHER_KEY = "a2aef88ad3a307f5b7debce4019ea732"
CITY = "Sevastopol"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
SETTINGS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "settings.json")

try:
    with open(SETTINGS_PATH, "r") as f:
        user_settings = json.load(f)
except FileNotFoundError:
    user_settings = {}

def save_settings():
    with open(SETTINGS_PATH, "w") as f:
        json.dump(user_settings, f)

# ====== –ü–æ–≥–æ–¥–∞ ======
def get_weather(city=CITY):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_KEY}&units=metric&lang=ru"
        resp = requests.get(url).json()
        temp = round(resp["main"]["temp"])
        desc = resp["weather"][0]["description"]
        return f"{temp}¬∞C, {desc}"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É üå¶"

# ====== –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ======
def get_schedule_for_day(target_date: date):
    try:
        resp = requests.get(ICS_URL)
        resp.raise_for_status()
        cal = Calendar.from_ical(resp.content)

        events = []
        for ev in cal.walk():
            if ev.name == "VEVENT":
                dt = ev.get("DTSTART").dt
                summary = str(ev.get("SUMMARY", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                location = str(ev.get("LOCATION", "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                description = str(ev.get("DESCRIPTION", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"))

                if isinstance(dt, datetime):
                    event_date = dt.date()
                    event_time = dt.strftime("%H:%M")
                else:
                    event_date = dt
                    event_time = ""

                if event_date == target_date:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
                    event_info = f"üïí {event_time} ‚Äî {summary}"
                    if location and location != "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞":
                        event_info += f"\nüìç –ê—É–¥–∏—Ç–æ—Ä–∏—è: {location}"
                    if description and description != "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω":
                        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                        description_clean = re.sub('<[^<]+?>', '', description).strip()
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è)
                        teacher_match = re.search(r'([–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+(?:\s[–ê-–Ø–Å][–∞-—è—ë]+)?)', description_clean)
                        if teacher_match:
                            teacher_name = teacher_match.group(1)
                            event_info += f"\nüë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}"
                    
                    events.append(event_info)

        return events if events else ["üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return ["‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]

def get_schedule_today():
    return get_schedule_for_day(date.today())

def get_schedule_tomorrow():
    return get_schedule_for_day(date.today() + timedelta(days=1))

def get_schedule_week():
    today = date.today()
    result = []
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_translation = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    for i in range(7):
        day = today + timedelta(days=i)
        events = get_schedule_for_day(day)
        day_name_en = day.strftime('%A')
        day_name_ru = days_translation.get(day_name_en, day_name_en)
        
        day_schedule = f"**{day_name_ru} {day.strftime('%d.%m')}:**\n"
        if events and events[0] != "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç":
            day_schedule += "\n".join(events)
        else:
            day_schedule += "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        
        result.append(day_schedule)
    return result

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in user_settings:
        user_settings[chat_id] = {"time": "06:00"}  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        save_settings()

    keyboard = [
        ["–°–µ–≥–æ–¥–Ω—è üìÖ", "–ó–∞–≤—Ç—Ä–∞ üìÜ"],
        ["–ù–µ–¥–µ–ª—è üìñ", "–ü–æ–≥–æ–¥–∞ üå§"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º üìö\n"
        f"‚è∞ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {user_settings[chat_id]['time']}\n"
        "–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: /time 07:30\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n" 
        "/week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/weather - –ø–æ–≥–æ–¥–∞ –≤ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª–µ\n"
        "/time HH:MM - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_schedule_today()
    await update.message.reply_text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n\n".join(events))

async def tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_schedule_tomorrow()
    await update.message.reply_text("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n" + "\n\n".join(events))

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_schedule_week()
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    week_text = "üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n" + "\n\n".join(events)
    if len(week_text) > 4096:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(0, len(week_text), 4096):
            await update.message.reply_text(week_text[i:i+4096])
    else:
        await update.message.reply_text(week_text)

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    forecast = get_weather()
    await update.message.reply_text(f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {CITY}:\n{forecast}")

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if len(context.args) == 1:
        new_time = context.args[0]
        try:
            datetime.strptime(new_time, "%H:%M")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if chat_id not in user_settings:
                user_settings[chat_id] = {}
            user_settings[chat_id]["time"] = new_time
            save_settings()
            await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /time HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, /time 07:30)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –≤—Ä–µ–º—è: /time HH:MM")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def button_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await today(update, context)

async def button_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tomorrow(update, context)

async def button_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await week(update, context)

async def button_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await weather(update, context)

# ====== –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ======
async def morning_notification_task():
    while True:
        try:
            now = datetime.now().strftime("%H:%M")
            for chat_id, settings in user_settings.items():
                if settings.get("time") == now:
                    events = get_schedule_today()
                    weather_info = get_weather()
                    text = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ü–æ–≥–æ–¥–∞: {weather_info}\n\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n\n".join(events)
                    await app.bot.send_message(chat_id=chat_id, text=text)
            await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ morning_notification_task: {e}")
            await asyncio.sleep(60)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

# ====== –ó–∞–ø—É—Å–∫ ======
def main():
    global app
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã —Å —Å–ª–µ—à–µ–º
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("tomorrow", tomorrow))
    app.add_handler(CommandHandler("week", week))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("time", set_time))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.Regex("^–°–µ–≥–æ–¥–Ω—è üìÖ$"), button_today))
    app.add_handler(MessageHandler(filters.Regex("^–ó–∞–≤—Ç—Ä–∞ üìÜ$"), button_tomorrow))
    app.add_handler(MessageHandler(filters.Regex("^–ù–µ–¥–µ–ª—è üìñ$"), button_week))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–≥–æ–¥–∞ üå§$"), button_weather))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(morning_notification_task())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    # –î–ª—è Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞:
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    main()