import os
import random
import string
import shutil
import math
import hashlib
from tkinter import *
from tkinter import filedialog, messagebox, ttk
from datetime import datetime
import subprocess
import json
from PIL import Image, ExifTags
import mutagen
from mutagen.mp3 import MP3
from mutagen.mp4 import MP4
import cv2
import numpy as np

class RenamerProUltimate:
    def __init__(self, root):
        self.root = root
        self.root.title("Renamer Delux")
        self.root.minsize(900, 800)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.files = []
        self.pattern_var = StringVar(value="–§–∞–π–ª {numbers1}")
        self.preview_var = BooleanVar(value=True)
        self.random_chars_var = StringVar(value="5")
        self.undo_stack = []
        self.target_folder = ""
        self.current_desc_page = 0
        
        self.file_types = {
            "images": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".webp"],
            "audio": [".mp3", ".wav", ".ogg", ".flac", ".m4a", ".aac"],
            "video": [".mp4", ".avi", ".mkv", ".mov", ".wmv", ".flv", ".webm"],
            "documents": [".pdf", ".doc", ".docx", ".txt", ".xlsx", ".pptx"]
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        self.color_names = {
            'red': '–∫—Ä–∞—Å–Ω—ã–π', 'green': '–∑–µ–ª–µ–Ω—ã–π', 'blue': '—Å–∏–Ω–∏–π', 
            'yellow': '–∂–µ–ª—Ç—ã–π', 'purple': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', 'orange': '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
            'pink': '—Ä–æ–∑–æ–≤—ã–π', 'brown': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', 'gray': '—Å–µ—Ä—ã–π',
            'black': '—á–µ—Ä–Ω—ã–π', 'white': '–±–µ–ª—ã–π'
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.main_frame = ttk.Frame(self.notebook)
        self.advanced_frame = ttk.Frame(self.notebook)
        self.media_frame = ttk.Frame(self.notebook)
        self.internet_frame = ttk.Frame(self.notebook)
        
        self.notebook.add(self.main_frame, text="üéØ –û—Å–Ω–æ–≤–Ω–æ–µ")
        self.notebook.add(self.advanced_frame, text="‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
        self.notebook.add(self.media_frame, text="üì∑ –ú–µ–¥–∏–∞")
        self.notebook.add(self.internet_frame, text="üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
        
        self.setup_main_tab()
        self.setup_advanced_tab()
        self.setup_media_tab()
        self.setup_internet_tab()
    
    def setup_main_tab(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏
        main_container = PanedWindow(self.main_frame, orient=HORIZONTAL)
        main_container.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_frame = Frame(main_container)
        main_container.add(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        right_frame = Frame(main_container)
        main_container.add(right_frame)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        Label(left_frame, text="–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏:", font=("Arial", 10, "bold")).pack(pady=(10, 0))
        
        input_frame = Frame(left_frame)
        input_frame.pack(fill=X, padx=5, pady=(0, 10))
        
        self.pattern_entry = Entry(input_frame, textvariable=self.pattern_var, width=40, font=("Arial", 10))
        self.pattern_entry.pack(side=LEFT, fill=X, expand=True)
        
        Button(input_frame, text="üìã", command=self.show_placeholder_menu, 
               width=3, relief="raised", bg="lightblue", font=("Arial", 12)).pack(side=RIGHT, padx=(5, 0))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        self.setup_main_placeholder_buttons(left_frame)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        self.setup_placeholder_descriptions(left_frame)
        
        # –û–ø—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏
        self.setup_control_buttons(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.setup_file_list(right_frame)
    
    def setup_main_placeholder_buttons(self, parent):
        """–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤"""
        main_placeholders_frame = LabelFrame(parent, text="üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã")
        main_placeholders_frame.pack(fill=X, padx=5, pady=5)
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –Ω—É–º–µ—Ä–∞—Ü–∏—è
        row1 = Frame(main_placeholders_frame)
        row1.pack(fill=X, pady=2)
        
        num_placeholders = [
            ("{numbers1}", "1, 2, 3...", "#E3F2FD"),
            ("{numbers01}", "01, 02...", "#E3F2FD"),
            ("{numbers001}", "001, 002...", "#E3F2FD"),
            ("{reverse}", "–û–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", "#E3F2FD"),
            ("{reverseX}", "reverseX", "#E3F2FD")
        ]
        
        for ph, desc, color in num_placeholders:
            btn = Button(row1, text=ph, width=12, 
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg=color, font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –±—É–∫–≤—ã
        row2 = Frame(main_placeholders_frame)
        row2.pack(fill=X, pady=2)
        
        letter_placeholders = [
            ("{letters}", "a, b, c...", "#FFF9C4"),
            ("{Letters}", "A, B, C...", "#FFF9C4"),
            ("{lettersR}", "–°–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã", "#FFF9C4"),
            ("{LettersR}", "–°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ", "#FFF9C4"),
            ("{cyrillic}", "–∞, –±, –≤...", "#FFF9C4")
        ]
        
        for ph, desc, color in letter_placeholders:
            btn = Button(row2, text=ph, width=12,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg=color, font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        row3 = Frame(main_placeholders_frame)
        row3.pack(fill=X, pady=2)
        
        date_placeholders = [
            ("{date}", "2023-10-01", "#C8E6C9"),
            ("{time}", "14-30-45", "#C8E6C9"),
            ("{datetime}", "2023-10-01_14-30", "#C8E6C9"),
            ("{year}", "2023", "#C8E6C9"),
            ("{timestamp}", "Unix –≤—Ä–µ–º—è", "#C8E6C9")
        ]
        
        for ph, desc, color in date_placeholders:
            btn = Button(row3, text=ph, width=12,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg=color, font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
    
    def setup_placeholder_descriptions(self, parent):
        """–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        desc_frame = LabelFrame(parent, text="üìñ –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤")
        desc_frame.pack(fill=X, padx=5, pady=5)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_frame = Frame(desc_frame)
        nav_frame.pack(fill=X, padx=5, pady=2)
        
        Button(nav_frame, text="‚óÄ", command=self.prev_desc_page,
               width=3, font=("Arial", 8)).pack(side=LEFT)
        
        self.desc_label = Label(nav_frame, text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/4", font=("Arial", 8))
        self.desc_label.pack(side=LEFT, padx=10)
        
        Button(nav_frame, text="‚ñ∂", command=self.next_desc_page,
               width=3, font=("Arial", 8)).pack(side=LEFT)
        
        # –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        self.desc_text = Text(desc_frame, height=6, wrap=WORD, font=("Arial", 8))
        desc_scrollbar = Scrollbar(desc_frame, command=self.desc_text.yview)
        self.desc_text.config(yscrollcommand=desc_scrollbar.set)
        
        self.desc_text.pack(side=LEFT, fill=BOTH, expand=True, padx=(5, 0))
        desc_scrollbar.pack(side=RIGHT, fill=Y, padx=(0, 5))
        
        self.update_descriptions()
    
    def setup_control_buttons(self, parent):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –û–ø—Ü–∏–∏
        options_frame = Frame(parent)
        options_frame.pack(fill=X, pady=5)
        
        Checkbutton(options_frame, text="üîç –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", 
                   variable=self.preview_var, font=("Arial", 9)).pack(side=LEFT, padx=5)
        
        Button(options_frame, text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", 
              command=self.undo_rename, bg="lightyellow", font=("Arial", 9)).pack(side=RIGHT, padx=5)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = Frame(parent)
        button_frame.pack(fill=X, pady=10)
        
        Button(button_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", command=self.select_files, 
               bg="lightblue", width=15, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(button_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é", command=self.show_preview,
               bg="lightyellow", width=15, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(button_frame, text="‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.rename_files,
               bg="lightgreen", width=15, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.clear_list,
               bg="lightcoral", width=15, font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    def setup_file_list(self, parent):
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        list_frame = LabelFrame(parent, text="üìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        list_frame.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        columns = ("name", "size", "type", "modified")
        self.file_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.file_tree.heading("name", text="–ò–º—è —Ñ–∞–π–ª–∞")
        self.file_tree.heading("size", text="–†–∞–∑–º–µ—Ä")
        self.file_tree.heading("type", text="–¢–∏–ø")
        self.file_tree.heading("modified", text="–ò–∑–º–µ–Ω–µ–Ω")
        
        self.file_tree.column("name", width=250)
        self.file_tree.column("size", width=80)
        self.file_tree.column("type", width=80)
        self.file_tree.column("modified", width=120)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(list_frame, orient=VERTICAL, command=self.file_tree.yview)
        self.file_tree.configure(yscrollcommand=scrollbar.set)
        
        self.file_tree.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.tree_menu = Menu(self.root, tearoff=0)
        self.tree_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", command=self.remove_selected_file)
        self.tree_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", command=self.show_file_info)
        self.file_tree.bind("<Button-3>", self.show_tree_menu)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(parent, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", 
                                 relief=SUNKEN, anchor=W, font=("Arial", 9))
        self.status_label.pack(fill=X, side=BOTTOM, pady=(5, 0))
    
    def setup_advanced_tab(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã"""
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º
        quick_access_frame = LabelFrame(self.advanced_frame, text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º")
        quick_access_frame.pack(fill=X, padx=5, pady=5)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            {
                "name": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ",
                "placeholders": [
                    ("{size}", "–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)", "#E1BEE7"),
                    ("{size_kb}", "–†–∞–∑–º–µ—Ä (KB)", "#E1BEE7"),
                    ("{size_mb}", "–†–∞–∑–º–µ—Ä (MB)", "#E1BEE7"),
                    ("{created}", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "#E1BEE7"),
                    ("{modified}", "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "#E1BEE7"),
                    ("{accessed}", "–î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞", "#E1BEE7")
                ]
            },
            {
                "name": "üî§ –¢–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                "placeholders": [
                    ("{camelCase}", "camelCase", "#FFE0B2"),
                    ("{PascalCase}", "PascalCase", "#FFE0B2"),
                    ("{snake_case}", "snake_case", "#FFE0B2"),
                    ("{kebab-case}", "kebab-case", "#FFE0B2"),
                    ("{slug}", "URL-—Å–ª–∞–≥", "#FFE0B2"),
                    ("{reverse}", "–†–µ–≤–µ—Ä—Å –∏–º–µ–Ω–∏", "#FFE0B2"),
                    ("{shuffle}", "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –±—É–∫–≤—ã", "#FFE0B2")
                ]
            },
            {
                "name": "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                "placeholders": [
                    ("{random3}", "3 —Å–∏–º–≤–æ–ª–∞", "#FFCDD2"),
                    ("{random5}", "5 —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{random8}", "8 —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{randomX}", "X —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{uuid}", "UUID", "#FFCDD2")
                ]
            }
        ]
        
        for category in categories:
            cat_frame = LabelFrame(quick_access_frame, text=category["name"])
            cat_frame.pack(fill=X, padx=5, pady=2)
            
            frame = Frame(cat_frame)
            frame.pack(fill=X, padx=5, pady=2)
            
            for ph, desc, color in category["placeholders"]:
                btn = Button(frame, text=ph, width=14,
                           command=lambda p=ph: self.insert_placeholder(p),
                           relief="raised", bg=color, font=("Arial", 8))
                btn.pack(side=LEFT, padx=1, pady=1)
                self.create_tooltip(btn, desc)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions_frame = LabelFrame(self.advanced_frame, text="üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        functions_frame.pack(fill=X, padx=5, pady=5)
        
        Button(functions_frame, text="–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –†—É—Å‚Üí–ê–Ω–≥–ª", command=lambda: self.transliterate("ru_en"),
               width=20, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(functions_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä", command=self.change_case_dialog,
               width=15, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(functions_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ", command=self.add_folder_recursive,
               width=20, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    def setup_media_tab(self):
        """–ú–µ–¥–∏–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ"""
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_frame = LabelFrame(self.media_frame, text="üñºÔ∏è –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        image_frame.pack(fill=X, padx=5, pady=5)
        
        image_placeholders = [
            ("{dominant_color}", "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç"),
            ("{camera_model}", "–ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã"),
            ("{focal_length}", "–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"),
            ("{iso}", "ISO"),
            ("{shutter_speed}", "–í—ã–¥–µ—Ä–∂–∫–∞"),
            ("{aperture}", "–î–∏–∞—Ñ—Ä–∞–≥–º–∞"),
            ("{dimensions}", "–†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
            ("{contains_people}", "–°–æ–¥–µ—Ä–∂–∏—Ç –ª—é–¥–µ–π"),
            ("{contains_landscape}", "–°–æ–¥–µ—Ä–∂–∏—Ç –ø–µ–π–∑–∞–∂")
        ]
        
        image_buttons_frame = Frame(image_frame)
        image_buttons_frame.pack(fill=X, padx=5, pady=2)
        
        for i, (ph, desc) in enumerate(image_placeholders):
            btn = Button(image_buttons_frame, text=ph, width=16,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg="#E3F2FD", font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
        
        # –ê—É–¥–∏–æ
        audio_frame = LabelFrame(self.media_frame, text="üéµ –î–ª—è –∞—É–¥–∏–æ")
        audio_frame.pack(fill=X, padx=5, pady=5)
        
        audio_placeholders = [
            ("{artist}", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
            ("{title}", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"),
            ("{album}", "–ê–ª—å–±–æ–º"),
            ("{track_number}", "–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞"),
            ("{genre}", "–ñ–∞–Ω—Ä"),
            ("{year}", "–ì–æ–¥"),
            ("{duration}", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ("{bitrate}", "–ë–∏—Ç—Ä–µ–π—Ç"),
            ("{bpm}", "BPM"),
            ("{key}", "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        ]
        
        audio_buttons_frame = Frame(audio_frame)
        audio_buttons_frame.pack(fill=X, padx=5, pady=2)
        
        for i, (ph, desc) in enumerate(audio_placeholders):
            btn = Button(audio_buttons_frame, text=ph, width=12,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg="#FFF9C4", font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
        
        # –í–∏–¥–µ–æ
        video_frame = LabelFrame(self.media_frame, text="üé• –î–ª—è –≤–∏–¥–µ–æ")
        video_frame.pack(fill=X, padx=5, pady=5)
        
        video_placeholders = [
            ("{codec}", "–ö–æ–¥–µ–∫"),
            ("{resolution}", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ"),
            ("{duration}", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ("{frame_rate}", "–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"),
            ("{bitrate}", "–ë–∏—Ç—Ä–µ–π—Ç"),
            ("{fps}", "FPS")
        ]
        
        video_buttons_frame = Frame(video_frame)
        video_buttons_frame.pack(fill=X, padx=5, pady=2)
        
        for i, (ph, desc) in enumerate(video_placeholders):
            btn = Button(video_buttons_frame, text=ph, width=12,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg="#C8E6C9", font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
    
    def setup_internet_tab(self):
        """–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"""
        # –£–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        smart_frame = LabelFrame(self.internet_frame, text="üß† –£–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
        smart_frame.pack(fill=X, padx=5, pady=5)
        
        smart_placeholders = [
            ("{file_category}", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–∞"),
            ("{content_type}", "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
            ("{quality}", "–ö–∞—á–µ—Å—Ç–≤–æ"),
            ("{file_type}", "–¢–∏–ø —Ñ–∞–π–ª–∞")
        ]
        
        smart_buttons_frame = Frame(smart_frame)
        smart_buttons_frame.pack(fill=X, padx=5, pady=2)
        
        for ph, desc in smart_placeholders:
            btn = Button(smart_buttons_frame, text=ph, width=15,
                       command=lambda p=ph: self.insert_placeholder(p),
                       relief="raised", bg="#E1BEE7", font=("Arial", 8))
            btn.pack(side=LEFT, padx=1, pady=1)
            self.create_tooltip(btn, desc)
        
        # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ñ—É–Ω–∫—Ü–∏–∏
        internet_frame = LabelFrame(self.internet_frame, text="üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ñ—É–Ω–∫—Ü–∏–∏")
        internet_frame.pack(fill=X, padx=5, pady=5)
        
        internet_buttons_frame = Frame(internet_frame)
        internet_buttons_frame.pack(fill=X, padx=5, pady=2)
        
        Button(internet_buttons_frame, text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É", command=self.get_weather,
               width=15, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(internet_buttons_frame, text="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", command=self.get_location,
               width=20, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(internet_buttons_frame, text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞", command=self.translate_names,
               width=15, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        def on_enter(event):
            tooltip = Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = Label(tooltip, text=text, background="yellow", relief="solid", 
                         borderwidth=1, font=("Arial", 8), padx=5, pady=2)
            label.pack()
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def prev_desc_page(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–∏—Å–∞–Ω–∏–π"""
        if self.current_desc_page > 0:
            self.current_desc_page -= 1
            self.update_descriptions()
    
    def next_desc_page(self):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–∏—Å–∞–Ω–∏–π"""
        if self.current_desc_page < 3:  # 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-3)
            self.current_desc_page += 1
            self.update_descriptions()
    
    def update_descriptions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤"""
        descriptions = [
            """üî¢ –ù–£–ú–ï–†–ê–¶–ò–Ø:
{numbers1} - 1, 2, 3...
{numbers01} - 01, 02, 03...
{numbers001} - 001, 002, 003...
{reverse} - –û–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
{reverseX} - –û–±—Ä–∞—Ç–Ω–∞—è –æ—Ç X (reverse-3 ‚Üí -3, -4...)
{hex} - –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è
{roman} - –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã""",
            
            """üìÖ –î–ê–¢–ê –ò –í–†–ï–ú–Ø:
{date} - 2023-10-01
{time} - 14-30-45
{datetime} - 2023-10-01_14-30
{year} - 2023
{timestamp} - Unix –≤—Ä–µ–º—è
{weekday} - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
{month_name} - –Ø–Ω–≤–∞—Ä—å""",
            
            """üî§ –¢–ï–ö–°–¢ –ò –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:
{letters} - a, b, c...
{Letters} - A, B, C...
{camelCase} - fileName
{PascalCase} - FileName
{snake_case} - file_name
{kebab-case} - file-name
{reverse} - emanelif (—Ä–µ–≤–µ—Ä—Å)
{shuffle} - ifleeman (–ø–µ—Ä–µ–º–µ—à–∞—Ç—å)""",
            
            """üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï:
{size} - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
{size_kb} - –†–∞–∑–º–µ—Ä –≤ KB
{size_mb} - –†–∞–∑–º–µ—Ä –≤ MB
{created} - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
{modified} - –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
{accessed} - –î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞
{file_category} - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–∞"""
        ]
        
        self.desc_text.delete(1.0, END)
        self.desc_text.insert(END, descriptions[self.current_desc_page])
        self.desc_label.config(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_desc_page + 1}/4")
    
    def insert_placeholder(self, placeholder):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        current = self.pattern_entry.get()
        cursor_pos = self.pattern_entry.index(INSERT)
        
        if placeholder == "{randomX}":
            try:
                count = int(self.random_chars_var.get())
                if count <= 0:
                    raise ValueError
                placeholder = f"{{random{count}}}"
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤")
                return
        
        new_text = current[:cursor_pos] + placeholder + current[cursor_pos:]
        self.pattern_var.set(new_text)
        self.pattern_entry.focus_set()
        self.pattern_entry.icursor(cursor_pos + len(placeholder))
    
    def show_placeholder_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏"""
        menu = Menu(self.root, tearoff=0)
        
        categories = {
            "üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è": ["{numbers1}", "{numbers01}", "{numbers001}", "{reverse}", "{reverseX}"],
            "üìÖ –î–∞—Ç–∞/–í—Ä–µ–º—è": ["{date}", "{time}", "{datetime}", "{year}", "{timestamp}"],
            "üî§ –ë—É–∫–≤—ã": ["{letters}", "{Letters}", "{lettersR}", "{LettersR}", "{cyrillic}"],
            "üìä –ò–Ω—Ñ–æ –æ —Ñ–∞–π–ª–µ": ["{size}", "{size_kb}", "{size_mb}", "{created}", "{modified}"],
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ": ["{random3}", "{random5}", "{random8}", "{randomX}", "{uuid}"],
            "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": ["{dominant_color}", "{camera_model}", "{dimensions}"],
            "üéµ –ê—É–¥–∏–æ": ["{artist}", "{title}", "{duration}", "{bitrate}"],
            "üé• –í–∏–¥–µ–æ": ["{codec}", "{resolution}", "{fps}", "{duration}"]
        }
        
        for category, placeholders in categories.items():
            submenu = Menu(menu, tearoff=0)
            for ph in placeholders:
                submenu.add_command(label=ph, 
                                  command=lambda p=ph: self.insert_placeholder(p))
            menu.add_cascade(label=category, menu=submenu)
        
        menu.post(self.pattern_entry.winfo_rootx(), 
                 self.pattern_entry.winfo_rooty() + self.pattern_entry.winfo_height())
    
    # –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø
    def generate_new_name(self, pattern, i, original_name, file_path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        new_name = pattern
        filename, ext = os.path.splitext(original_name)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        new_name = self.process_basic_placeholders(new_name, i, filename, ext)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        new_name = self.process_file_info_placeholders(new_name, file_path)
        
        # –ú–µ–¥–∏–∞-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        new_name = self.process_media_placeholders(new_name, file_path, ext)
        
        # –£–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        new_name = self.process_smart_placeholders(new_name, file_path, ext)
        
        # –¢–µ–∫—Å—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        new_name = self.process_text_placeholders(new_name, filename)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.splitext(new_name)[1] and ext:
            new_name += ext
        
        return new_name
    
    def process_basic_placeholders(self, new_name, i, filename, ext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã"""
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
        if "{numbers01}" in new_name:
            new_name = new_name.replace("{numbers01}", str(i+1).zfill(2))
        
        if "{numbers001}" in new_name:
            new_name = new_name.replace("{numbers001}", str(i+1).zfill(3))
        
        # –û–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç X
        if "{reverseX}" in new_name:
            try:
                start_num = int(new_name.split("{reverseX}")[0].split()[-1])
                new_num = start_num - i
                new_name = new_name.replace("{reverseX}", str(new_num))
            except:
                new_num = len(self.files) - i
                new_name = new_name.replace("{reverseX}", str(new_num))
        
        # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        if "{cyrillic}" in new_name:
            cyrillic = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
            if i < len(cyrillic):
                new_name = new_name.replace("{cyrillic}", cyrillic[i])
        
        # Unix timestamp
        if "{timestamp}" in new_name:
            new_name = new_name.replace("{timestamp}", str(int(datetime.now().timestamp())))
        
        return new_name
    
    def process_file_info_placeholders(self, new_name, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            stat = os.stat(file_path)
            
            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if "{size}" in new_name:
                new_name = new_name.replace("{size}", str(stat.st_size))
            
            if "{size_kb}" in new_name:
                new_name = new_name.replace("{size_kb}", f"{stat.st_size/1024:.1f}")
            
            if "{size_mb}" in new_name:
                new_name = new_name.replace("{size_mb}", f"{stat.st_size/(1024*1024):.1f}")
            
            # –î–∞—Ç—ã
            if "{created}" in new_name:
                new_name = new_name.replace("{created}", datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d"))
            
            if "{modified}" in new_name:
                new_name = new_name.replace("{modified}", datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d"))
            
            if "{accessed}" in new_name:
                new_name = new_name.replace("{accessed}", datetime.fromtimestamp(stat.st_atime).strftime("%Y-%m-%d"))
                
        except:
            pass
        
        return new_name
    
    def process_media_placeholders(self, new_name, file_path, ext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã"""
        file_path_lower = file_path.lower()
        
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if ext.lower() in self.file_types["images"]:
            new_name = self.process_image_placeholders(new_name, file_path)
        
        # –î–ª—è –∞—É–¥–∏–æ
        elif ext.lower() in self.file_types["audio"]:
            new_name = self.process_audio_placeholders(new_name, file_path)
        
        # –î–ª—è –≤–∏–¥–µ–æ
        elif ext.lower() in self.file_types["video"]:
            new_name = self.process_video_placeholders(new_name, file_path)
        
        return new_name
    
    def process_image_placeholders(self, new_name, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            with Image.open(file_path) as img:
                # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if "{dimensions}" in new_name:
                    new_name = new_name.replace("{dimensions}", f"{img.width}x{img.height}")
                
                # EXIF –¥–∞–Ω–Ω—ã–µ
                try:
                    exif_data = img._getexif()
                    if exif_data:
                        for tag_id, value in exif_data.items():
                            tag = ExifTags.TAGS.get(tag_id, tag_id)
                            
                            if tag == 'Model' and "{camera_model}" in new_name:
                                new_name = new_name.replace("{camera_model}", str(value))
                            
                            elif tag == 'FocalLength' and "{focal_length}" in new_name:
                                new_name = new_name.replace("{focal_length}", str(value))
                            
                            elif tag == 'ISOSpeedRatings' and "{iso}" in new_name:
                                new_name = new_name.replace("{iso}", str(value))
                            
                            elif tag == 'ExposureTime' and "{shutter_speed}" in new_name:
                                new_name = new_name.replace("{shutter_speed}", str(value))
                            
                            elif tag == 'FNumber' and "{aperture}" in new_name:
                                new_name = new_name.replace("{aperture}", str(value))
                except:
                    pass
                
                # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                if "{dominant_color}" in new_name:
                    try:
                        # –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        img_small = img.resize((100, 100))
                        colors = img_small.getcolors(maxcolors=10000)
                        if colors:
                            most_common = max(colors, key=lambda x: x[0])
                            dominant_rgb = most_common[1]
                            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                            color_name = self.get_color_name(dominant_rgb)
                            new_name = new_name.replace("{dominant_color}", color_name)
                    except:
                        new_name = new_name.replace("{dominant_color}", "—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        return new_name
    
    def get_color_name(self, rgb):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ RGB"""
        if isinstance(rgb, tuple) and len(rgb) >= 3:
            r, g, b = rgb[0], rgb[1], rgb[2]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            if r > 200 and g < 100 and b < 100:
                return "–∫—Ä–∞—Å–Ω—ã–π"
            elif r < 100 and g > 200 and b < 100:
                return "–∑–µ–ª–µ–Ω—ã–π"
            elif r < 100 and g < 100 and b > 200:
                return "—Å–∏–Ω–∏–π"
            elif r > 200 and g > 200 and b < 100:
                return "–∂–µ–ª—Ç—ã–π"
            elif r > 200 and g < 100 and b > 200:
                return "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π"
            elif r > 200 and g > 100 and b < 100:
                return "–æ—Ä–∞–Ω–∂–µ–≤—ã–π"
        
        return "—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π"
    
    def process_audio_placeholders(self, new_name, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –∞—É–¥–∏–æ"""
        try:
            audio = MP3(file_path)
            
            # –ë–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏
            if "{artist}" in new_name and 'TPE1' in audio:
                new_name = new_name.replace("{artist}", str(audio['TPE1']))
            
            if "{title}" in new_name and 'TIT2' in audio:
                new_name = new_name.replace("{title}", str(audio['TIT2']))
            
            if "{album}" in new_name and 'TALB' in audio:
                new_name = new_name.replace("{album}", str(audio['TALB']))
            
            if "{track_number}" in new_name and 'TRCK' in audio:
                new_name = new_name.replace("{track_number}", str(audio['TRCK']))
            
            if "{genre}" in new_name and 'TCON' in audio:
                new_name = new_name.replace("{genre}", str(audio['TCON']))
            
            if "{year}" in new_name and 'TDRC' in audio:
                new_name = new_name.replace("{year}", str(audio['TDRC']))
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if "{duration}" in new_name:
                duration = audio.info.length
                mins = int(duration // 60)
                secs = int(duration % 60)
                new_name = new_name.replace("{duration}", f"{mins:02d}:{secs:02d}")
            
            if "{bitrate}" in new_name:
                new_name = new_name.replace("{bitrate}", f"{audio.info.bitrate//1000}kbps")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        
        return new_name
    
    def process_video_placeholders(self, new_name, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenCV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
            cap = cv2.VideoCapture(file_path)
            
            if "{resolution}" in new_name:
                width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                new_name = new_name.replace("{resolution}", f"{width}x{height}")
            
            if "{fps}" in new_name or "{frame_rate}" in new_name:
                fps = cap.get(cv2.CAP_PROP_FPS)
                new_name = new_name.replace("{fps}", f"{fps:.1f}")
                new_name = new_name.replace("{frame_rate}", f"{fps:.1f}")
            
            if "{duration}" in new_name:
                frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)
                fps = cap.get(cv2.CAP_PROP_FPS)
                if fps > 0:
                    duration = frame_count / fps
                    mins = int(duration // 60)
                    secs = int(duration % 60)
                    new_name = new_name.replace("{duration}", f"{mins:02d}:{secs:02d}")
            
            cap.release()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        
        return new_name
    
    def process_smart_placeholders(self, new_name, file_path, ext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —É–º–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–∞
        if "{file_category}" in new_name:
            for category, extensions in self.file_types.items():
                if ext.lower() in extensions:
                    new_name = new_name.replace("{file_category}", category)
                    break
            else:
                new_name = new_name.replace("{file_category}", "other")
        
        # –¢–∏–ø —Ñ–∞–π–ª–∞
        if "{file_type}" in new_name:
            new_name = new_name.replace("{file_type}", ext[1:].upper() if ext else "NOEXT")
        
        # –ö–∞—á–µ—Å—Ç–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if "{quality}" in new_name:
            try:
                size = os.path.getsize(file_path)
                if size < 1024 * 1024:  # < 1MB
                    quality = "low"
                elif size < 10 * 1024 * 1024:  # < 10MB
                    quality = "medium"
                else:
                    quality = "high"
                new_name = new_name.replace("{quality}", quality)
            except:
                new_name = new_name.replace("{quality}", "unknown")
        
        return new_name
    
    def process_text_placeholders(self, new_name, filename):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã"""
        # –†–µ–≤–µ—Ä—Å –∏–º–µ–Ω–∏
        if "{reverse}" in new_name:
            new_name = new_name.replace("{reverse}", filename[::-1])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –±—É–∫–≤
        if "{shuffle}" in new_name:
            chars = list(filename)
            random.shuffle(chars)
            new_name = new_name.replace("{shuffle}", ''.join(chars))
        
        # CamelCase
        if "{camelCase}" in new_name:
            words = filename.replace('_', ' ').replace('-', ' ').split()
            camel_case = words[0].lower() + ''.join(word.capitalize() for word in words[1:])
            new_name = new_name.replace("{camelCase}", camel_case)
        
        # PascalCase
        if "{PascalCase}" in new_name:
            words = filename.replace('_', ' ').replace('-', ' ').split()
            pascal_case = ''.join(word.capitalize() for word in words)
            new_name = new_name.replace("{PascalCase}", pascal_case)
        
        # snake_case
        if "{snake_case}" in new_name:
            snake_case = filename.replace(' ', '_').replace('-', '_').lower()
            new_name = new_name.replace("{snake_case}", snake_case)
        
        # kebab-case
        if "{kebab-case}" in new_name:
            kebab_case = filename.replace(' ', '-').replace('_', '-').lower()
            new_name = new_name.replace("{kebab-case}", kebab_case)
        
        # URL-—Å–ª–∞–≥
        if "{slug}" in new_name:
            slug = ''.join(c for c in filename.lower() if c.isalnum() or c in ' -')
            slug = slug.replace(' ', '-')
            new_name = new_name.replace("{slug}", slug)
        
        return new_name

    # –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (select_files, update_file_list, show_preview, rename_files, etc.)
    # ... –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

    def select_files(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è",
            filetypes=[
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp *.tiff *.webp"),
                ("–ê—É–¥–∏–æ", "*.mp3 *.wav *.ogg *.flac *.m4a *.aac"),
                ("–í–∏–¥–µ–æ", "*.mp4 *.avi *.mkv *.mov *.wmv *.flv *.webm"),
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.txt *.xlsx *.pptx")
            ]
        )
        if files:
            self.files = list(files)
            self.update_file_list()
    
    def update_file_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file_path in self.files:
            try:
                name = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                file_type = os.path.splitext(name)[1].upper() or "–§–ê–ô–õ"
                modified = datetime.fromtimestamp(os.path.getmtime(file_path)).strftime("%Y-%m-%d %H:%M")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
                if size < 1024:
                    size_str = f"{size} B"
                elif size < 1024 * 1024:
                    size_str = f"{size/1024:.1f} KB"
                else:
                    size_str = f"{size/(1024*1024):.1f} MB"
                
                self.file_tree.insert("", END, values=(name, size_str, file_type, modified))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        self.status_label.config(text=f"üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files)}")
    
    def show_tree_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            self.tree_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.tree_menu.grab_release()
    
    def remove_selected_file(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selection = self.file_tree.selection()
        if selection:
            index = self.file_tree.index(selection[0])
            self.files.pop(index)
            self.update_file_list()
    
    def show_file_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        selection = self.file_tree.selection()
        if selection:
            index = self.file_tree.index(selection[0])
            file_path = self.files[index]
            
            info_window = Toplevel(self.root)
            info_window.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
            info_window.geometry("400x300")
            
            try:
                stat = os.stat(file_path)
                info_text = f"""üìÑ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï

üìÅ –ò–º—è: {os.path.basename(file_path)}
üìä –†–∞–∑–º–µ—Ä: {self.format_size(stat.st_size)}
üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(stat.st_ctime)}
‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω: {datetime.fromtimestamp(stat.st_mtime)}
üîç –î–æ—Å—Ç—É–ø: {datetime.fromtimestamp(stat.st_atime)}
üìù –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {os.path.splitext(file_path)[1]}

üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:"""
                
                # –ú–µ–¥–∏–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                ext = os.path.splitext(file_path)[1].lower()
                if ext in self.file_types["images"]:
                    try:
                        with Image.open(file_path) as img:
                            info_text += f"\nüñºÔ∏è –†–∞–∑–º–µ—Ä: {img.width} x {img.height}"
                    except:
                        pass
                
                elif ext in self.file_types["audio"]:
                    try:
                        audio = MP3(file_path)
                        info_text += f"\nüéµ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.info.length:.1f} —Å–µ–∫"
                        info_text += f"\nüéµ –ë–∏—Ç—Ä–µ–π—Ç: {audio.info.bitrate} bps"
                    except:
                        pass
                
                text_widget = Text(info_window, wrap=WORD, font=("Arial", 9))
                text_widget.insert(END, info_text)
                text_widget.config(state=DISABLED)
                text_widget.pack(fill=BOTH, expand=True, padx=10, pady=10)
                
            except Exception as e:
                Label(info_window, text=f"–û—à–∏–±–∫–∞: {e}").pack(padx=10, pady=10)
    
    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        size_names = ["B", "KB", "MB", "GB"]
        i = int(math.floor(math.log(size_bytes, 1024)))
        p = math.pow(1024, i)
        s = round(size_bytes / p, 2)
        return f"{s} {size_names[i]}"
    
    # –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (show_preview, rename_files, undo_rename, clear_list, etc.)
    # ... –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏

    def show_preview(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–≤—å—é")
            return
        
        pattern = self.pattern_var.get()
        if not pattern:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏")
            return
        
        preview_window = Toplevel(self.root)
        preview_window.title("üëÅÔ∏è –ü—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        preview_window.geometry("800x500")
        preview_window.transient(self.root)
        preview_window.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = Frame(preview_window)
        header_frame.pack(fill=X, padx=10, pady=10)
        
        Label(header_frame, text="–ü—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", font=("Arial", 12, "bold")).pack()
        Label(header_frame, text=f"–§–∞–π–ª–æ–≤: {len(self.files)} | –®–∞–±–ª–æ–Ω: {pattern}", 
              font=("Arial", 9)).pack()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–≤—å—é
        tree_frame = Frame(preview_window)
        tree_frame.pack(fill=BOTH, expand=True, padx=10, pady=5)
        
        tree = ttk.Treeview(tree_frame, columns=("old", "new"), show="headings", height=15)
        tree.heading("old", text="üìÑ –°—Ç–∞—Ä–æ–µ –∏–º—è")
        tree.heading("new", text="üîÑ –ù–æ–≤–æ–µ –∏–º—è")
        tree.column("old", width=350)
        tree.column("new", width=350)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        tree.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        for i, file_path in enumerate(self.files):
            old_name = os.path.basename(file_path)
            new_name = self.generate_new_name(pattern, i, old_name, file_path)
            tree.insert("", END, values=(old_name, new_name))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = Frame(preview_window)
        button_frame.pack(fill=X, padx=10, pady=10)
        
        Button(button_frame, text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 
               command=lambda: [preview_window.destroy(), self.rename_files()],
               bg="lightgreen", font=("Arial", 10)).pack(side=LEFT, padx=5)
        
        Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
               command=preview_window.destroy,
               bg="lightcoral", font=("Arial", 10)).pack(side=RIGHT, padx=5)
    
    def rename_files(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return
        
        pattern = self.pattern_var.get()
        if not pattern:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        placeholders = ["{numbers", "{letters", "{Letters", "{date", "{time", 
                       "{random", "{original", "{ext", "{reverse", "{uuid", "{year", 
                       "{datetime", "{size", "{created", "{modified}"]
        has_placeholder = any(ph in pattern for ph in placeholders)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º {numbers1}
        if not has_placeholder:
            pattern += " {numbers1}"
            self.pattern_var.set(pattern)
        
        if self.preview_var.get():
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                       "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º?")
            if result:
                self.show_preview()
                return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            self.undo_stack.append(list(self.files))
            if len(self.undo_stack) > 10:
                self.undo_stack.pop(0)
            
            directory = os.path.dirname(self.files[0])
            renamed_files = []
            
            for i, file_path in enumerate(self.files):
                old_name = os.path.basename(file_path)
                new_name = self.generate_new_name(pattern, i, old_name, file_path)
                new_path = os.path.join(directory, new_name)
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                counter = 1
                temp_path = new_path
                while os.path.exists(temp_path):
                    name, ext = os.path.splitext(new_path)
                    temp_path = f"{name}_{counter}{ext}"
                    counter += 1
                
                os.rename(file_path, temp_path)
                renamed_files.append(temp_path)
            
            self.files = renamed_files
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(renamed_files)} —Ñ–∞–π–ª–æ–≤")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    def undo_rename(self):
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not self.undo_stack:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìù –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
        
        try:
            old_files = self.undo_stack.pop()
            directory = os.path.dirname(self.files[0])
            
            for old_path, new_path in zip(old_files, self.files):
                if os.path.exists(new_path):
                    os.rename(new_path, old_path)
            
            self.files = old_files
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚Ü©Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {str(e)}")
    
    def clear_list(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.files = []
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    def change_case_dialog(self):
        """–î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        dialog = Toplevel(self.root)
        dialog.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞")
        dialog.geometry("300x150")
        
        Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä:", font=("Arial", 10)).pack(pady=10)
        
        case_var = StringVar(value="upper")
        
        Radiobutton(dialog, text="–í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†", variable=case_var, 
                   value="upper", font=("Arial", 9)).pack(anchor="w", padx=20)
        Radiobutton(dialog, text="–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä", variable=case_var,
                   value="lower", font=("Arial", 9)).pack(anchor="w", padx=20)
        Radiobutton(dialog, text="–ó–∞–≥–ª–∞–≤–Ω—ã–µ –ë—É–∫–≤—ã", variable=case_var,
                   value="title", font=("Arial", 9)).pack(anchor="w", padx=20)
        
        def apply_case():
            self.change_case(case_var.get())
            dialog.destroy()
        
        Button(dialog, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_case,
               bg="lightgreen", font=("Arial", 10)).pack(pady=10)
    
    def change_case(self, case_type):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            
            if case_type == "upper":
                new_name = name.upper() + ext
            elif case_type == "lower":
                new_name = name.lower() + ext
            elif case_type == "title":
                new_name = name.title() + ext
            
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω")
    
    def transliterate(self, direction):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å‚Üî–∞–Ω–≥–ª"""
        if not self.files:
            return
        
        ru_en = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            new_name = ""
            
            if direction == "ru_en":
                for char in name.lower():
                    new_name += ru_en.get(char, char)
            else:
                en_ru = {v: k for k, v in ru_en.items() if v}
                for char in name.lower():
                    new_name += en_ru.get(char, char)
            
            new_path = os.path.join(os.path.dirname(file_path), new_name + ext)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def add_folder_recursive(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            all_files = []
            for root, dirs, files in os.walk(folder):
                for file in files:
                    all_files.append(os.path.join(root, file))
            
            self.files.extend(all_files)
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
    
    # –ò–ù–¢–ï–†–ù–ï–¢-–§–£–ù–ö–¶–ò–ò
    def get_weather(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
        messagebox.showinfo("–ü–æ–≥–æ–¥–∞", "–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    def get_location(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        messagebox.showinfo("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç GPS –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    
    def translate_names(self):
        """–ü–µ—Ä–µ–≤–æ–¥ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        messagebox.showinfo("–ü–µ—Ä–µ–≤–æ–¥", "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    root = Tk()
    app = RenamerProUltimate(root)
    root.mainloop()
