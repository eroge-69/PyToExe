import tkinter as tk
import subprocess
import os
import random
import time
from tkinter import messagebox, ttk, filedialog

class AutoSpaceVPN:
    def __init__(self, root):
        self.root = root
        self.root.title("Nzarsteve2 AutoVPN")
        self.root.geometry("1920x1080")
        self.root.state('zoomed')
        self.root.configure(bg='#0a043c')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.ovpn_config = ""
        self.vpn_username = ""
        self.vpn_password = ""
        self.auto_connect = False
        self.ovpn_process = None
        
        self.create_main_ui()
        self.show_tutorial()

    def create_stars(self, count):
        """–°–æ–∑–¥–∞–µ—Ç –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –Ω–∞ —Ñ–æ–Ω–µ"""
        for _ in range(count):
            x = random.randint(0, 1920)
            y = random.randint(0, 1080)
            size = random.randint(1, 4)
            color = random.choice(['white', '#bbdefb', '#e6e6e6'])
            self.canvas.create_oval(x, y, x+size, y+size, fill=color, outline='')

    def create_main_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.canvas = tk.Canvas(self.root, bg='#0a043c', highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.create_stars(200)
        
        self.main_frame = tk.Frame(self.canvas, bg='#12005e', bd=3, relief=tk.RIDGE)
        self.main_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER, width=800, height=600)
        
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.tab_connect = tk.Frame(self.notebook, bg='#12005e')
        self.notebook.add(self.tab_connect, text='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN')
        
        self.tab_tutorial = tk.Frame(self.notebook, bg='#12005e')
        self.notebook.add(self.tab_tutorial, text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
        
        self.create_connection_tab()
        self.create_tutorial_tab()
        
        self.status_light = self.canvas.create_oval(
            1750, 50, 1800, 100,
            fill='red',
            outline='white',
            width=2
        )
        self.canvas.create_text(
            1775, 120,
            text="VPN STATUS",
            fill='white',
            font=('Arial', 12)
        )

    def create_connection_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tk.Label(
            self.tab_connect,
            text="Nzarsteve2",
            font=('Arial', 28, 'bold'),
            fg='#bbdefb',
            bg='#12005e'
        ).pack(pady=20)
        
        tk.Label(
            self.tab_connect,
            text="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.ovpn):",
            font=('Arial', 12),
            fg='white',
            bg='#12005e'
        ).pack()
        
        self.entry_config = tk.Entry(self.tab_connect, width=50, font=('Arial', 12))
        self.entry_config.pack(pady=5)
        
        tk.Button(
            self.tab_connect,
            text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
            command=self.browse_config,
            bg='#1a237e',
            fg='white',
            font=('Arial', 10)
        ).pack(pady=5)
        
        tk.Label(
            self.tab_connect,
            text="–õ–æ–≥–∏–Ω:",
            font=('Arial', 12),
            fg='white',
            bg='#12005e'
        ).pack()
        
        self.entry_username = tk.Entry(self.tab_connect, width=30, font=('Arial', 12))
        self.entry_username.pack(pady=5)
        
        tk.Label(
            self.tab_connect,
            text="–ü–∞—Ä–æ–ª—å:",
            font=('Arial', 12),
            fg='white',
            bg='#12005e'
        ).pack()
        
        self.entry_password = tk.Entry(self.tab_connect, width=30, show='*', font=('Arial', 12))
        self.entry_password.pack(pady=5)
        
        self.btn_control = tk.Button(
            self.tab_connect,
            text="üöÄ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨ VPN",
            font=('Arial', 18),
            command=self.toggle_vpn,
            bg='#1a237e',
            fg='white',
            activebackground='#4a148c',
            width=25
        )
        self.btn_control.pack(pady=20)
        
        self.auto_connect_var = tk.BooleanVar(value=False)
        tk.Checkbutton(
            self.tab_connect,
            text="–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
            variable=self.auto_connect_var,
            font=('Arial', 12),
            fg='white',
            bg='#12005e',
            selectcolor='#1a237e',
            activebackground='#12005e',
            activeforeground='white'
        ).pack()
        
        self.log_text = tk.Text(
            self.tab_connect,
            height=10,
            width=70,
            bg='#0a043c',
            fg='white',
            font=('Consolas', 10)
        )
        self.log_text.pack(pady=10)

    def create_tutorial_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
        tutorial_text = """
        üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Æ VPN:
        
        1. –°–ö–ê–ß–ê–ô–¢–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ô –§–ê–ô–õ:
           - –ü–æ–ª—É—á–∏—Ç–µ .ovpn —Ñ–∞–π–ª –æ—Ç –≤–∞—à–µ–≥–æ VPN-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
           - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ —É–¥–æ–±–Ω—É—é –ø–∞–ø–∫—É
        
        2. –ù–ê–°–¢–†–û–ô–¢–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:
           - –ù–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª" –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à .ovpn —Ñ–∞–π–ª
           - –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç VPN-—Å–µ—Ä–≤–∏—Å–∞
           - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        
        3. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:
           - –ù–∞–∂–º–∏—Ç–µ "–ü–û–î–ö–õ–Æ–ß–ò–¢–¨ VPN" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
           - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –ª–æ–≥–µ
           - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω–∏—Ç —Ü–≤–µ—Ç –Ω–∞ –∑–µ–ª–µ–Ω—ã–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        
        4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:
           - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä—ã–≤–µ
           - –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç—ã
           - –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑
        
        ‚ö†Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π OpenVPN (—Å–∫–∞—á–∞—Ç—å: https://openvpn.net/)
        - Python 3.6 –∏–ª–∏ –Ω–æ–≤–µ–µ
        """
        
        tutorial_label = tk.Label(
            self.tab_tutorial,
            text=tutorial_text,
            font=('Arial', 14),
            fg='white',
            bg='#12005e',
            justify=tk.LEFT
        )
        tutorial_label.pack(padx=20, pady=20, anchor=tk.W)
        
        tk.Button(
            self.tab_tutorial,
            text="–Ø –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª, –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
            command=self.hide_tutorial,
            bg='#1a237e',
            fg='white',
            font=('Arial', 14),
            width=25
        ).pack(pady=20)

    def show_tutorial(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        self.notebook.select(self.tab_tutorial)

    def hide_tutorial(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.notebook.select(self.tab_connect)

    def browse_config(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        filepath = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            filetypes=(("OVPN files", "*.ovpn"), ("All files", "*.*"))
        )
        if filepath:
            self.entry_config.delete(0, tk.END)
            self.entry_config.insert(0, filepath)
            self.ovpn_config = filepath

    def toggle_vpn(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.ovpn_config = self.entry_config.get()
        self.vpn_username = self.entry_username.get()
        self.vpn_password = self.entry_password.get()
        self.auto_connect = self.auto_connect_var.get()
        
        if not self.ovpn_config or not os.path.exists(self.ovpn_config):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ .ovpn —Ñ–∞–π–ª—É!")
            return
            
        if not self.vpn_username or not self.vpn_password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å VPN!")
            return
            
        if self.ovpn_process:
            self.disconnect_vpn()
        else:
            self.connect_vpn()

    def connect_vpn(self):
        if self.ovpn_process:
            return
            
        try:
            self.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN...")
            
            with open('vpn_auth.txt', 'w') as f:
                f.write(f"{self.vpn_username}\n{self.vpn_password}")
            
            cmd = [
                'openvpn',
                '--config', self.ovpn_config,
                '--auth-user-pass', 'vpn_auth.txt',
                '--daemon'
            ]
            
            self.ovpn_process = subprocess.Popen(cmd)
            self.update_status(True)
            self.btn_control.config(text="üõë –û–¢–ö–õ–Æ–ß–ò–¢–¨ VPN", bg='#d32f2f')
            self.log("VPN —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            
            self.root.after(5000, self.check_connection)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            self.cleanup()

    def disconnect_vpn(self):
        if not self.ovpn_process:
            return
            
        try:
            self.log("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ VPN...")
            subprocess.run(['pkill', 'openvpn'], timeout=5)
            self.update_status(False)
            self.btn_control.config(text="üöÄ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨ VPN", bg='#1a237e')
            self.log("VPN –æ—Ç–∫–ª—é—á–µ–Ω")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        finally:
            self.cleanup()

    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ovpn_process:
            try:
                result = subprocess.run(['pgrep', 'openvpn'], capture_output=True)
                if result.returncode == 0:
                    self.root.after(10000, self.check_connection)
                else:
                    self.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–µ VPN!")
                    if self.auto_connect:
                        self.connect_vpn()
            except:
                pass

    def update_status(self, connected):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connected:
            self.canvas.itemconfig(self.status_light, fill='green')
        else:
            self.canvas.itemconfig(self.status_light, fill='red')

    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.log_text.update()

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if os.path.exists('vpn_auth.txt'):
            os.remove('vpn_auth.txt')
        self.ovpn_process = None

    def on_close(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞"""
        self.disconnect_vpn()
        self.root.destroy()

if __name__ == '__main__':
    root = tk.Tk()
    app = AutoSpaceVPN(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()