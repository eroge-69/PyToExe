import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sympy as sp


class FunctionPlotter:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        self.mode = tk.StringVar(value="formula")
        self.create_widgets()

    def create_widgets(self):
        ttk.Label(self.root, text="–°–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:").grid(row=0, column=0, sticky="w")
        ttk.Radiobutton(self.root, text="–§–æ—Ä–º—É–ª–∞", variable=self.mode, value="formula", command=self.toggle_mode).grid(
            row=0, column=1)
        ttk.Radiobutton(self.root, text="–¢–∞–±–ª–∏—Ü–∞", variable=self.mode, value="table", command=self.toggle_mode).grid(
            row=0, column=2)

        self.formula_entry = ttk.Entry(self.root, width=40)
        ttk.Label(self.root, text="–§–æ—Ä–º—É–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, sin(x) + log(x)):").grid(row=1, column=0, columnspan=2,
                                                                               sticky="w")
        self.formula_entry.grid(row=1, column=2, columnspan=2)

        self.a_entry = ttk.Entry(self.root, width=10)
        self.b_entry = ttk.Entry(self.root, width=10)
        self.step_entry = ttk.Entry(self.root, width=10)

        ttk.Label(self.root, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç:").grid(row=2, column=0, sticky="w")
        self.a_entry.grid(row=2, column=1)
        ttk.Label(self.root, text="–¥–æ:").grid(row=2, column=2, sticky="e")
        self.b_entry.grid(row=2, column=3)

        ttk.Label(self.root, text="–®–∞–≥:").grid(row=3, column=0, sticky="w")
        self.step_entry.grid(row=3, column=1)

        self.x_entry = ttk.Entry(self.root, width=40)
        self.y_entry = ttk.Entry(self.root, width=40)
        ttk.Label(self.root, text="x (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):").grid(row=4, column=0, columnspan=2, sticky="w")
        self.x_entry.grid(row=4, column=2, columnspan=2)
        ttk.Label(self.root, text="y (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):").grid(row=5, column=0, columnspan=2, sticky="w")
        self.y_entry.grid(row=5, column=2, columnspan=2)
        button_frame = ttk.Frame(self.root)
        button_frame.grid(row=6, column=0, columnspan=4, pady=10)

        plot_btn = ttk.Button(button_frame, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", command=self.plot)
        plot_btn.pack(side=tk.LEFT, padx=10)

        help_btn = ttk.Button(button_frame, text="–°–ø—Ä–∞–≤–∫–∞", command=self.show_help)
        help_btn.pack(side=tk.LEFT, padx=10)

        self.figure = plt.Figure(figsize=(5, 4), dpi=100)
        self.canvas = FigureCanvasTkAgg(self.figure, master=self.root)
        self.canvas.get_tk_widget().grid(row=7, column=0, columnspan=5)

        self.toggle_mode()

    def toggle_mode(self):
        mode = self.mode.get()
        state_formula = "normal" if mode == "formula" else "disabled"
        state_table = "normal" if mode == "table" else "disabled"

        for widget in [self.formula_entry, self.a_entry, self.b_entry, self.step_entry]:
            widget.configure(state=state_formula)
        for widget in [self.x_entry, self.y_entry]:
            widget.configure(state=state_table)

    def show_help(self):
        help_text = (
            "üìò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–≤–æ–¥—É —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π x.\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º.\n\n"

            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
            "  +   ‚Äî —Å–ª–æ–∂–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: x + 2)\n"
            "  -   ‚Äî –≤—ã—á–∏—Ç–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: x - 1)\n"
            "  *   ‚Äî —É–º–Ω–æ–∂–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: 2 * x)\n"
            "  /   ‚Äî –¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: x / 3)\n"
            "  **  ‚Äî –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å (–ø—Ä–∏–º–µ—Ä: x**2)\n\n"

            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–∑ sympy/numpy):\n"
            "  sin(x)   ‚Äî —Å–∏–Ω—É—Å\n"
            "  cos(x)   ‚Äî –∫–æ—Å–∏–Ω—É—Å\n"
            "  tan(x)   ‚Äî —Ç–∞–Ω–≥–µ–Ω—Å\n"
            "  log(x)   ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º\n"
            "  exp(x)   ‚Äî —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ (e^x)\n"
            "  sqrt(x)  ‚Äî –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å\n\n"

            "üß† –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ 'x'\n"
            "‚Ä¢ –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ –≤–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–ø—Ä–∏–º–µ—Ä: 6.6)\n"
            "‚Ä¢ –í–º–µ—Å—Ç–æ ^ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ** (–ø—Ä–∏–º–µ—Ä: x**2, –∞ –Ω–µ x^2)\n"
            "‚Ä¢ –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —à–∞–≥ –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Ç -10 –¥–æ 10, —à–∞–≥ 0.1\n\n"

            "üîç –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã:\n"
            "  sin(x) + log(x) + x**2\n\n"

            "üìä –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º:\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è x –∏ y —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π x –∏ y –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä:\n"
            "    x: -2 -1 0 1 2\n"
            "    y:  4  1 0 1 4\n"
        )

        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º", help_text)

    def plot(self):
        self.figure.clf()
        ax = self.figure.add_subplot(111)

        try:
            if self.mode.get() == "formula":
                expr_text = self.formula_entry.get()
                a_text = self.a_entry.get().strip()
                b_text = self.b_entry.get().strip()
                step_text = self.step_entry.get().strip()

                a = float(a_text) if a_text else -10
                b = float(b_text) if b_text else 10
                step = float(step_text) if step_text else 0.1

                if step <= 0 or a >= b:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–ª–∏ —à–∞–≥–∞.")

                x_sym = sp.Symbol('x')
                try:
                    expr_sym = sp.sympify(expr_text, evaluate=False)
                except Exception as e:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ: {e}")

                f_np = sp.lambdify(x_sym, expr_sym, modules=["numpy"])

                num_points = int((b - a) / step) + 1
                x_vals = np.linspace(a, b, num_points)
                y_vals = f_np(x_vals)

                x_vals = np.array(x_vals)
                y_vals = np.array(y_vals)

                # –ù–∞–π–¥—ë–º —É—á–∞—Å—Ç–∫–∏, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã
                mask = np.isfinite(y_vals)

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º –æ—Ç—Ä–µ–∑–∫–∞–º
                if not np.any(mask):
                    raise ValueError("–§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∞ –≤—Å—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.")

                start = 0
                while start < len(x_vals):
                    while start < len(x_vals) and not mask[start]:
                        start += 1
                    end = start
                    while end < len(x_vals) and mask[end]:
                        end += 1
                    if start < end:
                        ax.plot(x_vals[start:end], y_vals[start:end], linestyle='-', label=expr_text)
                    start = end

            else:
                x_vals = list(map(float, self.x_entry.get().split()))
                y_vals = list(map(float, self.y_entry.get().split()))
                if len(x_vals) != len(y_vals):
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π x –∏ y –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å.")
                ax.plot(x_vals, y_vals, marker='o', linestyle='-')

            ax.set_title("–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏")
            ax.set_xlabel("x")
            ax.set_ylabel("f(x)")
            ax.grid(True)
            ax.legend()
            self.canvas.draw()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫:\n\n{e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = FunctionPlotter(root)
    root.mainloop()

