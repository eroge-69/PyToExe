import os
import re
import time
import json
import requests
from datetime import datetime
from platformdirs import user_documents_path

LOG_PATH = "sent_log.json"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ Zoom
ZOOM_PATH = os.path.join(user_documents_path(), "Zoom")

CHAT_ID = "-4897594542"
BOT_TOKEN = "8126291058:AAGGddCgMjqGtpGvhZUgdKLwaDXFqJV3NkY"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if os.path.exists(LOG_PATH):
    with open(LOG_PATH, "r", encoding="utf-8") as f:
        sent_log = set(json.load(f))
else:
    sent_log = set()

def send_video(file_path, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendVideo"
    with open(file_path, "rb") as video:
        files = {"video": video}
        data = {
            "chat_id": CHAT_ID,
            "caption": caption,
            "supports_streaming": True
        }
        response = requests.post(url, files=files, data=data)
        if response.ok:
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {os.path.basename(file_path)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {os.path.basename(file_path)}: {response.text}")
        return response.ok

def extract_user_and_datetime_from_path(path):
    folder = os.path.basename(os.path.dirname(path))

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏ –≤ –≤—Ä–µ–º–µ–Ω–∏)
    dt_pattern = re.compile(r'(\d{4}[-/]\d{2}[-/]\d{2})[ ](\d{2}[.:]\d{2}[.:]\d{2})')
    match = dt_pattern.search(folder)

    if not match:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ '{folder}'")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

    date_str = match.group(1).replace('/', '-')
    time_str = match.group(2).replace('.', ':')
    try:
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M:%S")
        date_formatted = dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        date_formatted = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

    # –í—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    after_dt = folder[match.end():].strip()

    # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    # 1) "name's Zoom Meeting"
    # 2) "Zoom Meeting name"
    # –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å "Zoom Meeting" (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –ø–æ—Ä—è–¥–∫–µ) –∏ "'s"

    # –£–±–∏—Ä–∞–µ–º "'s"
    after_dt = after_dt.replace("'s", "").strip()

    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º "Zoom Meeting" (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ)
    zoom_meeting_pattern = re.compile(r'zoom meeting', re.IGNORECASE)
    parts = zoom_meeting_pattern.split(after_dt)

    # –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è parts ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –ª–∏–±–æ [–∏–º—è], –ª–∏–±–æ ['', –∏–º—è]
    # –í–æ–∑—å–º—ë–º –≤—Å–µ —á–∞—Å—Ç–∏, —Å–æ–µ–¥–∏–Ω—è–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    user_name = " ".join(part.strip() for part in parts if part.strip())

    if not user_name:
        user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    return user_name, date_formatted

def scan_and_send():
    for root, _, files in os.walk(ZOOM_PATH):
        for name in files:
            if name.endswith(".mp4"):
                full_path = os.path.join(root, name)
                if full_path not in sent_log:
                    user_name, date = extract_user_and_datetime_from_path(full_path)
                    caption = f"üé• {user_name} ¬∑ {date} ¬∑ {name}"
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {caption}")
                    if send_video(full_path, caption):
                        sent_log.add(full_path)
                        with open(LOG_PATH, "w", encoding="utf-8") as f:
                            json.dump(list(sent_log), f)

if __name__ == "__main__":
    print(f"üì° –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥–∏—Ç –∑–∞: {ZOOM_PATH}")
    while True:
        scan_and_send()
        time.sleep(30)
