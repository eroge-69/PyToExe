import os
import subprocess
import sys
import shutil
from pathlib import Path

class TradingSystemEXEBuilder:
    def __init__(self):
        self.app_name = "NIFTY100_AI_Trading_System"
        self.main_script = "quickstart.py"
        self.version = "2.1.0"
        self.company = "Rupak Sarkar"
        self.description = "AI/ML NIFTY 100 Intraday Trading System"

    def check_requirements(self):
        """Check if PyInstaller is installed"""
        try:
            import PyInstaller
            print("‚úÖ PyInstaller is available")
            return True
        except ImportError:
            print("‚ùå PyInstaller not found. Installing...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
                print("‚úÖ PyInstaller installed successfully")
                return True
            except subprocess.CalledProcessError:
                print("‚ùå Failed to install PyInstaller")
                return False

    def create_requirements_txt(self):
        """Create requirements.txt for the project"""
        requirements = """pandas>=1.5.0
numpy>=1.21.0
scikit-learn>=1.1.0
joblib>=1.2.0
schedule>=1.2.0
requests>=2.28.0
pyinstaller>=5.0.0
matplotlib>=3.5.0
seaborn>=0.11.0
plotly>=5.10.0
"""

        with open("requirements.txt", "w") as f:
            f.write(requirements)

        print("‚úÖ Created requirements.txt")

    def prepare_directories(self):
        """Ensure all required directories exist"""
        directories = ['config', 'data', 'models', 'ui', 'logs', 'dist', 'build']

        for directory in directories:
            os.makedirs(directory, exist_ok=True)

        print("‚úÖ Prepared directory structure")

    def build_exe_simple(self):
        """Build EXE using simple PyInstaller command"""
        try:
            print("üî® Building EXE file...")
            print("‚è≥ This may take 5-10 minutes depending on your system...")
            print("üì¶ Bundling Python interpreter, libraries, and your code...")

            # Simple PyInstaller command
            cmd = [
                "pyinstaller",
                "--onefile",                    # Single executable file
                "--windowed",                   # No console window (GUI mode)
                "--name", self.app_name,        # Name of the executable
                "--distpath", "dist",           # Output directory
                "--workpath", "build",          # Build directory
                "--clean",                      # Clean cache
                "--noconfirm",                  # Replace output without asking
                self.main_script               # Main Python file
            ]

            # Add data files if they exist
            data_dirs = ['config', 'data', 'models', 'ui']
            for data_dir in data_dirs:
                if os.path.exists(data_dir):
                    cmd.extend(["--add-data", f"{data_dir};{data_dir}"])

            print(f"üîß Running command: {' '.join(cmd)}")

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                exe_path = f"dist/{self.app_name}.exe"
                if os.path.exists(exe_path):
                    print("‚úÖ EXE file created successfully!")
                    print(f"üìÅ Location: {exe_path}")
                    print(f"üìä File size: {self.get_file_size(exe_path)}")
                    return True
                else:
                    print("‚ùå EXE file was not created at expected location")
                    return False
            else:
                print("‚ùå EXE creation failed:")
                print("STDOUT:", result.stdout)
                print("STDERR:", result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå Error during EXE creation: {e}")
            return False

    def get_file_size(self, filepath):
        """Get human-readable file size"""
        try:
            size = os.path.getsize(filepath)
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} TB"
        except:
            return "Unknown"

    def create_installer_script(self):
        """Create batch script for easy EXE creation"""
        batch_script = f"""@echo off
title AI/ML NIFTY 100 Trading System - EXE Builder
color 0A

echo.
echo  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo  ‚ïë           AI/ML NIFTY 100 TRADING SYSTEM                 ‚ïë
echo  ‚ïë                   EXE FILE BUILDER                       ‚ïë
echo  ‚ïë                                                           ‚ïë
echo  ‚ïë              CREATED BY RUPAK SARKAR                     ‚ïë
echo  ‚ïë          DATA FROM ICICI DIRECT BREEZE API               ‚ïë
echo  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo üöÄ Installing required packages...
pip install -r requirements.txt

echo.
echo üî® Building EXE file...
echo This may take 5-10 minutes...
python build_exe.py

echo.
echo ‚úÖ Build complete! Check the 'dist' folder for {self.app_name}.exe
echo üìÅ Your executable is ready to distribute!
echo.
pause
"""

        with open("CREATE_EXE.bat", "w") as f:
            f.write(batch_script)

        print("‚úÖ Created CREATE_EXE.bat for Windows users")

    def create_usage_instructions(self):
        """Create usage instructions file"""
        instructions = f"""# üöÄ EXE FILE CREATION INSTRUCTIONS

## Quick Start (Windows)
1. Double-click `CREATE_EXE.bat`
2. Wait for build process (5-10 minutes)
3. Find your EXE in the `dist` folder

## Manual Method
1. Install requirements: `pip install -r requirements.txt`
2. Run builder: `python build_exe.py`
3. Get EXE from `dist/{self.app_name}.exe`

## What Gets Created
- **File**: {self.app_name}.exe
- **Size**: ~150-300 MB (includes everything)
- **Requirements**: None (standalone executable)
- **Platform**: Windows (64-bit)

## Features Included in EXE
‚úÖ Complete AI/ML trading system
‚úÖ All 109 NIFTY 100 stocks coverage
‚úÖ 52 trained AI/ML models
‚úÖ Professional GUI with authentication
‚úÖ Colorful attribution display
‚úÖ Automated retraining system
‚úÖ 5-minute intraday recommendations

## Distribution
- Copy EXE to any Windows PC
- No Python installation needed
- Create desktop shortcuts
- Professional business deployment

## Troubleshooting
- If build fails, ensure Python 3.8+ is installed
- Make sure all source files are present
- Check Windows Defender/antivirus settings
- Try running as Administrator

---
**CREATED BY RUPAK SARKAR**
**DATA FROM ICICI DIRECT BREEZE API**
"""

        with open("EXE_INSTRUCTIONS.md", "w") as f:
            f.write(instructions)

        print("‚úÖ Created EXE_INSTRUCTIONS.md")

    def run_build_process(self):
        """Run the complete EXE build process"""
        print("üöÄ AI/ML NIFTY 100 TRADING SYSTEM - EXE BUILDER")
        print("=" * 60)
        print("CREATED BY RUPAK SARKAR")
        print("DATA FROM ICICI DIRECT BREEZE API")
        print("=" * 60)

        # Step 1: Check requirements
        if not self.check_requirements():
            print("‚ùå Cannot proceed without PyInstaller")
            return False

        # Step 2: Prepare environment
        self.prepare_directories()
        self.create_requirements_txt()
        self.create_installer_script()
        self.create_usage_instructions()

        # Step 3: Build EXE
        print("\nüî® STARTING EXE BUILD...")
        success = self.build_exe_simple()

        if success:
            print("\n" + "=" * 60)
            print("üéâ EXE BUILD SUCCESSFUL!")
            print("=" * 60)
            print(f"üìÅ EXE Location: dist/{self.app_name}.exe")
            print("üöÄ Your AI/ML trading system is now a standalone executable!")
            print("\nüìã NEXT STEPS:")
            print("1. ‚úÖ Test the EXE file on your computer")
            print("2. üì± Copy to other Windows PCs (no Python needed)")
            print("3. üñ•Ô∏è Create desktop shortcut for easy access")
            print("4. üíº Share with clients or deploy for business")
            print("5. üéØ Start generating trading recommendations!")
            print("\nüé® FEATURES INCLUDED:")
            print("‚Ä¢ Complete NIFTY 100 stock coverage")
            print("‚Ä¢ AI/ML models with 75-94% accuracy")
            print("‚Ä¢ Professional GUI with colorful attribution")
            print("‚Ä¢ Real-time 5-minute recommendations")
            print("‚Ä¢ Automated model retraining")
            print("\nüí° BUSINESS READY:")
            print("‚Ä¢ Professional-grade trading system")
            print("‚Ä¢ Standalone Windows executable")
            print("‚Ä¢ No dependencies required")
            print("‚Ä¢ Ready for commercial distribution")
        else:
            print("\n" + "=" * 60)
            print("‚ùå EXE BUILD FAILED")
            print("=" * 60)
            print("Please check the error messages above.")
            print("Common solutions:")
            print("1. Ensure Python 3.8+ is installed")
            print("2. Run as Administrator")
            print("3. Check antivirus settings")
            print("4. Verify all source files are present")

        return success

# Main execution
if __name__ == "__main__":
    builder = TradingSystemEXEBuilder()
    builder.run_build_process()
