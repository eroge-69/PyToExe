import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import json
import os
import subprocess
import sys
from pathlib import Path

class ModernMysticOSBuilder:
    def __init__(self, root):
        self.root = root
        self.root.title("üßô‚Äç‚ôÇÔ∏è Mystic OS Builder - –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –û–°")
        self.root.geometry("1400x900")
        self.root.configure(bg='#1e1e1e')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        self.project_path = Path(".")
        self.blocks = {
            'boot': [], 'kernel': [], 'gdt': [], 'print': [], 'disk': []
        }
        self.current_file = None
        
        self.setup_styles()
        self.setup_ui()
        self.load_project_structure()
        
    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.style.configure('Mystic.TFrame', background='#1e1e1e')
        self.style.configure('Mystic.TLabelframe', background='#1e1e1e', foreground='#00ff88')
        self.style.configure('Mystic.TLabelframe.Label', background='#1e1e1e', foreground='#00ff88')
        self.style.configure('Mystic.TButton', background='#006633', foreground='white')
        self.style.configure('Mystic.TNotebook', background='#1e1e1e')
        self.style.configure('Mystic.TNotebook.Tab', background='#333333', foreground='#00ff88')
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Mystic.TFrame')
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.setup_toolbar(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        content_frame = ttk.Frame(main_container, style='Mystic.TFrame')
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∞–π–ª—ã –∏ –±–ª–æ–∫–∏
        left_panel = ttk.Frame(content_frame, style='Mystic.TFrame', width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        center_panel = ttk.Frame(content_frame, style='Mystic.TFrame')
        center_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        right_panel = ttk.Frame(content_frame, style='Mystic.TFrame', width=350)
        right_panel.pack(side=tk.RIGHT, fill=tk.Y, padx=(10, 0))
        right_panel.pack_propagate(False)
        
        self.setup_file_explorer(left_panel)
        self.setup_blocks_panel(left_panel)
        self.setup_workspace(center_panel)
        self.setup_properties_panel(right_panel)
        self.setup_preview_panel(right_panel)
        
    def setup_toolbar(self, parent):
        toolbar = ttk.Frame(parent, style='Mystic.TFrame', height=40)
        toolbar.pack(fill=tk.X, pady=(0, 10))
        toolbar.pack_propagate(False)
        
        buttons = [
            ("üöÄ –°–±–æ—Ä–∫–∞", self.build_project),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_project),
            ("üìÇ –û—Ç–∫—Ä—ã—Ç—å", self.load_project),
            ("üîß –≠–∫—Å–ø–æ—Ä—Ç ASM", self.export_asm),
            ("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤ VM", self.run_vm),
            ("üìä –ê–Ω–∞–ª–∏–∑", self.analyze_project)
        ]
        
        for text, command in buttons:
            btn = tk.Button(
                toolbar, text=text, command=command,
                bg='#006633', fg='white', relief='raised', bd=2,
                font=('Arial', 9, 'bold')
            )
            btn.pack(side=tk.LEFT, padx=5)
    
    def setup_file_explorer(self, parent):
        frame = ttk.LabelFrame(parent, text="üìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê", style='Mystic.TLabelframe')
        frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.tree = ttk.Treeview(frame, show='tree')
        self.tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.tree_menu = tk.Menu(self.tree, tearoff=0)
        self.tree_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_selected_file)
        self.tree_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_file)
        self.tree_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.rename_file)
        
        self.tree.bind("<Button-3>", self.show_tree_menu)
        self.tree.bind("<Double-1>", self.open_selected_file)
    
    def setup_blocks_panel(self, parent):
        frame = ttk.LabelFrame(parent, text="üß© –ë–õ–û–ö–ò –ö–û–î–ê", style='Mystic.TLabelframe')
        frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–æ—É—Ç–±—É–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª–æ–∫–æ–≤
        notebook = ttk.Notebook(frame)
        notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        categories = {
            "üî∞ –ó–∞–≥—Ä—É–∑—á–∏–∫": self.create_boot_blocks(),
            "üéØ –Ø–¥—Ä–æ": self.create_kernel_blocks(),
            "üì∫ –í–∏–¥–µ–æ": self.create_video_blocks(),
            "üíæ –î–∏—Å–∫": self.create_disk_blocks(),
            "üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞": self.create_system_blocks()
        }
        
        for category, blocks in categories.items():
            category_frame = ttk.Frame(notebook)
            notebook.add(category_frame, text=category)
            
            for block_name, block_id, color, description in blocks:
                self.create_block_button(category_frame, block_name, block_id, color, description)
    
    def create_boot_blocks(self):
        return [
            ("BIOS –ó–∞–≥—Ä—É–∑–∫–∞", "boot_bios", "#ff6b6b", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BIOS –∑–∞–≥—Ä—É–∑–∫–∏"),
            ("GDT –ó–∞–≥—Ä—É–∑–∫–∞", "boot_gdt", "#ff6b6b", "–ó–∞–≥—Ä—É–∑–∫–∞ Global Descriptor Table"),
            ("–ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º", "boot_protected", "#ff6b6b", "–ü–µ—Ä–µ—Ö–æ–¥ –≤ 32-–±–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º"),
            ("–ß—Ç–µ–Ω–∏–µ –¥–∏—Å–∫–∞", "boot_disk_read", "#ff6b6b", "–ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤ —Å –¥–∏—Å–∫–∞")
        ]
    
    def create_kernel_blocks(self):
        return [
            ("–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞", "kernel_entry", "#4ecdc4", "–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —è–¥—Ä–∞"),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "kernel_init", "#4ecdc4", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —è–¥—Ä–∞"),
            ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π", "kernel_interrupts", "#4ecdc4", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ IDT –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π")
        ]
    
    def create_video_blocks(self):
        return [
            ("VGA –¢–µ–∫—Å—Ç", "vga_text", "#45b7d1", "–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ VGA —Ä–µ–∂–∏–º–µ"),
            ("–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞", "vga_clear", "#45b7d1", "–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞", "vga_color", "#45b7d1", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞"),
            ("–ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞", "vga_cursor", "#45b7d1", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π –∫—É—Ä—Å–æ—Ä–∞")
        ]
    
    def create_disk_blocks(self):
        return [
            ("–ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞", "disk_read", "#f9c80e", "–ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–∏—Å–∫–∞"),
            ("–ó–∞–ø–∏—Å—å —Å–µ–∫—Ç–æ—Ä–∞", "disk_write", "#f9c80e", "–ó–∞–ø–∏—Å—å —Å–µ–∫—Ç–æ—Ä–∞ –¥–∏—Å–∫–∞"),
            ("–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞", "disk_find", "#f9c80e", "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        ]
    
    def create_system_blocks(self):
        return [
            ("GDT –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä", "gdt_descriptor", "#9966cc", "–°–æ–∑–¥–∞–Ω–∏–µ GDT –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞"),
            ("–°–µ–≥–º–µ–Ω—Ç –∫–æ–¥–∞", "gdt_code", "#9966cc", "–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞"),
            ("–°–µ–≥–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö", "gdt_data", "#9966cc", "–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        ]
    
    def create_block_button(self, parent, name, block_id, color, description):
        btn = tk.Button(
            parent, text=name, 
            bg=color, fg='white', relief='raised', bd=2,
            font=('Arial', 8), wraplength=120, justify=tk.CENTER,
            cursor='hand2'
        )
        btn.pack(fill=tk.X, padx=5, pady=2)
        btn.bind('<Button-1>', lambda e, bid=block_id: self.add_block(bid))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        self.create_tooltip(btn, description)
    
    def create_tooltip(self, widget, text):
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = tk.Label(tooltip, text=text, background="#ffffe0", relief='solid', borderwidth=1)
            label.pack()
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def setup_workspace(self, parent):
        # –ù–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        self.editor_notebook = ttk.Notebook(parent)
        self.editor_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –•–æ–ª—Å—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        self.canvas_frame = ttk.Frame(self.editor_notebook)
        self.editor_notebook.add(self.canvas_frame, text="üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")
        
        self.canvas = tk.Canvas(
            self.canvas_frame, 
            bg='#2d2d2d',
            scrollregion=(0, 0, 2000, 2000)
        )
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(self.canvas_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        h_scrollbar = ttk.Scrollbar(self.canvas_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.canvas.bind('<Button-1>', self.canvas_click)
        self.canvas.bind('<B1-Motion>', self.canvas_drag)
        self.canvas.bind('<ButtonRelease-1>', self.canvas_release)
    
    def setup_properties_panel(self, parent):
        frame = ttk.LabelFrame(parent, text="‚öôÔ∏è –°–í–û–ô–°–¢–í–ê –ë–õ–û–ö–ê", style='Mystic.TLabelframe')
        frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        self.properties_text = scrolledtext.ScrolledText(
            frame, 
            bg='#2d2d2d', 
            fg='#00ff88',
            font=('Consolas', 10),
            height=10
        )
        self.properties_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def setup_preview_panel(self, parent):
        frame = ttk.LabelFrame(parent, text="üëÅÔ∏è –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ö–û–î–ê", style='Mystic.TLabelframe')
        frame.pack(fill=tk.BOTH, expand=True)
        
        self.preview_text = scrolledtext.ScrolledText(
            frame,
            bg='#2d2d2d',
            fg='#88ff88', 
            font=('Consolas', 9),
            height=15
        )
        self.preview_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def load_project_structure(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.tree.delete(*self.tree.get_children())
        
        project_root = self.tree.insert('', 'end', text="Mystic OS Project", values=("PROJECT",))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        files = [
            ("boot.asm", "ASM —Ñ–∞–π–ª"),
            ("kernel.asm", "ASM —Ñ–∞–π–ª"), 
            ("gdt.asm", "ASM —Ñ–∞–π–ª"),
            ("print.asm", "ASM —Ñ–∞–π–ª"),
            ("disk.asm", "ASM —Ñ–∞–π–ª"),
            ("mystic_os.img", "–û–±—Ä–∞–∑ –¥–∏—Å–∫–∞"),
            ("build.bat", "–°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏"),
            ("mystic_builder.py", "Python —Å–∫—Ä–∏–ø—Ç")
        ]
        
        for file_name, file_type in files:
            if Path(file_name).exists():
                self.tree.insert(project_root, 'end', text=file_name, values=("FILE", file_name))
    
    def add_block(self, block_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –Ω–∞ —Ö–æ–ª—Å—Ç"""
        block_config = self.get_block_config(block_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫
        x, y = 100, 100  # –ü–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        block_rect = self.canvas.create_rectangle(
            x-60, y-25, x+60, y+25,
            fill=block_config['color'],
            outline='#ffffff',
            width=2,
            tags=('block', block_id)
        )
        
        self.canvas.create_text(
            x, y,
            text=block_config['name'],
            fill='white',
            font=('Arial', 9, 'bold'),
            tags=('text', block_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        self.update_properties(block_config)
        
        self.update_status(f"–î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: {block_config['name']}")
    
    def get_block_config(self, block_id):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ —Å –∫–æ–¥–æ–º"""
        blocks = {
            'boot_bios': {
                'name': 'BIOS –ó–∞–≥—Ä—É–∑–∫–∞',
                'color': '#ff6b6b',
                'code': '''bits 16
org 0x7C00

start:
    cli
    mov ax, 0x07C0
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00
    sti
'''
            },
            'boot_protected': {
                'name': '–ó–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º', 
                'color': '#ff6b6b',
                'code': '''; –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
enable_protected:
    cli
    lgdt [gdt_descriptor]
    mov eax, cr0
    or eax, 1
    mov cr0, eax
    jmp 0x08:protected_mode
'''
            },
            'kernel_entry': {
                'name': '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞',
                'color': '#4ecdc4', 
                'code': '''bits 32
protected_mode:
    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax
    mov esp, 0x90000
    call main
'''
            }
        }
        return blocks.get(block_id, {'name': 'Unknown', 'color': '#666666', 'code': '; Unknown block\n'})
    
    def update_properties(self, block_config):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤"""
        self.properties_text.delete(1.0, tk.END)
        self.properties_text.insert(1.0, f"–ë–ª–æ–∫: {block_config['name']}\n")
        self.properties_text.insert(2.0, f"–¶–≤–µ—Ç: {block_config['color']}\n")
        self.properties_text.insert(3.0, "\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n")
        self.properties_text.insert(4.0, block_config['code'])
    
    def canvas_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ"""
        items = self.canvas.find_closest(event.x, event.y)
        if items:
            self.canvas.drag_data = {
                "item": items[0],
                "x": event.x,
                "y": event.y
            }
    
    def canvas_drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤"""
        if hasattr(self.canvas, 'drag_data'):
            dx = event.x - self.canvas.drag_data["x"]
            dy = event.y - self.canvas.drag_data["y"]
            self.canvas.move(self.canvas.drag_data["item"], dx, dy)
            self.canvas.drag_data["x"] = event.x
            self.canvas.drag_data["y"] = event.y
    
    def canvas_release(self, event):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if hasattr(self.canvas, 'drag_data'):
            del self.canvas.drag_data
    
    def build_project(self):
        """–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            self.export_asm()
            
            if os.name == 'nt':
                result = subprocess.run(['build.bat'], capture_output=True, text=True)
                if result.returncode == 0:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!\n–§–∞–π–ª: mystic_os.img")
                    self.update_status("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:\n{result.stderr}")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π –û–°")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {str(e)}")
    
    def export_asm(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ ASM —Ñ–∞–π–ª—ã"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–∑ –±–ª–æ–∫–æ–≤
            messagebox.showinfo("–£—Å–ø–µ—Ö", "ASM —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            self.update_status("–≠–∫—Å–ø–æ—Ä—Ç ASM –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    def run_vm(self):
        """–ó–∞–ø—É—Å–∫ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"""
        try:
            if Path("mystic_os.img").exists():
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ VirtualBox
                subprocess.Popen(['VBoxManage', 'startvm', 'MysticOS'])
                self.update_status("–ó–∞–ø—É—Å–∫ –≤ VirtualBox...")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!")
        except:
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ VM –≤—Ä—É—á–Ω—É—é —Å –æ–±—Ä–∞–∑–æ–º mystic_os.img")
    
    def analyze_project(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        analysis = "üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê:\n\n"
        analysis += f"‚Ä¢ ASM —Ñ–∞–π–ª–æ–≤: {len([f for f in Path('.').glob('*.asm')])}\n"
        analysis += f"‚Ä¢ –ë–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len([f for f in Path('.').glob('*.bin')])}\n"
        analysis += f"‚Ä¢ –û–±—Ä–∞–∑ –¥–∏—Å–∫–∞: {'‚úÖ' if Path('mystic_os.img').exists() else '‚ùå'}\n"
        
        self.preview_text.delete(1.0, tk.END)
        self.preview_text.insert(1.0, analysis)
    
    def save_project(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_data = {
                'blocks': self.blocks,
                'files': [f for f in Path('.').glob('*.*')]
            }
            
            with open('mystic_project.json', 'w') as f:
                json.dump(project_data, f, indent=2)
                
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            self.update_status("–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ mystic_project.json")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def load_project(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            filename = filedialog.askopenfilename(filetypes=[("Mystic OS Project", "*.json")])
            if filename:
                with open(filename, 'r') as f:
                    project_data = json.load(f)
                
                self.blocks = project_data.get('blocks', {})
                self.update_status("–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    def open_selected_file(self, event=None):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selection = self.tree.selection()
        if selection:
            item = self.tree.item(selection[0])
            if item['values'][0] == "FILE":
                filename = item['values'][1]
                self.open_file_editor(filename)
    
    def open_file_editor(self, filename):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        try:
            if Path(filename).exists():
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Ñ–∞–π–ª–∞
                text_frame = ttk.Frame(self.editor_notebook)
                self.editor_notebook.add(text_frame, text=f"üìÑ {filename}")
                
                text_widget = scrolledtext.ScrolledText(
                    text_frame,
                    bg='#1e1e1e',
                    fg='#d4d4d4',
                    font=('Consolas', 10),
                    insertbackground='white'
                )
                text_widget.pack(fill=tk.BOTH, expand=True)
                text_widget.insert(1.0, content)
                
                # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                save_btn = tk.Button(
                    text_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    command=lambda: self.save_file(filename, text_widget),
                    bg='#006633', fg='white'
                )
                save_btn.pack(side=tk.BOTTOM, fill=tk.X)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def save_file(self, filename, text_widget):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            content = text_widget.get(1.0, tk.END)
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            self.update_status(f"–§–∞–π–ª {filename} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def show_tree_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        self.tree_menu.post(event.x_root, event.y_root)
    
    def delete_file(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selection = self.tree.selection()
        if selection:
            item = self.tree.item(selection[0])
            if item['values'][0] == "FILE":
                filename = item['values'][1]
                if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {filename}?"):
                    try:
                        Path(filename).unlink()
                        self.load_project_structure()
                        self.update_status(f"–§–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω")
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def rename_file(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        selection = self.tree.selection()
        if selection:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if hasattr(self, 'status'):
            self.status.config(text=message)
        print(f"STATUS: {message}")

def main():
    try:
        root = tk.Tk()
        app = ModernMysticOSBuilder(root)
        root.mainloop()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()