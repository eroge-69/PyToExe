import psutil
import platform
import socket
import requests
import time
from datetime import datetime
import json
import os

class PCMonitor:
    def __init__(self, bot_token, chat_id):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(self.telegram_url, data=payload)
            return response.status_code == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def get_system_info(self):
        """–°–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            uname = platform.uname()
            boot_time = datetime.fromtimestamp(psutil.boot_time())
            
            system_info = f"""
<b>üíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>
‚îú‚îÄ –°–∏—Å—Ç–µ–º–∞: {uname.system}
‚îú‚îÄ –í–µ—Ä—Å–∏—è: {uname.release}
‚îú‚îÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}
‚îú‚îÄ –ò–º—è –ü–ö: {uname.node}
‚îú‚îÄ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {uname.processor}
‚îú‚îÄ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {boot_time.strftime("%Y-%m-%d %H:%M:%S")}
‚îî‚îÄ IP-–∞–¥—Ä–µ—Å: {socket.gethostbyname(socket.gethostname())}
"""
            return system_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
    
    def get_cpu_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"""
        try:
            # –ó–∞–º–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
            psutil.cpu_percent(interval=1)
            cpu_percent = psutil.cpu_percent(percpu=True)
            
            cpu_info = f"""
<b>‚öôÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–¶–ï–°–°–û–†–ï</b>
‚îú‚îÄ –Ø–¥–µ—Ä (—Ñ–∏–∑/–ª–æ–≥): {psutil.cpu_count(logical=False)}/{psutil.cpu_count(logical=True)}
‚îú‚îÄ –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {psutil.cpu_percent()}%
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —è–¥—Ä—É
            for i, usage in enumerate(cpu_percent):
                cpu_info += f"‚îú‚îÄ –Ø–¥—Ä–æ {i+1}: {usage}%\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å—Ç–æ—Ç–µ
            if hasattr(psutil, 'cpu_freq'):
                freq = psutil.cpu_freq()
                if freq:
                    cpu_info += f"‚îî‚îÄ –ß–∞—Å—Ç–æ—Ç–∞: {freq.current:.0f} MHz\n"
            
            return cpu_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU: {str(e)}"
    
    def get_memory_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"""
        try:
            virtual_mem = psutil.virtual_memory()
            swap_mem = psutil.swap_memory()
            
            memory_info = f"""
<b>üíæ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–ú–Ø–¢–ò</b>
‚îú‚îÄ –û–ó–£ –≤—Å–µ–≥–æ: {self.bytes_to_gb(virtual_mem.total):.1f} GB
‚îú‚îÄ –û–ó–£ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.bytes_to_gb(virtual_mem.used):.1f} GB
‚îú‚îÄ –û–ó–£ —Å–≤–æ–±–æ–¥–Ω–æ: {self.bytes_to_gb(virtual_mem.available):.1f} GB
‚îú‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –û–ó–£: {virtual_mem.percent}%
‚îú‚îÄ SWAP –≤—Å–µ–≥–æ: {self.bytes_to_gb(swap_mem.total):.1f} GB
‚îú‚îÄ SWAP –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.bytes_to_gb(swap_mem.used):.1f} GB
‚îî‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ SWAP: {swap_mem.percent}%
"""
            return memory_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {str(e)}"
    
    def get_disk_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"""
        try:
            disk_info = "<b>üíø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ê–•</b>\n"
            partitions = psutil.disk_partitions()
            
            for partition in partitions:
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        continue
                    
                    partition_usage = psutil.disk_usage(partition.mountpoint)
                    disk_info += f"""
‚îú‚îÄ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {partition.device}
‚îú‚îÄ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {partition.mountpoint}
‚îú‚îÄ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {partition.fstype}
‚îú‚îÄ –í—Å–µ–≥–æ: {self.bytes_to_gb(partition_usage.total):.1f} GB
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.bytes_to_gb(partition_usage.used):.1f} GB
‚îú‚îÄ –°–≤–æ–±–æ–¥–Ω–æ: {self.bytes_to_gb(partition_usage.free):.1f} GB
‚îú‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞: {partition_usage.percent}%
‚îî‚îÄ{'‚îÄ' * 30}
"""
                except PermissionError:
                    continue
            
            return disk_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: {str(e)}"
    
    def get_network_info(self):
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"""
        try:
            net_io = psutil.net_io_counters()
            network_info = f"""
<b>üåê –°–ï–¢–ï–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>
‚îú‚îÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.bytes_to_mb(net_io.bytes_sent):.1f} MB
‚îú‚îÄ –ü–æ–ª—É—á–µ–Ω–æ: {self.bytes_to_mb(net_io.bytes_recv):.1f} MB
‚îú‚îÄ –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.packets_sent}
‚îî‚îÄ –ü–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {net_io.packets_recv}
"""
            return network_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
    
    def get_running_processes(self, top_n=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'memory_percent']):
                try:
                    processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-N
            processes.sort(key=lambda x: x['memory_percent'] or 0, reverse=True)
            
            processes_info = "<b>üìä –¢–û–ü-10 –ü–†–û–¶–ï–°–°–û–í –ü–û –ü–ê–ú–Ø–¢–ò</b>\n"
            for i, proc in enumerate(processes[:top_n]):
                if proc['memory_percent']:
                    processes_info += f"‚îú‚îÄ {proc['name']}: {proc['memory_percent']:.1f}%\n"
            
            return processes_info
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {str(e)}"
    
    def bytes_to_gb(self, bytes):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–π—Ç–æ–≤ –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã"""
        return bytes / (1024 ** 3)
    
    def bytes_to_mb(self, bytes):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–π—Ç–æ–≤ –≤ –º–µ–≥–∞–±–∞–π—Ç—ã"""
        return bytes / (1024 ** 2)
    
    def collect_all_info(self):
        """–°–±–æ—Ä –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            report = f"<b>üìà –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ü–ö</b>\n<code>–í—Ä–µ–º—è: {timestamp}</code>\n"
            
            report += self.get_system_info()
            report += self.get_cpu_info()
            report += self.get_memory_info()
            report += self.get_disk_info()
            report += self.get_network_info()
            report += self.get_running_processes()
            
            return report
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
    
    def send_alert(self, threshold_cpu=80, threshold_memory=85, threshold_disk=90):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö"""
        try:
            alerts = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            cpu_usage = psutil.cpu_percent(interval=1)
            if cpu_usage > threshold_cpu:
                alerts.append(f"üö® –í–´–°–û–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê CPU: {cpu_usage}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            memory_usage = psutil.virtual_memory().percent
            if memory_usage > threshold_memory:
                alerts.append(f"üö® –í–´–°–û–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–ê–ú–Ø–¢–ò: {memory_usage}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤
            for partition in psutil.disk_partitions():
                try:
                    if 'cdrom' in partition.opts:
                        continue
                    usage = psutil.disk_usage(partition.mountpoint)
                    if usage.percent > threshold_disk:
                        alerts.append(f"üö® –ú–ê–õ–û –ú–ï–°–¢–ê –ù–ê –î–ò–°–ö–ï {partition.device}: {usage.percent}%")
                except PermissionError:
                    continue
            
            if alerts:
                alert_message = "<b>‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n" + "\n".join(alerts)
                self.send_to_telegram(alert_message)
                return True
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
            return False

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    BOT_TOKEN = "8443681477:AAF_ApI2CmaJnYO2nx3YKftFSlYU1tBUO-E"
    CHAT_ID = "8308780076"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor = PCMonitor(BOT_TOKEN, CHAT_ID)
    
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ü–ö –∑–∞–ø—É—â–µ–Ω...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            report = monitor.collect_all_info()
            if monitor.send_to_telegram(report):
                print(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {datetime.now().strftime('%H:%M:%S')}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            monitor.send_alert()
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            time.sleep(300)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
