from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)
import json
import os
import sys
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7794593715:AAEZ_bGw50Thfk0Twr3DfVvMdiaQBISA1IU"
ADMIN_ID = 2031808258

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
if getattr(sys, 'frozen', False):
    base_dir = os.path.dirname(sys.executable)
    DATA_FILE = os.path.join(base_dir, "bot_data.json")
else:
    base_dir = os.path.dirname(os.path.abspath(__file__))
    DATA_FILE = os.path.join(base_dir, "bot_data.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, ADD_USER, REMOVE_USER, SET_PRICE = range(4)

# –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
BASE_TEXT = """–¶–µ–Ω—ã:
–ú–ï–î–ù–ê–Ø –ì–†–£–ü–ü–ê
–ú–µ–¥—å –∞1-1(–±–ª–µ—Å–∫) : {–º–µ–¥—å_–∞1_1}–†
–ú–µ–¥—å –∞1-2(–∫—É—Å–æ–∫) : {–º–µ–¥—å_–∞1_2}–†
–ú–µ–¥—å (—Ä–∞–∑–Ω–æ—Å–æ—Ä—Ç.) : {–º–µ–¥—å_—Ä–∞–∑–Ω–æ—Å–æ—Ä—Ç}–†
–ì–∞–∑–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ : {–≥–∞–∑–æ–≤–∞—è_–∫–æ–ª–æ–Ω–∫–∞}–†
–ú–µ–¥—å (–ª—É–∂.) : {–º–µ–¥—å_–ª—É–∂}–†
–õ–ê–¢–£–ù–ù–ê–Ø/–ë–†–û–ù–ó–û–í–ê–Ø –ì–†–£–ü–ü–ê
–ë—Ä–æ–Ω–∑–∞ : {–±—Ä–æ–Ω–∑–∞}–†
–†–∞–¥–∏–∞—Ç–æ—Ä—ã : {—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã}–†
–õ–∞—Ç—É–Ω—å : {–ª–∞—Ç—É–Ω—å}–†
–ê–õ–Æ–ú–ò–ù–ò–ô:
–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π : {–∞–ª—é–º–∏–Ω–∏–π_—ç–ª–µ–∫—Ç—Ä–æ}–†
–ü–∏—â–µ–≤–æ–π : {–∞–ª—é–º–∏–Ω–∏–π_–ø–∏—â–µ–≤–æ–π}–†
–ü—Ä–æ—Ñ–∏–ª—å : {–∞–ª—é–º–∏–Ω–∏–π_–ø—Ä–æ—Ñ–∏–ª—å}–†
–ú–æ—Ç–æ—Ä–Ω—ã–π : {–∞–ª—é–º–∏–Ω–∏–π_–º–æ—Ç–æ—Ä–Ω—ã–π}–†
–ú–∏–∫—Å : {–∞–ª—é–º–∏–Ω–∏–π_–º–∏–∫—Å}–†
–ù–ï–†–ñ–ê–í–ï–ô–ö–ê:
10% : {–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_10}–†
8%: {–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_8}–†
–°–≤–∏–Ω–µ—Ü –æ–±–æ–ª–æ—á–∫–∞ : {—Å–≤–∏–Ω–µ—Ü_–æ–±–æ–ª–æ—á–∫–∞}–†
–°–≤–∏–Ω–µ—Ü –ø–µ—Ä–µ–ø–ª–∞–≤ : {—Å–≤–∏–Ω–µ—Ü_–ø–µ—Ä–µ–ø–ª–∞–≤}–†
–¶–∏–Ω–∫: {—Ü–∏–Ω–∫}–†
–ê–ö–ë —Å—É—Ö–∏–µ : {–∞–∫–±_—Å—É—Ö–∏–µ}–†"""

# –¶–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_PRICES = {
    "–º–µ–¥—å_–∞1_1": 670,
    "–º–µ–¥—å_–∞1_2": 660,
    "–º–µ–¥—å_—Ä–∞–∑–Ω–æ—Å–æ—Ä—Ç": 650,
    "–≥–∞–∑–æ–≤–∞—è_–∫–æ–ª–æ–Ω–∫–∞": 590,
    "–º–µ–¥—å_–ª—É–∂": 590,
    "–±—Ä–æ–Ω–∑–∞": 460,
    "—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã": 415,
    "–ª–∞—Ç—É–Ω—å": 410,
    "–∞–ª—é–º–∏–Ω–∏–π_—ç–ª–µ–∫—Ç—Ä–æ": 155,
    "–∞–ª—é–º–∏–Ω–∏–π_–ø–∏—â–µ–≤–æ–π": 150,
    "–∞–ª—é–º–∏–Ω–∏–π_–ø—Ä–æ—Ñ–∏–ª—å": 140,
    "–∞–ª—é–º–∏–Ω–∏–π_–º–æ—Ç–æ—Ä–Ω—ã–π": 120,
    "–∞–ª—é–º–∏–Ω–∏–π_–º–∏–∫—Å": 115,
    "–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_10": 60,
    "–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_8": 50,
    "—Å–≤–∏–Ω–µ—Ü_–æ–±–æ–ª–æ—á–∫–∞": 120,
    "—Å–≤–∏–Ω–µ—Ü_–ø–µ—Ä–µ–ø–ª–∞–≤": 110,
    "—Ü–∏–Ω–∫": 120,
    "–∞–∫–±_—Å—É—Ö–∏–µ": 48
}

# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ —Ü–µ–Ω
                for key, value in DEFAULT_PRICES.items():
                    if key not in data["prices"]:
                        data["prices"][key] = value
                return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return {
        "allowed_users": [],
        "prices": DEFAULT_PRICES.copy()
    }

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏
def format_message(prices):
    return BASE_TEXT.format(**prices)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    keyboard = [
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='add_user')],
        [InlineKeyboardButton("üë• –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='remove_user')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", callback_data='list_users')],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data='set_price_menu')],
        [InlineKeyboardButton("üì§ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='broadcast')],
        [InlineKeyboardButton("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data='show_prices')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã
def create_price_menu():
    keyboard = [
        [
            InlineKeyboardButton("–ú–µ–¥—å –∞1-1", callback_data='–º–µ–¥—å_–∞1_1'),
            InlineKeyboardButton("–ú–µ–¥—å –∞1-2", callback_data='–º–µ–¥—å_–∞1_2'),
            InlineKeyboardButton("–ú–µ–¥—å —Ä–∞–∑–Ω–æ—Å–æ—Ä—Ç", callback_data='–º–µ–¥—å_—Ä–∞–∑–Ω–æ—Å–æ—Ä—Ç')
        ],
        [
            InlineKeyboardButton("–ì–∞–∑–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞", callback_data='–≥–∞–∑–æ–≤–∞—è_–∫–æ–ª–æ–Ω–∫–∞'),
            InlineKeyboardButton("–ú–µ–¥—å –ª—É–∂", callback_data='–º–µ–¥—å_–ª—É–∂'),
            InlineKeyboardButton("–ë—Ä–æ–Ω–∑–∞", callback_data='–±—Ä–æ–Ω–∑–∞')
        ],
        [
            InlineKeyboardButton("–†–∞–¥–∏–∞—Ç–æ—Ä—ã", callback_data='—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã'),
            InlineKeyboardButton("–õ–∞—Ç—É–Ω—å", callback_data='–ª–∞—Ç—É–Ω—å'),
            InlineKeyboardButton("–ê–ª—é–º–∏–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ", callback_data='–∞–ª—é–º–∏–Ω–∏–π_—ç–ª–µ–∫—Ç—Ä–æ')
        ],
        [
            InlineKeyboardButton("–ê–ª—é–º–∏–Ω–∏–π –ø–∏—â–µ–≤–æ–π", callback_data='–∞–ª—é–º–∏–Ω–∏–π_–ø–∏—â–µ–≤–æ–π'),
            InlineKeyboardButton("–ê–ª—é–º–∏–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='–∞–ª—é–º–∏–Ω–∏–π_–ø—Ä–æ—Ñ–∏–ª—å'),
            InlineKeyboardButton("–ê–ª—é–º–∏–Ω–∏–π –º–æ—Ç–æ—Ä–Ω—ã–π", callback_data='–∞–ª—é–º–∏–Ω–∏–π_–º–æ—Ç–æ—Ä–Ω—ã–π')
        ],
        [
            InlineKeyboardButton("–ê–ª—é–º–∏–Ω–∏–π –º–∏–∫—Å", callback_data='–∞–ª—é–º–∏–Ω–∏–π_–º–∏–∫—Å'),
            InlineKeyboardButton("–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 10%", callback_data='–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_10'),
            InlineKeyboardButton("–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 8%", callback_data='–Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞_8')
        ],
        [
            InlineKeyboardButton("–°–≤–∏–Ω–µ—Ü –æ–±–æ–ª–æ—á–∫–∞", callback_data='—Å–≤–∏–Ω–µ—Ü_–æ–±–æ–ª–æ—á–∫–∞'),
            InlineKeyboardButton("–°–≤–∏–Ω–µ—Ü –ø–µ—Ä–µ–ø–ª–∞–≤", callback_data='—Å–≤–∏–Ω–µ—Ü_–ø–µ—Ä–µ–ø–ª–∞–≤'),
            InlineKeyboardButton("–¶–∏–Ω–∫", callback_data='—Ü–∏–Ω–∫')
        ],
        [
            InlineKeyboardButton("–ê–ö–ë —Å—É—Ö–∏–µ", callback_data='–∞–∫–±_—Å—É—Ö–∏–µ'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == ADMIN_ID:
        await update.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id != ADMIN_ID:
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return ConversationHandler.END
    
    data = load_data()
    
    if query.data == 'add_user':
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:"
        )
        return ADD_USER
    
    elif query.data == 'remove_user':
        if not data["allowed_users"]:
            await query.edit_message_text("üìÉ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")
            await query.message.reply_text(
                "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
                reply_markup=create_main_menu()
            )
            return MAIN_MENU
        
        users_list = "\n".join([f"‚Ä¢ {uid}" for uid in data["allowed_users"]])
        await query.edit_message_text(
            f"üìÉ –¢–µ–∫—É—â–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏:\n{users_list}\n\n"
            "‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
        return REMOVE_USER
    
    elif query.data == 'list_users':
        if not data["allowed_users"]:
            await query.edit_message_text("üìÉ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")
        else:
            users_list = "\n".join([f"‚Ä¢ {uid}" for uid in data["allowed_users"]])
            await query.edit_message_text(f"üìÉ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(data['allowed_users']}):\n{users_list}")
        
        await query.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    elif query.data == 'show_prices':
        formatted_text = format_message(data["prices"])
        await query.edit_message_text(f"üìù –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n\n{formatted_text}")
        await query.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    elif query.data == 'set_price_menu':
        await query.edit_message_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=create_price_menu()
        )
        return MAIN_MENU
    
    elif query.data in DEFAULT_PRICES:
        context.user_data['selected_price'] = query.data
        current_price = data["prices"][query.data]
        await query.edit_message_text(
            f"‚úèÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data.replace('_', ' ').title()}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}–†\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        )
        return SET_PRICE
    
    elif query.data == 'broadcast':
        if not data["allowed_users"]:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π! –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await query.message.reply_text(
                "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
                reply_markup=create_main_menu()
            )
            return MAIN_MENU
        
        await query.edit_message_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        bot_username = (await context.bot.get_me()).username
        bot_link = f"https://t.me/{bot_username}"

        message_text = format_message(data["prices"])
        success = 0
        failed = []
        not_started = []

        for user_id in data["allowed_users"]:
            try:
                # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                if isinstance(user_id, int):
                    await context.bot.send_message(chat_id=user_id, text=message_text)
                    success += 1
                # –î–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç "phone:79123456789"
                elif isinstance(user_id, str) and user_id.startswith("phone:"):
                    phone = user_id.replace("phone:", "")
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞)
                    try:
                        await context.bot.send_message(chat_id=int(phone), text=message_text)
                        success += 1
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
                        error_msg = str(e)
                        if "Forbidden: user haven't started a chat with the bot" in error_msg:
                            not_started.append(phone)
                            await context.bot.send_message(
                                chat_id=ADMIN_ID,
                                text=f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å +{phone} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É:\n{bot_link}"
                            )
                        else:
                            failed.append(phone)
                else:
                    failed.append(str(user_id))
            except Exception as e:
                error_msg = str(e)
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {error_msg}")
                failed.append(str(user_id))

        report = f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {len(failed) + len(not_started)}"
        
        if not_started:
            report += f"\n‚Ä¢ –ù–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –¥–∏–∞–ª–æ–≥: {len(not_started)}"
        
        if failed:
            report += f"\n‚Ä¢ –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(failed)}"

        await query.message.reply_text(report)
        await query.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    elif query.data == 'back':
        await query.edit_message_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    return MAIN_MENU

async def add_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()
    data = load_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (ID –∏–ª–∏ –Ω–æ–º–µ—Ä)
    if re.match(r'^(\+7|8)\d{10}$', identifier.replace(" ", "")):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = re.sub(r'\D', '', identifier)
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        elif phone.startswith('+7'):
            phone = phone[1:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        user_id = f"phone:{phone}"
    else:
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79123456789)")
            await update.message.reply_text(
                "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
                reply_markup=create_main_menu()
            )
            return MAIN_MENU

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if user_id in data["allowed_users"]:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ: {identifier}")
    else:
        data["allowed_users"].append(user_id)
        save_data(data)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {identifier}")
    
    await update.message.reply_text(
        "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
        reply_markup=create_main_menu()
    )
    return MAIN_MENU

async def remove_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identifier = update.message.text.strip()
    data = load_data()
    removed = False
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    normalized_id = None
    if re.match(r'^(\+7|8)\d{10}$', identifier.replace(" ", "")):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = re.sub(r'\D', '', identifier)
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        elif phone.startswith('+7'):
            phone = phone[1:]
        normalized_id = f"phone:{phone}"
    else:
        try:
            normalized_id = int(identifier)
        except ValueError:
            normalized_id = identifier

    # –ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ
    if normalized_id in data["allowed_users"]:
        data["allowed_users"].remove(normalized_id)
        save_data(data)
        removed = True
    
    if removed:
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω: {identifier}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {identifier}")
    
    await update.message.reply_text(
        "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
        reply_markup=create_main_menu()
    )
    return MAIN_MENU

async def set_price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_price = update.message.text.strip()
    price_key = context.user_data.get('selected_price')
    
    if not price_key:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await update.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    
    try:
        new_price_value = int(new_price)
    except ValueError:
        await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return SET_PRICE
    
    data = load_data()
    old_price = data["prices"][price_key]
    data["prices"][price_key] = new_price_value
    save_data(data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    price_name = price_key.replace('_', ' ').title()
    
    await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!\n{price_name}: {old_price}–† ‚Üí {new_price_value}–†")
    await update.message.reply_text(
        "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
        reply_markup=create_main_menu()
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text(
            "‚ö° –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π",
            reply_markup=create_main_menu()
        )
        return MAIN_MENU
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(button_handler)
            ],
            ADD_USER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_handler)
            ],
            REMOVE_USER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, remove_user_handler)
            ],
            SET_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_price_handler)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    main()