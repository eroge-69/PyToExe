import tkinter as tk
from tkinter import messagebox
import time
import datetime
import threading
import os
import sys
import subprocess
import platform

# --- –§—É–Ω–∫—Ü—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---
def show_reminder():
    root = tk.Tk()
    root.withdraw()
    messagebox.showinfo(
        "–•–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è üïØÔ∏è",
        "–ó–∞—Ä–∞–∑ 9:00.\n–í—à–∞–Ω—É–π–º–æ –ø–∞–º'—è—Ç—å –∑–∞–≥–∏–±–ª–∏—Ö —Ö–≤–∏–ª–∏–Ω–æ—é –º–æ–≤—á–∞–Ω–Ω—è üïØÔ∏è"
    )
    root.destroy()

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ Python ---
def get_python_executable():
    """
    –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ Python,
    –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ 32/64 –±—ñ—Ç–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó Windows.
    """
    return os.path.abspath(sys.executable)

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —É Windows Task Scheduler ---
def create_task_scheduler():
    task_name = "MinuteOfSilence"
    script_path = os.path.abspath(sys.argv[0])
    python_path = get_python_executable()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î
    try:
        check = subprocess.run(
            ["schtasks", "/Query", "/TN", task_name],
            capture_output=True, text=True
        )
        if "ERROR:" not in check.stdout:
            print(f"–ó–∞–≤–¥–∞–Ω–Ω—è '{task_name}' –≤–∂–µ —ñ—Å–Ω—É—î.")
            return
    except Exception as e:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:", e)
        return

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /RL LIMITED –¥–ª—è 32-–±—ñ—Ç –±–µ–∑ –≤–∏–º–æ–≥–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        subprocess.run([
            "schtasks", "/Create",
            "/SC", "ONLOGON",                # –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            "/TN", task_name,                # –Ω–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
            "/TR", f'"{python_path}" "{script_path}"',  # –∫–æ–º–∞–Ω–¥–∞
            "/RL", "LIMITED",                # —Ä—ñ–≤–µ–Ω—å –ø—Ä–∞–≤ —Å—É–º—ñ—Å–Ω–∏–π –∑ Win7/32bit
            "/F"                             # –ø–µ—Ä–µ–∑–∞–ø–∏—Å –±–µ–∑ –∑–∞–ø–∏—Ç—É
        ], check=True)
        print(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è '{task_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ.")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:", e)

# --- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ---
def schedule_reminder():
    while True:
        now = datetime.datetime.now()
        if now.hour == 9 and now.minute == 0:
            show_reminder()
            time.sleep(60)
        time.sleep(20)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    print(f"–ó–∞–ø—É—â–µ–Ω–æ '–•–≤–∏–ª–∏–Ω–∞ –º–æ–≤—á–∞–Ω–Ω—è' ({platform.architecture()[0]} Python)")
    create_task_scheduler()

    t = threading.Thread(target=schedule_reminder, daemon=True)
    t.start()

    while True:
        time.sleep(3600)

if __name__ == "__main__":
    main()
