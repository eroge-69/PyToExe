{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "13882941-3cc2-4fc3-86b6-4bf49145d006",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
      "C:\\Users\\s.mosajedmousavi\\AppData\\Local\\Temp\\ipykernel_16640\\745461133.py:39: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
      "  data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, filedialog, messagebox\n",
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "from tkcalendar import DateEntry\n",
    "import os\n",
    "import platform\n",
    "import subprocess\n",
    "\n",
    "def open_file(filepath):\n",
    "    if platform.system() == \"Windows\":\n",
    "        os.startfile(filepath)\n",
    "    elif platform.system() == \"Darwin\":  # macOS\n",
    "        subprocess.call([\"open\", filepath])\n",
    "    else:  # Linux and others\n",
    "        subprocess.call([\"xdg-open\", filepath])\n",
    "\n",
    "def download_data():\n",
    "    start_date = start_cal.get_date().strftime(\"%Y-%m-%d\")\n",
    "    end_date = end_cal.get_date().strftime(\"%Y-%m-%d\")\n",
    "    interval = interval_var.get()\n",
    "    tickers_input = tickers_text.get(\"1.0\", tk.END).strip()\n",
    "    tickers = [t.strip() for t in tickers_input.split(\",\") if t.strip()]\n",
    "\n",
    "    if datetime.strptime(start_date, \"%Y-%m-%d\") > datetime.strptime(end_date, \"%Y-%m-%d\"):\n",
    "        messagebox.showerror(\"Error\", \"Start date must be before or equal to end date.\")\n",
    "        return\n",
    "    if not tickers:\n",
    "        messagebox.showerror(\"Error\", \"Please enter at least one ticker.\")\n",
    "        return\n",
    "\n",
    "    daily_intervals = [\"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\"]\n",
    "    all_data = []\n",
    "\n",
    "    try:\n",
    "        for ticker in tickers:\n",
    "            data = yf.download(ticker, start=start_date, end=end_date, interval=interval, progress=False)\n",
    "            if data.empty:\n",
    "                messagebox.showwarning(\"Warning\", f\"No data found for ticker: {ticker}\")\n",
    "                continue\n",
    "\n",
    "            if isinstance(data.columns, pd.MultiIndex):\n",
    "                data.columns = [' '.join(map(str, col)).strip() for col in data.columns.values]\n",
    "\n",
    "            if \"Close\" not in data.columns and \"Adj Close\" in data.columns:\n",
    "                data[\"Close\"] = data[\"Adj Close\"]\n",
    "\n",
    "            data = data.reset_index()\n",
    "\n",
    "            if 'Date' in data.columns:\n",
    "                if pd.api.types.is_integer_dtype(data[\"Date\"]) or \\\n",
    "                   (pd.api.types.is_object_dtype(data[\"Date\"]) and data[\"Date\"].astype(str).str.match(r'^\\d{8}$').all()):\n",
    "                    data[\"Date\"] = pd.to_datetime(data[\"Date\"].astype(str), format='%Y%m%d')\n",
    "\n",
    "            data.insert(0, \"Ticker\", ticker)\n",
    "\n",
    "            rename_map = {\n",
    "                f\"Open {ticker}\": \"Open\",\n",
    "                f\"High {ticker}\": \"High\",\n",
    "                f\"Low {ticker}\": \"Low\",\n",
    "                f\"Close {ticker}\": \"Close\",\n",
    "                f\"Adj Close {ticker}\": \"Adj Close\",\n",
    "                f\"Volume {ticker}\": \"Volume\"\n",
    "            }\n",
    "            data.rename(columns=rename_map, inplace=True)\n",
    "\n",
    "            if interval in daily_intervals:\n",
    "                data[\"Date\"] = pd.to_datetime(data[\"Date\"]).dt.date\n",
    "                data[\"M\"] = np.nan\n",
    "            else:\n",
    "                data[\"DateTime\"] = pd.to_datetime(data[\"Date\"])\n",
    "                data[\"Date\"] = data[\"DateTime\"].dt.date\n",
    "                data[\"M\"] = data[\"DateTime\"].dt.strftime(\"%H:%M\")\n",
    "\n",
    "            for col in [\"Name\", \"Value\", \"T Number\", \"P_t-1\", \"Shamsi\"]:\n",
    "                data[col] = np.nan\n",
    "\n",
    "            columns_order = [\n",
    "                \"Ticker\", \"Name\", \"Date\", \"Open\", \"High\", \"Low\", \"Close\",\n",
    "                \"Volume\", \"Value\", \"T Number\", \"P_t-1\", \"Shamsi\", \"M\"\n",
    "            ]\n",
    "            data = data[[c for c in columns_order if c in data.columns]]\n",
    "            all_data.append(data)\n",
    "\n",
    "        if not all_data:\n",
    "            messagebox.showinfo(\"Info\", \"No data downloaded.\")\n",
    "            return\n",
    "\n",
    "        final_df = pd.concat(all_data, ignore_index=True)\n",
    "\n",
    "        if isinstance(final_df.columns, pd.MultiIndex):\n",
    "            final_df.columns = [' '.join(map(str, col)).strip() for col in final_df.columns.values]\n",
    "\n",
    "        filepath = filedialog.asksaveasfilename(defaultextension=\".xlsx\",\n",
    "                                                filetypes=[(\"Excel files\", \"*.xlsx\")],\n",
    "                                                title=\"Save Excel File\")\n",
    "        if filepath:\n",
    "            final_df.to_excel(filepath, index=False)\n",
    "            msg = messagebox.askquestion(\"Success\", f\"Data saved to:\\n{filepath}\\n\\nDo you want to open the file?\")\n",
    "            if msg == 'yes':\n",
    "                open_file(filepath)\n",
    "            # Close button option\n",
    "            if messagebox.askyesno(\"Exit\", \"Do you want to close the program?\"):\n",
    "                root.destroy()\n",
    "\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Error\", str(e))\n",
    "\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Market Data Downloader\")\n",
    "root.geometry(\"550x520\")\n",
    "root.resizable(False, False)\n",
    "\n",
    "tk.Label(root, text=\"Start Date (YYYY-MM-DD):\").pack(anchor='w', padx=10, pady=(10,0))\n",
    "start_cal = DateEntry(root, date_pattern='yyyy-MM-dd', width=18)\n",
    "start_cal.set_date(datetime(2000, 1, 1))\n",
    "start_cal.pack(anchor='w', padx=10)\n",
    "\n",
    "tk.Label(root, text=\"End Date (YYYY-MM-DD):\").pack(anchor='w', padx=10, pady=(10,0))\n",
    "end_cal = DateEntry(root, date_pattern='yyyy-MM-dd', width=18)\n",
    "end_cal.set_date(datetime.today())\n",
    "end_cal.pack(anchor='w', padx=10)\n",
    "\n",
    "tk.Label(root, text=\"Interval:\").pack(anchor='w', padx=10, pady=(10,0))\n",
    "interval_var = tk.StringVar(value=\"1d\")\n",
    "interval_options = ['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo']\n",
    "interval_combo = ttk.Combobox(root, textvariable=interval_var, values=interval_options, state='readonly', width=10)\n",
    "interval_combo.pack(anchor='w', padx=10)\n",
    "\n",
    "tk.Label(root, text=\"Tickers (comma-separated):\").pack(anchor='w', padx=10, pady=(10,0))\n",
    "tickers_text = tk.Text(root, height=4, width=50)\n",
    "tickers_text.insert(tk.END, \"GC=F,AAPL,BTC-USD,MSFT,GOOG,TSLA,NVDA,AMZN\")\n",
    "tickers_text.pack(anchor='w', padx=10)\n",
    "\n",
    "download_btn = ttk.Button(root, text=\"Download Data\", command=download_data)\n",
    "download_btn.pack(pady=20)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "71baeb3d-7378-4314-8cfb-57b69b17a6c2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
