import telebot
import pyautogui
import keyboard
import threading
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8148077665:AAEOBjwAMJRvfegVUv_3TwnKaFTNFWB_OvQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
AUTHORIZED_USERS = []  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

bot = telebot.TeleBot(TOKEN)

class ControlState:
    def __init__(self):
        self.mouse_locked = False
        self.keyboard_locked = False
        self.block_active = False
        self.block_thread = None

state = ControlState()

def is_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return not AUTHORIZED_USERS or user_id in AUTHORIZED_USERS

def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    
    btn_up = types.KeyboardButton('‚¨ÜÔ∏è')
    btn_left = types.KeyboardButton('‚¨ÖÔ∏è')
    btn_right = types.KeyboardButton('‚û°Ô∏è')
    btn_down = types.KeyboardButton('‚¨áÔ∏è')
    btn_lmb = types.KeyboardButton('–õ–ö–ú')
    btn_rmb = types.KeyboardButton('–ü–ö–ú')
    btn_lock_mouse = types.KeyboardButton('üîí –ú—ã—à—å' if not state.mouse_locked else 'üîì –ú—ã—à—å')
    btn_lock_keyboard = types.KeyboardButton('üîí –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞' if not state.keyboard_locked else 'üîì –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞')
    
    markup.add(btn_up)
    markup.add(btn_left, btn_right)
    markup.add(btn_down)
    markup.add(btn_lmb, btn_rmb)
    markup.add(btn_lock_mouse, btn_lock_keyboard)
    
    return markup

def block_inputs():
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    while state.block_active:
        if state.mouse_locked:
            pyautogui.FAILSAFE = False
            pyautogui.moveTo(pyautogui.size().width // 2, pyautogui.size().height // 2)
        
        if state.keyboard_locked:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏ (–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
            for key in ['ctrl', 'alt', 'shift', 'win', 'tab', 'esc', 'enter', 'space']:
                keyboard.block_key(key)

@bot.message_handler(commands=['start'])
def handle_start(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    bot.send_message(
        message.chat.id,
        "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:\n"
        "‚¨ÜÔ∏è‚¨ÖÔ∏è‚¨áÔ∏è‚û°Ô∏è - –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏\n"
        "–õ–ö–ú/–ü–ö–ú - –ö–ª–∏–∫–∏ –º—ã—à–∏\n"
        "üîí –ú—ã—à—å/–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞",
        reply_markup=create_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if not is_authorized(message.from_user.id):
        return
    
    step = 20  # –®–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    
    try:
        if message.text == '‚¨ÜÔ∏è':
            pyautogui.move(0, -step)
        elif message.text == '‚¨áÔ∏è':
            pyautogui.move(0, step)
        elif message.text == '‚¨ÖÔ∏è':
            pyautogui.move(-step, 0)
        elif message.text == '‚û°Ô∏è':
            pyautogui.move(step, 0)
        elif message.text == '–õ–ö–ú':
            pyautogui.click()
        elif message.text == '–ü–ö–ú':
            pyautogui.click(button='right')
        elif message.text in ['üîí –ú—ã—à—å', 'üîì –ú—ã—à—å']:
            state.mouse_locked = not state.mouse_locked
            bot.send_message(message.chat.id, f"–ú—ã—à—å {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' if state.mouse_locked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}", 
                           reply_markup=create_keyboard())
        elif message.text in ['üîí –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 'üîì –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞']:
            state.keyboard_locked = not state.keyboard_locked
            bot.send_message(message.chat.id, f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' if state.keyboard_locked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}", 
                           reply_markup=create_keyboard())
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        if (state.mouse_locked or state.keyboard_locked) and not state.block_active:
            state.block_active = True
            state.block_thread = threading.Thread(target=block_inputs, daemon=True)
            state.block_thread.start()
        elif not state.mouse_locked and not state.keyboard_locked and state.block_active:
            state.block_active = False
            if state.block_thread:
                state.block_thread.join(timeout=1)
            keyboard.unhook_all()  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if state.block_thread:
            state.block_active = False
            state.block_thread.join(timeout=1)
        keyboard.unhook_all()
