import cloudscraper
from time import sleep
from colorama import Fore, Style, init
from pytoniq import LiteBalancer, WalletV4R2
from tonutils.client import ToncenterV3Client
from tonutils.wallet import WalletV4R2
import gradio as gr
import requests
from urllib.parse import urlparse, parse_qs
import hashlib
import platform
import subprocess
import uuid

init(autoreset=True)
scraper = cloudscraper.create_scraper()


def settings_web_app():
    def show_notification():
        gr.Success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤—Å—è —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")

    css = """
    .green-button {
      /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ */
      background-color: #4CAF50; /* –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç */
      border: none; /* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É */
      color: white; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
      padding: 12px 24px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
      text-align: center; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
      text-decoration: none; /* –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ */
      display: inline-block;
      letter-spacing: 4px;
      width: 230px !important;
      height: 230px !important;
      font-size: 18px !important;
      margin: 0 auto !important;  /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ */
      cursor: pointer; /* –ö—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ —É–∫–∞–∑–∞—Ç–µ–ª—è */
      border-radius: 12px; /* –ó–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ –∫—Ä–∞—è */
      transition: all 0.3s ease; /* –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ */
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* –¢–µ–Ω—å –¥–ª—è –æ–±—ä—ë–º–∞ */
    }

    /* –°—Ç–∏–ª–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    .green-button:hover{
      background-color: #07bb13;
      color: #050801;
      border-radius: 20px;
      box-shadow: 0px 0px 5px #07bb13, 0px 0px 25px #03e9f4, 0px 0px 50px #07bb13, 0px 0px 100px #07bb13;

    }

    /* –°—Ç–∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ (–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) */
    .green-button:active {
      border-radius: 12px;
      transform: scale(0.95); /* –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ */
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–µ–Ω–∏ */
      background-color: #3d8b40; /* –ï—â—ë —Ç–µ–º–Ω–µ–µ –∑–µ–ª—ë–Ω—ã–π */
    }
    """
    with gr.Blocks(css=css) as app:
        gr.HTML("<div style='height: 150px;'></div>")
        gr.Markdown("# üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        with gr.Row():
            collection = gr.Number(
                label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                scale=1,  # –†–∞–∑–º–µ—Ä (–º–µ–Ω—å—à–µ = –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ)
                step=1,  # –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                minimum=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            )
            character = gr.Number(
                label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞",
                scale=1,  # –†–∞–∑–º–µ—Ä (–º–µ–Ω—å—à–µ = –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ)
                step=1,  # –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                minimum=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            )
            delay = gr.Slider(
                minimum=1,
                maximum=300,
                step=1,
                label="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏",
                value=60
            )

        with gr.layouts.Column():
            mnemonics = gr.Textbox(
                label="mnemonics from TON-space",
                placeholder="car wall coin...",
                container=True,
            )
            bearer_token = gr.Textbox(
                label="Bearer token from StickerBot",
                placeholder="eyJhbGciadOi...",
                container=True,
            )
        run_btn = gr.Button(
            value="–ó–∞–ø—É—Å–∫",
            variant="primary",
            scale=3,
            elem_classes='green-button'
        )

        run_btn.click(
            fn=main,
            inputs=[collection, character, delay, mnemonics, bearer_token],
        ).then(
            show_notification,
        )
    return app


def get_google_doc_content():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Google Docs —Ñ–∞–π–ª–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        shareable_link (str): –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Docs —Ñ–∞–π–ª

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        parsed = urlparse("https://docs.google.com/document/d/1laPsA1svhmVgn9P98mrrbGmr1ENudEXBC0n_oKCmYog")
        if 'docs.google.com' not in parsed.netloc:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Google Docs")

        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫:
        # https://docs.google.com/document/d/DOC_ID/edit
        # https://docs.google.com/document/d/DOC_ID/
        path_parts = parsed.path.split('/')
        if 'd' in path_parts:
            doc_id = path_parts[path_parts.index('d') + 1]
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
            doc_id = parse_qs(parsed.query).get('id', [None])[0]
            if not doc_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏")

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        export_url = f"https://docs.google.com/document/d/{doc_id}/export?format=txt"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(export_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏

        return response.text

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ: {e}")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    return None


async def buy_sticker(amount, comment, address, mnemonics) -> None:
    client = ToncenterV3Client(is_testnet=False, rps=1, max_retries=1)
    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, mnemonics.split(' '))

    tx_hash = await wallet.transfer(
        destination=address,
        amount=amount / 10 ** 9,
        body=comment,
    )

    print('\n============================================')
    print(f"Successfully payed {amount / 10 ** 9} TON!")
    print(f"Transaction hash: {tx_hash}")
    print('============================================\n')


def get_sticker(collection, character, bearer_token):
    buy_url = f"https://api.stickerdom.store/api/v1/shop/buy/crypto?collection={collection}&character={character}&currency=TON&count=1"
    headers = {
        "Authorization": f"Bearer {bearer_token}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "Mozilla/5.0",
        "Origin": "https://stickerdom.store",
        "Referer": "https://stickerdom.store/",
    }

    response = scraper.post(buy_url, headers=headers)
    if response.status_code == 200:
        response_json = response.json()
        try:
            if response_json["errorCode"] == 'collection_not_found' or response_json[
                "errorCode"] == 'character_not_found':
                print(Fore.YELLOW + "Waiting for sticker", "collection" + str(collection), "character" + str(character))
                return False
            if response_json["errorCode"]:
                print(Fore.RED + "Error in request:", response_json["errorCode"])
                return False
        except:
            print(Fore.GREEN + "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–∫–∞–∑:")
            print(Fore.GREEN + "Order ID:", Style.BRIGHT + response_json["data"]["order_id"])
            print(Fore.GREEN + "Wallet:", response_json["data"]["wallet"])
            print(Fore.GREEN + "Currency:", response_json["data"]["currency"])
            print(Fore.GREEN + "–°—É–º–º–∞:", response_json["data"]["total_amount"] / 10 ** 9)
            sticker = {
                "wallet": response_json["data"]["wallet"],
                "comment": response_json["data"]["order_id"],
                "amount": response_json["data"]["total_amount"]
            }
            return sticker
    else:
        print(Fore.RED + "–û—à–∏–±–∫–∞:", response.status_code)
        print(Fore.RED + response.text)
        return False


async def main(collection_number, character_number, delay_secconds, mnemonics_wors, bearer):
    print(Fore.GREEN + '–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–û')
    while True:
        sticker = get_sticker(collection_number, character_number, bearer)
        if sticker:
            await buy_sticker(address=sticker["wallet"], amount=sticker['amount'], comment=sticker['comment'],
                              mnemonics=mnemonics_wors)
            break
        sleep(delay_secconds)


def hwid_web_app():
    def display_key():
        return f"""
        üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –ø—Ä–æ–¥–∞–≤—Ü—É:  
        **{create_hwid()}**
        
        (–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª—é—á–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)  
        """

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Blocks() as app:
        gr.Markdown("### üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏")
        gr.Markdown("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏:")
        key_display = gr.Markdown()
        show_key_btn = gr.Button("–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
        show_key_btn.click(display_key, outputs=key_display)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    return app


def create_hwid():
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    info = {
        "machine": platform.machine(),
        "node": platform.node(),
        "processor": platform.processor(),
        "system": platform.system(),
        "mac": ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff)
                         for ele in range(0, 8 * 6, 8)][::-1]),
        "disk": subprocess.check_output("wmic diskdrive get serialnumber", shell=True).decode().split("\n")[1].strip()
        if platform.system() == "Windows" else "",
    }

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫—É –∏ —Ö—ç—à–∏—Ä—É–µ–º
    hwid_str = "-".join([str(v) for v in info.values()])
    hwid = hashlib.sha256(hwid_str.encode()).hexdigest()

    return hwid


hwid = create_hwid()
licenses_hwids = get_google_doc_content()
if hwid in licenses_hwids:
    app = settings_web_app()
    app.launch(inbrowser=True)
else:
    app = hwid_web_app()
    app.launch(inbrowser=True)

    # made by reneget_
