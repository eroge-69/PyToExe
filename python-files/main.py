import os
import sqlite3
import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.exceptions import ChatNotFound
import openpyxl
from openpyxl import Workbook
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8356738228:AAF4LdsnsSZRvWT_a-vbVs-46HhZde-f0gI'
ADMIN_IDS = [7615176654]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SCHOOL_NAME = "56"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AuthState(StatesGroup):
    waiting_for_school = State()

class TrackSubmission(StatesGroup):
    waiting_for_link = State()
    waiting_for_title = State()
    waiting_for_file = State()

class SupportState(StatesGroup):
    waiting_for_message = State()

class AdminState(StatesGroup):
    editing_message = State()
    adding_admin = State()
    removing_admin = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        school_name TEXT,
        attempts INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        full_name TEXT,
        username TEXT,
        UNIQUE(user_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–∫–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tracks (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        data TEXT,
        type TEXT,
        status TEXT DEFAULT 'pending',
        moderator_comment TEXT,
        priority INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS support_requests (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        message TEXT,
        attachment TEXT,
        status TEXT DEFAULT 'open',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        UNIQUE(user_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY,
        key TEXT UNIQUE,
        value TEXT
    )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    default_messages = [
        ('rules', '–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–µ–Ω:\n1. –¢—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º\n2. –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞'),
        ('disco_info', '–î–∏—Å–∫–æ—Ç–µ–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É —Å 18:00 –¥–æ 22:00'),
        ('about_bot', '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–µ–Ω –Ω–∞ —à–∫–æ–ª—å–Ω—ã–µ –¥–∏—Å–∫–æ—Ç–µ–∫–∏')
    ]
    
    cursor.executemany('INSERT OR IGNORE INTO messages (key, value) VALUES (?, ?)', default_messages)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for admin_id in ADMIN_IDS:
        cursor.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (admin_id,))
    
    conn.commit()
    conn.close()

init_db()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM admins WHERE user_id = ?", (user_id,))
    admin = cursor.fetchone()
    conn.close()
    return admin is not None

def get_message(key):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT value FROM messages WHERE key = ?", (key,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

def get_tracks_count():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM tracks WHERE status = 'approved'")
    count = cursor.fetchone()[0]
    conn.close()
    return count

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é"))
    keyboard.add(KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"), KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ—Ç–µ–∫–µ"))
    keyboard.add(KeyboardButton("–û –±–æ—Ç–µ"), KeyboardButton("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return keyboard

def admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–æ–≤"), KeyboardButton("–ó–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"))
    keyboard.add(KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"))
    keyboard.add(KeyboardButton("–û—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏"), KeyboardButton("–õ–æ–≥–∏"))
    keyboard.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def track_options_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°—Å—ã–ª–∫–∞", callback_data="link"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="title"))
    keyboard.add(InlineKeyboardButton("–§–∞–π–ª", callback_data="file"))
    return keyboard

def moderation_keyboard(track_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{track_id}"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{track_id}"))
    keyboard.add(InlineKeyboardButton("üîÅ –£–∂–µ –±—ã–ª", callback_data=f"duplicate_{track_id}"))
    return keyboard

def support_keyboard(request_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{request_id}"))
    keyboard.add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{request_id}"))
    return keyboard

def message_edit_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="edit_rules"))
    keyboard.add(InlineKeyboardButton("–ò–Ω—Ñ–æ –æ –¥–∏—Å–∫–æ—Ç–µ–∫–µ", callback_data="edit_disco"))
    keyboard.add(InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="edit_about"))
    return keyboard

def admin_management_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"))
    keyboard.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"))
    return keyboard

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if not user:
        await AuthState.waiting_for_school.set()
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —à–∫–æ–ª—ã:")
    else:
        if user[4]:  # is_banned
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        else:
            if is_admin(user_id):
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_keyboard())
            else:
                tracks_count = get_tracks_count()
                await message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {tracks_count}", reply_markup=main_keyboard())
    
    conn.close()

@dp.message_handler(state=AuthState.waiting_for_school)
async def process_school(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    school_name = message.text
    attempts = 1
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    if school_name == SCHOOL_NAME:
        cursor.execute("INSERT OR REPLACE INTO users (user_id, school_name, full_name, username) VALUES (?, ?, ?, ?)",
                      (user_id, school_name, message.from_user.full_name, message.from_user.username))
        await state.finish()
        
        tracks_count = get_tracks_count()
        await message.answer(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {tracks_count}", reply_markup=main_keyboard())
    else:
        cursor.execute("SELECT attempts FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        if user:
            attempts = user[0] + 1
            if attempts >= 10:
                cursor.execute("UPDATE users SET is_banned = TRUE WHERE user_id = ?", (user_id,))
                await message.answer("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 10 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                await state.finish()
                return
            cursor.execute("UPDATE users SET attempts = ? WHERE user_id = ?", (attempts, user_id))
        else:
            cursor.execute("INSERT INTO users (user_id, school_name, attempts) VALUES (?, ?, ?)",
                          (user_id, school_name, attempts))
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã. –ü–æ–ø—ã—Ç–∫–∞ {attempts}/10")
    
    conn.commit()
    conn.close()

@dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())
    else:
        tracks_count = get_tracks_count()
        await message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {tracks_count}", reply_markup=main_keyboard())

@dp.message_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é")
async def submit_track(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_banned FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user and user[0]:
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=track_options_keyboard())
    
    conn.close()

@dp.callback_query_handler(lambda c: c.data in ['link', 'title', 'file'])
async def process_track_option(callback_query: types.CallbackQuery, state: FSMContext):
    option = callback_query.data
    if option == 'link':
        await TrackSubmission.waiting_for_link.set()
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫:")
    elif option == 'title':
        await TrackSubmission.waiting_for_title.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    elif option == 'file':
        await TrackSubmission.waiting_for_file.set()
        await bot.send_message(callback_query.from_user.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3/FLAC:")
    
    await callback_query.answer()

@dp.message_handler(state=TrackSubmission.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    link = message.text
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tracks (user_id, data, type) VALUES (?, ?, ?)", 
                  (user_id, link, 'link'))
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer("–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=main_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n–°—Å—ã–ª–∫–∞: {link}", 
                                 reply_markup=moderation_keyboard(cursor.lastrowid))
        except:
            pass

@dp.message_handler(state=TrackSubmission.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    title = message.text
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tracks (user_id, data, type) VALUES (?, ?, ?)", 
                  (user_id, title, 'title'))
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer("–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=main_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}", 
                                 reply_markup=moderation_keyboard(cursor.lastrowid))
        except:
            pass

@dp.message_handler(content_types=['audio', 'document'], state=TrackSubmission.waiting_for_file)
async def process_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.audio:
        file_id = message.audio.file_id
    elif message.document:
        if message.document.mime_type not in ['audio/mpeg', 'audio/flac']:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3 –∏–ª–∏ FLAC.")
            return
        file_id = message.document.file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tracks (user_id, data, type) VALUES (?, ?, ?)", 
                  (user_id, file_id, 'file'))
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer("–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=main_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û—Ç: {message.from_user.full_name} (@{message.from_user.username})")
            if message.audio:
                await bot.send_audio(admin_id, file_id, reply_markup=moderation_keyboard(cursor.lastrowid))
            else:
                await bot.send_document(admin_id, file_id, reply_markup=moderation_keyboard(cursor.lastrowid))
        except:
            pass

@dp.message_handler(text="–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
async def show_rules(message: types.Message):
    rules = get_message('rules')
    await message.answer(rules)

@dp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ—Ç–µ–∫–µ")
async def show_disco_info(message: types.Message):
    disco_info = get_message('disco_info')
    await message.answer(disco_info)

@dp.message_handler(text="–û –±–æ—Ç–µ")
async def show_about(message: types.Message):
    about = get_message('about_bot')
    await message.answer(about)

@dp.message_handler(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await SupportState.waiting_for_message.set()
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")

@dp.message_handler(state=SupportState.waiting_for_message, content_types=types.ContentType.ANY)
async def process_support_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    support_text = message.text or message.caption or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    attachment = None
    
    if message.photo:
        attachment = message.photo[-1].file_id
    elif message.document:
        attachment = message.document.file_id
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO support_requests (user_id, message, attachment) VALUES (?, ?, ?)", 
                  (user_id, support_text, attachment))
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=main_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            text = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n–û—Ç: {message.from_user.full_name} (@{message.from_user.username})\nID: {user_id}\n\n{support_text}"
            
            if attachment:
                if message.photo:
                    await bot.send_photo(admin_id, attachment, caption=text, reply_markup=support_keyboard(cursor.lastrowid))
                else:
                    await bot.send_document(admin_id, attachment, caption=text, reply_markup=support_keyboard(cursor.lastrowid))
            else:
                await bot.send_message(admin_id, text, reply_markup=support_keyboard(cursor.lastrowid))
        except:
            pass

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–æ–≤")
async def moderate_tracks(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tracks WHERE status = 'pending' ORDER BY created_at LIMIT 1")
    track = cursor.fetchone()
    conn.close()
    
    if not track:
        await message.answer("–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    
    track_id, user_id, data, track_type, status, moderator_comment, priority, created_at = track
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT full_name, username FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    user_info = f"{user[0]} (@{user[1]})" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    text = f"–¢—Ä–µ–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\nID: {track_id}\n–û—Ç: {user_info}\n–¢–∏–ø: {track_type}\n–î–∞—Ç–∞: {created_at}\n\n"
    
    if track_type == 'link':
        text += f"–°—Å—ã–ª–∫–∞: {data}"
    elif track_type == 'title':
        text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data}"
    
    await message.answer(text, reply_markup=moderation_keyboard(track_id))

@dp.callback_query_handler(lambda c: c.data.startswith(('approve_', 'reject_', 'duplicate_')))
async def process_moderation(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    action, track_id = callback_query.data.split('_')
    track_id = int(track_id)
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    if action == 'approve':
        cursor.execute("UPDATE tracks SET status = 'approved' WHERE id = ?", (track_id,))
        await callback_query.answer("–¢—Ä–µ–∫ –æ–¥–æ–±—Ä–µ–Ω.")
    elif action == 'reject':
        cursor.execute("UPDATE tracks SET status = 'rejected' WHERE id = ?", (track_id,))
        await callback_query.answer("–¢—Ä–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    elif action == 'duplicate':
        cursor.execute("UPDATE tracks SET status = 'duplicate', priority = priority + 1 WHERE id = ?", (track_id,))
        await callback_query.answer("–¢—Ä–µ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç.")
    
    conn.commit()
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    await moderate_tracks(callback_query.message)

@dp.message_handler(text="–ó–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def show_support_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM support_requests WHERE status = 'open' ORDER BY created_at LIMIT 1")
    request = cursor.fetchone()
    conn.close()
    
    if not request:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    request_id, user_id, request_message, attachment, status, created_at = request
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT full_name, username FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    user_info = f"{user[0]} (@{user[1]})" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    text = f"–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\nID: {request_id}\n–û—Ç: {user_info}\n–î–∞—Ç–∞: {created_at}\n\n{request_message}"
    
    if attachment:
        try:
            await bot.send_document(message.from_user.id, attachment, caption=text, reply_markup=support_keyboard(request_id))
            return
        except:
            pass
    
    await message.answer(text, reply_markup=support_keyboard(request_id))

@dp.callback_query_handler(lambda c: c.data.startswith(('reply_', 'close_')))
async def process_support_request(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    action, request_id = callback_query.data.split('_')
    request_id = int(request_id)
    
    if action == 'close':
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE support_requests SET status = 'closed' WHERE id = ?", (request_id,))
        conn.commit()
        conn.close()
        
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.")
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
        await show_support_requests(callback_query.message)
    elif action == 'reply':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤")
async def change_admins(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=admin_management_keyboard())

@dp.callback_query_handler(lambda c: c.data in ['add_admin', 'remove_admin'])
async def process_admin_management(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    if callback_query.data == 'add_admin':
        await AdminState.adding_admin.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    elif callback_query.data == 'remove_admin':
        await AdminState.removing_admin.set()
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, username FROM admins")
        admins = cursor.fetchall()
        conn.close()
        
        if not admins:
            await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        admin_list = "\n".join([f"{admin[0]} (@{admin[1]})" for admin in admins])
        await bot.send_message(callback_query.from_user.id, f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admin_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    
    await callback_query.answer()

@dp.message_handler(state=AdminState.adding_admin)
async def process_add_admin(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO admins (user_id, username) VALUES (?, ?)", 
                      (new_admin_id, message.from_user.username))
        conn.commit()
        conn.close()
        
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")

@dp.message_handler(state=AdminState.removing_admin)
async def process_remove_admin(message: types.Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM admins WHERE user_id = ?", (admin_id,))
        conn.commit()
        conn.close()
        
        await state.finish()
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!", reply_markup=admin_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")

@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
async def edit_messages(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=message_edit_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def process_edit_message(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    message_type = callback_query.data.split('_')[1]
    
    if message_type == 'rules':
        key = 'rules'
        current = get_message('rules')
    elif message_type == 'disco':
        key = 'disco_info'
        current = get_message('disco_info')
    elif message_type == 'about':
        key = 'about_bot'
        current = get_message('about_bot')
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    await AdminState.editing_message.set()
    await bot.send_message(callback_query.from_user.id, f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{current}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await dp.current_state().update_data(edit_key=key)
    await callback_query.answer()

@dp.message_handler(state=AdminState.editing_message)
async def process_message_edit(message: types.Message, state: FSMContext):
    new_text = message.text
    data = await state.get_data()
    key = data.get('edit_key')
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE messages SET value = ? WHERE key = ?", (new_text, key))
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_keyboard())

@dp.message_handler(text="–û—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏")
async def show_moderated_tracks(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tracks WHERE status = 'approved' ORDER BY priority DESC, created_at")
    tracks = cursor.fetchall()
    conn.close()
    
    if not tracks:
        await message.answer("–ù–µ—Ç –æ—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.")
        return
    
    tracks_list = "\n\n".join([f"ID: {track[0]}\n–¢–∏–ø: {track[3]}\n–î–∞–Ω–Ω—ã–µ: {track[2]}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {track[6]}\n–î–∞—Ç–∞: {track[7]}" for track in tracks])
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(tracks_list) > 4000:
        parts = [tracks_list[i:i+4000] for i in range(0, len(tracks_list), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(f"–û—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n\n{tracks_list}")

@dp.message_handler(text="–õ–æ–≥–∏")
async def export_logs(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
    wb = Workbook()
    
    # –õ–∏—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    ws_users = wb.active
    ws_users.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    
    ws_users.append(["ID", "User ID", "School", "Attempts", "Banned", "Full Name", "Username"])
    for user in users:
        ws_users.append(user)
    
    # –õ–∏—Å—Ç —Å —Ç—Ä–µ–∫–∞–º–∏
    ws_tracks = wb.create_sheet("–¢—Ä–µ–∫–∏")
    cursor.execute("SELECT * FROM tracks")
    tracks = cursor.fetchall()
    
    ws_tracks.append(["ID", "User ID", "Data", "Type", "Status", "Comment", "Priority", "Created At"])
    for track in tracks:
        ws_tracks.append(track)
    
    # –õ–∏—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    ws_support = wb.create_sheet("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    cursor.execute("SELECT * FROM support_requests")
    requests = cursor.fetchall()
    
    ws_support.append(["ID", "User ID", "Message", "Attachment", "Status", "Created At"])
    for request in requests:
        ws_support.append(request)
    
    conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f"logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    wb.save(filename)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await message.answer_document(InputFile(filename), caption="–õ–æ–≥–∏ –±–æ—Ç–∞")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)