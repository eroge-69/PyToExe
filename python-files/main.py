import xml.etree.ElementTree as ET
import pandas as pd
import csv
import random
from datetime import datetime

class TimetableConverter:
    def __init__(self):
        self.lesson_id_counter = 1
        
    def parse_complex_xml(self, xml_file):
        """
        –ü–∞—Ä—Å–∏—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É XML —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            print("XML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except FileNotFoundError:
            print("XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
            return self.create_complex_demo_timetable()
        except ET.ParseError:
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
            return self.create_complex_demo_timetable()
        
        timetable_data = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML
        for class_elem in root.findall('.//class') + root.findall('.//grade') + root.findall('.//group'):
            class_name = class_elem.get('name') or class_elem.get('id') or 'Unknown'
            
            for day_elem in class_elem.findall('day') + class_elem.findall('weekday'):
                day_name = day_elem.get('name') or day_elem.get('day') or 'Unknown'
                
                for lesson_elem in day_elem.findall('lesson') + day_elem.findall('subject'):
                    lesson_data = self.extract_lesson_data(lesson_elem, class_name, day_name)
                    if lesson_data:
                        timetable_data.append(lesson_data)
        
        return timetable_data
    
    def extract_lesson_data(self, lesson_elem, class_name, day_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ XML —ç–ª–µ–º–µ–Ω—Ç–∞"""
        lesson_number = lesson_elem.get('number') or lesson_elem.get('order') or '1'
        subject = lesson_elem.get('subject') or lesson_elem.get('name') or '–ü—Ä–µ–¥–º–µ—Ç'
        teacher = lesson_elem.get('teacher') or lesson_elem.get('teacher_name') or '–£—á–∏—Ç–µ–ª—å'
        classroom = lesson_elem.get('classroom') or lesson_elem.get('room') or '101'
        
        return {
            '–£—Ä–æ–∫_ID': self.lesson_id_counter,
            '–ö–ª–∞—Å—Å': class_name,
            '–î–µ–Ω—å': day_name,
            '–£—Ä–æ–∫': lesson_number,
            '–ü—Ä–µ–¥–º–µ—Ç': subject,
            '–£—á–∏—Ç–µ–ª—å': teacher,
            '–ö–∞–±–∏–Ω–µ—Ç': classroom
        }
        self.lesson_id_counter += 1
    
    def create_complex_demo_timetable(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¥–µ–º–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        demo_data = []
        
        classes = ["5–ê", "5–ë", "6–ê", "6–ë", "7–ê", "7–ë", "8–ê", "8–ë", "9–ê", "9–ë", "10–ê", "10–ë", "11–ê", "11–ë"]
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
        subjects = [
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", 
            "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", 
            "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
        ]
        teachers = [
            "–ò–≤–∞–Ω–æ–≤–∞ –ê.–ü.", "–ü–µ—Ç—Ä–æ–≤ –°.–ò.", "–°–∏–¥–æ—Ä–æ–≤–∞ –ú.–í.", "–ö–æ–∑–ª–æ–≤ –î.–ù.", 
            "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –ï.–°.", "–§–µ–¥–æ—Ä–æ–≤ –ü.–ö.", "–ú–æ—Ä–æ–∑–æ–≤–∞ –û.–õ.", "–í–æ–ª–∫–æ–≤ –ê.–ú."
        ]
        classrooms = ["101", "102", "103", "104", "201", "202", "203", "204", "301", "302", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–∫–æ–º–ø. –∫–ª–∞—Å—Å"]
        
        self.lesson_id_counter = 1
        
        for class_name in classes:
            for day in days:
                lessons_per_day = random.randint(5, 7)
                
                for lesson_num in range(1, lessons_per_day + 1):
                    subject = random.choice(subjects)
                    teacher = random.choice(teachers)
                    classroom = random.choice(classrooms)
                    
                    demo_data.append({
                        '–£—Ä–æ–∫_ID': self.lesson_id_counter,
                        '–ö–ª–∞—Å—Å': class_name,
                        '–î–µ–Ω—å': day,
                        '–£—Ä–æ–∫': lesson_num,
                        '–ü—Ä–µ–¥–º–µ—Ç': subject,
                        '–£—á–∏—Ç–µ–ª—å': teacher,
                        '–ö–∞–±–∏–Ω–µ—Ç': classroom
                    })
                    self.lesson_id_counter += 1
        
        return demo_data
    
    def generate_csv_timetable(self, xml_file="timetable.xml", output_file="timetable_complete.csv"):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        
        # –ü–∞—Ä—Å–∏–º XML
        timetable_data = self.parse_complex_xml(xml_file)
        
        # –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
        csv_data = []
        headers = [
            "–£—Ä–æ–∫_ID", "–ü—Ä–µ–¥–º–µ—Ç", "–ö–ª–∞—Å—Å—ã", "–ì—Ä—É–ø–ø—ã", "–£—á–∏—Ç–µ–ª—è", "–ö–∞–±–∏–Ω–µ—Ç—ã",
            "–ü–µ—Ä–∏–æ–¥–æ–≤_–≤_–∫–∞—Ä—Ç–æ—á–∫–µ", "–ü–µ—Ä–∏–æ–¥–æ–≤_–≤_–Ω–µ–¥–µ–ª—é", "–î–Ω–∏", "–ù–µ–¥–µ–ª–∏", "–°–µ–º–µ—Å—Ç—Ä—ã", "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
        ]
        csv_data.append(headers)
        
        for lesson in timetable_data:
            csv_row = [
                lesson.get('–£—Ä–æ–∫_ID', ''),
                lesson.get('–ü—Ä–µ–¥–º–µ—Ç', ''),
                lesson.get('–ö–ª–∞—Å—Å', ''),
                "",  # –ì—Ä—É–ø–ø—ã
                lesson.get('–£—á–∏—Ç–µ–ª—å', ''),
                lesson.get('–ö–∞–±–∏–Ω–µ—Ç', ''),  # –ö–∞–±–∏–Ω–µ—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
                1,   # –ü–µ—Ä–∏–æ–¥–æ–≤_–≤_–∫–∞—Ä—Ç–æ—á–∫–µ
                random.randint(1, 3),  # –ü–µ—Ä–∏–æ–¥–æ–≤_–≤_–Ω–µ–¥–µ–ª—é
                lesson.get('–î–µ–Ω—å', ''),
                random.randint(1, 4),  # –ù–µ–¥–µ–ª–∏
                random.choice([1, 2]),  # –°–µ–º–µ—Å—Ç—Ä—ã
                random.randint(20, 30)  # –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            ]
            csv_data.append(csv_row)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
            writer = csv.writer(csvfile, delimiter=';')
            writer.writerows(csv_data)
        
        print(f"\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(timetable_data)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics(timetable_data)
        
        return output_file
    
    def print_statistics(self, timetable_data):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not timetable_data:
            return
            
        classes = set(lesson['–ö–ª–∞—Å—Å'] for lesson in timetable_data if '–ö–ª–∞—Å—Å' in lesson)
        days = set(lesson['–î–µ–Ω—å'] for lesson in timetable_data if '–î–µ–Ω—å' in lesson)
        subjects = set(lesson['–ü—Ä–µ–¥–º–µ—Ç'] for lesson in timetable_data if '–ü—Ä–µ–¥–º–µ—Ç' in lesson)
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        print(f"‚Ä¢ –ö–ª–∞—Å—Å—ã: {len(classes)}")
        print(f"‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {', '.join(sorted(days))}")
        print(f"‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç—ã: {len(subjects)}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(timetable_data)}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    converter = TimetableConverter()
    converter.generate_csv_timetable()
