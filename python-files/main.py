# # # # # # # # # #-Z
# RELEASE 0.0.1a # #Z –æ—Ç 15.11.2024
# # # # # # # # # #-Z
import logging # –¥–ª—è –∑–∞–ø–∏—Å–∏
import asyncio # –æ–±—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
import aiosqlite # –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import Settings # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
import Homework # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –î–ó
import Union # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –ü—Ä–æ—Ñ—Å–æ—é–∑–∞
import Club # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–±–æ—Ç–∞ –ö–ª—É–±–∞ –°—Ç–∞–Ω–∫–∏–Ω–∞
from telebot import types # –æ—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–æ—Ç–∞
import AdvertisementFile # —Ñ–∞–π–ª —Ä–µ–∫–ª–∞–º—ã
logging.basicConfig(level=logging.INFO) # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è


@Settings.bot.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    _item1_ = types.KeyboardButton('–î/–ó')
    _item2_ = types.KeyboardButton('–ü—Ä–æ—Ñ–∫–æ–º')
    _item3_ = types.KeyboardButton('–ö–ª—É–±')
    _item4_ = types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ãüíú')  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    _item5_ = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éü§ì')

    markup.add(_item1_, _item2_, _item3_, _item4_, _item5_)
    await Settings.bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –±–æ—Ç–∞!',reply_markup=markup)

@Settings.bot.message_handler(content_types=['text'])
async def bot_message(message: types.Message):
    user_id = str(message.from_user.id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_id - —Å—Ç—Ä–æ–∫–∞

    if user_id not in Settings.user_states:
        Settings.user_states[user_id] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏

    if message.text == '–î/–ó':
        await Homework._homework_(message)

    if message.text == '–ü—Ä–æ—Ñ–∫–æ–º':
        await Union._union_(message)

    if message.text == '–ö–ª—É–±':
        await Club._club_(message)

    if message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ãüíú':
        await AdvertisementFile.toggle_subscription(user_id, message)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å‚úÖ':
        await check_role(message)
    if message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éü§ì':
        await Settings.bot.reply_to(message,"–•–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º-–ø–æ–º–æ—â–Ω–∏–∫–æ–º? "
                                   "–¢–æ–≥–¥–∞ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂–µ–º –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –µ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n\n")
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_role = await cursor.fetchone()
                user_role = ''.join(user_role)
                if user_role == 'elder' or user_role == 'admin':
                    await Settings.bot.reply_to(message, "Up")
                else:
                    await Settings.bot.reply_to(message, "Down")
                await db.commit()
    if message.text == '–ù–∞–∑–∞–¥':
        await start(message)


    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–î/–ó –∏–∑–º–µ–Ω–µ–Ω–æ')
        await Homework.refactor_homework(message, '–ò–∑–º–µ–Ω–∏—Ç—å –î/–ó')

    if message.text == '–ù–µ –º–µ–Ω—è—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç')
        await Homework.refactor_homework(message, '–ù–µ –∏–∑–º–µ–Ω—è—Ç—å –î/–ó')
    
    if message.text == '–£–¥–∞–ª–∏—Ç—å –¥–∑':
        await Settings.bot.reply_to(message, '–î/–ó —É–¥–∞–ª–µ–Ω–æ')
        await Homework.refactor_homework(message, '–£–¥–∞–ª–∏—Ç—å –î/–ó')

    
   
    if message.text == '–í—ã–≤–µ—Å—Ç–∏ –î–óüöÄ':
        Settings.user_states[user_id] = '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        await Settings.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–∑üìù':
        Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞' # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        await Settings.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∑:')

    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∑':
        Settings.user_states[user_id] = '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞'
        Settings.user_states[f'group_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await Settings.bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∑:')


    elif Settings.user_states[user_id] == '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞':
        Settings.user_states[user_id] = '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        Settings.user_states[f'group_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥–∑:")

    elif Settings.user_states[user_id] == '–ø–æ–ª—É—á–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞':
        group = Settings.user_states[f'group_{user_id}']  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
        date = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
        results = await Homework.search_in_database(group, date)
        if results:
            response = f"–°–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {date}:\n\n" + "\n".join(f"{i + 1}) {row[1]} - {row[2]}" for i, row in enumerate(results))
        else:
            response = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await Settings.bot.reply_to(message, response)
        Settings.user_states[user_id] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del Settings.user_states[f'group_{user_id}']

    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–≥—Ä—É–ø–ø–∞':
        async with aiosqlite.connect('database/datausers.db') as db:
            async with db.execute("SELECT group_of, role FROM users WHERE id = ?", (user_id,)) as cursor:
                user_data = await cursor.fetchone()
                if user_data[0] != message.text and user_data[1] == 'elder':
                    await Settings.bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
                elif (user_data[0] == message.text and user_data[1] == 'elder') or user_data[1]=='admin':
                    Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'
                    Settings.user_states[f'group_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
                    await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
            await db.commit()

    elif Settings.user_states[user_id] in ('–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–¥–∞—Ç–∞'):
        Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        Settings.user_states[f'date_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")


    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–ø—Ä–µ–¥–º–µ—Ç':
        Settings.user_states[user_id] = '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–æ–ø–∏—Å–∞–Ω–∏–µ'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        Settings.user_states[f'subject_{user_id}'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await Settings.bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")


    elif Settings.user_states[user_id] == '–¥–æ–±–∞–≤–∏—Ç—å_–î/–ó_–æ–ø–∏—Å–∞–Ω–∏–µ':
        group = Settings.user_states[f'group_{user_id}']
        date = Settings.user_states[f'date_{user_id}']
        subject = Settings.user_states[f'subject_{user_id}']
        homework = message.text
        async with aiosqlite.connect('database/datahomework.db') as db: # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π message
            async with db.execute("SELECT description FROM homework WHERE group_of =  ? AND date_of = ? AND subject = ?", (group,date,subject)) as cursor:
                if await cursor.fetchone() == None:
                    await db.commit()
                    await Homework.insert_into_database(group, date, homework, subject, user_id,message)  # user_id –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∑'), types.KeyboardButton('–ù–µ –º–µ–Ω—è—Ç—å –¥–∑'), types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –¥–∑'))
                    await Settings.bot.reply_to(message, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–ø–∏—Å–∞–Ω–Ω–æ–µ?', reply_markup = markup)
                    Settings.user_refactor_states[message.from_user.id] = group,date,subject,homework
        Settings.user_states[user_id] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for key in ['group', 'date', 'subject']:
            Settings.user_states.pop(f'{key}_{user_id}', None)

async def check_role(message):
    user_id = str(message.from_user.id)
    print(user_id)
    async with aiosqlite.connect('database/datausers.db') as db:
        async with db.execute("SELECT * FROM users WHERE id = ?", (user_id,)) as cursor:
            id = await cursor.fetchall()
    if id:
        match id[0][2]:
            case 'admin':
                text = f"–í–ê–®–ê –†–û–õ–¨ - –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n–í–ê–®–ê –ì–†–£–ü–ü–ê - {id[0][1]}"
            case 'elder':
                text = f"–í–ê–®–ê –†–û–õ–¨ - –°–¢–ê–†–û–°–¢–ê\n–í–ê–®–ê –ì–†–£–ü–ü–ê - {id[0][1]}"
            case _:
                text = '–í–´ –û–ë–´–ß–ù–´–ô –°–¢–£–î–ï–ù–¢'
    else:
        text = '–í–´ –û–ë–´–ß–ù–´–ô –°–¢–£–î–ï–ù–¢'

    await Settings.bot.reply_to(message, text)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(AdvertisementFile.send_advertisements())  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    loop.run_until_complete(Settings.bot.polling())
