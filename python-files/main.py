import customtkinter as ctk
from tkinter import filedialog, messagebox
from docx import Document
import json
import os

ctk.set_appearance_mode("system")
ctk.set_default_color_theme("blue")

class WordReplacerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üìÑ DOCX –ö–æ–Ω—Ç—Ä–∞–∫—Ç-–†–µ–¥–∞–∫—Ç–æ—Ä PRO")
        self.geometry(f"{int(self.winfo_screenwidth() * 0.85)}x{int(self.winfo_screenheight() * 0.85)}")
        self.file_path = None
        self.fields = {}
        self.create_ui()

    def create_ui(self):
        self.sidebar = ctk.CTkFrame(self, width=200)
        self.sidebar.pack(side="left", fill="y", padx=5, pady=5)

        self.btn_open = ctk.CTkButton(self.sidebar, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å DOCX", command=self.load_file)
        self.btn_open.pack(pady=10)

        self.btn_save = ctk.CTkButton(self.sidebar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DOCX", command=self.replace_doc)
        self.btn_save.pack(pady=10)

        self.btn_clear = ctk.CTkButton(self.sidebar, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", command=self.clear_fields)
        self.btn_clear.pack(pady=10)

        self.btn_template_save = ctk.CTkButton(self.sidebar, text="üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", command=self.save_template)
        self.btn_template_save.pack(pady=10)

        self.btn_template_load = ctk.CTkButton(self.sidebar, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω", command=self.load_template)
        self.btn_template_load.pack(pady=10)

        self.btn_theme = ctk.CTkButton(self.sidebar, text="üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", command=self.toggle_theme)
        self.btn_theme.pack(pady=10)

        self.main_area = ctk.CTkScrollableFrame(self, width=1000, height=800)
        self.main_area.pack(side="right", expand=True, fill="both", padx=10, pady=10)

        self.theme = "light"

        sections = {
            "–û–±—â–∏–µ": ["–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã", "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"],
            "SELLER": ["SELLER –Ω–∞–∑–≤–∞–Ω–∏–µ", "SELLER –∞–¥—Ä–µ—Å", "SELLER –±–∞–Ω–∫", "SELLER SWIFT", "SELLER —Å—á–µ—Ç"],
            "BUYER": ["BUYER –Ω–∞–∑–≤–∞–Ω–∏–µ", "BUYER –∞–¥—Ä–µ—Å", "BUYER –±–∞–Ω–∫", "BUYER SWIFT", "BUYER —Å—á–µ—Ç"],
            "–¢–æ–≤–∞—Ä": ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "VIN", "HS –∫–æ–¥", "–°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"]
        }

        for section, labels in sections.items():
            ctk.CTkLabel(self.main_area, text=f"üìå {section}", font=ctk.CTkFont(size=18, weight="bold")).pack(anchor="w", pady=10)
            for label in labels:
                ctk.CTkLabel(self.main_area, text=label).pack(anchor="w", pady=(2, 0))
                entry = ctk.CTkEntry(self.main_area, width=700)
                entry.pack(pady=2)
                self.fields[label] = entry

    def toggle_theme(self):
        self.theme = "dark" if self.theme == "light" else "light"
        ctk.set_appearance_mode(self.theme)

    def clear_fields(self):
        for field in self.fields.values():
            field.delete(0, ctk.END)

    def load_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("Word Documents", "*.docx")])
        if self.file_path:
            messagebox.showinfo("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", f"–§–∞–π–ª:\n{os.path.basename(self.file_path)}")

    def deep_replace_text(self, element, replacements):
        for p in element:
            full_text = "".join(run.text for run in p.runs)
            for old, new in replacements.items():
                if old in full_text:
                    full_text = full_text.replace(old, new)
            if p.runs:
                p.runs[0].text = full_text
                for run in p.runs[1:]:
                    run.text = ""

    def replace_doc(self):
        if not self.file_path:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª.")
            return

        doc = Document(self.file_path)
        replacements = {
            "YG20250703Y01-1": self.fields["–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"].get(),
            "Ningbo Yonggang Logistics Co., LTD.": self.fields["SELLER –Ω–∞–∑–≤–∞–Ω–∏–µ"].get(),
            "Beilun, Ningbo No.1, Building 1, No. 17 Haifa Road, BaIfeng": self.fields["SELLER –∞–¥—Ä–µ—Å"].get(),
            "BANK OF COMMUNICATIONS": self.fields["SELLER –±–∞–Ω–∫"].get(),
            "COMMCNSHNBO": self.fields["SELLER SWIFT"].get(),
            "332006282143000006795": self.fields["SELLER —Å—á–µ—Ç"].get(),
            "Gou Grupp KG": self.fields["BUYER –Ω–∞–∑–≤–∞–Ω–∏–µ"].get(),
            "–û—Å–û–û –ì–æ—É –ì—Ä—É–ø–ø –ö–µ–π –î–∂–∏": self.fields["BUYER –Ω–∞–∑–≤–∞–Ω–∏–µ"].get(),
            "K. Akiev st. 95, office 18": self.fields["BUYER –∞–¥—Ä–µ—Å"].get(),
            "–ö.–ê–∫–∏–µ–≤–∞ 95,–æ—Ñ 18": self.fields["BUYER –∞–¥—Ä–µ—Å"].get(),
            "–û–ê–û ¬´–ê–π—ã–ª –ë–∞–Ω–∫¬ª": self.fields["BUYER –±–∞–Ω–∫"].get(),
            "OJSC \\\" –êyil bank\\\"": self.fields["BUYER –±–∞–Ω–∫"].get(),
            "AIYLKG22": self.fields["BUYER SWIFT"].get(),
            "1350140020096039": self.fields["BUYER —Å—á–µ—Ç"].get(),
            "VOYAH FREE 2024 210KM 4WD Ultra-Long Range Intelligent Driving Edition": self.fields["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"].get(),
            "VIN:LDP95H962PE310334": "VIN:" + self.fields["VIN"].get(),
            "8703 23 908 9": self.fields["HS –∫–æ–¥"].get(),
            "21 400,00 USD": self.fields["–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].get(),
            "21 400 USD": self.fields["–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].get(),
            "21 400.": self.fields["–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].get().replace(",", "."),
            "20 000,00 USD": self.fields["–°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã"].get(),
            "–î–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞ —á–µ—Ç—ã—Ä–µ—Å—Ç–∞.": "",
            "Twenty one thousand four hundred.": "",
        }

        self.deep_replace_text(doc.paragraphs, replacements)

        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    self.deep_replace_text(cell.paragraphs, replacements)

        save_path = filedialog.asksaveasfilename(defaultextension=".docx", filetypes=[("Word Document", "*.docx")])
        if save_path:
            doc.save(save_path)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{save_path}")

    def save_template(self):
        data = {label: entry.get() for label, entry in self.fields.items()}
        path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON", "*.json")])
        if path:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    def load_template(self):
        path = filedialog.askopenfilename(filetypes=[("JSON", "*.json")])
        if path:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            for label, value in data.items():
                if label in self.fields:
                    self.fields[label].delete(0, ctk.END)
                    self.fields[label].insert(0, value)
            messagebox.showinfo("–ó–∞–≥—Ä—É–∂–µ–Ω–æ", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

if __name__ == "__main__":
    app = WordReplacerApp()
    app.mainloop()