import flet as ft
import sys
import os
import random
import string
import logging
import bcrypt
import mysql.connector
from datetime import datetime
from typing import Optional, Dict, List

# === –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
DB_CONFIG = {
    "host": "46.174.50.7",
    "user": "u39635_staff",
    "password": "Milky2207!",
    "database": "u39635_academy"
}

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
def setup_logging():
    try:
        LOG_FILE = "app.log"
        logging.basicConfig(
            filename=LOG_FILE,
            level=logging.INFO,
            format="%(asctime)s | %(levelname)s | %(message)s",
            encoding="utf-8"
        )
        logging.info("=== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ ===")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï ===
def connect_db():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return None

# === –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ ===
def initialize_database():
    try:
        conn = connect_db()
        if not conn:
            return False
            
        cursor = conn.cursor()

        cursor.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(64) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            is_superadmin BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)

        cursor.execute("""
        CREATE TABLE IF NOT EXISTS licenses (
            id INT AUTO_INCREMENT PRIMARY KEY,
            license_number VARCHAR(64) UNIQUE NOT NULL,
            name VARCHAR(128) NOT NULL,
            level VARCHAR(64),
            certificate_url TEXT,
            issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """)

        cursor.execute("""
        CREATE TABLE IF NOT EXISTS license_categories (
            id INT AUTO_INCREMENT PRIMARY KEY,
            license_id INT NOT NULL,
            category_name VARCHAR(64) NOT NULL,
            FOREIGN KEY (license_id) REFERENCES licenses(id) ON DELETE CASCADE
        );
        """)

        cursor.execute("SELECT * FROM admins WHERE username='admin'")
        if not cursor.fetchone():
            pw_hash = bcrypt.hashpw(b"password123", bcrypt.gensalt()).decode()
            cursor.execute(
                "INSERT INTO admins (username, password_hash, is_superadmin) VALUES (%s, %s, %s)",
                ("admin", pw_hash, True)
            )
            conn.commit()
            logging.info("–°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å –ø–∞—Ä–æ–ª–µ–º password123")

        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
        return False

# === –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
class AcademyApp:
    def __init__(self):
        self.current_user = None
        self.page = None
        self.navigation_rail = None
        self.content_area = None
        self.current_view = None
        
    def main(self, page: ft.Page):
        self.page = page
        self.setup_page()
        self.show_login()
        
    def setup_page(self):
        self.page.title = "üéì Admin Academy"
        self.page.theme_mode = ft.ThemeMode.DARK
        self.page.padding = 0
        self.page.window.width = 1200
        self.page.window.height = 700
        self.page.window.min_width = 1000
        self.page.window.min_height = 600
        
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
        username_field = ft.TextField(
            label="–õ–æ–≥–∏–Ω",
            prefix_icon=ft.Icons.PERSON,
            width=300
        )
        
        password_field = ft.TextField(
            label="–ü–∞—Ä–æ–ª—å",
            password=True,
            can_reveal_password=True,
            prefix_icon=ft.Icons.LOCK,
            width=300
        )
        
        def login_click(e):
            username = username_field.value.strip()
            password = password_field.value.strip()
            
            if not username or not password:
                self.show_snackbar("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
                return
                
            conn = connect_db()
            if not conn:
                self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            try:
                cursor = conn.cursor(dictionary=True)
                cursor.execute("SELECT * FROM admins WHERE username=%s", (username,))
                user = cursor.fetchone()
                cursor.close()

                if user and bcrypt.checkpw(password.encode(), user["password_hash"].encode()):
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É.")
                    self.current_user = user
                    self.show_main_layout()
                else:
                    logging.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")
                    self.show_snackbar("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
                self.show_snackbar(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            finally:
                conn.close()
        
        login_content = ft.Container(
            content=ft.Column(
                [
                    ft.Text(
                        "üéì Admin Academy",
                        size=32,
                        weight=ft.FontWeight.BOLD,
                        text_align=ft.TextAlign.CENTER
                    ),
                    ft.Container(height=20),
                    username_field,
                    password_field,
                    ft.Container(height=10),
                    ft.FilledButton(
                        "–í–æ–π—Ç–∏",
                        on_click=login_click,
                        width=300
                    )
                ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            ),
            alignment=ft.alignment.center,
            expand=True
        )
        
        self.page.clean()
        self.page.add(login_content)
        
    def show_main_layout(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        self.create_navigation()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_area = ft.Container(expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = self.create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout = ft.Row(
            [
                self.navigation_rail,
                ft.VerticalDivider(width=1),
                ft.Column(
                    [
                        header,
                        ft.Divider(height=1),
                        self.content_area
                    ],
                    expand=True,
                    spacing=0
                )
            ],
            expand=True
        )
        
        self.page.clean()
        self.page.add(main_layout)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.show_add_license()
        
    def create_header(self):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        role = "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" if self.current_user["is_superadmin"] else "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"
        
        return ft.Container(
            content=ft.Row(
                [
                    ft.Text(
                        f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {role} ({self.current_user['username']})",
                        size=16,
                        weight=ft.FontWeight.BOLD
                    ),
                    ft.Container(expand=True),
                    ft.FilledButton(
                        "üö™ –í—ã–π—Ç–∏",
                        on_click=self.logout,
                        style=ft.ButtonStyle(
                            color=ft.Colors.WHITE,
                            bgcolor=ft.Colors.RED_400
                        )
                    )
                ]
            ),
            padding=15,
            bgcolor=ft.Colors.GREY_900
        )
        
    def create_navigation(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        nav_items = [
            ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", ft.Icons.ADD_CIRCLE_OUTLINE),
            ("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", ft.Icons.SEARCH),
            ("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", ft.Icons.DELETE_OUTLINE),
            ("üìã –°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–π", ft.Icons.LIST_ALT),
            ("üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", ft.Icons.CATEGORY),
        ]
        
        if self.current_user["is_superadmin"]:
            nav_items.append(("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", ft.Icons.ADMIN_PANEL_SETTINGS))
            
        self.navigation_rail = ft.NavigationRail(
            selected_index=0,
            label_type=ft.NavigationRailLabelType.ALL,
            min_width=100,
            min_extended_width=200,
            group_alignment=-0.9,
            destinations=[
                ft.NavigationRailDestination(
                    icon=icon,
                    selected_icon=icon,
                    label=label,
                ) for label, icon in nav_items
            ],
            on_change=self.on_navigation_change,
            expand=True,
        )
        
    def on_navigation_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        index = e.control.selected_index
        views = [
            self.show_add_license,
            self.show_check_license,
            self.show_delete_license,
            self.show_list_licenses,
            self.show_categories,
        ]
        
        if self.current_user["is_superadmin"]:
            views.append(self.show_manage_admins)
            
        if index < len(views):
            views[index]()
            
    def show_add_license(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        name_field = ft.TextField(label="–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞", expand=True)
        level_field = ft.TextField(label="–£—Ä–æ–≤–µ–Ω—å", expand=True)
        url_field = ft.TextField(label="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (URL)", expand=True)
        result_text = ft.Text()
        
        def add_license(e):
            try:
                conn = connect_db()
                if not conn:
                    self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                    
                license_num = "AA-" + ''.join(random.choices(string.ascii_uppercase, k=4)) + "-" + ''.join(random.choices(string.digits, k=4))
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO licenses (license_number, name, level, certificate_url) VALUES (%s, %s, %s, %s)",
                    (license_num, name_field.value, level_field.value, url_field.value)
                )
                conn.commit()
                cursor.close()
                conn.close()
                
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è {license_num} –¥–ª—è {name_field.value}")
                result_text.value = f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è {license_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                result_text.color = ft.Colors.GREEN
                
                # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
                name_field.value = ""
                level_field.value = ""
                url_field.value = ""
                
                self.content_area.update()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
                result_text.value = f"‚ùå –û—à–∏–±–∫–∞: {e}"
                result_text.color = ft.Colors.RED
                self.content_area.update()
        
        content = ft.Column(
            [
                ft.Text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                name_field,
                ft.Container(height=10),
                level_field,
                ft.Container(height=10),
                url_field,
                ft.Container(height=20),
                ft.FilledButton("–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", on_click=add_license),
                ft.Container(height=20),
                result_text
            ],
            scroll=ft.ScrollMode.ADAPTIVE
        )
        
        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()
        
    def show_check_license(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        license_field = ft.TextField(
            label="–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏",
            hint_text="AA-XXXX-1234",
            prefix_icon=ft.Icons.SEARCH,
            expand=True
        )
        result_text = ft.Text()
        
        def check_license(e):
            code = license_field.value.strip()
            if not code:
                self.show_snackbar("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏")
                return
                
            conn = connect_db()
            if not conn:
                self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            try:
                cursor = conn.cursor(dictionary=True)
                cursor.execute("SELECT * FROM licenses WHERE license_number=%s", (code,))
                data = cursor.fetchone()
                
                if not data:
                    result_text.value = "‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    result_text.color = ft.Colors.RED
                else:
                    cursor.execute("SELECT category_name FROM license_categories WHERE license_id=%s", (data["id"],))
                    cats = [r["category_name"] for r in cursor.fetchall()]
                    cats_str = ", ".join(cats) if cats else "‚Äî"
                    
                    result_text.value = (
                        f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞–π–¥–µ–Ω–∞!\n\n"
                        f"üë§ –ò–º—è: {data['name']}\n"
                        f"üìú –£—Ä–æ–≤–µ–Ω—å: {data['level']}\n"
                        f"üî¢ –ù–æ–º–µ—Ä: {data['license_number']}\n"
                        f"üïí –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {data['issued_at']}\n"
                        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats_str}\n"
                        f"üñº –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {data['certificate_url'] or '‚Äî'}"
                    )
                    result_text.color = ft.Colors.GREEN
                    
                cursor.close()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
                result_text.value = f"‚ùå –û—à–∏–±–∫–∞: {e}"
                result_text.color = ft.Colors.RED
            finally:
                conn.close()
                self.content_area.update()
        
        content = ft.Column(
            [
                ft.Text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                ft.Row([license_field]),
                ft.Container(height=10),
                ft.FilledButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", on_click=check_license),
                ft.Container(height=20),
                result_text
            ],
            scroll=ft.ScrollMode.ADAPTIVE
        )
        
        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()
        
    def show_delete_license(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        license_field = ft.TextField(
            label="–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            prefix_icon=ft.Icons.WARNING_AMBER,
            expand=True
        )
        result_text = ft.Text()
        
        def delete_license(e):
            code = license_field.value.strip()
            if not code:
                self.show_snackbar("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏")
                return
                
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            def confirm_delete(e):
                conn = connect_db()
                if not conn:
                    self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                    
                try:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM licenses WHERE license_number=%s", (code,))
                    conn.commit()
                    deleted = cursor.rowcount
                    cursor.close()
                    
                    if deleted:
                        logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è {code}")
                        result_text.value = "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
                        result_text.color = ft.Colors.GREEN
                        license_field.value = ""
                    else:
                        result_text.value = "‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        result_text.color = ft.Colors.RED
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
                    result_text.value = f"‚ùå –û—à–∏–±–∫–∞: {e}"
                    result_text.color = ft.Colors.RED
                finally:
                    conn.close()
                    self.content_area.update()
                    self.page.close(dialog)
            
            dialog = ft.AlertDialog(
                title=ft.Text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"),
                content=ft.Text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é {code}?"),
                actions=[
                    ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: self.page.close(dialog)),
                    ft.TextButton("–£–¥–∞–ª–∏—Ç—å", on_click=confirm_delete, style=ft.ButtonStyle(color=ft.Colors.RED)),
                ],
            )
            self.page.open(dialog)
        
        content = ft.Column(
            [
                ft.Text("–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                ft.Row([license_field]),
                ft.Container(height=10),
                ft.FilledButton(
                    "–£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", 
                    on_click=delete_license,
                    style=ft.ButtonStyle(color=ft.Colors.WHITE, bgcolor=ft.Colors.RED)
                ),
                ft.Container(height=20),
                result_text
            ],
            scroll=ft.ScrollMode.ADAPTIVE
        )
        
        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()
        
    def show_list_licenses(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Ü–µ–Ω–∑–∏–π"""

        # üëá —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –æ–¥–Ω–æ–π "–≤—Ä–µ–º–µ–Ω–Ω–æ–π" –∫–æ–ª–æ–Ω–∫–æ–π
        data_table = ft.DataTable(
            columns=[ft.DataColumn(ft.Text("–ó–∞–≥—Ä—É–∑–∫–∞..."))],
            rows=[]
        )

        def load_initial_data():
            self.load_licenses_data(data_table)

        refresh_button = ft.FilledButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            on_click=lambda e: self.load_licenses_data(data_table)
        )

        content = ft.Column(
            [
                ft.Text("–°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–π", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                refresh_button,
                ft.Container(height=20),
                ft.Container(
                    content=ft.Column([data_table], scroll=ft.ScrollMode.ADAPTIVE),
                    expand=True
                )
            ],
            expand=True
        )

        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()

        # üëá –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        load_initial_data()
        
    def load_licenses_data(self, data_table):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            conn = connect_db()
            if not conn:
                self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT license_number, name, level, issued_at FROM licenses ORDER BY issued_at DESC")
            rows = cursor.fetchall()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            data_table.columns = [
                ft.DataColumn(ft.Text("–ù–æ–º–µ—Ä")),
                ft.DataColumn(ft.Text("–ò–º—è")),
                ft.DataColumn(ft.Text("–£—Ä–æ–≤–µ–Ω—å")),
                ft.DataColumn(ft.Text("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏")),
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            data_table.rows = []
            for row in rows:
                data_table.rows.append(
                    ft.DataRow(
                        cells=[
                            ft.DataCell(ft.Text(row["license_number"])),
                            ft.DataCell(ft.Text(row["name"])),
                            ft.DataCell(ft.Text(row["level"] or "")),
                            ft.DataCell(ft.Text(str(row["issued_at"]))),
                        ]
                    )
                )
                
            cursor.close()
            conn.close()
            self.content_area.update()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.show_snackbar(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def show_categories(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        license_field = ft.TextField(label="–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏", expand=True)
        category_field = ft.TextField(label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", expand=True)
        result_text = ft.Text()
        
        def add_category(e):
            code = license_field.value.strip()
            category = category_field.value.strip()
            
            if not code or not category:
                self.show_snackbar("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return
                
            conn = connect_db()
            if not conn:
                self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            try:
                cur = conn.cursor(dictionary=True)
                cur.execute("SELECT id FROM licenses WHERE license_number=%s", (code,))
                row = cur.fetchone()
                
                if not row:
                    result_text.value = "‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    result_text.color = ft.Colors.RED
                else:
                    cur.execute("INSERT INTO license_categories (license_id, category_name) VALUES (%s,%s)", (row["id"], category))
                    conn.commit()
                    result_text.value = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                    result_text.color = ft.Colors.GREEN
                    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∫ {code}")
                    
                    # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
                    license_field.value = ""
                    category_field.value = ""
                    
                cur.close()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                result_text.value = f"‚ùå –û—à–∏–±–∫–∞: {e}"
                result_text.color = ft.Colors.RED
            finally:
                conn.close()
                self.content_area.update()
        
        content = ft.Column(
            [
                ft.Text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                license_field,
                ft.Container(height=10),
                category_field,
                ft.Container(height=20),
                ft.FilledButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", on_click=add_category),
                ft.Container(height=20),
                result_text
            ],
            scroll=ft.ScrollMode.ADAPTIVE
        )
        
        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()
        
    def show_manage_admins(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤)"""
        if not self.current_user["is_superadmin"]:
            self.show_snackbar("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return

        username_field = ft.TextField(label="–õ–æ–≥–∏–Ω", expand=True)
        password_field = ft.TextField(label="–ü–∞—Ä–æ–ª—å", password=True, expand=True)
        role_field = ft.Dropdown(
            label="–†–æ–ª—å",
            options=[
                ft.dropdown.Option("0", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
                ft.dropdown.Option("1", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"),
            ],
            value="0",
            expand=True
        )

        # üëá –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∏–¥–∏–º—É—é –∫–æ–ª–æ–Ω–∫—É
        admins_table = ft.DataTable(
            columns=[ft.DataColumn(ft.Text("–ó–∞–≥—Ä—É–∑–∫–∞..."))],
            rows=[]
        )
        
        def load_admins():
            try:
                conn = connect_db()
                if not conn:
                    return
                    
                cur = conn.cursor(dictionary=True)
                cur.execute("SELECT id, username, is_superadmin, created_at FROM admins")
                rows = cur.fetchall()
                
                admins_table.columns = [
                    ft.DataColumn(ft.Text("ID")),
                    ft.DataColumn(ft.Text("–õ–æ–≥–∏–Ω")),
                    ft.DataColumn(ft.Text("–†–æ–ª—å")),
                    ft.DataColumn(ft.Text("–°–æ–∑–¥–∞–Ω")),
                ]
                
                admins_table.rows = []
                for row in rows:
                    role = "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" if row["is_superadmin"] else "üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"
                    admins_table.rows.append(
                        ft.DataRow(
                            cells=[
                                ft.DataCell(ft.Text(str(row["id"]))),
                                ft.DataCell(ft.Text(row["username"])),
                                ft.DataCell(ft.Text(role)),
                                ft.DataCell(ft.Text(str(row["created_at"]))),
                            ]
                        )
                    )
                    
                cur.close()
                conn.close()
                self.content_area.update()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
                
        def add_admin(e):
            username = username_field.value.strip()
            password = password_field.value.strip()
            
            if not username or not password:
                self.show_snackbar("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
                return
                
            conn = connect_db()
            if not conn:
                self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            try:
                cur = conn.cursor()
                cur.execute("SELECT id FROM admins WHERE username=%s", (username,))
                if cur.fetchone():
                    self.show_snackbar("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    pw_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
                    is_superadmin = role_field.value == "1"
                    cur.execute("INSERT INTO admins (username,password_hash,is_superadmin) VALUES (%s,%s,%s)", 
                               (username, pw_hash, is_superadmin))
                    conn.commit()
                    self.show_snackbar("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
                    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}")
                    
                    # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                    username_field.value = ""
                    password_field.value = ""
                    load_admins()
                    
                cur.close()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                self.show_snackbar(f"–û—à–∏–±–∫–∞: {e}")
            finally:
                conn.close()
        
        content = ft.Column(
            [
                ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", size=24, weight=ft.FontWeight.BOLD),
                ft.Container(height=20),
                ft.Text("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", size=16, weight=ft.FontWeight.BOLD),
                ft.Row([username_field, password_field, role_field]),
                ft.Container(height=10),
                ft.FilledButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", on_click=add_admin),
                ft.Container(height=30),
                ft.Text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", size=16, weight=ft.FontWeight.BOLD),
                ft.Container(height=10),
                ft.Container(
                    content=ft.Column([admins_table], scroll=ft.ScrollMode.ADAPTIVE),
                    expand=True
                )
            ],
            expand=True
        )
        
        self.content_area.content = ft.Container(content, padding=20, expand=True)
        self.content_area.update()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        load_admins()
        
    def logout(self, e):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.current_user['username']} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        self.current_user = None
        self.show_login()
        
    def show_snackbar(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.page.snack_bar = ft.SnackBar(ft.Text(message))
        self.page.snack_bar.open = True
        self.page.update()

# === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
if __name__ == "__main__":
    import traceback

    try:
        # –î–ª—è PyInstaller
        if getattr(sys, 'frozen', False):
            os.chdir(sys._MEIPASS)

        setup_logging()
        logging.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")

        if not initialize_database():
            logging.critical("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            sys.exit(1)

        app = AcademyApp()
        ft.app(target=app.main)

    except Exception as e:
        tb = traceback.format_exc()
        with open("crash.log", "w", encoding="utf-8") as f:
            f.write(tb)
        print(tb)
        sys.exit(1)