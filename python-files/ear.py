import pyaudio
import wave
import numpy as np
from datetime import datetime
from pydub import AudioSegment
import os

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Å—É
CHUNK = 1024          # —Ä–æ–∑–º—ñ—Ä –±–ª–æ–∫—É —Å–µ–º–ø–ª—ñ–≤
FORMAT = pyaudio.paInt16
CHANNELS = 1          # –º–æ–Ω–æ
RATE = 44100          # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó
SILENCE_THRESHOLD = 500  # –ø–æ—Ä—ñ–≥ —Ç–∏—à—ñ (—Ä–µ–≥—É–ª—é–π –ø—ñ–¥ —Å–µ–±–µ)
SILENCE_CHUNKS = 30      # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–ª–æ–∫—ñ–≤ —Ç–∏—à—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É (~0.7 —Å–µ–∫)

def listen_and_record():
    audio = pyaudio.PyAudio()
    stream = audio.open(format=FORMAT, channels=CHANNELS,
                        rate=RATE, input=True,
                        frames_per_buffer=CHUNK)

    print("–ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ...")

    while True:
        frames = []
        silence_counter = 0

        # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –∑–≤—É–∫
        while True:
            data = stream.read(CHUNK)
            audio_data = np.frombuffer(data, dtype=np.int16)
            volume = np.abs(audio_data).mean()

            if volume > SILENCE_THRESHOLD:
                print("üîä –ó–≤—É–∫ –≤–∏—è–≤–ª–µ–Ω–æ, –∑–∞–ø–∏—Å...")
                frames.append(data)
                break

        # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–∫–∏ —î –∑–≤—É–∫
        while True:
            data = stream.read(CHUNK)
            frames.append(data)
            audio_data = np.frombuffer(data, dtype=np.int16)
            volume = np.abs(audio_data).mean()

            if volume < SILENCE_THRESHOLD:
                silence_counter += 1
                if silence_counter > SILENCE_CHUNKS:
                    break
            else:
                silence_counter = 0

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ WAV —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        wav_filename = f"{timestamp}.wav"
        with wave.open(wav_filename, 'wb') as wf:
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(audio.get_sample_size(FORMAT))
            wf.setframerate(RATE)
            wf.writeframes(b''.join(frames))

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É MP3
        mp3_filename = wav_filename.replace(".wav", ".mp3")
        sound = AudioSegment.from_wav(wav_filename)
        sound.export(mp3_filename, format="mp3")
        os.remove(wav_filename)

        print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ: {mp3_filename}")

if __name__ == "__main__":
    listen_and_record()
