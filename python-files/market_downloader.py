{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99ac008b-daa2-453d-bac1-9de2ea502241",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tkinter as tk\n",
    "from tkinter import filedialog, messagebox\n",
    "\n",
    "def download_data():\n",
    "    start_date = start_entry.get().strip()\n",
    "    end_date = end_entry.get().strip()\n",
    "    interval = interval_entry.get().strip()\n",
    "    tickers_input = tickers_entry.get().strip()\n",
    "    output_path = path_entry.get().strip()\n",
    "\n",
    "    if not all([start_date, end_date, interval, tickers_input, output_path]):\n",
    "        messagebox.showerror(\"Input Error\", \"Please fill in all fields.\")\n",
    "        return\n",
    "\n",
    "    tickers = [t.strip() for t in tickers_input.split(\",\") if t.strip()]\n",
    "    daily_intervals = [\"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\"]\n",
    "    all_data = []\n",
    "\n",
    "    for ticker in tickers:\n",
    "        print(f\"Downloading: {ticker}\")\n",
    "        data = yf.download(ticker, start=start_date, end=end_date, interval=interval)\n",
    "\n",
    "        if data.empty:\n",
    "            print(f\"⚠️ No data for {ticker}\")\n",
    "            continue\n",
    "\n",
    "        if isinstance(data.columns, pd.MultiIndex):\n",
    "            data.columns = [' '.join(col).strip() for col in data.columns.values]\n",
    "\n",
    "        data = data.reset_index()\n",
    "\n",
    "        if 'Date' in data.columns:\n",
    "            if pd.api.types.is_integer_dtype(data[\"Date\"]) or \\\n",
    "               (pd.api.types.is_object_dtype(data[\"Date\"]) and data[\"Date\"].astype(str).str.match(r'^\\d{8}$').all()):\n",
    "                data[\"Date\"] = pd.to_datetime(data[\"Date\"].astype(str), format='%Y%m%d')\n",
    "\n",
    "        data.insert(0, \"Ticker\", ticker)\n",
    "\n",
    "        rename_map = {\n",
    "            f\"Open {ticker}\": \"Open\",\n",
    "            f\"High {ticker}\": \"High\",\n",
    "            f\"Low {ticker}\": \"Low\",\n",
    "            f\"Close {ticker}\": \"Close\",\n",
    "            f\"Adj Close {ticker}\": \"Adj Close\",\n",
    "            f\"Volume {ticker}\": \"Volume\"\n",
    "        }\n",
    "        data.rename(columns=rename_map, inplace=True)\n",
    "\n",
    "        if interval in daily_intervals:\n",
    "            data[\"Date\"] = pd.to_datetime(data[\"Date\"]).dt.date\n",
    "            data[\"M\"] = np.nan\n",
    "        else:\n",
    "            data[\"DateTime\"] = pd.to_datetime(data[\"Date\"])\n",
    "            data[\"Date\"] = data[\"DateTime\"].dt.date\n",
    "            data[\"M\"] = data[\"DateTime\"].dt.strftime(\"%H:%M\")\n",
    "\n",
    "        for col in [\"Name\", \"Value\", \"T Number\", \"P_t-1\", \"Shamsi\"]:\n",
    "            data[col] = np.nan\n",
    "\n",
    "        columns_order = [\n",
    "            \"Ticker\", \"Name\", \"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\",\n",
    "            \"Value\", \"T Number\", \"P_t-1\", \"Shamsi\", \"M\"\n",
    "        ]\n",
    "        data = data[[c for c in columns_order if c in data.columns]]\n",
    "        all_data.append(data)\n",
    "\n",
    "    if all_data:\n",
    "        final_df = pd.concat(all_data, ignore_index=True)\n",
    "        save_path = output_path + \"/MarketData.xlsx\"\n",
    "        final_df.to_excel(save_path, index=False)\n",
    "        messagebox.showinfo(\"Success\", f\"✅ Data saved to: {save_path}\")\n",
    "    else:\n",
    "        messagebox.showerror(\"No Data\", \"No data downloaded. Check inputs.\")\n",
    "\n",
    "# GUI Setup\n",
    "app = tk.Tk()\n",
    "app.title(\"Market Data Downloader\")\n",
    "app.geometry(\"500x400\")\n",
    "app.resizable(False, False)\n",
    "\n",
    "tk.Label(app, text=\"Start Date (YYYY-MM-DD):\").pack(pady=5)\n",
    "start_entry = tk.Entry(app, width=40)\n",
    "start_entry.insert(0, \"2000-01-01\")\n",
    "start_entry.pack()\n",
    "\n",
    "tk.Label(app, text=\"End Date (YYYY-MM-DD):\").pack(pady=5)\n",
    "end_entry = tk.Entry(app, width=40)\n",
    "end_entry.insert(0, \"2025-07-30\")\n",
    "end_entry.pack()\n",
    "\n",
    "tk.Label(app, text=\"Interval (e.g., 1d, 1wk, 5m):\").pack(pady=5)\n",
    "interval_entry = tk.Entry(app, width=40)\n",
    "interval_entry.insert(0, \"1d\")\n",
    "interval_entry.pack()\n",
    "\n",
    "tk.Label(app, text=\"Tickers (comma separated):\").pack(pady=5)\n",
    "tickers_entry = tk.Entry(app, width=60)\n",
    "tickers_entry.insert(0, \"GC=F,AAPL,BTC-USD,MSFT,GOOG,TSLA,NVDA,AMZN,META,BRK-B,JPM,V,BZ=F,EURUSD=X,6E=F\")\n",
    "tickers_entry.pack()\n",
    "\n",
    "tk.Label(app, text=\"Select Output Folder:\").pack(pady=5)\n",
    "\n",
    "path_frame = tk.Frame(app)\n",
    "path_frame.pack()\n",
    "\n",
    "path_entry = tk.Entry(path_frame, width=40)\n",
    "path_entry.pack(side=tk.LEFT)\n",
    "\n",
    "def choose_folder():\n",
    "    folder = filedialog.askdirectory()\n",
    "    if folder:\n",
    "        path_entry.delete(0, tk.END)\n",
    "        path_entry.insert(0, folder)\n",
    "\n",
    "browse_btn = tk.Button(path_frame, text=\"Browse\", command=choose_folder)\n",
    "browse_btn.pack(side=tk.LEFT, padx=5)\n",
    "\n",
    "tk.Button(app, text=\"Download and Save to Excel\", command=download_data, bg=\"#4CAF50\", fg=\"white\").pack(pady=20)\n",
    "\n",
    "app.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
