import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog, font
import queue
import json
import os
import pyaudio
from vosk import Model, KaldiRecognizer
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import sys
import platform
import time
from datetime import datetime

class VoiceToDocApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–æ–ª–æ—Å –≤ –î–æ–∫—É–º–µ–Ω—Ç - Vosk")
        self.root.geometry("1000x800")
        self.root.resizable(True, True)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.style = ttk.Style()
        self.style.theme_use("clam")
        self.style.configure("Accent.TButton", foreground="white", background="#4CAF50")
        self.style.map("Accent.TButton", background=[("active", "#45a049")])
        self.style.configure("Stop.TButton", foreground="white", background="#f44336")
        self.style.map("Stop.TButton", background=[("active", "#da190b")])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ model
        if getattr(sys, 'frozen', False):
            self.app_dir = os.path.dirname(sys.executable)
        else:
            self.app_dir = os.path.dirname(os.path.abspath(__file__))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø–∞–ø–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
        os.chdir(self.app_dir)
        
        self.model_dir = os.path.join(self.app_dir, "model")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {self.app_dir}")
        print(f"üìÅ –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏: {self.model_dir}")
        print(f"üìÅ –ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.model_dir)}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.recording = False
        self.quotes_open = False
        self.font_size = 12
        self.font_style = "normal"
        self.font_family = "Arial"
        self.alignment = "left"
        self.model = None
        self.recognizer = None
        self.audio = None
        self.stream = None
        self.queue = queue.Queue()
        self.update_id = None
        self.recording_start_time = None
        self.words_count = 0
        self.session_text = ""
        self.microphone_sensitivity = 50  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (0-100)
        self.selected_microphone = None
        self.available_microphones = []
        self.capitalize_next_word = True  # –î–µ–ª–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
        self.uppercase_mode = False  # –†–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ó–ê–ì–õ–ê–í–ù–´–ú–ò
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.load_model()

    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏–∑ –ø–∞–ø–∫–∏ model"""
        try:
            if not os.path.exists(self.model_dir):
                self.show_model_error("–ü–∞–ø–∫–∞ 'model' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∞–º–∞ –ø–∞–ø–∫–∞ model –≤–∞–ª–∏–¥–Ω–æ–π –º–æ–¥–µ–ª—å—é
            if self.is_valid_model(self.model_dir):
                model_path = self.model_dir
            else:
                # –ò—â–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ —Å –º–æ–¥–µ–ª—è–º–∏
                model_path = None
                for entry in os.listdir(self.model_dir):
                    full_path = os.path.join(self.model_dir, entry)
                    if os.path.isdir(full_path) and self.is_valid_model(full_path):
                        model_path = full_path
                        break
            
            if model_path:
                print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑: {model_path}")
                self.model = Model(model_path)
                model_name = os.path.basename(model_path)
                self.status_var.set(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_name}")
                self.record_btn.config(state=tk.NORMAL)
                return True
            
            self.show_model_error("–í –ø–∞–ø–∫–µ 'model' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å Vosk!")
            return False
            
        except Exception as e:
            self.show_model_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            return False

    def is_valid_model(self, model_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
        required_files = [
            "am/final.mdl",
            "graph/HCLG.fst",
            "ivector/final.dubm"
        ]
        
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: {model_path}")
        for file in required_files:
            full_path = os.path.join(model_path, file)
            print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {full_path}")
            if not os.path.exists(full_path):
                print(f"    ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
                return False
            else:
                print(f"    ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file}")
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–Ω–∞: {model_path}")
        return True

    def show_model_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        self.status_var.set(f"‚ùå {message}")
        error_msg = (
            f"{message}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'model' —Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n"
            "2. –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å —Å–∞–π—Ç–∞: https://alphacephei.com/vosk/models\n"
            "3. –†–∞—Å–ø–∞–∫—É–π—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –≤ –ø–∞–ø–∫—É 'model'\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:\n"
            "- vosk-model-small-ru-0.22 (40 –ú–ë) - –±—ã—Å—Ç—Ä–∞—è\n"
            "- vosk-model-ru-0.42 (67 –ú–ë) - —Ç–æ—á–Ω–∞—è\n"
            "- vosk-model-ru-0.42-new (1.8 –ì–ë) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"
        )
        messagebox.showerror("–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏", error_msg)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—Å–≤–µ—Ä—Ö—É)
        self.create_text_formatting_toolbar(main_frame)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏", padding=5)
        stats_frame.pack(fill=tk.X, pady=5)
        
        stats_inner = ttk.Frame(stats_frame)
        stats_inner.pack(fill=tk.X)
        
        self.words_label = ttk.Label(stats_inner, text="–°–ª–æ–≤: 0")
        self.words_label.pack(side=tk.LEFT, padx=10)
        
        self.time_label = ttk.Label(stats_inner, text="–í—Ä–µ–º—è: 00:00")
        self.time_label.pack(side=tk.LEFT, padx=10)
        
        self.speed_label = ttk.Label(stats_inner, text="–°–∫–æ—Ä–æ—Å—Ç—å: 0 —Å–ª–æ–≤/–º–∏–Ω")
        self.speed_label.pack(side=tk.LEFT, padx=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = ttk.LabelFrame(main_frame, text="–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", padding=10)
        text_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.text_area = scrolledtext.ScrolledText(
            text_frame, wrap=tk.WORD, font=("Arial", 11), padx=10, pady=10
        )
        self.text_area.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.record_btn = ttk.Button(
            control_frame, 
            text="‚ñ∂ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", 
            command=self.toggle_recording,
            style="Accent.TButton",
            state=tk.DISABLED
        )
        self.record_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        ttk.Button(
            control_frame, 
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", 
            command=self.clear_text,
            width=15
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        ttk.Button(
            control_frame, 
            text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", 
            command=self.open_document,
            width=18
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        ttk.Button(
            control_frame, 
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", 
            command=self.save_document,
            width=20
        ).pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        format_frame = ttk.LabelFrame(main_frame, text="–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", padding=10)
        format_frame.pack(fill=tk.X, pady=5)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        commands_info = ttk.Label(
            format_frame,
            text=(
                "üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: '—Ç–æ—á–∫–∞', '–∑–∞–ø—è—Ç–∞—è', '–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫', '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫'\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: '–∂–∏—Ä–Ω—ã–π', '–∫—É—Ä—Å–∏–≤', '–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ', '–æ–±—ã—á–Ω—ã–π'\n"
                "‚Ä¢ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: '–º–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç', '–æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç', '–∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç', '–∑–∞–≥–æ–ª–æ–≤–æ–∫'\n"
                "‚Ä¢ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: '–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é', '–ø–æ —Ü–µ–Ω—Ç—Ä—É', '–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é'\n"
                "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: '–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞', '–∞–±–∑–∞—Ü', '–∫–∞–≤—ã—á–∫–∏', '—Ç–∏—Ä–µ', '–¥–≤–æ–µ—Ç–æ—á–∏–µ'\n"
                "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ: '—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π', '–º–Ω–æ–≥–æ—Ç–æ—á–∏–µ', '—Å–∫–æ–±–∫–∏', '–∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏'"
            ),
            wraplength=800,
            justify=tk.LEFT
        )
        commands_info.pack(fill=tk.X)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º (—Å–Ω–∏–∑—É)
        self.create_microphone_controls(main_frame)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        status_bar = ttk.Label(
            self.root, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN, 
            anchor=tk.W, 
            padding=5
        )
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        self.recording_indicator = ttk.Label(
            self.root,
            text="üî¥",
            font=("Arial", 16, "bold")
        )
        self.recording_indicator.pack(side=tk.BOTTOM, anchor=tk.E, padx=10)
        self.recording_indicator.pack_forget()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.refresh_microphones()


    def init_audio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É"""
        try:
            if self.audio is None:
                self.audio = pyaudio.PyAudio()
                
            if self.stream is None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                input_device_index = self.selected_microphone if self.selected_microphone is not None else None
                
                self.stream = self.audio.open(
                    format=pyaudio.paInt16,
                    channels=1,
                    rate=16000,
                    input=True,
                    input_device_index=input_device_index,
                    frames_per_buffer=8000,
                    stream_callback=self.audio_callback
                )
                self.stream.stop_stream()
                
            if self.model and not self.recognizer:
                self.recognizer = KaldiRecognizer(self.model, 16000)
            
            return True
        except Exception as e:
            self.status_var.set(f"‚ùå –ê—É–¥–∏–æ –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def audio_callback(self, in_data, frame_count, time_info, status):
        """–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö"""
        if self.recording and self.recognizer:
            try:
                if self.recognizer.AcceptWaveform(in_data):
                    result = json.loads(self.recognizer.Result())
                    text = result.get("text", "")
                    if text:
                        self.queue.put(("text", text))
                else:
                    partial = json.loads(self.recognizer.PartialResult())
                    partial_text = partial.get("partial", "")
                    if partial_text:
                        self.queue.put(("partial", partial_text))
            except Exception:
                pass
        return (in_data, pyaudio.paContinue)
    
    def start_recording(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞"""
        if not self.model:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return
            
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.stream:
                if self.stream.is_active():
                    self.stream.stop_stream()
                self.stream.close()
                self.stream = None
            
            if not self.init_audio():
                return
                
            self.recording = True
            self.recording_start_time = time.time()
            self.record_btn.config(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", style="Stop.TButton")
            self.status_var.set("üé§ –ó–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å!")
            self.recording_indicator.pack(side=tk.BOTTOM, anchor=tk.E, padx=10)
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            while not self.queue.empty():
                self.queue.get_nowait()
                
            self.stream.start_stream()
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.process_queue()
            self.update_stats()
        except Exception as e:
            self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞"""
        self.recording = False
        self.record_btn.config(text="‚ñ∂ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", style="Accent.TButton")
        self.status_var.set("‚èπ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.recording_indicator.pack_forget()
        
        if self.stream and self.stream.is_active():
            self.stream.stop_stream()
        
        if self.update_id:
            self.root.after_cancel(self.update_id)
            self.update_id = None
    
    def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏"""
        if self.recording:
            self.stop_recording()
        else:
            self.start_recording()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–∏"""
        if self.recording and self.recording_start_time:
            elapsed_time = time.time() - self.recording_start_time
            minutes = elapsed_time / 60
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            time_str = f"{int(elapsed_time // 60):02d}:{int(elapsed_time % 60):02d}"
            self.time_label.config(text=f"–í—Ä–µ–º—è: {time_str}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            if minutes > 0:
                speed = self.words_count / minutes
                self.speed_label.config(text=f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Å–ª–æ–≤/–º–∏–Ω")
            
            self.root.after(1000, self.update_stats)
    
    def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            while not self.queue.empty():
                data_type, data = self.queue.get_nowait()
                
                if data_type == "text":
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    self.process_voice_command(data)
                    self.session_text += data + " "
                    self.words_count += len(data.split())
                    self.words_label.config(text=f"–°–ª–æ–≤: {self.words_count}")
                    self.text_area.see(tk.END)
                elif data_type == "partial":
                    self.status_var.set(f"üéØ –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è: {data}")
                
                self.root.update_idletasks()
        
        except queue.Empty:
            pass
        
        if self.recording:
            self.update_id = self.root.after(100, self.process_queue)
    
    def process_voice_command(self, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        original_text = text
        text = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        punctuation_map = {
            "—Ç–æ—á–∫–∞": ".", 
            "–∑–∞–ø—è—Ç–∞—è": ",", 
            "–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫": "!",
            "–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫": "?",
            "—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π": ";",
            "–º–Ω–æ–≥–æ—Ç–æ—á–∏–µ": "...",
            "–Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞": "\n",
            "–∞–±–∑–∞—Ü": "\n\n",
            "—Ç–∏—Ä–µ": " - ",
            "–¥–≤–æ–µ—Ç–æ—á–∏–µ": ":",
            "—Å–∫–æ–±–∫–∏": "[]",
            "–∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏": "()",
        }
        
        for cmd, symbol in punctuation_map.items():
            if cmd in text:
                self.text_area.insert(tk.END, symbol)
                # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏/–∞–±–∑–∞—Ü–∞ —Å–ª–µ–¥—É—é—â–∞—è –±—É–∫–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π
                if symbol in (".", "!", "?", "...", "\n", "\n\n"):
                    self.capitalize_next_word = True
                self.status_var.set(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {symbol}")
                return
        
        # –ö–∞–≤—ã—á–∫–∏
        if "–∫–∞–≤—ã—á–∫–∏" in text:
            self.toggle_quotes()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        format_map = {
            "–∂–∏—Ä–Ω—ã–π": ("bold", "üî¥ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç"),
            "–∫—É—Ä—Å–∏–≤": ("italic", "üî¥ –ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç"),
            "–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ": ("underline", "üî¥ –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"),
            "–æ–±—ã—á–Ω—ã–π": ("normal", "üî¥ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"),
        }
        
        for cmd, (style, msg) in format_map.items():
            if cmd in text:
                self.font_style = style
                self.status_var.set(msg)
                return
        
        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        size_commands = {
            "–º–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç": 10,
            "–æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç": 12,
            "–∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç": 14,
            "–∑–∞–≥–æ–ª–æ–≤–æ–∫": 18,
        }
        
        for cmd, size in size_commands.items():
            if cmd in text:
                self.font_size = size
                self.status_var.set(f"üî¥ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {size} pt")
                return
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        alignment_map = {
            "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é": ("left", "üî¥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é"),
            "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É": ("center", "üî¥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É"),
            "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é": ("right", "üî¥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é"),
        }
        
        for cmd, (align, msg) in alignment_map.items():
            if cmd in text:
                self.alignment = align
                self.status_var.set(msg)
                return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á—ë—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –∏ –∞–≤—Ç–æ–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.insert_text_with_capitalization(original_text)

    def insert_text_with_capitalization(self, text):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–∏–º–µ–Ω—è—è —Ä–µ–∂–∏–º –ó–ê–ì–õ–ê–í–ù–´–• –∏ –∞–≤—Ç–æ–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        if not text:
            return
        insert_text = text
        if self.uppercase_mode:
            insert_text = insert_text.upper()
        elif self.capitalize_next_word:
            insert_text = self._capitalize_first_letter(insert_text)
            self.capitalize_next_word = False
        self.text_area.insert(tk.END, insert_text + " ")

    def _capitalize_first_letter(self, s: str) -> str:
        """–î–µ–ª–∞–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤—É—é –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—É—é –±—É–∫–≤—É –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–µ –º–µ–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."""
        for idx, ch in enumerate(s):
            if ch.isalpha() or ch.isdigit():
                return s[:idx] + ch.upper() + s[idx+1:]
        return s
    
    def toggle_quotes(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–≤—ã—á–µ–∫"""
        symbol = "¬´" if not self.quotes_open else "¬ª"
        self.text_area.insert(tk.END, symbol)
        self.quotes_open = not self.quotes_open
        self.status_var.set(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω—ã {symbol} –∫–∞–≤—ã—á–∫–∏")
    
    def clear_text(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç?"):
            self.text_area.delete(1.0, tk.END)
            self.session_text = ""
            self.words_count = 0
            self.words_label.config(text="–°–ª–æ–≤: 0")
            self.status_var.set("üóë –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
    
    def open_document(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç Word"""
        file_path = filedialog.askopenfilename(
            filetypes=[("–î–æ–∫—É–º–µ–Ω—Ç—ã Word", "*.docx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
        )
        
        if not file_path:
            return
        
        try:
            doc = Document(file_path)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            
            self.text_area.delete(1.0, tk.END)
            self.text_area.insert(1.0, text)
            self.session_text = text
            self.words_count = len(text.split())
            self.words_label.config(text=f"–°–ª–æ–≤: {self.words_count}")
            self.status_var.set(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(file_path)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {str(e)}")
    
    def save_document(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word"""
        text = self.text_area.get(1.0, tk.END).strip()
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_name = f"–≥–æ–ª–æ—Å–æ–≤–æ–π_–¥–æ–∫—É–º–µ–Ω—Ç_{timestamp}.docx"
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".docx",
            filetypes=[("–î–æ–∫—É–º–µ–Ω—Ç—ã Word", "*.docx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            initialfile=default_name
        )
        
        if not file_path:
            return
        
        try:
            doc = Document()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
            style = doc.styles['Normal']
            style.font.name = 'Arial'
            style.font.size = Pt(12)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = doc.add_heading('–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç', 0)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏
            info_para = doc.add_paragraph()
            info_para.add_run(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
            info_para.add_run(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {self.words_count}\n")
            info_para.add_run(f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {self.time_label.cget('text').replace('–í—Ä–µ–º—è: ', '')}\n")
            info_para.add_run(f"–°–∫–æ—Ä–æ—Å—Ç—å: {self.speed_label.cget('text').replace('–°–∫–æ—Ä–æ—Å—Ç—å: ', '')}\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            doc.add_paragraph("=" * 50)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            paragraph = doc.add_paragraph()
            run = paragraph.add_run(text)
            run.font.size = Pt(self.font_size)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞
            if self.font_style == "bold":
                run.bold = True
            elif self.font_style == "italic":
                run.italic = True
            elif self.font_style == "underline":
                run.underline = True
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            if self.alignment == "left":
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
            elif self.alignment == "center":
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            elif self.alignment == "right":
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            
            doc.save(file_path)
            self.status_var.set(f"üíæ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.basename(file_path)}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n{file_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {str(e)}")
    
    def create_text_formatting_toolbar(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        toolbar_frame = ttk.LabelFrame(parent, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", padding=5)
        toolbar_frame.pack(fill=tk.X, pady=(0, 5))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ttk.Frame(toolbar_frame)
        toolbar.pack(fill=tk.X)
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Button(toolbar, text="B", command=self.toggle_bold, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="I", command=self.toggle_italic, width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="U", command=self.toggle_underline, width=3).pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞
        ttk.Label(toolbar, text="–®—Ä–∏—Ñ—Ç:").pack(side=tk.LEFT, padx=(5, 2))
        self.font_var = tk.StringVar(value=self.font_family)
        self.font_combo = ttk.Combobox(toolbar, textvariable=self.font_var, width=12, state="readonly")
        self.font_combo.pack(side=tk.LEFT, padx=2)
        self.font_combo.bind("<<ComboboxSelected>>", self.on_font_change)
        
        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        ttk.Label(toolbar, text="–†–∞–∑–º–µ—Ä:").pack(side=tk.LEFT, padx=(10, 2))
        self.size_var = tk.IntVar(value=self.font_size)
        self.size_scale = ttk.Scale(toolbar, from_=8, to=24, variable=self.size_var, 
                                   orient=tk.HORIZONTAL, length=100, command=self.on_size_change)
        self.size_scale.pack(side=tk.LEFT, padx=2)
        
        self.size_label = ttk.Label(toolbar, text=f"{self.font_size}pt")
        self.size_label.pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        ttk.Button(toolbar, text="‚óÄ", command=lambda: self.set_alignment("left"), width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="‚ñ£", command=lambda: self.set_alignment("center"), width=3).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="‚ñ∂", command=lambda: self.set_alignment("right"), width=3).pack(side=tk.LEFT, padx=2)
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        ttk.Frame(toolbar).pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Button(toolbar, text="–°–±—Ä–æ—Å", command=self.reset_formatting).pack(side=tk.RIGHT, padx=2)
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –í–ï–†–•–ù–ï–ì–û –†–ï–ì–ò–°–¢–†–ê
        self.uppercase_btn = ttk.Button(toolbar, text="ABC", command=self.toggle_uppercase_mode, width=4)
        self.uppercase_btn.pack(side=tk.RIGHT, padx=2)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤
        self.populate_fonts()

    def create_microphone_controls(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º"""
        mic_frame = ttk.LabelFrame(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", padding=5)
        mic_frame.pack(fill=tk.X, pady=(5, 0))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        mic_panel = ttk.Frame(mic_frame)
        mic_panel.pack(fill=tk.X)
        
        # –í—ã–±–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        ttk.Label(mic_panel, text="–ú–∏–∫—Ä–æ—Ñ–æ–Ω:").pack(side=tk.LEFT, padx=(0, 5))
        self.mic_var = tk.StringVar()
        self.mic_combo = ttk.Combobox(mic_panel, textvariable=self.mic_var, width=30, state="readonly")
        self.mic_combo.pack(side=tk.LEFT, padx=(0, 10))
        self.mic_combo.bind("<<ComboboxSelected>>", self.on_microphone_change)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
        ttk.Button(mic_panel, text="üîÑ", command=self.refresh_microphones, width=3).pack(side=tk.LEFT, padx=2)
        
        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        ttk.Label(mic_panel, text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:").pack(side=tk.LEFT, padx=(20, 5))
        self.sensitivity_var = tk.IntVar(value=self.microphone_sensitivity)
        self.sensitivity_scale = ttk.Scale(mic_panel, from_=0, to=100, variable=self.sensitivity_var,
                                          orient=tk.HORIZONTAL, length=150, command=self.on_sensitivity_change)
        self.sensitivity_scale.pack(side=tk.LEFT, padx=2)
        
        self.sensitivity_label = ttk.Label(mic_panel, text=f"{self.microphone_sensitivity}%")
        self.sensitivity_label.pack(side=tk.LEFT, padx=2)
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        ttk.Frame(mic_panel).pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.test_mic_btn = ttk.Button(mic_panel, text="üé§ –¢–µ—Å—Ç", command=self.test_microphone)
        self.test_mic_btn.pack(side=tk.RIGHT, padx=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è status_var
        # self.refresh_microphones()  # –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è status_var

    def populate_fonts(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤"""
        try:
            fonts = list(font.families())
            fonts.sort()
            self.font_combo['values'] = fonts
        except Exception:
            # Fallback —à—Ä–∏—Ñ—Ç—ã
            self.font_combo['values'] = ["Arial", "Times New Roman", "Calibri", "Verdana", "Tahoma"]

    def toggle_bold(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç"""
        if self.font_style == "bold":
            self.font_style = "normal"
        else:
            self.font_style = "bold"
        self.update_text_formatting()
        self.status_var.set("üî¥ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç" if self.font_style == "bold" else "üî¥ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")

    def toggle_italic(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫—É—Ä—Å–∏–≤"""
        if self.font_style == "italic":
            self.font_style = "normal"
        else:
            self.font_style = "italic"
        self.update_text_formatting()
        self.status_var.set("üî¥ –ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç" if self.font_style == "italic" else "üî¥ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")

    def toggle_underline(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"""
        if self.font_style == "underline":
            self.font_style = "normal"
        else:
            self.font_style = "underline"
        self.update_text_formatting()
        self.status_var.set("üî¥ –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç" if self.font_style == "underline" else "üî¥ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")

    def on_font_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞"""
        self.font_family = self.font_var.get()
        self.update_text_formatting()
        self.status_var.set(f"üî¥ –®—Ä–∏—Ñ—Ç: {self.font_family}")

    def on_size_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"""
        self.font_size = int(float(value))
        self.size_label.config(text=f"{self.font_size}pt")
        self.update_text_formatting()
        self.status_var.set(f"üî¥ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {self.font_size} pt")

    def set_alignment(self, alignment):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        self.alignment = alignment
        self.update_text_formatting()
        alignment_names = {"left": "–ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é", "center": "–ø–æ —Ü–µ–Ω—Ç—Ä—É", "right": "–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é"}
        self.status_var.set(f"üî¥ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ {alignment_names[alignment]}")

    def reset_formatting(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.font_style = "normal"
        self.font_size = 12
        self.font_family = "Arial"
        self.alignment = "left"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.size_var.set(self.font_size)
        self.size_label.config(text=f"{self.font_size}pt")
        self.font_var.set(self.font_family)
        
        self.update_text_formatting()
        self.status_var.set("üî¥ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

    def toggle_uppercase_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ó–ê–ì–õ–ê–í–ù–´–ú–ò."""
        self.uppercase_mode = not self.uppercase_mode
        btn_text = "ABC" if not self.uppercase_mode else "abc"
        self.uppercase_btn.config(text=btn_text)
        self.status_var.set("üî† –†–µ–∂–∏–º –í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†: –í–ö–õ" if self.uppercase_mode else "üî† –†–µ–∂–∏–º –í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†: –í–´–ö–õ")

    def update_text_formatting(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É
        current_font = (self.font_family, self.font_size)
        if self.font_style == "bold":
            current_font = (self.font_family, self.font_size, "bold")
        elif self.font_style == "italic":
            current_font = (self.font_family, self.font_size, "italic")
        elif self.font_style == "underline":
            current_font = (self.font_family, self.font_size, "underline")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Å—Ç–∞–≤–æ–∫
        self.text_area.config(font=current_font)

    def refresh_microphones(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤"""
        try:
            if self.audio is None:
                self.audio = pyaudio.PyAudio()
            
            self.available_microphones = []
            device_count = self.audio.get_device_count()
            
            for i in range(device_count):
                device_info = self.audio.get_device_info_by_index(i)
                if device_info['maxInputChannels'] > 0:  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞
                    name = device_info['name']
                    self.available_microphones.append((i, name))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
            mic_names = [f"{name} (ID: {idx})" for idx, name in self.available_microphones]
            self.mic_combo['values'] = mic_names
            
            if mic_names and not self.mic_var.get():
                self.mic_combo.current(0)
                self.selected_microphone = self.available_microphones[0][0]
            
            self.status_var.set(f"üé§ –ù–∞–π–¥–µ–Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤: {len(self.available_microphones)}")
            
        except Exception as e:
            self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤: {str(e)}")

    def on_microphone_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        selection = self.mic_combo.current()
        if selection >= 0 and selection < len(self.available_microphones):
            self.selected_microphone = self.available_microphones[selection][0]
            mic_name = self.available_microphones[selection][1]
            self.status_var.set(f"üé§ –í—ã–±—Ä–∞–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω: {mic_name}")

    def on_sensitivity_change(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        self.microphone_sensitivity = int(float(value))
        self.sensitivity_label.config(text=f"{self.microphone_sensitivity}%")
        self.status_var.set(f"üé§ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.microphone_sensitivity}%")

    def test_microphone(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        if not self.selected_microphone is None:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                test_stream = self.audio.open(
                    format=pyaudio.paInt16,
                    channels=1,
                    rate=16000,
                    input=True,
                    input_device_index=self.selected_microphone,
                    frames_per_buffer=1024
                )
                
                # –ß–∏—Ç–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                data = test_stream.read(1024)
                test_stream.stop_stream()
                test_stream.close()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
                import struct
                audio_data = struct.unpack('1024h', data)
                max_amplitude = max(abs(sample) for sample in audio_data)
                level = min(100, (max_amplitude / 32768) * 100)
                
                self.status_var.set(f"üé§ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: —É—Ä–æ–≤–µ–Ω—å {level:.1f}%")
                messagebox.showinfo("–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞: {level:.1f}%")
                
            except Exception as e:
                self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω:\n{str(e)}")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.recording = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        if hasattr(self, 'stream') and self.stream:
            if self.stream.is_active():
                self.stream.stop_stream()
            self.stream.close()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É
        if hasattr(self, 'audio') and self.audio:
            self.audio.terminate()
        
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
    if platform.system() == "Windows":
        try:
            root.iconbitmap(default="icon.ico")
        except:
            pass
    
    app = VoiceToDocApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()



