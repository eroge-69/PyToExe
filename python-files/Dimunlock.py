import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import os
import subprocess
import sys
import ctypes
import platform
import psutil
import threading
import time
from datetime import datetime

class ModernAntivirusBypassTool:
    def __init__(self, root):
        self.root = root
        self.root.title("Security Toolkit Pro")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_admin = self.check_admin_privileges()
        self.selected_drive = tk.StringVar(value="C:")
        self.process_list = []
        
        self.setup_ui()
        self.start_process_monitor()
        
    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        style.configure('Modern.TFrame', background='#2b2b2b')
        style.configure('Card.TFrame', background='#3c3c3c', relief='raised', borderwidth=1)
        style.configure('Title.TLabel', background='#2b2b2b', foreground='#ffffff', font=('Segoe UI', 12, 'bold'))
        style.configure('Text.TLabel', background='#3c3c3c', foreground='#cccccc', font=('Segoe UI', 9))
        style.configure('Accent.TButton', background='#007acc', foreground='white', font=('Segoe UI', 9))
        style.map('Accent.TButton', background=[('active', '#005a9e')])
        style.configure('Danger.TButton', background='#d13438', foreground='white', font=('Segoe UI', 9))
        style.map('Danger.TButton', background=[('active', '#a02626')])
        style.configure('Success.TButton', background='#107c10', foreground='white', font=('Segoe UI', 9))
        
        style.configure('Modern.TNotebook', background='#2b2b2b', borderwidth=0)
        style.configure('Modern.TNotebook.Tab', background='#3c3c3c', foreground='#cccccc',
                       padding=[15, 5], font=('Segoe UI', 9))
        style.map('Modern.TNotebook.Tab', background=[('selected', '#007acc')])
        
    def check_admin_privileges(self):
        try:
            return os.getuid() == 0
        except AttributeError:
            try:
                return ctypes.windll.shell32.IsUserAnAdmin()
            except:
                return False
    
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, style='Modern.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = ttk.Label(header_frame, text="üîí Security Toolkit Pro", 
                               style='Title.TLabel', font=('Segoe UI', 16, 'bold'))
        title_label.pack(side=tk.LEFT)
        
        status_label = ttk.Label(header_frame, 
                               text=f"Admin: {'‚úÖ' if self.is_admin else '‚ùå'} | OS: {platform.system()}",
                               style='Text.TLabel')
        status_label.pack(side=tk.RIGHT)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame, style='Modern.TNotebook')
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_dashboard_tab()
        self.setup_autostart_tab()
        self.setup_process_tab()
        self.setup_debuggers_tab()
        self.setup_disk_tab()
        self.setup_system_tab()
        
    def setup_dashboard_tab(self):
        dashboard_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(dashboard_frame, text="üìä –î–∞—à–±–æ—Ä–¥")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cards_frame = ttk.Frame(dashboard_frame, style='Modern.TFrame')
        cards_frame.pack(fill=tk.X, pady=10)
        
        cards_data = [
            ("üîç –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–æ–∫", self.show_autostart),
            ("‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã", "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", self.show_processes),
            ("üêõ –î–µ–±–∞–≥–≥–µ—Ä—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–±–∞–≥–≥–µ—Ä–∞–º–∏", self.show_debuggers),
            ("üíæ –î–∏—Å–∫", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞", self.show_disk),
            ("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞", "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", self.show_system)
        ]
        
        for i, (title, desc, command) in enumerate(cards_data):
            card = ttk.Frame(cards_frame, style='Card.TFrame', width=200, height=100)
            card.grid(row=0, column=i, padx=5, sticky='nsew')
            cards_frame.columnconfigure(i, weight=1)
            
            ttk.Label(card, text=title, style='Title.TLabel', font=('Segoe UI', 11, 'bold')).pack(pady=(10, 5))
            ttk.Label(card, text=desc, style='Text.TLabel', wraplength=180).pack(pady=5)
            ttk.Button(card, text="–û—Ç–∫—Ä—ã—Ç—å", command=command, style='Accent.TButton').pack(pady=10)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.Frame(dashboard_frame, style='Card.TFrame')
        info_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        ttk.Label(info_frame, text="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style='Title.TLabel').pack(anchor='w', padx=10, pady=10)
        
        self.system_info_text = scrolledtext.ScrolledText(info_frame, bg='#3c3c3c', fg='#cccccc', 
                                                         font=('Consolas', 9), height=15)
        self.system_info_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        self.update_system_info()
        
    def setup_autostart_tab(self):
        autostart_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(autostart_frame, text="üîç –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        buttons_frame = ttk.Frame(autostart_frame, style='Modern.TFrame')
        buttons_frame.pack(fill=tk.X, pady=10)
        
        check_buttons = [
            ("Userinit", self.check_userinit),
            ("Shell", self.check_shell),
            ("AppInit DLLs", self.check_appnits),
            ("Known DLLs", self.check_dll),
            ("Run Keys", self.check_cmdline),
            ("–í—Å–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", self.check_all_autostart)
        ]
        
        for i, (text, command) in enumerate(check_buttons):
            ttk.Button(buttons_frame, text=text, command=command, style='Accent.TButton').grid(
                row=0, column=i, padx=2, sticky='ew')
            buttons_frame.columnconfigure(i, weight=1)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = ttk.Frame(autostart_frame, style='Card.TFrame')
        output_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.autostart_output = scrolledtext.ScrolledText(output_frame, bg='#3c3c3c', fg='#cccccc',
                                                         font=('Consolas', 9))
        self.autostart_output.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
    def setup_process_tab(self):
        process_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(process_frame, text="‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(process_frame, style='Modern.TFrame')
        control_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_processes,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", command=self.kill_process,
                  style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="üìä –ü–æ–¥—Ä–æ–±–Ω–æ", command=self.show_process_details,
                  style='Success.TButton').pack(side=tk.LEFT, padx=5)
        
        # –î–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        tree_frame = ttk.Frame(process_frame, style='Card.TFrame')
        tree_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        columns = ('PID', 'Name', 'CPU', 'Memory', 'Status', 'User')
        self.process_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=20)
        
        for col in columns:
            self.process_tree.heading(col, text=col)
            self.process_tree.column(col, width=100)
        
        self.process_tree.column('Name', width=200)
        self.process_tree.column('PID', width=80)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.process_tree.yview)
        self.process_tree.configure(yscrollcommand=scrollbar.set)
        
        self.process_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=10)
        
        self.refresh_processes()
        
    def setup_debuggers_tab(self):
        debug_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(debug_frame, text="üêõ –î–µ–±–∞–≥–≥–µ—Ä—ã")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        debug_control = ttk.Frame(debug_frame, style='Modern.TFrame')
        debug_control.pack(fill=tk.X, pady=10)
        
        ttk.Button(debug_control, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.refresh_debuggers,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(debug_control, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ", command=self.remove_debuggers,
                  style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        
        # –°–ø–∏—Å–æ–∫ –¥–µ–±–∞–≥–≥–µ—Ä–æ–≤
        list_frame = ttk.Frame(debug_frame, style='Card.TFrame')
        list_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.debugger_list = tk.Listbox(list_frame, bg='#3c3c3c', fg='#cccccc', 
                                       selectbackground='#007acc', font=('Consolas', 9))
        self.debugger_list.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.refresh_debuggers()
        
    def setup_disk_tab(self):
        disk_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(disk_frame, text="üíæ –î–∏—Å–∫")
        
        # –í—ã–±–æ—Ä –¥–∏—Å–∫–∞
        disk_control = ttk.Frame(disk_frame, style='Modern.TFrame')
        disk_control.pack(fill=tk.X, pady=10)
        
        ttk.Label(disk_control, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", style='Text.TLabel').pack(side=tk.LEFT, padx=5)
        
        drives = self.get_available_drives()
        drive_combo = ttk.Combobox(disk_control, textvariable=self.selected_drive, 
                                  values=drives, state='readonly')
        drive_combo.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(disk_control, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", command=self.scan_disk,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=10)
        ttk.Button(disk_control, text="üìä –ò–Ω—Ñ–æ –æ –¥–∏—Å–∫–µ", command=self.show_disk_info,
                  style='Success.TButton').pack(side=tk.LEFT, padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        result_frame = ttk.Frame(disk_frame, style='Card.TFrame')
        result_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.disk_output = scrolledtext.ScrolledText(result_frame, bg='#3c3c3c', fg='#cccccc',
                                                   font=('Consolas', 9))
        self.disk_output.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
    def setup_system_tab(self):
        system_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(system_frame, text="üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞")
        
        # –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        danger_frame = ttk.Frame(system_frame, style='Card.TFrame')
        danger_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(danger_frame, text="–û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", style='Title.TLabel').pack(anchor='w', padx=10, pady=10)
        
        ops_frame = ttk.Frame(danger_frame, style='Card.TFrame')
        ops_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Button(ops_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö", command=self.restart_pc,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(ops_frame, text="üí• –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", command=self.trigger_bsod,
                  style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
        utils_frame = ttk.Frame(system_frame, style='Card.TFrame')
        utils_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        ttk.Label(utils_frame, text="–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã", style='Title.TLabel').pack(anchor='w', padx=10, pady=10)
        
        utils_buttons = [
            ("üìÅ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫", self.open_explorer),
            ("‚öôÔ∏è –†–µ–µ—Å—Ç—Ä", self.launch_regedit),
            ("üîß –°–ª—É–∂–±—ã", self.launch_services),
            ("üìã –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", self.launch_task_manager)
        ]
        
        utils_grid = ttk.Frame(utils_frame, style='Card.TFrame')
        utils_grid.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        for i, (text, command) in enumerate(utils_buttons):
            ttk.Button(utils_grid, text=text, command=command, style='Accent.TButton').grid(
                row=0, column=i, padx=5, sticky='ew')
            utils_grid.columnconfigure(i, weight=1)
    
    def show_autostart(self):
        self.notebook.select(1)
    
    def show_processes(self):
        self.notebook.select(2)
    
    def show_debuggers(self):
        self.notebook.select(3)
    
    def show_disk(self):
        self.notebook.select(4)
    
    def show_system(self):
        self.notebook.select(5)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    def refresh_processes(self):
        for item in self.process_tree.get_children():
            self.process_tree.delete(item)
        
        self.process_list = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info', 'status', 'username']):
            try:
                memory_mb = proc.info['memory_info'].rss / 1024 / 1024
                self.process_tree.insert('', 'end', values=(
                    proc.info['pid'],
                    proc.info['name'],
                    f"{proc.info['cpu_percent']:.1f}%",
                    f"{memory_mb:.1f} MB",
                    proc.info['status'],
                    proc.info['username'][:20] if proc.info['username'] else 'N/A'
                ))
                self.process_list.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
    
    def kill_process(self):
        selection = self.process_tree.selection()
        if selection:
            item = selection[0]
            pid = self.process_tree.item(item)['values'][0]
            try:
                process = psutil.Process(pid)
                process.terminate()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω")
                self.refresh_processes()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")
    
    def show_process_details(self):
        selection = self.process_tree.selection()
        if selection:
            item = selection[0]
            pid = self.process_tree.item(item)['values'][0]
            try:
                process = psutil.Process(pid)
                info = f"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:
PID: {pid}
–ò–º—è: {process.name()}
–°—Ç–∞—Ç—É—Å: {process.status()}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {process.username()}
CPU: {process.cpu_percent()}%
–ü–∞–º—è—Ç—å: {process.memory_info().rss / 1024 / 1024:.1f} MB
–ü—É—Ç—å: {process.exe()}
–ó–∞–ø—É—â–µ–Ω: {datetime.fromtimestamp(process.create_time()).strftime('%Y-%m-%d %H:%M:%S')}
                """
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ", info)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ–±–∞–≥–≥–µ—Ä–æ–≤
    def refresh_debuggers(self):
        self.debugger_list.delete(0, tk.END)
        try:
            if platform.system() == "Windows":
                # –ü–æ–∏—Å–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–µ–±–∞–≥–≥–µ—Ä–æ–≤
                debuggers = [
                    "ollydbg.exe", "x64dbg.exe", "ida64.exe", "ida.exe",
                    "windbg.exe", "devenv.exe", "ImmunityDebugger.exe"
                ]
                
                for proc in psutil.process_iter(['name']):
                    if proc.info['name'].lower() in [d.lower() for d in debuggers]:
                        self.debugger_list.insert(tk.END, f"{proc.info['name']} (PID: {proc.pid})")
                
                if self.debugger_list.size() == 0:
                    self.debugger_list.insert(tk.END, "–î–µ–±–∞–≥–≥–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.debugger_list.insert(tk.END, f"–û—à–∏–±–∫–∞: {e}")
    
    def remove_debuggers(self):
        selection = self.debugger_list.curselection()
        if selection:
            for index in selection:
                debugger_info = self.debugger_list.get(index)
                pid = int(debugger_info.split("(PID: ")[1].split(")")[0])
                try:
                    process = psutil.Process(pid)
                    process.terminate()
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–µ–±–∞–≥–≥–µ—Ä {process.name()} –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–±–∞–≥–≥–µ—Ä: {e}")
            self.refresh_debuggers()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏—Å–∫–∞
    def get_available_drives(self):
        if platform.system() == "Windows":
            return [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:")]
        else:
            return ["/", "/home", "/etc"]
    
    def scan_disk(self):
        drive = self.selected_drive.get()
        self.disk_output.delete(1.0, tk.END)
        self.disk_output.insert(tk.END, f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ {drive}...\n\n")
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
            usage = psutil.disk_usage(drive)
            self.disk_output.insert(tk.END, f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {usage.total / (1024**3):.2f} GB\n")
            self.disk_output.insert(tk.END, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage.used / (1024**3):.2f} GB\n")
            self.disk_output.insert(tk.END, f"–°–≤–æ–±–æ–¥–Ω–æ: {usage.free / (1024**3):.2f} GB\n")
            self.disk_output.insert(tk.END, f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {usage.percent}%\n\n")
            
            # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä)
            self.disk_output.insert(tk.END, "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...\n")
            exe_count = 0
            for root, dirs, files in os.walk(drive):
                for file in files:
                    if file.lower().endswith(('.exe', '.dll', '.sys')):
                        exe_count += 1
                if exe_count > 1000:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥
                    break
            
            self.disk_output.insert(tk.END, f"–ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {exe_count}\n")
            
        except Exception as e:
            self.disk_output.insert(tk.END, f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}\n")
    
    def show_disk_info(self):
        drive = self.selected_drive.get()
        try:
            usage = psutil.disk_usage(drive)
            info = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ {drive}:
–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {usage.total / (1024**3):.2f} GB
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage.used / (1024**3):.2f} GB
–°–≤–æ–±–æ–¥–Ω–æ: {usage.free / (1024**3):.2f} GB
–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {usage.percent}%
–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {psutil.disk_partitions()[0].fstype if psutil.disk_partitions() else 'N/A'}
            """
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ", info)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ: {e}")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    def check_userinit(self):
        self.autostart_output.delete(1.0, tk.END)
        # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    
    def check_shell(self):
        self.autostart_output.delete(1.0, tk.END)
        # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    
    def check_appnits(self):
        self.autostart_output.delete(1.0, tk.END)
        # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    
    def check_dll(self):
        self.autostart_output.delete(1.0, tk.END)
        # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    
    def check_cmdline(self):
        self.autostart_output.delete(1.0, tk.END)
        # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
    
    def check_all_autostart(self):
        self.autostart_output.delete(1.0, tk.END)
        for check_func in [self.check_userinit, self.check_shell, self.check_appnits, 
                          self.check_dll, self.check_cmdline]:
            check_func()
    
    def restart_pc(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö?"):
            try:
                if platform.system() == "Windows":
                    os.system("shutdown /r /t 0")
                else:
                    os.system("sudo reboot")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}")
    
    def trigger_bsod(self):
        if messagebox.askyesno("–í–ù–ò–ú–ê–ù–ò–ï!", 
                              "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–∑–æ–≤–µ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!\n"
                              "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!\n\n"
                              "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            try:
                if platform.system() == "Windows":
                    ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
                    ctypes.windll.ntdll.NtRaiseHardError(0xDEADDEAD, 0, 0, 0, 6, ctypes.byref(ctypes.c_ulong()))
                else:
                    os.system("echo c > /proc/sysrq-trigger")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: {e}")
    
    def open_explorer(self):
        try:
            if platform.system() == "Windows":
                os.system("explorer")
            else:
                os.system("nautilus")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫: {e}")
    
    def launch_regedit(self):
        try:
            if platform.system() == "Windows":
                os.system("regedit")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Windows")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    def launch_services(self):
        try:
            if platform.system() == "Windows":
                os.system("services.msc")
            else:
                os.system("systemctl")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ª—É–∂–±—ã: {e}")
    
    def launch_task_manager(self):
        try:
            if platform.system() == "Windows":
                os.system("taskmgr")
            else:
                os.system("gnome-system-monitor")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á: {e}")
    
    def update_system_info(self):
        info = f"""
–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–û–°: {platform.system()} {platform.release()}
–í–µ—Ä—Å–∏—è: {platform.version()}
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getlogin()}
–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'–î–∞' if self.is_admin else '–ù–µ—Ç'}
–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
CPU –∑–∞–≥—Ä—É–∑–∫–∞: {psutil.cpu_percent()}%
–ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
–î–∏—Å–∫–∏: {len(psutil.disk_partitions())} —Ä–∞–∑–¥–µ–ª–æ–≤
        """
        self.system_info_text.delete(1.0, tk.END)
        self.system_info_text.insert(tk.END, info)
    
    def start_process_monitor(self):
        def monitor():
            while True:
                self.update_system_info()
                time.sleep(5)
        
        monitor_thread = threading.Thread(target=monitor, daemon=True)
        monitor_thread.start()

def main():
    root = tk.Tk()
    app = ModernAntivirusBypassTool(root)
    root.mainloop()

if __name__ == "__main__":
    main()
