import os
import sys
import time
import json
import socket
import psutil
import shutil
import ctypes
import winreg
import base64
import sqlite3
import requests
import keyboard
import win32api
import win32gui
import win32con
import pyperclip
import threading
import subprocess
import ctypes.wintypes
import win32serviceutil
import customtkinter as ctk
from pynput import keyboard
from tkinter import messagebox
from time import sleep
import webbrowser
from datetime import datetime
import tempfile
import urllib.request
from tkinter import messagebox as mb

"""
üîí PROVERKA HELPER - UUID –£–ü–†–ê–í–õ–ï–ù–ò–ï

üìã –ö–ê–ö –£–ü–†–ê–í–õ–Ø–¢–¨ UUID:
1. –ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_UUIDS –≤ –∫–æ–¥–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 50)
2. –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ UUID –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
3. –§–æ—Ä–º–∞—Ç: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
4. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É UUID
5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

üí° –ü–†–ò–ú–ï–†:
AUTHORIZED_UUIDS = [
    "12345678-1234-1234-1234-123456789abc",  # –í–∞—à UUID
    "87654321-4321-4321-4321-cba987654321",  # –î—Ä—É–≥–æ–π UUID
]

‚ö†Ô∏è –í–ê–ñ–ù–û: UUID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏!
"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global running  
global window_hidden  
global global_key2  
global global_key1  
global check_service
global socket_lock  
global program_titles
global launcher_window 
launcher_window = None 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter –¥–ª—è –∫—Ä–∞—Å–Ω–æ-—Å–µ—Ä–æ–π —Ç–µ–º—ã
ctk.set_appearance_mode('dark')
ctk.set_default_color_theme('dark-blue')

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–Ω–æ-—Å–µ—Ä–æ–π —Ç–µ–º—ã
COLORS = {
    'bg_dark': '#1a0a0a',
    'bg_medium': '#2d1a1a', 
    'bg_light': '#3d2a2a',
    'accent_red': '#8b0000',
    'accent_red_light': '#a52a2a',
    'text_white': '#ffffff',
    'text_gray': '#cccccc',
    'border': '#4a2a2a'
}

# UUID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
# –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö UUID
# –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ UUID –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
AUTHORIZED_UUIDS = [
    # –ü—Ä–∏–º–µ—Ä—ã UUID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏):
    # "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    # "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    # "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ UUID:
    "26e600e0-7b9a-11f0-aa18-806e6f6e6963",  # –ü—Ä–∏–º–µ—Ä UUID
    "00000000-0000-0000-0000-6C626DDB5429",  # –ü—Ä–∏–º–µ—Ä UUID
]

def get_motherboard_uuid():
    """–ü–æ–ª—É—á–∞–µ—Ç UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    uuid_methods = []
    
    try:
        # –ú–µ—Ç–æ–¥ 1: WMI - Win32_BaseBoard
        try:
            import wmi
            c = wmi.WMI()
            for board in c.Win32_BaseBoard():
                if board.SerialNumber and board.SerialNumber.strip():
                    uuid = board.SerialNumber.strip()
                    uuid_methods.append(("WMI BaseBoard", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMI BaseBoard: {uuid}")
        except Exception as e:
            print(f"WMI BaseBoard –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: WMI - Win32_ComputerSystem
        try:
            import wmi
            c = wmi.WMI()
            for system in c.Win32_ComputerSystem():
                if system.UUID and system.UUID.strip():
                    uuid = system.UUID.strip()
                    uuid_methods.append(("WMI ComputerSystem", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMI ComputerSystem: {uuid}")
        except Exception as e:
            print(f"WMI ComputerSystem –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: WMI - Win32_ComputerSystemProduct
        try:
            import wmi
            c = wmi.WMI()
            for product in c.Win32_ComputerSystemProduct():
                if product.UUID and product.UUID.strip():
                    uuid = product.UUID.strip()
                    uuid_methods.append(("WMI ComputerSystemProduct", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMI ComputerSystemProduct: {uuid}")
        except Exception as e:
            print(f"WMI ComputerSystemProduct –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 4: –†–µ–µ—Å—Ç—Ä - HwProfileGuid
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SYSTEM\CurrentControlSet\Control\IDConfigDB\Hardware Profiles\0001")
            uuid, _ = winreg.QueryValueEx(key, "HwProfileGuid")
            winreg.CloseKey(key)
            if uuid and uuid.strip():
                uuid = uuid.strip('{}')
                uuid_methods.append(("Registry HwProfileGuid", uuid))
                print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Registry HwProfileGuid: {uuid}")
        except Exception as e:
            print(f"Registry HwProfileGuid –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 5: –†–µ–µ—Å—Ç—Ä - MachineGuid
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Cryptography")
            uuid, _ = winreg.QueryValueEx(key, "MachineGuid")
            winreg.CloseKey(key)
            if uuid and uuid.strip():
                uuid_methods.append(("Registry MachineGuid", uuid))
                print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Registry MachineGuid: {uuid}")
        except Exception as e:
            print(f"Registry MachineGuid –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 6: –ö–æ–º–∞–Ω–¥–∞ systeminfo
        try:
            result = subprocess.run(['systeminfo'], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'System UUID' in line or 'System Manufacturer' in line:
                        if ':' in line:
                            uuid = line.split(':')[-1].strip()
                            if uuid and len(uuid) > 5:
                                uuid_methods.append(("SystemInfo", uuid))
                                print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ SystemInfo: {uuid}")
                                break
        except Exception as e:
            print(f"SystemInfo –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 7: –ö–æ–º–∞–Ω–¥–∞ wmic
        try:
            result = subprocess.run(['wmic', 'csproduct', 'get', 'uuid'], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) >= 2:
                    uuid = lines[1].strip()
                    if uuid and uuid.lower() != 'uuid' and len(uuid) > 5:
                        uuid_methods.append(("WMIC csproduct", uuid))
                        print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMIC csproduct: {uuid}")
        except Exception as e:
            print(f"WMIC csproduct –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 8: –ö–æ–º–∞–Ω–¥–∞ wmic baseboard
        try:
            result = subprocess.run(['wmic', 'baseboard', 'get', 'serialnumber'], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) >= 2:
                    uuid = lines[1].strip()
                    if uuid and uuid.lower() != 'serialnumber' and len(uuid) > 5:
                        uuid_methods.append(("WMIC baseboard", uuid))
                        print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMIC baseboard: {uuid}")
        except Exception as e:
            print(f"WMIC baseboard –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 9: –ö–æ–º–∞–Ω–¥–∞ wmic computersystem
        try:
            result = subprocess.run(['wmic', 'computersystem', 'get', 'uuid'], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) >= 2:
                    uuid = lines[1].strip()
                    if uuid and uuid.lower() != 'uuid' and len(uuid) > 5:
                        uuid_methods.append(("WMIC computersystem", uuid))
                        print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ WMIC computersystem: {uuid}")
        except Exception as e:
            print(f"WMIC computersystem –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 10: PowerShell Get-WmiObject
        try:
            ps_command = "Get-WmiObject -Class Win32_ComputerSystemProduct | Select-Object -ExpandProperty UUID"
            result = subprocess.run(['powershell', '-Command', ps_command], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                uuid = result.stdout.strip()
                if uuid and len(uuid) > 5:
                    uuid_methods.append(("PowerShell WMI", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ PowerShell WMI: {uuid}")
        except Exception as e:
            print(f"PowerShell WMI –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 11: PowerShell Get-ComputerInfo
        try:
            ps_command = "Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductId"
            result = subprocess.run(['powershell', '-Command', ps_command], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                uuid = result.stdout.strip()
                if uuid and len(uuid) > 5:
                    uuid_methods.append(("PowerShell ComputerInfo", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ PowerShell ComputerInfo: {uuid}")
        except Exception as e:
            print(f"PowerShell ComputerInfo –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 12: PowerShell Get-CimInstance
        try:
            ps_command = "Get-CimInstance -ClassName Win32_ComputerSystemProduct | Select-Object -ExpandProperty UUID"
            result = subprocess.run(['powershell', '-Command', ps_command], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                uuid = result.stdout.strip()
                if uuid and len(uuid) > 5:
                    uuid_methods.append(("PowerShell CIM", uuid))
                    print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ PowerShell CIM: {uuid}")
        except Exception as e:
            print(f"PowerShell CIM –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 13: –†–µ–µ—Å—Ç—Ä - ProductId
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
            uuid, _ = winreg.QueryValueEx(key, "ProductId")
            winreg.CloseKey(key)
            if uuid and uuid.strip():
                uuid_methods.append(("Registry ProductId", uuid))
                print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Registry ProductId: {uuid}")
        except Exception as e:
            print(f"Registry ProductId –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 14: –†–µ–µ—Å—Ç—Ä - InstallationID
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform")
            uuid, _ = winreg.QueryValueEx(key, "InstallationID")
            winreg.CloseKey(key)
            if uuid and uuid.strip():
                uuid_methods.append(("Registry InstallationID", uuid))
                print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Registry InstallationID: {uuid}")
        except Exception as e:
            print(f"Registry InstallationID –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 15: –ö–æ–º–∞–Ω–¥–∞ vol –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–∏—Å–∫–∞
        try:
            result = subprocess.run(['vol', 'C:'], capture_output=True, text=True, shell=True, timeout=10)
            if result.returncode == 0:
                for line in result.stdout.split('\n'):
                    if 'Volume Serial Number is' in line:
                        uuid = line.split('is')[-1].strip()
                        if uuid and len(uuid) > 5:
                            uuid_methods.append(("Volume Serial", uuid))
                            print(f"UUID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Volume Serial: {uuid}")
                            break
        except Exception as e:
            print(f"Volume Serial –æ—à–∏–±–∫–∞: {e}")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ UUID
        if uuid_methods:
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(uuid_methods)} —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è UUID:")
            for i, (method, uuid) in enumerate(uuid_methods, 1):
                print(f"  {i}. {method}: {uuid}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
            first_uuid = uuid_methods[0][1]
            print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UUID: {first_uuid} (–º–µ—Ç–æ–¥: {uuid_methods[0][0]})")
            return first_uuid
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
            return None
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ UUID: {e}")
        return None

def verify_uuid():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã"""
    try:
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã...")
        local_uuid = get_motherboard_uuid()
        
        if not local_uuid:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤!")
            return False
        
        print(f"\nüéØ –û—Å–Ω–æ–≤–Ω–æ–π UUID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {local_uuid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π UUID –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        for auth_uuid in AUTHORIZED_UUIDS:
            if local_uuid.lower() == auth_uuid.lower():
                print(f"‚úÖ UUID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {local_uuid}")
                print(f"‚úÖ UUID –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö")
                return True
        
        # –ï—Å–ª–∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É
        error_msg = f"""‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù!

üéØ UUID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {local_uuid}

üìã –°–ü–ò–°–û–ö –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• UUID:
"""
        
        for i, auth_uuid in enumerate(AUTHORIZED_UUIDS, 1):
            error_msg += f"{i}. {auth_uuid}\n"
        
        error_msg += f"""

‚ùå –≠—Ç–æ—Ç UUID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.

üìã –ö–ê–ö –î–û–ë–ê–í–ò–¢–¨ UUID –í –ö–û–î:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª ph1.py
2. –ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_UUIDS (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 75)
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: "{local_uuid}"
4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É

üí° –ü–†–ò–ú–ï–†:
AUTHORIZED_UUIDS = [
    "12345678-1234-1234-1234-123456789abc",
    "{local_uuid}",  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    "00000000-0000-0000-0000-6C626DDB5429",
]

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ UUID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö
‚Ä¢ –ö–∞–∂–¥—ã–π UUID —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ UUID
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 15 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è UUID
‚Ä¢ –ï—Å–ª–∏ UUID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

        messagebox.showerror("–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù", error_msg)
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ UUID: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ UUID: {e}")
        return False

def clear_dns_cache():
    try:
        os.system('ipconfig /flushdns')
        print('–ö—ç—à DNS —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.')
        messagebox.showinfo('–£—Å–ø–µ—Ö', '–ö—ç—à DNS —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.')
    except:
        messagebox.showerror('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ DNS.')

def clean_browser_history():
    BROWSERS = {'Chrome': os.path.expanduser('~\\AppData\\Local\\Google\\Chrome\\User Data\\Default'), 'Edge': os.path.expanduser('~\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default'), 'Opera': os.path.expanduser('~\\AppData\\Roaming\\Opera Software\\Opera Stable'), 'Yandex': os.path.expanduser('~\\AppData\\Local\\Yandex\\YandexBrowser\\User Data\\Default'), 'Brave': os.path.expanduser('~\\AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data\\Default')}
    FIREFOX_PATH = os.path.expanduser('~\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles')
    KEYWORDS = ['blasted', 'nemezida', 'spoofer', 'sechex', 'akcel', 'euphoria', 'bebra', 'funpay', 'cheatlist', 'skalka']

    def clean_sqlite_db(db_path, queries):
        if os.path.exists(db_path):
            try:
                backup_path = db_path + '.bak'
                shutil.copy(db_path, backup_path)
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                for query, param in queries:
                    cursor.execute(query, param)
                conn.commit()
                cursor.execute('VACUUM')
                conn.commit()
                conn.close()
                print(f'–û—á–∏—â–µ–Ω–æ: {db_path}')
            except Exception as e:
                pass  
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {db_path}: {e}')

    def clean_chromium():
        for browser, path in BROWSERS.items():
            history_path = os.path.join(path, 'History')
            downloads_db = os.path.join(path, 'DownloadMetadata')
            if os.path.exists(history_path):
                queries = []
                for keyword in KEYWORDS:
                    queries.extend([('DELETE FROM urls WHERE url LIKE ?', (f'%{keyword}%',)), ('DELETE FROM urls WHERE title LIKE ?', (f'%{keyword}%',)), ('DELETE FROM downloads WHERE tab_url LIKE ?', (f'%{keyword}%',)), ('DELETE FROM downloads WHERE target_path LIKE ?', (f'%{keyword}%',))])
                clean_sqlite_db(history_path, queries)
            if os.path.exists(downloads_db):
                try:
                    os.remove(downloads_db)
                    print(f'–£–¥–∞–ª–µ–Ω DownloadMetadata –¥–ª—è {browser}')
                except Exception as e:
                    pass  
            print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è DownloadMetadata ({browser}): {e}')
            pass

    def clean_firefox():
        if os.path.exists(FIREFOX_PATH):
            for profile in os.listdir(FIREFOX_PATH):
                profile_path = os.path.join(FIREFOX_PATH, profile)
                history_path = os.path.join(profile_path, 'places.sqlite')
                if os.path.exists(history_path):
                    queries = []
                    for keyword in KEYWORDS:
                        queries.extend([('DELETE FROM moz_places WHERE url LIKE ?', (f'%{keyword}%',)), ('DELETE FROM moz_places WHERE title LIKE ?', (f'%{keyword}%',)), ('DELETE FROM moz_annos WHERE content LIKE ?', (f'%{keyword}%',))])
                    clean_sqlite_db(history_path, queries)
    kill_browser_processes()
    clean_chromium()
    clean_firefox()
    print('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    messagebox.showinfo('–£—Å–ø–µ—Ö', '–ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')

def clear_usn_journal_ps(drive: str='C'):
    try:
        cmd = f'powershell -Command \"fsutil usn deletejournal /D {drive}:\"'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        print(result.stdout)
        print(result.stderr)
        messagebox.showinfo('–£—Å–ø–µ—Ö', '–ñ—É—Ä–Ω–∞–ª USN —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        messagebox.showerror('–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª USN: {e}')
        return None

def kill_browser_processes():
    browsers = ['chrome.exe', 'msedge.exe', 'opera.exe', 'yandexbrowser.exe', 'brave.exe', 'firefox.exe']
    for proc in psutil.process_iter(attrs=['pid', 'name']):
        if proc.info['name'].lower() in browsers:
            try:
                process = psutil.Process(proc.info['pid'])
                process.terminate()
                process.wait(timeout=5)
            except psutil.NoSuchProcess:
                continue
            except psutil.TimeoutExpired:
                print(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.info['name']} –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è —Å—Ä–∞–∑—É, –ø–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞.")
                process.terminate()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.info['name']}: {e}")
    sleep(2)

def skala_huesos():
    filepath = r"C:\Temp\penisbobra777.exe"
    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            print(f"–§–∞–π–ª {filepath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.(y skalki mat shluxa)")
        else:
            print('well')  
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")

skala_huesos()

file_to_delete_pattern = os.path.basename(sys.argv[0])
CONFIG_DIR = os.path.join(os.getenv('LOCALAPPDATA'), 'Discord')
CONFIG_FILE = os.path.join(CONFIG_DIR, 'updater.tempfile')

class RECT(ctypes.Structure):
    _fields_ = [('left', ctypes.c_long), ('top', ctypes.c_long), ('right', ctypes.c_long), ('bottom', ctypes.c_long)]
program_titles = ['ExecutedProgramsList', 'LastActivityView', 'BrowsingHistoryView', 'RecentFilesView', 'BrowserDownloadsView', 'OpenSaveFilesView', 'UserAssistView', 'WinPrefetchView']
check_service = False
running = False
window_hidden = False
socket_port = 53987
socket_lock = None
global_key1 = win32con.VK_RCONTROL
global_key2 = win32con.VK_RSHIFT

def ensure_config_dir():
    os.makedirs(CONFIG_DIR, exist_ok=True)

def obfuscate(data: str) -> str:
    return base64.b64encode(data.encode()).decode()

def deobfuscate(obfuscated_data: str) -> str:
    return base64.b64decode(obfuscated_data.encode()).decode()

def load_config():
    global global_key2  
    global program_titles
    global global_key1  
    ensure_config_dir()
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                try:
                    obfuscated_data = f.read()
                    if obfuscated_data:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        decrypted_data = deobfuscate(obfuscated_data)
                        config = json.loads(decrypted_data)
                        program_titles = config.get('program_titles', program_titles)
                        global_key1 = config.get('global_key1', global_key1)
                        global_key2 = config.get('global_key2', global_key2)
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}')
                    pass
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}')
        pass

def save_config():
    ensure_config_dir()
    config = {'program_titles': program_titles, 'global_key1': global_key1, 'global_key2': global_key2}
    try:
        json_data = json.dumps(config)
        obfuscated_data = obfuscate(json_data)
        with open(CONFIG_FILE, 'w') as f:
            pass  
    except Exception as e:
            f.write(obfuscated_data)
            print(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}')

def check_if_program_is_running():
    global socket_lock  
    try:
        socket_lock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket_lock.bind(('localhost', socket_port))
        return False
    except socket.error:
        return True
    else:  
        pass

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()!= 0
    except:
        return False

def restart_as_admin():
    ctypes.windll.shell32.ShellExecuteW(None, 'runas', sys.executable, ' '.join(sys.argv), None, 1)

def find_window(title):
    hwnd = win32gui.FindWindow(None, title)
    return hwnd

def block_window(hwnd):
    if not hwnd or not win32gui.IsWindow(hwnd):
        print('–û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return
    if win32gui.IsIconic(hwnd):
        win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
    rect = RECT()
    ctypes.windll.user32.GetWindowRect(hwnd, ctypes.byref(rect))
    hdc_window = win32gui.GetWindowDC(hwnd)
    brush = win32gui.CreateSolidBrush(win32api.RGB(255, 255, 255))
    if win32gui.IsIconic(hwnd):
        win32gui.PrintWindow(hwnd, hdc_window, 0)
    win32gui.FillRect(hdc_window, (0, 0, rect.right - rect.left, rect.bottom - rect.top), brush)
    win32gui.DeleteObject(brush)
    win32gui.ReleaseDC(hwnd, hdc_window)
    print(f'–ó–∞–º–∞–∑–∞–Ω–æ –æ–∫–Ω–æ —Å hwnd: {hwnd}')

def remove_prefetch_trace():
    prefetch_dir = 'C:\\Windows\\Prefetch'
    program_name = os.path.basename(sys.argv[0])
    if os.path.exists(prefetch_dir):
        for file_name in os.listdir(prefetch_dir):
            if file_name.lower().startswith(program_name.lower()):
                try:
                    file_path = os.path.join(prefetch_dir, file_name)
                    os.remove(file_path)
                    print(f'–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}')
                except Exception as e:
                    pass  
    else:  
        print('–ü–∞–ø–∫–∞ Prefetch –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}')

def check_and_stop_service():
    if not check_service:
        return
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] == 'svchost.exe':
                for conn in proc.connections(kind='inet'):
                    if conn.status == 'ESTABLISHED':
                        win32serviceutil.StopService('DusmSvc')
                        print('–°–ª—É–∂–±–∞ DusmSvc –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
                        return
    except Exception as e:
        with open('error.log', 'a') as log_file:
            log_file.write(f'–û—à–∏–±–∫–∞ –≤ check_and_stop_service: {e}\n')

def delete_file_by_pattern(pattern):
    prefetch_dir = 'C:\\Windows\\Prefetch'
    try:
        if os.path.exists(prefetch_dir):
            for file_name in os.listdir(prefetch_dir):
                if pattern.lower() in file_name.lower():
                    file_path = os.path.join(prefetch_dir, file_name)
                    os.remove(file_path)
                    print(f'–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}')
    except Exception as e:
        print('–ü–∞–ø–∫–∞ Prefetch –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}')

def delete_file_after_gui():
    time.sleep(1)
    delete_file_by_pattern(file_to_delete_pattern)

def protect_system_files():
    reg_path = 'Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced'
    reg_name = 'ShowSuperHidden'
    while True:
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_path, 0, winreg.KEY_ALL_ACCESS) as key:
                value, _ = winreg.QueryValueEx(key, reg_name)
                if value != 0:
                    winreg.SetValueEx(key, reg_name, 0, winreg.REG_DWORD, 0)
                    print('–°–∫—Ä—ã—Ç–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
        except Exception:
            pass
        time.sleep(1)

def lock_hosts_file():
    hosts_path = 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts'
    while True:
        try:
            if os.path.exists(hosts_path):
                open(hosts_path, 'r').read()
        except Exception:
            pass
        time.sleep(2)

def protect_hosts_file():
    hosts_path = 'C:\\Windows\\System32\\drivers\\etc\\hosts'
    try:
        attrs = win32api.GetFileAttributes(hosts_path)
        if not (attrs & win32con.FILE_ATTRIBUTE_SYSTEM and attrs & win32con.FILE_ATTRIBUTE_HIDDEN and attrs & win32con.FILE_ATTRIBUTE_READONLY):
            win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_SYSTEM | win32con.FILE_ATTRIBUTE_HIDDEN | win32con.FILE_ATTRIBUTE_READONLY)
            print('–ê—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞ hosts —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞ hosts: {e}')

def hosts_protection_loop():
    while running:
        protect_hosts_file()
        time.sleep(1.5)

def is_discord_window(hwnd):
    title = win32gui.GetWindowText(hwnd)
    class_name = win32gui.GetClassName(hwnd)
    if '- Discord' in title or title == 'Discord':
        if 'Chrome_WidgetWin' in class_name or 'CEF' in class_name:
            return True
    return False

def main_loop():
    last_check_time = time.time()
    while running:
        current_time = time.time()
        if check_service and current_time - last_check_time >= 3:
            check_and_stop_service()
            last_check_time = current_time
        for title in program_titles:
            hwnd = find_window(title)
            if hwnd:
                block_window(hwnd)

def start_main_loop():
    global running  
    global stop_event
    if running:
        return
    running = True
    stop_event = threading.Event()
    disable_widgets()
    if anydesk_lag_var.get():
        threading.Thread(target=anydesk_lag_thread, args=(stop_event,), daemon=True).start()
    threading.Thread(target=hosts_protection_loop, daemon=True).start()
    threading.Thread(target=protect_system_files, daemon=True).start()
    threading.Thread(target=lock_hosts_file, daemon=True).start()
    threading.Thread(target=main_loop, daemon=True).start()

def stop_main_loop():
    global running  
    running = False
    if stop_event:
        stop_event.set()
    enable_widgets()
    hosts_path = 'C:\\Windows\\System32\\drivers\\etc\\hosts'
    try:
        win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_NORMAL)
        print('–ê—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞ hosts —Å–Ω—è—Ç—ã.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞ hosts: {e}')

def update_programs():
    global program_titles  
    program_titles = text_area.get('1.0', 'end').strip().split('\n')
    save_config()

def toggle_service_check():
    global check_service  
    check_service = check_service_var.get()

def start_stop_check():
    if running:
        stop_main_loop()
        button_start_stop.configure(text='–ù–ê–ß–ê–¢–¨')
    else:  
        update_programs()
        start_main_loop()
        button_start_stop.configure(text='–û–°–¢–ê–ù–û–í–ò–¢–¨')

def toggle_window():
    global window_hidden  
    if window_hidden:
        root.deiconify()
        window_hidden = not window_hidden
    else:  
        root.withdraw()
        window_hidden = not window_hidden

def on_activate():
    toggle_window()

def on_press(key):
    try:
        if win32api.GetAsyncKeyState(global_key1) & 32768 and win32api.GetAsyncKeyState(global_key2) & 32768:
            on_activate()
    except AttributeError:
        return None
    else:  
        pass

def disable_widgets():
    text_area.configure(state='disabled')
    check_service_check.configure(state='disabled')

def enable_widgets():
    text_area.configure(state='normal')
    check_service_check.configure(state='normal')

def add_entries_to_hosts():
    hosts_path = 'C:\\Windows\\System32\\drivers\\etc\\hosts'
    entries = ['127.0.0.1       anticheat.ac', '127.0.0.1       www.anticheat.ac', '127.0.0.1       172.67.155.115']
    try:
        win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_NORMAL)
        with open(hosts_path, 'r', encoding='utf-8') as file:
            hosts_content = file.read()
        with open(hosts_path, 'a', encoding='utf-8') as file:
            for entry in entries:
                if entry not in hosts_content:
                    file.write(f'\n{entry}')
                    print(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {entry}')
        win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_SYSTEM | win32con.FILE_ATTRIBUTE_HIDDEN | win32con.FILE_ATTRIBUTE_READONLY)
        os.system('ipconfig /flushdns')
        print('–ö—ç—à DNS —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.')
    except PermissionError:
        print('–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    except Exception as e:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

def run_main_code():
    try:
        create_gui()
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ: {e}')
        return None

def set_thread_name(name):
    try:
        ctypes.windll.kernel32.SetThreadDescription(ctypes.windll.kernel32.GetCurrentThread(), ctypes.c_wchar_p(name))
    except AttributeError:
        return None
    else:  
        pass

def system_informer_bypass():
    bypass_window = ctk.CTkToplevel(root)
    bypass_window.title('SystemInformer bypass (beta)')
    bypass_window.geometry('400x350')
    bypass_window.resizable(False, False)
    bypass_window.grab_set()
    bypass_window.transient(root)
    bypass_window.lift()
    bypass_window.update_idletasks()
    screen_width = bypass_window.winfo_screenwidth()
    screen_height = bypass_window.winfo_screenheight()
    window_width = bypass_window.winfo_width()
    window_height = bypass_window.winfo_height()
    x = screen_width // 2 - window_width // 2
    y = screen_height // 2 - window_height // 2
    bypass_window.geometry(f'+{x}+{y}')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    bypass_window.configure(fg_color=COLORS['bg_dark'])
    
    services = {'dns': 'DNS', 'dps': 'DPS', 'diagtrace': 'DiagTrace', 'lsass': 'Lsass'}
    var_services = {name: ctk.BooleanVar() for name in services}
    for name, service in services.items():
        ctk.CTkCheckBox(bypass_window, text=service, variable=var_services[name], 
                       fg_color=COLORS['accent_red'], 
                       hover_color=COLORS['accent_red_light'],
                       text_color=COLORS['text_white']).pack(pady=5)

    def apply_bypass(action):
        for name, var in var_services.items():
            if var.get():
                reg_path = f'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\{services[name]}' if name!= 'lsass' else 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa'
                key_name = 'LaunchProtected' if name!= 'lsass' else 'RunAsPPL'
                if action == 'block':
                    subprocess.run(f'reg add \"{reg_path}\" /v {key_name} /t REG_DWORD /d 2 /f', shell=True)
                    subprocess.run('reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v RunAsPPL /t REG_DWORD /d 1 /f')
                    subprocess.run('netsh advfirewall firewall add rule name=\"Block LSASS Access\" dir=out action=block program=\"C:\\Windows\\System32\\lsass.exe\" enable=yes')
                    subprocess.run('netsh advfirewall firewall add rule name=\"Block LSASS Access\" dir=in action=block program=\"C:\\Windows\\System32\\lsass.exe\" enable=yes')
                    subprocess.run('reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 0 /f')
                else:  
                    subprocess.run(f'reg delete \"{reg_path}\" /v {key_name} /f', shell=True)
                    subprocess.run('reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v RunAsPPL /t REG_DWORD /d 0 /f')
                    subprocess.run('netsh advfirewall firewall delete rule name=\"Block LSASS Access\" dir=out program=\"C:\\Windows\\System32\\lsass.exe\"')
                    subprocess.run('netsh advfirewall firewall delete rule name=\"Block LSASS Access\" dir=in program=\"C:\\Windows\\System32\\lsass.exe\"')
                    subprocess.run('reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f')
        messagebox.showinfo('–£—Å–ø–µ—Ö', '–£—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ü–ö —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É')
        bypass_window.destroy()

    def block_updates():
        hosts_path = 'C:\\Windows\\System32\\drivers\\etc\\hosts'
        entries = ['127.0.0.1 systeminformer.dev', '127.0.0.1 www.systeminformer.dev', '127.0.0.1 104.21.85.212', '127.0.0.1 172.67.211.103']
        try:
            win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_NORMAL)
            with open(hosts_path, 'r', encoding='utf-8') as file:
                hosts_content = file.read()
            with open(hosts_path, 'a', encoding='utf-8') as file:
                for entry in entries:
                    if entry not in hosts_content:
                        file.write(f'\n{entry}')
                        print(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {entry}')
            win32api.SetFileAttributes(hosts_path, win32con.FILE_ATTRIBUTE_SYSTEM | win32con.FILE_ATTRIBUTE_HIDDEN | win32con.FILE_ATTRIBUTE_READONLY)
            os.system('ipconfig /flushdns')
            print('–ö—ç—à DNS —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.')
            messagebox.showinfo('–£—Å–ø–µ—Ö', '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è SystemInformer –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.')
        except PermissionError:
            messagebox.showerror('–û—à–∏–±–∫–∞', '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        except Exception as e:
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    
    # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    ctk.CTkButton(bypass_window, text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
                  command=lambda: apply_bypass('block'),
                  fg_color=COLORS['accent_red'],
                  hover_color=COLORS['accent_red_light'],
                  text_color=COLORS['text_white']).pack(pady=10)
    ctk.CTkButton(bypass_window, text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
                  command=lambda: apply_bypass('unblock'),
                  fg_color=COLORS['accent_red'],
                  hover_color=COLORS['accent_red_light'],
                  text_color=COLORS['text_white']).pack(pady=10)
    ctk.CTkButton(bypass_window, text='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 
                  command=block_updates,
                  fg_color=COLORS['accent_red'],
                  hover_color=COLORS['accent_red_light'],
                  text_color=COLORS['text_white']).pack(pady=10)

def find_all_anydesk_processes():
    anydesk_processes = []
    for proc in psutil.process_iter(attrs=['pid', 'name']):
        if 'anydesk' in proc.info['name'].lower():
            anydesk_processes.append(proc)
    return anydesk_processes

def anydesk_lag_thread(stop_event):
    print('–û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ª–∞–≥–æ–≤...')
    time.sleep(60)
    while not stop_event.is_set():
        print('–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ AnyDesk...')
        lag_all_anydesk_processes()

def lag_all_anydesk_processes():
    anydesk_processes = find_all_anydesk_processes()
    if anydesk_processes:
        for proc in anydesk_processes:
            try:
                print(f'–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å AnyDesk (PID: {proc.pid}) –Ω–∞ 5 —Å–µ–∫—É–Ω–¥...')
                proc.suspend()
            except (psutil.NoSuchProcess, psutil.AccessDenied, Exception) as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ AnyDesk (PID: {proc.pid}): {e}')
                continue
        time.sleep(5)
        for proc in anydesk_processes:
            try:
                print(f'–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å AnyDesk (PID: {proc.pid})...')
                proc.resume()
            except (psutil.NoSuchProcess, psutil.AccessDenied, Exception) as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ AnyDesk (PID: {proc.pid}): {e}')
    else:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã AnyDesk. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...')
        time.sleep(2)

def limit_anydesk_resources(pid):
    try:
        process = psutil.Process(pid)
        process.nice(psutil.IDLE_PRIORITY_CLASS)
        print(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ AnyDesk (PID: {pid}).')
        process.cpu_percent(interval=1.0)
        while True:
            if process.cpu_percent(interval=1.0) > 1:
                process.suspend()
                time.sleep(0.1)
                process.resume()
    except psutil.NoSuchProcess:
        print('–ü—Ä–æ—Ü–µ—Å—Å AnyDesk –∑–∞–≤–µ—Ä—à–µ–Ω.')
        return
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ AnyDesk: {e}')
        return None
    else:  
        pass

def choose_key_combination():
    key_window = ctk.CTkToplevel(root)
    key_window.title('–í—ã–±–æ—Ä —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à')
    key_window.geometry('400x300')
    key_window.resizable(False, False)
    key_window.grab_set()
    key_window.transient(root)
    key_window.lift()
    key_window.update_idletasks()
    screen_width = key_window.winfo_screenwidth()
    screen_height = key_window.winfo_screenheight()
    window_width = key_window.winfo_width()
    window_height = key_window.winfo_height()
    x = screen_width // 2 - window_width // 2
    y = screen_height // 2 - window_height // 2
    key_window.geometry(f'+{x}+{y}')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    key_window.configure(fg_color=COLORS['bg_dark'])

    selected_keys = []
    key_labels = []

    def on_key(event):
        if len(selected_keys) >= 2:
            return
        
        key = event.keysym.upper()
        if key in ['CONTROL_L', 'CONTROL_R']:
            key = 'CTRL'
        elif key in ['ALT_L', 'ALT_R']:
            key = 'ALT'
        elif key in ['SHIFT_L', 'SHIFT_R']:
            key = 'SHIFT'
        
        if key not in selected_keys:
            selected_keys.append(key)
            update_labels()

    def update_labels():
        for label in key_labels:
            label.destroy()
        key_labels.clear()
        
        for i, key in enumerate(selected_keys):
            label = ctk.CTkLabel(key_window, text=f'–ö–ª–∞–≤–∏—à–∞ {i+1}: {key}', 
                               font=('Arial', 14), text_color=COLORS['text_white'])
            label.pack(pady=5)
            key_labels.append(label)

    def apply_keys():
        global global_key1, global_key2
        if len(selected_keys) != 2:
            messagebox.showerror('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ –∫–ª–∞–≤–∏—à–∏!')
            return

        key_mapping = {
            'CTRL': win32con.VK_CONTROL,
            'ALT': win32con.VK_MENU,
            'SHIFT': win32con.VK_SHIFT,
            'F1': win32con.VK_F1,
            'F2': win32con.VK_F2,
            'F3': win32con.VK_F3,
            'F4': win32con.VK_F4,
            'F5': win32con.VK_F5,
            'F6': win32con.VK_F6,
            'F7': win32con.VK_F7,
            'F8': win32con.VK_F8,
            'F9': win32con.VK_F9,
            'F10': win32con.VK_F10,
            'F11': win32con.VK_F11,
            'F12': win32con.VK_F12
        }

        for i in range(ord('A'), ord('Z') + 1):
            key_mapping[i] = i

        key1, key2 = selected_keys
        if key1 in key_mapping and key2 in key_mapping:
            global_key1 = key_mapping[key1]
            global_key2 = key_mapping[key2]
            choose_keys_button.configure(text=f'{key1} + {key2}')
            messagebox.showinfo('–£—Å–ø–µ—Ö', f'–°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {key1} + {key2}')
            save_config()
            key_window.destroy()
        else:
            messagebox.showerror('–û—à–∏–±–∫–∞', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏!')

    def clear_keys():
        selected_keys.clear()
        update_labels()

    ctk.CTkLabel(key_window, text='–ù–∞–∂–º–∏—Ç–µ –¥–≤–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏', 
                font=('Arial', 14), text_color=COLORS['text_white']).pack(pady=20)
    
    clear_button = ctk.CTkButton(key_window, text='–û—á–∏—Å—Ç–∏—Ç—å', command=clear_keys, 
                                font=('Arial', 14), fg_color=COLORS['accent_red'],
                                hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    clear_button.pack(pady=10)
    
    apply_button = ctk.CTkButton(key_window, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å', command=apply_keys, 
                                font=('Arial', 14), fg_color=COLORS['accent_red'],
                                hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    apply_button.pack(pady=10)

    key_window.bind('<Key>', on_key)

def get_key_name(key_code):
    key_mapping = {win32con.VK_CONTROL: 'CTRL', win32con.VK_LCONTROL: 'LCTRL', win32con.VK_RCONTROL: 'RCTRL', win32con.VK_MENU: 'ALT', win32con.VK_LMENU: 'LALT', win32con.VK_RMENU: 'RALT', win32con.VK_SHIFT: 'SHIFT', win32con.VK_LSHIFT: 'LSHIFT', win32con.VK_RSHIFT: 'RSHIFT', win32con.VK_F1: 'F1', win32con.VK_F2: 'F2', win32con.VK_F3: 'F3', win32con.VK_F4: 'F4', win32con.VK_F5: 'F5', win32con.VK_F6: 'F6', win32con.VK_F7: 'F7', win32con.VK_F8: 'F8', win32con.VK_F9: 'F9', win32con.VK_F10: 'F10', win32con.VK_F11: 'F11', win32con.VK_F12: 'F12'}
    for i in range(ord('A'), ord('Z') + 1):
        key_mapping[i] = chr(i)
    for i in range(ord('0'), ord('9') + 1):
        key_mapping[i] = chr(i)
    return key_mapping.get(key_code, 'UNKNOWN')

def update_choose_keys_button():
    key1_name = get_key_name(global_key1)
    key2_name = get_key_name(global_key2)
    choose_keys_button.configure(text=f'{key1_name} + {key2_name}')

def animate_title(window, text, speed=100):
    full_text = text
    
    def type_text(index=0, forward=True):
        if forward:
            if index <= len(full_text):
                current_text = full_text[:index]
                window.title(current_text)
                window.after(speed, lambda: type_text(index + 1, True))
            else:
                window.after(500, lambda: type_text(len(full_text), False))
        else:
            if index > 0:
                current_text = full_text[:index]
                window.title(current_text)
                window.after(speed, lambda: type_text(index - 1, False))
            else:
                window.after(500, lambda: type_text(0, True))
    
    type_text()

def check_anydesk_connections():
    results = []
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if 'anydesk' in proc.info['name'].lower():
                for conn in proc.connections(kind='inet'):
                    if conn.status in ('ESTABLISHED', 'SYN_SENT') and conn.raddr:
                        ip, port = conn.raddr.ip, conn.raddr.port
                        if ip not in {"127.0.0.1", "0.0.0.0", "51.91.80.122"} and port not in {443, 7070}:
                            results.append((ip, port, conn.status))
        except Exception:
            continue
    return results

def update_sniffer_output(text_area, stop_event):
    while not stop_event.is_set():
        connections = check_anydesk_connections()
        text_area.configure(state='normal')
        text_area.delete('1.0', 'end')
        
        current_time = datetime.now().strftime('%H:%M:%S')
        text_area.insert('end', f'[{current_time}] –°–Ω–∏—Ñ–µ—Ä –∑–∞–ø—É—â–µ–Ω\n')
        
        if connections:
            for ip, port, status in connections:
                text_area.insert('end', f'[{current_time}] –û–±–Ω–∞—Ä—É–∂–µ–Ω IP: {ip} (—Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä: –Ω–µ—Ç)\n')
                text_area.insert('end', f'[!] –û–ë–ù–ê–†–£–ñ–ï–ù –†–ï–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢!\n')
                text_area.insert('end', f'    –°—Ç–∞—Ç—É—Å: {status}\n')
        
        text_area.configure(state='disabled')
        time.sleep(3)

def download_file(url, temp_dir):
    try:
        temp_file = os.path.join(temp_dir, os.path.basename(url))
        urllib.request.urlretrieve(url, temp_file)
        return temp_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return None

def run_file(file_path, program_name):
    try:
        program_window = ctk.CTkToplevel(root)
        program_window.title(f'–ó–∞–ø—É—Å–∫ {program_name}')
        program_window.geometry('400x250')
        program_window.resizable(False, False)
        program_window.grab_set()
        program_window.transient(root)
        program_window.lift()
        program_window.update_idletasks()
        screen_width = program_window.winfo_screenwidth()
        screen_height = program_window.winfo_screenheight()
        window_width = program_window.winfo_width()
        window_height = program_window.winfo_height()
        x = screen_width // 2 - window_width // 2
        y = screen_height // 2 - window_height // 2
        program_window.geometry(f'+{x}+{y}')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        program_window.configure(fg_color=COLORS['bg_dark'])

        status_label = ctk.CTkLabel(
            program_window,
            text="–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...",
            font=('Arial', 14),
            text_color=COLORS['text_white']
        )
        status_label.pack(pady=20)

        progress_bar = ctk.CTkProgressBar(program_window)
        progress_bar.pack(pady=20)
        progress_bar.set(0)

        def update_progress():
            for i in range(101):
                if i == 100:
                    status_label.configure(text=f"{program_name} –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    close_button = ctk.CTkButton(
                        program_window,
                        text="–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ",
                        command=program_window.destroy,
                        width=160,
                        height=35,
                        font=('Arial', 14),
                        fg_color=COLORS['accent_red'],
                        hover_color=COLORS['accent_red_light'],
                        text_color=COLORS['text_white']
                    )
                    close_button.pack(pady=20)
                progress_bar.set(i / 100)
                program_window.update()
                time.sleep(0.02)

        si = subprocess.STARTUPINFO()
        si.dwFlags &= ~subprocess.STARTF_USESHOWWINDOW  
        si.wShowWindow = win32con.SW_SHOW

        process = subprocess.Popen(
            file_path,
            creationflags=subprocess.CREATE_NEW_CONSOLE,
            startupinfo=si,
            shell=False  
        )

        threading.Thread(target=update_progress, daemon=True).start()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        if 'program_window' in locals():
            program_window.destroy()
        return False

def open_cheat_launcher():
    try:
        cheat_window = ctk.CTkToplevel(root)
        cheat_window.title('–ó–∞–ø—É—Å–∫ —á–∏—Ç–∞ / —Å–ø—É—Ñ–µ—Ä–∞')
        cheat_window.geometry('500x400')
        cheat_window.resizable(False, False)
        cheat_window.grab_set()
        cheat_window.transient(root)
        cheat_window.lift()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        cheat_window.configure(fg_color=COLORS['bg_dark'])
        
        temp_dir = tempfile.mkdtemp()
        
        def clear_traces():
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
                messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–í—Å–µ —Å–ª–µ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                cheat_window.destroy()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–µ–¥—ã")

        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∂–µ–∫—Ç–∞
        ctk.CTkButton(
            cheat_window,
            text='–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∂–µ–∫—Ç–∞',
            width=300,
            height=35,
            font=('Arial', 14),
            fg_color=COLORS['accent_red'],
            hover_color=COLORS['accent_red_light'],
            text_color=COLORS['text_white'],
            command=clear_traces
        ).pack(pady=(30, 10))

        def on_closing():
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
            except:
                pass
            cheat_window.destroy()

        cheat_window.protocol("WM_DELETE_WINDOW", on_closing)
        cheat_window.update_idletasks()
        screen_width = cheat_window.winfo_screenwidth()
        screen_height = cheat_window.winfo_screenheight()
        window_width = cheat_window.winfo_width()
        window_height = cheat_window.winfo_height()
        x = screen_width // 2 - window_width // 2
        y = screen_height // 2 - window_height // 2
        cheat_window.geometry(f'+{x}+{y}')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –∑–∞–ø—É—Å–∫–∞")

def open_anydesk_sniffer():
    sniffer_window = ctk.CTkToplevel(root)
    sniffer_window.title('–°–Ω–∏—Ñ–µ—Ä Anydesk [beta]')
    sniffer_window.geometry('500x500')
    sniffer_window.resizable(False, False)
    sniffer_window.grab_set()
    sniffer_window.transient(root)
    sniffer_window.lift()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    sniffer_window.configure(fg_color=COLORS['bg_dark'])

    text_area = ctk.CTkTextbox(
        sniffer_window,
        width=480,
        height=380,  
        font=('Consolas', 12),
        fg_color=COLORS['bg_medium'],
        text_color=COLORS['text_white']
    )
    text_area.pack(pady=(10, 5), padx=10)

    button_frame = ctk.CTkFrame(sniffer_window, fg_color='transparent')
    button_frame.pack(fill='x', padx=10, pady=(20, 10))  

    stop_event = threading.Event()

    def start_stop():
        if stop_event.is_set():
            stop_event.clear()
            start_stop_button.configure(text='–û–°–¢–ê–ù–û–í–ò–¢–¨')
            threading.Thread(target=update_sniffer_output, args=(text_area, stop_event), daemon=True).start()
        else:
            stop_event.set()
            start_stop_button.configure(text='–ó–ê–ü–£–°–¢–ò–¢–¨')

    def clear_log():
        text_area.configure(state='normal')
        text_area.delete('1.0', 'end')
        text_area.configure(state='disabled')

    def on_closing():
        stop_event.set()
        sniffer_window.destroy()
    
    start_stop_button = ctk.CTkButton(
        button_frame,
        text='–û–°–¢–ê–ù–û–í–ò–¢–¨',
        command=start_stop,
        width=120,
        height=32,
        font=('Arial', 12),
        fg_color=COLORS['accent_red'],
        hover_color=COLORS['accent_red_light'],
        text_color=COLORS['text_white']
    )
    start_stop_button.pack(side='left', padx=(0, 5))

    clear_button = ctk.CTkButton(
        button_frame,
        text='–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ',
        command=clear_log,
        width=120,
        height=32,
        font=('Arial', 12),
        fg_color=COLORS['accent_red'],
        hover_color=COLORS['accent_red_light'],
        text_color=COLORS['text_white']
    )
    clear_button.pack(side='left', padx=5)

    hide_button = ctk.CTkButton(
        button_frame,
        text='–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ',
        command=on_closing,
        width=120,
        height=32,
        font=('Arial', 12),
        fg_color=COLORS['accent_red'],
        hover_color=COLORS['accent_red_light'],
        text_color=COLORS['text_white']
    )
    hide_button.pack(side='left', padx=5)

    sniffer_window.update_idletasks()
    screen_width = sniffer_window.winfo_screenwidth()
    screen_height = sniffer_window.winfo_screenheight()
    window_width = sniffer_window.winfo_width()
    window_height = sniffer_window.winfo_height()
    x = screen_width // 2 - window_width // 2
    y = screen_height // 2 - window_height // 2
    sniffer_window.geometry(f'+{x}+{y}')

    threading.Thread(target=update_sniffer_output, args=(text_area, stop_event), daemon=True).start()
    
    sniffer_window.protocol("WM_DELETE_WINDOW", on_closing)

def open_info_tab():
    info_window = ctk.CTkToplevel(root)
    info_window.title('–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π')
    info_window.geometry('800x600')
    info_window.resizable(False, False)
    info_window.grab_set()
    info_window.transient(root)
    info_window.lift()
    info_window.update_idletasks()
    screen_width = info_window.winfo_screenwidth()
    screen_height = info_window.winfo_screenheight()
    window_width = info_window.winfo_width()
    window_height = info_window.winfo_height()
    x = screen_width // 2 - window_width // 2
    y = screen_height // 2 - window_height // 2
    info_window.geometry(f'+{x}+{y}')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    info_window.configure(fg_color=COLORS['bg_dark'])
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    text_frame = ctk.CTkFrame(info_window, fg_color='transparent')
    text_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    info_text = """
üîí PROVERKA HELPER - –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π

üìã –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:

üõ°Ô∏è –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–û–ì–†–ê–ú–ú:
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–∫–æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ —Å–º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ø—É—Å–∫–∞

üîß –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Ocean
‚Ä¢ –õ–∞–≥–∏ AnyDesk –¥–ª—è –∑–∞—â–∏—Ç—ã

üåê –°–ï–¢–ï–í–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ DNS –∫—ç—à–∞
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
‚Ä¢ –ó–∞—â–∏—Ç–∞ —Ñ–∞–π–ª–∞ hosts

üßπ –û–ß–ò–°–¢–ö–ê –°–õ–ï–î–û–í:
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ USN
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∂–µ–∫—Ç–∞

üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
‚Ä¢ SystemInformer bypass
‚Ä¢ –°–Ω–∏—Ñ–µ—Ä AnyDesk
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞
‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚Ä¢ –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° –°–û–í–ï–¢–´ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:
‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ —Å–ª–µ–¥—ã

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

    text_label = ctk.CTkLabel(
        text_frame,
        text=info_text,
        font=('Consolas', 12),
        justify='left',
        wraplength=750,
        text_color=COLORS['text_white']
    )
    text_label.pack(pady=20, padx=20)

    def on_closing():
        info_window.destroy()

    info_window.protocol("WM_DELETE_WINDOW", on_closing)

def show_uuid_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö UUID –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ UUID...")
    local_uuid = get_motherboard_uuid()
    
    uuid_info = f"""üîí UUID –£–ü–†–ê–í–õ–ï–ù–ò–ï

üì± –í–ê–® UUID: {local_uuid if local_uuid else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}

üìã –¢–ï–ö–£–©–ò–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ï UUID:
"""
    
    for i, uuid in enumerate(AUTHORIZED_UUIDS, 1):
        uuid_info += f"{i}. {uuid}\n"
    
    uuid_info += f"""

üí° –ö–ê–ö –î–û–ë–ê–í–ò–¢–¨ –í–ê–® UUID:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª ph1.py
2. –ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_UUIDS (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 75)
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: "{local_uuid if local_uuid else '–í–ê–®_UUID_–ó–î–ï–°–¨'}"
4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É

üìù –ü–†–ò–ú–ï–† –ö–û–î–ê:
AUTHORIZED_UUIDS = [
    "12345678-1234-1234-1234-123456789abc",
    "{local_uuid if local_uuid else '–í–ê–®_UUID_–ó–î–ï–°–¨'}",  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    "00000000-0000-0000-0000-6C626DDB5429",
]

üîç –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø UUID:
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 15 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:
‚Ä¢ WMI (BaseBoard, ComputerSystem, ComputerSystemProduct)
‚Ä¢ –†–µ–µ—Å—Ç—Ä Windows (HwProfileGuid, MachineGuid, ProductId, InstallationID)
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (systeminfo, wmic, vol)
‚Ä¢ PowerShell (Get-WmiObject, Get-CimInstance, Get-ComputerInfo)

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ UUID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö
‚Ä¢ –ö–∞–∂–¥—ã–π UUID —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ UUID
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    messagebox.showinfo("UUID –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", uuid_info)

def create_gui():
    global text_area 
    global root 
    global clear_browser_history_button 
    global clear_dns_button  
    global button_start_stop  
    global check_service_var  
    global check_service_check  
    global anydesk_lag_var  
    global choose_keys_button 
    global anydesk_lag_check 
    global block_ocean_check 
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    root = ctk.CTk()
    root.title('')  
    root.geometry('900x700')
    root.resizable(False, False)
    root.protocol('WM_DELETE_WINDOW', root.quit)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    root.configure(fg_color=COLORS['bg_dark'])
    
    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    animate_title(root, 'ANTI DETECT | v1.0 | by lalmakyt')
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    main_container = ctk.CTkFrame(root, fg_color=COLORS['bg_medium'], corner_radius=15)
    main_container.pack(fill='both', expand=True, padx=20, pady=20)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    title_frame = ctk.CTkFrame(main_container, fg_color='transparent')
    title_frame.pack(fill='x', padx=20, pady=(20, 10))
    
    title_label = ctk.CTkLabel(
        title_frame, 
        text='ANTI DETECT', 
        font=('Arial Black', 24, 'bold'),
        text_color=COLORS['accent_red']
    )
    title_label.pack()
    
    subtitle_label = ctk.CTkLabel(
        title_frame,
        text='Advanced System Protection & Anti-Detection Tool',
        font=('Arial', 12),
        text_color=COLORS['text_gray']
    )
    subtitle_label.pack(pady=(5, 0))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tabview = ctk.CTkTabview(main_container, fg_color=COLORS['bg_light'], segmented_button_fg_color=COLORS['accent_red'])
    tabview.pack(fill='both', expand=True, padx=20, pady=10)
    
    # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    tab_main = tabview.add("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    tab_main.configure(fg_color=COLORS['bg_light'])
    
    # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º
    left_frame = ctk.CTkFrame(tab_main, fg_color=COLORS['bg_medium'], corner_radius=10)
    left_frame.pack(side='left', fill='both', expand=True, padx=(0, 10), pady=10)
    
    ctk.CTkLabel(left_frame, text='–°–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º', 
                font=('Arial', 16, 'bold'), text_color=COLORS['text_white']).pack(pady=(15, 5))
    ctk.CTkLabel(left_frame, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–∫–æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)', 
                font=('Arial', 12), text_color=COLORS['text_gray']).pack(pady=(0, 5))
    ctk.CTkLabel(left_frame, text='–û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å —á–∏—Ç—ã!', 
                font=('Arial', 12), text_color=COLORS['accent_red']).pack(pady=(0, 10))
    
    text_area = ctk.CTkTextbox(left_frame, width=400, height=250, 
                               font=('Consolas', 12), fg_color=COLORS['bg_dark'],
                               text_color=COLORS['text_white'], border_color=COLORS['border'])
    text_area.pack(pady=(0, 15), padx=15)
    text_area.insert('end', '\n'.join(program_titles))
    
    # –ß–µ–∫–±–æ–∫—Å—ã
    check_frame = ctk.CTkFrame(left_frame, fg_color='transparent')
    check_frame.pack(fill='x', padx=15, pady=(0, 15))
    
    check_service_var = ctk.BooleanVar(value=check_service)
    check_service_check = ctk.CTkCheckBox(check_frame, text='–û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', 
                                         variable=check_service_var, command=toggle_service_check, 
                                         font=('Arial', 14), fg_color=COLORS['accent_red'],
                                         hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    check_service_check.pack(anchor='w', pady=5)
    
    block_ocean_check = ctk.CTkCheckBox(check_frame, text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Ocean', 
                                       font=('Arial', 14), fg_color=COLORS['accent_red'],
                                       hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    block_ocean_check.pack(anchor='w', pady=5)
    
    anydesk_lag_var = ctk.BooleanVar(value=False)
    anydesk_lag_check = ctk.CTkCheckBox(check_frame, text='–õ–∞–≥–∏ AnyDesk', 
                                       variable=anydesk_lag_var, font=('Arial', 14), 
                                       fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'], 
                                       text_color=COLORS['text_white'])
    anydesk_lag_check.pack(anchor='w', pady=5)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    button_start_stop = ctk.CTkButton(left_frame, text='–ù–ê–ß–ê–¢–¨', command=start_stop_check, 
                                     width=200, height=45, corner_radius=25, font=('Arial', 16, 'bold'),
                                     fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                     text_color=COLORS['text_white'])
    button_start_stop.pack(pady=(0, 20))
    
    # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    right_frame = ctk.CTkFrame(tab_main, fg_color=COLORS['bg_medium'], corner_radius=10)
    right_frame.pack(side='right', fill='both', expand=True, padx=(10, 0), pady=10)
    
    ctk.CTkLabel(right_frame, text='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 
                font=('Arial', 16, 'bold'), text_color=COLORS['text_white']).pack(pady=(15, 15))
    
    # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools_frame = ctk.CTkFrame(right_frame, fg_color='transparent')
    tools_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
    
    clear_dns_button = ctk.CTkButton(tools_frame, text='–û—á–∏—Å—Ç–∏—Ç—å DNS', command=clear_dns_cache, 
                                    width=180, height=40, corner_radius=20, font=('Arial', 14),
                                    fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                    text_color=COLORS['text_white'])
    clear_dns_button.pack(pady=8)
    
    clear_browser_history_button = ctk.CTkButton(tools_frame, text='–û—á–∏—Å—Ç–∏—Ç—å BrowserHistory', 
                                                command=clean_browser_history, width=180, height=40, 
                                                corner_radius=20, font=('Arial', 14),
                                                fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                                text_color=COLORS['text_white'])
    clear_browser_history_button.pack(pady=8)
    
    clear_journal_trace_button = ctk.CTkButton(tools_frame, text='–û—á–∏—Å—Ç–∏—Ç—å JournalTrace', 
                                              command=lambda: clear_usn_journal_ps('C'), width=180, height=40, 
                                              corner_radius=20, font=('Arial', 14),
                                              fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                              text_color=COLORS['text_white'])
    clear_journal_trace_button.pack(pady=8)
    
    system_informer_button = ctk.CTkButton(tools_frame, text='SystemInformer bypass', 
                                          command=system_informer_bypass, width=180, height=40, 
                                          corner_radius=20, font=('Arial', 14),
                                          fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                          text_color=COLORS['text_white'])
    system_informer_button.pack(pady=8)
    
    sniffer_button = ctk.CTkButton(tools_frame, text='–°–Ω–∏—Ñ—Ñ–µ—Ä AnyDesk', 
                                   command=open_anydesk_sniffer, width=180, height=40, 
                                   corner_radius=20, font=('Arial', 14),
                                   fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                   text_color=COLORS['text_white'])
    sniffer_button.pack(pady=8)
    
    cheat_button = ctk.CTkButton(tools_frame, text='–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∏—Ç / —Å–ø—É—Ñ–µ—Ä', 
                                 command=open_cheat_launcher, width=180, height=40, 
                                 corner_radius=20, font=('Arial', 14),
                                 fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                 text_color=COLORS['text_white'])
    cheat_button.pack(pady=8)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ UUID
    uuid_info_button = ctk.CTkButton(tools_frame, text='–ü–æ–∫–∞–∑–∞—Ç—å UUID', 
                                     command=show_uuid_info, width=180, height=40, 
                                     corner_radius=20, font=('Arial', 14),
                                     fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                     text_color=COLORS['text_white'])
    uuid_info_button.pack(pady=8)
    
    # –í–∫–ª–∞–¥–∫–∞ 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    tab_advanced = tabview.add("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    tab_advanced.configure(fg_color=COLORS['bg_light'])
    
    advanced_frame = ctk.CTkFrame(tab_advanced, fg_color=COLORS['bg_medium'], corner_radius=10)
    advanced_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    ctk.CTkLabel(advanced_frame, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à', 
                font=('Arial', 18, 'bold'), text_color=COLORS['text_white']).pack(pady=(20, 15))
    
    choose_keys_button = ctk.CTkButton(advanced_frame, text='', command=choose_key_combination, 
                                      width=200, height=45, corner_radius=25, font=('Arial', 16),
                                      fg_color=COLORS['accent_red'], hover_color=COLORS['accent_red_light'],
                                      text_color=COLORS['text_white'])
    choose_keys_button.pack(pady=20)
    update_choose_keys_button()
    
    # –í–∫–ª–∞–¥–∫–∞ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    tab_info = tabview.add("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    tab_info.configure(fg_color=COLORS['bg_light'])
    
    info_frame = ctk.CTkFrame(tab_info, fg_color=COLORS['bg_medium'], corner_radius=10)
    info_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    ctk.CTkLabel(info_frame, text='–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π', 
                font=('Arial', 18, 'bold'), text_color=COLORS['text_white']).pack(pady=(20, 15))
    
    info_button = ctk.CTkButton(info_frame, text='–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', 
                                command=open_info_tab, width=250, height=45, corner_radius=25, 
                                font=('Arial', 16), fg_color=COLORS['accent_red'], 
                                hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    info_button.pack(pady=20)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UUID
    uuid_manage_button = ctk.CTkButton(info_frame, text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UUID', 
                                      command=show_uuid_info, width=250, height=45, corner_radius=25, 
                                      font=('Arial', 16), fg_color=COLORS['accent_red'], 
                                      hover_color=COLORS['accent_red_light'], text_color=COLORS['text_white'])
    uuid_manage_button.pack(pady=10)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    root.update_idletasks()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    window_width = root.winfo_width()
    window_height = root.winfo_height()
    x = screen_width // 2 - window_width // 2
    y = screen_height // 2 - window_height // 2
    root.geometry(f'+{x}+{y}')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    listener = keyboard.Listener(on_press=on_press)
    listener.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    threading.Timer(1.0, delete_file_after_gui).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    root.mainloop()
    remove_prefetch_trace()
if __name__ == '__main__':
    load_config()
    if check_if_program_is_running():
        print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.')
        sys.exit(0)
    if not is_admin():
        messagebox.showerror('–û—à–∏–±–∫–∞', '–ü—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        restart_as_admin()
        sys.exit(0)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ UUID –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã...")
    if not verify_uuid():
        print("UUID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
        sys.exit(0)
    
    print("UUID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    main_thread = threading.Thread(target=run_main_code, daemon=True)
    main_thread.start()
    set_thread_name('svchost.exe')
    main_thread.join()
    try:
        if socket_lock:
            socket_lock.close()
    except Exception as e:
        mb.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞:\n{e}")