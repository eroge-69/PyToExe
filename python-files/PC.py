import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import subprocess
import os
import pyautogui
import psutil
import socket
import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
TOKEN = "7765911491:AAFNgXpr8NQcrIolh96E1xxJnWQc2XYyrHU"
ALLOWED_USERS = [1937084129]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

def is_allowed(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id in ALLOWED_USERS:
        return True
    logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    if not is_allowed(update):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = [
        ["üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç"],
        ["üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å"],
        ["üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "üóíÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã"],
        ["üåê –°–µ—Ç—å", "üìÇ –§–∞–π–ª—ã"],
        ["üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_allowed(update):
        return
    
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU, RAM, –¥–∏—Å–∫–µ
üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç - —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å - –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
üóíÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
üåê –°–µ—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
üìÇ –§–∞–π–ª—ã - —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/ip - IP –∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
/uptime - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
/cmd <–∫–æ–º–∞–Ω–¥–∞> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
"""
    await update.message.reply_text(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_allowed(update):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu = psutil.cpu_percent()
        ram = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        boot_time = datetime.datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.datetime.now() - boot_time
        
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

üíª CPU: {cpu}%
üß† RAM: {ram.percent}% ({ram.used//1024//1024}MB/{ram.total//1024//1024}MB)
üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used//1024//1024}MB/{disk.total//1024//1024}MB)
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}
"""
        await update.message.reply_text(status_text)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"""
    if not is_allowed(update):
        return
    
    try:
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = 'telegram_bot_screenshot.png'
        img = pyautogui.screenshot()
        img.save(screenshot_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        with open(screenshot_path, 'rb') as photo:
            await update.message.reply_photo(
                photo, 
                caption="üñ•Ô∏è –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(screenshot_path)
        logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    if not is_allowed(update):
        return
    
    try:
        if os.name == 'nt':  # Windows
            subprocess.run(['shutdown', '/s', '/t', '60'], check=True)
            msg = "‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"
        else:  # Linux/Mac
            subprocess.run(['shutdown', '-h', '+1'], check=True)
            msg = "‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
        
        await update.message.reply_text(msg)
        logger.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except subprocess.CalledProcessError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    if not is_allowed(update):
        return
    
    try:
        if os.name == 'nt':  # Windows
            subprocess.run(['shutdown', '/r', '/t', '60'], check=True)
            msg = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"
        else:  # Linux/Mac
            subprocess.run(['shutdown', '-r', '+1'], check=True)
            msg = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
        
        await update.message.reply_text(msg)
        logger.info("–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def lock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    if not is_allowed(update):
        return
    
    try:
        if os.name == 'nt':  # Windows
            subprocess.run(['rundll32.exe', 'user32.dll,LockWorkStation'], check=True)
        else:  # Linux
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            try:
                subprocess.run(['gnome-screensaver-command', '-l'], check=True)
            except:
                subprocess.run(['xdg-screensaver', 'lock'], check=True)
        
        await update.message.reply_text("üîí –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        logger.info("–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    if not is_allowed(update):
        return
    
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
            try:
                processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
        processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)
        
        result = "üóíÔ∏è –¢–æ–ø-10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU:\n\n"
        for i, proc in enumerate(processes[:10]):
            cpu = proc['cpu_percent'] or 0
            memory = proc['memory_percent'] or 0
            result += f"{i+1}. {proc['name']} (PID: {proc['pid']})\n"
            result += f"   CPU: {cpu:.1f}% | RAM: {memory:.1f}%\n\n"
        
        await update.message.reply_text(result)
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def network_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏"""
    if not is_allowed(update):
        return
    
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        external_ip = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
        try:
            external_ip = subprocess.run(
                ['curl', '-s', 'ifconfig.me'],
                capture_output=True, text=True, timeout=10
            ).stdout.strip()
        except:
            try:
                external_ip = subprocess.run(
                    ['curl', '-s', 'icanhazip.com'],
                    capture_output=True, text=True, timeout=10
                ).stdout.strip()
            except:
                pass
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        interfaces = psutil.net_if_addrs()
        net_info = f"üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        net_info += f"üñ•Ô∏è –•–æ—Å—Ç–Ω–µ–π–º: {hostname}\n"
        net_info += f"üì° –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}\n"
        net_info += f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n\n"
        
        net_info += "üì∂ –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:\n"
        for interface, addrs in list(interfaces.items())[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            for addr in addrs:
                if addr.family == socket.AF_INET:  # IPv4
                    net_info += f"‚Ä¢ {interface}: {addr.address}\n"
        
        await update.message.reply_text(net_info)
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def file_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    if not is_allowed(update):
        return
    
    try:
        current_dir = os.getcwd()
        files = os.listdir(current_dir)
        
        file_list = f"üìÇ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n{current_dir}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
        for i, file in enumerate(files[:15]):
            full_path = os.path.join(current_dir, file)
            if os.path.isdir(full_path):
                file_list += f"üìÅ {file}/\n"
            else:
                try:
                    size = os.path.getsize(full_path)
                    file_list += f"üìÑ {file} ({size} –±–∞–π—Ç)\n"
                except:
                    file_list += f"üìÑ {file} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n"
        
        if len(files) > 15:
            file_list += f"\n... –∏ –µ—â–µ {len(files) - 15} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫"
        
        await update.message.reply_text(file_list)
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def volume_control(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é"""
    if not is_allowed(update):
        return
    
    try:
        if os.name == 'nt':  # Windows
            # –î–ª—è Windows –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nircmd –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Ç–∏–ª–∏—Ç—ã
            volume_info = "üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é\n\n"
            volume_info += "–î–ª—è Windows —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
            volume_info += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nircmd\n"
            volume_info += "‚Ä¢ –ò–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            volume_info += "‚Ä¢ –ò–ª–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã"
        else:  # Linux
            # –î–ª—è Linux
            volume_info = "üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é\n\n"
            volume_info += "–î–ª—è Linux:\n"
            volume_info += "‚Ä¢ amixer set Master 10%+\n"
            volume_info += "‚Ä¢ amixer set Master 10%-\n"
            volume_info += "‚Ä¢ amixer set Master toggle\n"
        
        await update.message.reply_text(volume_info)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def ip_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å"""
    if not is_allowed(update):
        return
    
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        external_ip = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
        try:
            external_ip = subprocess.run(
                ['curl', '-s', 'ifconfig.me'],
                capture_output=True, text=True, timeout=10
            ).stdout.strip()
        except:
            pass
        
        ip_info = f"üåê IP –∞–¥—Ä–µ—Å–∞:\n\n"
        ip_info += f"üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}\n"
        ip_info += f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n"
        ip_info += f"üì° –•–æ—Å—Ç–Ω–µ–π–º: {hostname}"
        
        await update.message.reply_text(ip_info)
        logger.info("IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def run_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not is_allowed(update):
        return
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cmd <–∫–æ–º–∞–Ω–¥–∞>")
        return
    
    command = ' '.join(context.args)
    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore',
            timeout=30
        )
        
        output = result.stdout or result.stderr
        if not output:
            output = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(output) > 3000:
            output = output[:3000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
        
        await update.message.reply_text(f"üíª –†–µ–∑—É–ª—å—Ç–∞—Ç:\n```\n{output}\n```")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
        
    except subprocess.TimeoutExpired:
        await update.message.reply_text("‚è∞ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (30 —Å–µ–∫—É–Ω–¥)")
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã: {command}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
        await update.message.reply_text(error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
    if not is_allowed(update):
        return
    
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã":
        await status(update, context)
    elif text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
        await screenshot(update, context)
    elif text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        await lock(update, context)
    elif text == "‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å":
        await shutdown(update, context)
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å":
        await restart(update, context)
    elif text == "üóíÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã":
        await processes(update, context)
    elif text == "üåê –°–µ—Ç—å":
        await network_info(update, context)
    elif text == "üìÇ –§–∞–π–ª—ã":
        await file_manager(update, context)
    elif text == "üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å":
        await volume_control(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("status", status),
            CommandHandler("screenshot", screenshot),
            CommandHandler("shutdown", shutdown),
            CommandHandler("restart", restart),
            CommandHandler("lock", lock),
            CommandHandler("cmd", run_cmd),
            CommandHandler("ip", ip_address),
            CommandHandler("processes", processes),
            CommandHandler("network", network_info),
            CommandHandler("files", file_manager),
        ]
        
        for handler in handlers:
            application.add_handler(handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        print("2. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Telegram")

if __name__ == "__main__":
    main()