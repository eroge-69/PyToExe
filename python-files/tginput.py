import tkinter as tk
from tkinter import scrolledtext, messagebox
import threading
import time
import subprocess
import os
import sys
import json
from pathlib import Path

class PCCommandExecutor:
    def __init__(self, root):
        self.root = root
        self.root.title("PC Command Executor")
        self.root.geometry("600x400")
        self.root.resizable(True, True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.current_operation = "‚åö–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self.load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥
        self.monitor_commands()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = "bot_config.json"
        default_config = {
            "BOT_PATHS": {
                "Phoenix": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\phoenix.bat",
                "Tucson": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\tucson.bat",
                "Scottdale": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\scottdale.bat",
                "Winslow": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\winslow.bat",
                "Brainburg": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\brainburg.bat",
                "BumbleBee": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\bumblebee.bat",
                "CasaGrande": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\casagrande.bat",
                "Chandler": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\chandler.bat",
                "Christmas": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\christmas.bat",
                "Faraway": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\faraway.bat",
                "Gilbert": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\gilbert.bat",
                "Glendale": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\glendale.bat",
                "Holiday": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\holiday.bat",
                "Kingman": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\kingman.bat",
                "Mesa": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\mesa.bat",
                "Page": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\page.bat",
                "Payson": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\payson.bat",
                "Prescott": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\prescott.bat",
                "QueenCreek": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\queencreek.bat",
                "RedRock": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\redrock.bat",
                "SaintRose": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\saintrose.bat",
                "Sedona": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\sedona.bat",
                "ShowLow": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\showlow.bat",
                "SunCity": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\suncity.bat",
                "Surprise": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\surprise.bat",
                "Wednesday": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\wednesday.bat",
                "Yava": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\yava.bat",
                "Yuma": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\yuma.bat",
                "Love": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\love.bat",
                "Mirage": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\mirage.bat",
                "Drake": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\drake.bat"
            },
            "SPECIAL_COMMANDS": {
                "all_servers": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\! –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ 1 –±–æ—Ç—É –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä.bat",
                "stop_all": r"C:\Users\User\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–±–æ—Ç—ã\PREMIUM QUEST BOT ‚Äî 3.1 ‚Äî –∫–æ–ø–∏—è\–±–æ—Ç\! –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞ raksamp.bat"
            }
        }
        
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                with open(config_path, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=4, ensure_ascii=False)
                return default_config
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_frame, text="ü§ñ PC Command Executor", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(main_frame, text=self.current_operation,
                                    font=("Arial", 12), fg="blue")
        self.status_label.pack(pady=5)
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        log_label = tk.Label(main_frame, text="üìã –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π:", 
                            font=("Arial", 10, "bold"))
        log_label.pack(anchor="w", pady=(10, 5))
        
        self.log_text = scrolledtext.ScrolledText(main_frame, height=15,
                                                 font=("Consolas", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True, pady=5)
        self.log_text.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
        clear_btn = tk.Button(main_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", 
                             command=self.clear_log)
        clear_btn.pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        info_text = ("üî∏ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç Telegram –±–æ—Ç–∞\n"
                    "üî∏ –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"
                    "üî∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª commands.json")
        info_label = tk.Label(main_frame, text=info_text, justify=tk.LEFT,
                             font=("Arial", 9), fg="gray")
        info_label.pack(pady=5)
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
    
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.log_message("–õ–æ–≥ –æ—á–∏—â–µ–Ω")
    
    def update_status(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        self.current_operation = status
        self.status_label.config(text=status)
        
        if "‚≠ê–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—Å–∫" in status:
            self.status_label.config(fg="green")
        elif "‚åö–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã" in status:
            self.status_label.config(fg="blue")
        else:
            self.status_label.config(fg="black")
    
    def execute_command(self, command_type, bot_name=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"""
        try:
            if command_type == "launch_bot" and bot_name:
                if bot_name in self.config["BOT_PATHS"]:
                    bot_path = self.config["BOT_PATHS"][bot_name]
                    if os.path.exists(bot_path):
                        self.update_status(f"‚≠ê–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_name}")
                        self.log_message(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞: {bot_name}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º .bat —Ñ–∞–π–ª
                        subprocess.Popen(bot_path, shell=True)
                        
                        self.log_message(f"‚úÖ –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        return True
                    else:
                        self.log_message(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_path}")
                        return False
                else:
                    self.log_message(f"‚ùå –ë–æ—Ç {bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return False
            
            elif command_type == "all_servers":
                if "all_servers" in self.config["SPECIAL_COMMANDS"]:
                    bat_path = self.config["SPECIAL_COMMANDS"]["all_servers"]
                    if os.path.exists(bat_path):
                        self.update_status("‚≠ê–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –ø–æ 1 –±–æ—Ç—É –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞")
                        self.log_message("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ 1 –±–æ—Ç—É –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞")
                        
                        subprocess.Popen(bat_path, shell=True)
                        
                        self.log_message("‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ 1 –±–æ—Ç—É –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        return True
                    else:
                        self.log_message(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bat_path}")
                        return False
                else:
                    self.log_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ 'all_servers' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                    return False
            
            elif command_type == "stop_all":
                if "stop_all" in self.config["SPECIAL_COMMANDS"]:
                    bat_path = self.config["SPECIAL_COMMANDS"]["stop_all"]
                    if os.path.exists(bat_path):
                        self.update_status("‚≠ê–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
                        self.log_message("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
                        
                        subprocess.Popen(bat_path, shell=True)
                        
                        self.log_message("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                        return True
                    else:
                        self.log_message(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bat_path}")
                        return False
                else:
                    self.log_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ 'stop_all' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                    return False
            
            else:
                self.log_message(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_type}")
                return False
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            return False
        finally:
            # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
            self.root.after(3000, lambda: self.update_status("‚åö–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"))
    
    def check_commands_file(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–º–∞–Ω–¥"""
        commands_file = "commands.json"
        
        try:
            if os.path.exists(commands_file):
                with open(commands_file, 'r', encoding='utf-8') as f:
                    commands = json.load(f)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if commands:
                    command = commands.pop(0)  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
                    os.remove(commands_file)
                    
                    return command
            return None
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–º–∞–Ω–¥: {e}")
            return None
    
    def monitor_commands(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        command = self.check_commands_file()
        
        if command:
            if command.get("type") == "launch_bot":
                self.execute_command("launch_bot", command.get("bot_name"))
            elif command.get("type") == "all_servers":
                self.execute_command("all_servers")
            elif command.get("type") == "stop_all":
                self.execute_command("stop_all")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, self.monitor_commands)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = PCCommandExecutor(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()