import time
import telebot
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TELEGRAM_TOKEN = "8364561466:AAGZlPjiHNPxOzBfJJzHulx7qdhpYWXBVHs"
CHAT_ID = "1064743796"
TARGET_ITEM = "Prismatic: Explosive Burst"
STEAM_URL = "https://skins.cash"
CHECK_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
LOGIN_WAIT = 60  # –í—Ä–µ–º—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
# =======================

bot = telebot.TeleBot(TELEGRAM_TOKEN)
driver = None

def send_notification(message):
    print(message)
    bot.send_message(CHAT_ID, message)

def init_browser():
    options = webdriver.ChromeOptions()
    options.add_experimental_option("detach", True)
    service = Service()
    return webdriver.Chrome(service=service, options=options)

def check_price():
    try:
        items = driver.find_elements(By.XPATH, f"//*[contains(text(), '{TARGET_ITEM}')]")
        if not items:
            return {"status": "not_found", "price": None}
        
        # –ò—â–µ–º —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        try:
            parent = items[0].find_element(By.XPATH, "./ancestor::div[1]")
            price_element = parent.find_element(By.XPATH, ".//*[contains(@class, 'price') or contains(text(), '$')]")
            return {"status": "price_found", "price": price_element.text.strip()}
        except:
            return {"status": "no_price", "price": None}
            
    except Exception as e:
        return {"status": "error", "error": str(e)}

def main():
    global driver
    driver = init_browser()
    
    try:
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        driver.get(STEAM_URL)
        send_notification("üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–∞...")
        send_notification(f"‚ö† –£ —Ç–µ–±—è –µ—Å—Ç—å {LOGIN_WAIT} —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")
        time.sleep(LOGIN_WAIT)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'item') or contains(@class, 'skin')]"))
        )
        send_notification("‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—â—É –ø—Ä–µ–¥–º–µ—Ç...")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        item_found = False
        price_found = False
        
        while True:
            result = check_price()
            
            if result["status"] == "not_found" and not item_found:
                send_notification(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{TARGET_ITEM}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                item_found = True
            elif result["status"] == "no_price" and not item_found:
                send_notification(f"‚ÑπÔ∏è –ü—Ä–µ–¥–º–µ—Ç '{TARGET_ITEM}' –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                item_found = True
            elif result["status"] == "price_found" and not price_found:
                send_notification(f"üí∞ –¶–µ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å! {TARGET_ITEM} - {result['price']}")
                price_found = True
                break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
            elif result["status"] == "error":
                send_notification(f"‚ö† –û—à–∏–±–∫–∞: {result['error']}")
            
            time.sleep(CHECK_INTERVAL)
            
    except Exception as e:
        send_notification(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if driver:
            driver.quit()
        send_notification("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()