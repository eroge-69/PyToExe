# -*- coding: utf-8 -*-
"""crm janna 100925.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKwGBgqt3aaolI9e6kIi2q6YEpcmmTzx
"""

# Instalar librer√≠as necesarias
!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pandas openpyxl

import os
import pickle
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from datetime import datetime, timedelta
import ipywidgets as widgets
from IPython.display import display, clear_output

from google.colab import drive
drive.mount('/content/drive')

# Crear carpeta si no existe
folder_path = '/content/drive/MyDrive/seguimientos_automaticos'
os.makedirs(folder_path, exist_ok=True)

excel_path = os.path.join(folder_path, 'seguimientos.xlsx')

# Si no existe el archivo, crearlo con columnas iniciales
if not os.path.exists(excel_path):
    df = pd.DataFrame(columns=[
        'Tipo Cliente', 'Nombre', 'Apellido', 'Tel√©fono', 'Tipo Propiedad',
        'Barrio', 'Fecha Registro', '√öltimo Recordatorio', 'Pr√≥ximo Recordatorio',
        'Frecuencia Recordatorio', 'Evento Calendar ID'
    ])
    df.to_excel(excel_path, index=False)
    print("‚úÖ Archivo Excel creado.")
else:
    print("‚úÖ Archivo Excel ya existe.")

SCOPES = ['https://www.googleapis.com/auth/calendar']

def authenticate_google_calendar():
    creds = None
    token_path = 'token.pickle'

    if os.path.exists(token_path):
        with open(token_path, 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open(token_path, 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)
    return service

# ‚ö†Ô∏è Necesitas subir tu archivo 'credentials.json' a Colab (desde Google Cloud Console)
# Ve a: https://console.cloud.google.com/apis/credentials
# Crea una credencial de tipo "Aplicaci√≥n de escritorio" y descarga el JSON.
# Luego en Colab: clic en el √≠cono de carpeta > "Subir" y elige el archivo.

# Si ya lo subiste, descomenta esta l√≠nea:
# calendar_service = authenticate_google_calendar()

# Widgets de entrada
tipo_cliente = widgets.Dropdown(
    options=['Comprador', 'Vendedor', 'Ambos'],
    description='Tipo Cliente:',
    disabled=False,
)

nombre = widgets.Text(description='Nombre:', placeholder='Ej. Juan')
apellido = widgets.Text(description='Apellido:', placeholder='Ej. P√©rez')
telefono = widgets.Text(description='Tel√©fono:', placeholder='Ej. +54911...')
tipo_propiedad = widgets.Text(description='Tipo Propiedad:', placeholder='Casa, Depto, Local...')
barrio = widgets.Text(description='Barrio:', placeholder='Palermo, Recoleta...')
fecha_registro = widgets.DatePicker(description='Fecha Registro:', disabled=False)

# Bot√≥n de registro
btn_registrar = widgets.Button(description="Registrar Cliente", button_style='success')
output = widgets.Output()

def registrar_cliente(b):
    with output:
        clear_output()

        # Validar campos
        if not all([nombre.value, apellido.value, telefono.value, tipo_propiedad.value, barrio.value]):
            print("‚ùå Por favor completa todos los campos.")
            return

        # Cargar o crear DataFrame
        df = pd.read_excel(excel_path) if os.path.exists(excel_path) else pd.DataFrame()

        nuevo_registro = {
            'Tipo Cliente': tipo_cliente.value,
            'Nombre': nombre.value,
            'Apellido': apellido.value,
            'Tel√©fono': telefono.value,
            'Tipo Propiedad': tipo_propiedad.value,
            'Barrio': barrio.value,
            'Fecha Registro': fecha_registro.value.strftime('%Y-%m-%d') if fecha_registro.value else datetime.now().strftime('%Y-%m-%d'),
            '√öltimo Recordatorio': '',
            'Pr√≥ximo Recordatorio': '',
            'Frecuencia Recordatorio': '',
            'Evento Calendar ID': ''
        }

        df = pd.concat([df, pd.DataFrame([nuevo_registro])], ignore_index=True)
        df.to_excel(excel_path, index=False)

        print(f"‚úÖ Cliente {nombre.value} {apellido.value} registrado correctamente.")

btn_registrar.on_click(registrar_cliente)

# Mostrar formulario
form_items = [
    tipo_cliente, nombre, apellido, telefono, tipo_propiedad, barrio, fecha_registro, btn_registrar, output
]
form_box = widgets.VBox(form_items)
display(form_box)

def crear_evento_calendar(service, summary, description, start_datetime, end_datetime, email=None):
    event = {
        'summary': summary,
        'description': description,
        'start': {
            'dateTime': start_datetime.isoformat(),
            'timeZone': 'America/Argentina/Buenos_Aires',
        },
        'end': {
            'dateTime': end_datetime.isoformat(),
            'timeZone': 'America/Argentina/Buenos_Aires',
        },
    }

    if email:
        event['attendees'] = [{'email': email}]

    created_event = service.events().insert(calendarId='primary', body=event).execute()
    return created_event['id']

# Cargar lista de clientes registrados
df_clientes = pd.read_excel(excel_path)
nombres_completos = (df_clientes['Nombre'] + ' ' + df_clientes['Apellido']).tolist()

selector_cliente = widgets.Dropdown(
    options=nombres_completos if nombres_completos else ['Sin clientes'],
    description='Cliente:',
    disabled=False,
)

btn_3dias = widgets.Button(description="Recordar en 3 d√≠as", button_style='info')
btn_7dias = widgets.Button(description="Recordar en 1 semana", button_style='warning')
btn_30dias = widgets.Button(description="Recordar en 30 d√≠as", button_style='danger')
output_recordatorio = widgets.Output()

def agregar_recordatorio(frecuencia_dias):
    with output_recordatorio:
        clear_output()

        try:
            calendar_service = authenticate_google_calendar()
        except Exception as e:
            print(f"‚ùå Error autenticando con Calendar: {e}")
            return

        nombre_completo = selector_cliente.value
        if nombre_completo == 'Sin clientes':
            print("‚ùå No hay clientes registrados.")
            return

        nombre, apellido = nombre_completo.split(' ', 1)
        df = pd.read_excel(excel_path)
        cliente_fila = df[(df['Nombre'] == nombre) & (df['Apellido'] == apellido)]

        if cliente_fila.empty:
            print("‚ùå Cliente no encontrado.")
            return

        idx = cliente_fila.index[0]
        hoy = datetime.now()
        proxima_fecha = hoy + timedelta(days=frecuencia_dias)

        # Crear evento en Calendar
        summary = f"Recordatorio: Seguimiento a {nombre} {apellido}"
        description = (
            f"Tipo: {df.at[idx, 'Tipo Cliente']}\n"
            f"Propiedad: {df.at[idx, 'Tipo Propiedad']} en {df.at[idx, 'Barrio']}\n"
            f"Tel: {df.at[idx, 'Tel√©fono']}"
        )

        try:
            evento_id = crear_evento_calendar(
                calendar_service,
                summary=summary,
                description=description,
                start_datetime=proxima_fecha,
                end_datetime=proxima_fecha + timedelta(hours=1)
            )

            # Actualizar Excel
            df.at[idx, '√öltimo Recordatorio'] = hoy.strftime('%Y-%m-%d %H:%M')
            df.at[idx, 'Pr√≥ximo Recordatorio'] = proxima_fecha.strftime('%Y-%m-%d')
            df.at[idx, 'Frecuencia Recordatorio'] = f"{frecuencia_dias} d√≠as"
            df.at[idx, 'Evento Calendar ID'] = evento_id

            df.to_excel(excel_path, index=False)
            print(f"‚úÖ Recordatorio programado para {proxima_fecha.strftime('%d/%m/%Y')}")
            print(f"üìÖ Evento creado en Google Calendar (ID: {evento_id})")

        except Exception as e:
            print(f"‚ùå Error creando evento: {e}")

# Asignar funciones a botones
btn_3dias.on_click(lambda b: agregar_recordatorio(3))
btn_7dias.on_click(lambda b: agregar_recordatorio(7))
btn_30dias.on_click(lambda b: agregar_recordatorio(30))

# Mostrar interfaz de recordatorios
recordatorio_box = widgets.VBox([
    widgets.Label("üìÖ Programar Recordatorio"),
    selector_cliente,
    widgets.HBox([btn_3dias, btn_7dias, btn_30dias]),
    output_recordatorio
])
display(recordatorio_box)

def mostrar_registros(b):
    df = pd.read_excel(excel_path)
    with output:
        clear_output()
        if df.empty:
            print("No hay registros.")
        else:
            display(df)

btn_ver = widgets.Button(description="Ver Registros", button_style='primary')
btn_ver.on_click(mostrar_registros)
display(btn_ver, output)

# ========== [1] Instalaciones y librer√≠as ==========
!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pandas openpyxl

import os
import pickle
import pandas as pd
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from datetime import datetime, timedelta
import ipywidgets as widgets
from IPython.display import display, clear_output

# ========== [2] Montar Google Drive y preparar Excel ==========
from google.colab import drive
drive.mount('/content/drive')

folder_path = '/content/drive/MyDrive/seguimientos_automaticos'
os.makedirs(folder_path, exist_ok=True)
excel_path = os.path.join(folder_path, 'seguimientos.xlsx')

if not os.path.exists(excel_path):
    df = pd.DataFrame(columns=[
        'Tipo Cliente', 'Nombre', 'Apellido', 'Tel√©fono', 'Tipo Propiedad',
        'Barrio', 'Fecha Registro', '√öltimo Recordatorio', 'Pr√≥ximo Recordatorio',
        'Frecuencia Recordatorio', 'Evento Calendar ID'
    ])
    df.to_excel(excel_path, index=False)
    print("‚úÖ Archivo Excel inicial creado.")

# ========== [3] Autenticaci√≥n con Google Calendar ==========
SCOPES = ['https://www.googleapis.com/auth/calendar']

def authenticate_google_calendar():
    creds = None
    token_path = 'token.pickle'

    if os.path.exists(token_path):
        with open(token_path, 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            if not os.path.exists('credentials.json'):
                print("‚ùå ERROR: Sube tu archivo 'credentials.json' desde Google Cloud Console.")
                return None
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open(token_path, 'wb') as token:
            pickle.dump(creds, token)

    try:
        service = build('calendar', 'v3', credentials=creds)
        return service
    except Exception as e:
        print(f"‚ùå Error construyendo servicio de Calendar: {e}")
        return None

# ========== [4] Funci√≥n para crear evento en Google Calendar ==========
def crear_evento_calendar(service, summary, description, start_datetime, end_datetime):
    event = {
        'summary': summary,
        'description': description,
        'start': {
            'dateTime': start_datetime.isoformat(),
            'timeZone': 'America/Argentina/Buenos_Aires',
        },
        'end': {
            'dateTime': end_datetime.isoformat(),
            'timeZone': 'America/Argentina/Buenos_Aires',
        },
    }

    try:
        created_event = service.events().insert(calendarId='primary', body=event).execute()
        return created_event['id']
    except Exception as e:
        print(f"‚ùå Error al crear evento: {e}")
        return None

# ========== [5] Solapa 1: Registrar Cliente ==========
tipo_cliente_w = widgets.Dropdown(
    options=['Comprador', 'Vendedor', 'Ambos'],
    description='Tipo Cliente:',
    disabled=False,
)

nombre_w = widgets.Text(description='Nombre:', placeholder='Ej. Juan')
apellido_w = widgets.Text(description='Apellido:', placeholder='Ej. P√©rez')
telefono_w = widgets.Text(description='Tel√©fono:', placeholder='Ej. +54911...')
tipo_propiedad_w = widgets.Text(description='Tipo Propiedad:', placeholder='Casa, Depto...')
barrio_w = widgets.Text(description='Barrio:', placeholder='Palermo, Belgrano...')
fecha_registro_w = widgets.DatePicker(description='Fecha Registro:', disabled=False)

btn_registrar_w = widgets.Button(description="Registrar Cliente", button_style='success')
output_registrar_w = widgets.Output()

def registrar_cliente(b):
    with output_registrar_w:
        clear_output()
        if not all([nombre_w.value, apellido_w.value, telefono_w.value, tipo_propiedad_w.value, barrio_w.value]):
            print("‚ùå Completa todos los campos.")
            return

        df = pd.read_excel(excel_path)

        nuevo_registro = {
            'Tipo Cliente': tipo_cliente_w.value,
            'Nombre': nombre_w.value,
            'Apellido': apellido_w.value,
            'Tel√©fono': telefono_w.value,
            'Tipo Propiedad': tipo_propiedad_w.value,
            'Barrio': barrio_w.value,
            'Fecha Registro': fecha_registro_w.value.strftime('%Y-%m-%d') if fecha_registro_w.value else datetime.now().strftime('%Y-%m-%d'),
            '√öltimo Recordatorio': '',
            'Pr√≥ximo Recordatorio': '',
            'Frecuencia Recordatorio': '',
            'Evento Calendar ID': ''
        }

        df = pd.concat([df, pd.DataFrame([nuevo_registro])], ignore_index=True)
        df.to_excel(excel_path, index=False)
        print(f"‚úÖ Cliente {nombre_w.value} {apellido_w.value} registrado.")

btn_registrar_w.on_click(registrar_cliente)

form_registrar = widgets.VBox([
    tipo_cliente_w,
    nombre_w,
    apellido_w,
    telefono_w,
    tipo_propiedad_w,
    barrio_w,
    fecha_registro_w,
    btn_registrar_w,
    output_registrar_w
])

# ========== [6] Solapa 2: Programar Recordatorio ==========
# Recargar lista de clientes
df_clientes = pd.read_excel(excel_path)
nombres_completos = (df_clientes['Nombre'] + ' ' + df_clientes['Apellido']).tolist() if not df_clientes.empty else ['Sin clientes']

selector_cliente_w = widgets.Dropdown(
    options=nombres_completos,
    description='Cliente:',
    disabled=False,
)

btn_3dias_w = widgets.Button(description="Recordar en 3 d√≠as", button_style='info')
btn_7dias_w = widgets.Button(description="Recordar en 1 semana", button_style='warning')
btn_30dias_w = widgets.Button(description="Recordar en 30 d√≠as", button_style='danger')
output_recordatorio_w = widgets.Output()

def agregar_recordatorio(frecuencia_dias):
    with output_recordatorio_w:
        clear_output()
        service = authenticate_google_calendar()
        if not service:
            print("‚ùå No se pudo autenticar con Google Calendar.")
            return

        nombre_completo = selector_cliente_w.value
        if nombre_completo == 'Sin clientes':
            print("‚ùå No hay clientes registrados.")
            return

        try:
            nombre, apellido = nombre_completo.split(' ', 1)
        except:
            print("‚ùå Error al separar nombre y apellido.")
            return

        df = pd.read_excel(excel_path)
        cliente_fila = df[(df['Nombre'] == nombre) & (df['Apellido'] == apellido)]
        if cliente_fila.empty:
            print("‚ùå Cliente no encontrado.")
            return

        idx = cliente_fila.index[0]
        hoy = datetime.now()
        proxima_fecha = hoy + timedelta(days=frecuencia_dias)

        summary = f"üîî Recordatorio: Seguimiento a {nombre} {apellido}"
        description = (
            f"Tipo: {df.at[idx, 'Tipo Cliente']}\n"
            f"Propiedad: {df.at[idx, 'Tipo Propiedad']} en {df.at[idx, 'Barrio']}\n"
            f"Tel: {df.at[idx, 'Tel√©fono']}"
        )

        evento_id = crear_evento_calendar(
            service,
            summary=summary,
            description=description,
            start_datetime=proxima_fecha,
            end_datetime=proxima_fecha + timedelta(hours=1)
        )

        if evento_id:
            df.at[idx, '√öltimo Recordatorio'] = hoy.strftime('%Y-%m-%d %H:%M')
            df.at[idx, 'Pr√≥ximo Recordatorio'] = proxima_fecha.strftime('%Y-%m-%d')
            df.at[idx, 'Frecuencia Recordatorio'] = f"{frecuencia_dias} d√≠as"
            df.at[idx, 'Evento Calendar ID'] = evento_id
            df.to_excel(excel_path, index=False)
            print(f"‚úÖ Recordatorio programado para {proxima_fecha.strftime('%d/%m/%Y')}")
            print(f"üìÖ Evento ID: {evento_id}")
        else:
            print("‚ùå No se pudo crear el evento en Calendar.")

btn_3dias_w.on_click(lambda b: agregar_recordatorio(3))
btn_7dias_w.on_click(lambda b: agregar_recordatorio(7))
btn_30dias_w.on_click(lambda b: agregar_recordatorio(30))

form_recordatorio = widgets.VBox([
    widgets.Label("üìÖ Selecciona un cliente y programa un recordatorio"),
    selector_cliente_w,
    widgets.HBox([btn_3dias_w, btn_7dias_w, btn_30dias_w]),
    output_recordatorio_w
])

# ========== [7] Solapa 3: Ver Registros ==========
output_ver_w = widgets.Output()

btn_ver_w = widgets.Button(description="Actualizar y Ver Registros", button_style='primary')

def ver_registros(b):
    with output_ver_w:
        clear_output()
        df = pd.read_excel(excel_path)
        if df.empty:
            print("üì≠ No hay registros a√∫n.")
        else:
            # Mostrar solo columnas relevantes para vista r√°pida
            df_vista = df[[
                'Nombre', 'Apellido', 'Tipo Cliente', 'Barrio',
                'Pr√≥ximo Recordatorio', 'Frecuencia Recordatorio'
            ]]
            display(df_vista)

btn_ver_w.on_click(ver_registros)

form_ver = widgets.VBox([
    btn_ver_w,
    output_ver_w
])

# ========== [8] Unificar en Solapas (Tabs) ==========
tab = widgets.Tab()
tab.children = [form_registrar, form_recordatorio, form_ver]
tab.set_title(0, 'üìù Registrar Cliente')
tab.set_title(1, 'üîî Recordatorios')
tab.set_title(2, 'üìä Ver Registros')

# T√≠tulo principal
titulo = widgets.HTML(
    value="<h2 style='color: #4CAF50;'>üè° CRM de Bienes Ra√≠ces - Seguimientos Autom√°ticos</h2>"
)

# Mostrar interfaz completa
display(titulo)
display(tab)

# Cargar autom√°ticamente los clientes en selector (si se registra uno nuevo, reiniciar notebook para actualizar)