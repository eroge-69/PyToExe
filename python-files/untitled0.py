# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IM49Khd4JS83GuML1CTr3QGAgoE9DBCQ
"""

# Install necessary packages
!pip install PyMuPDF python-docx openpyxl xlrd pandas googletrans python-pptx

import fitz # PyMuPDF
import docx
import pandas as pd
from googletrans import Translator
from pptx import Presentation
import asyncio

async def translate_text(text, src_lang='auto', dest_lang='en'):
    translator = Translator()
    translation = await translator.translate(text, src=src_lang, dest=dest_lang)
    return translation.text

async def check_translation_pdf(file_path, src_lang='auto', dest_lang='en'):
    doc = fitz.open(file_path)
    translated_text = ""
    for page in doc:
        text = page.get_text()
        translated_text += await translate_text(text, src_lang, dest_lang) + "\n"
    return translated_text

async def check_translation_docx(file_path, src_lang='auto', dest_lang='en'):
    doc = docx.Document(file_path)
    translated_text = ""
    for para in doc.paragraphs:
        translated_text += await translate_text(para.text, src_lang, dest_lang) + "\n"
    return translated_text

async def check_translation_excel(file_path, src_lang='auto', dest_lang='en'):
    df = pd.read_excel(file_path)
    translated_df = df.copy() # Create a copy to store translations
    for col in df.columns:
        translated_df[col] = await asyncio.gather(*[translate_text(str(x), src_lang, dest_lang) for x in df[col]])
    return translated_df

async def check_translation_pptx(file_path, src_lang='auto', dest_lang='en'):
    prs = Presentation(file_path)
    translated_text = ""
    for slide in prs.slides:
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                translated_text += await translate_text(shape.text, src_lang, dest_lang) + "\n"
    return translated_text

# Example usage:
# pdf_translation = await check_translation_pdf('example.pdf')
# docx_translation = await check_translation_docx('example.docx')
# excel_translation = await check_translation_excel('example.xlsx')
# pptx_translation = await check_translation_pptx('example.pptx')

# print(pdf_translation)
# print(docx_translation)
# display(excel_translation)
# print(pptx_translation)

# Create dummy PDF file
pdf_text = "Hola, este es un documento PDF de ejemplo."
with fitz.open() as doc:
    page = doc.new_page()
    text_instance = page.insert_text((10, 10), pdf_text, fontsize=12)
    doc.save("example.pdf")

# Create dummy DOCX file
doc = docx.Document()
doc.add_paragraph("Bonjour, ceci est un document DOCX d'exemple.")
doc.save("example.docx")

# Create dummy XLSX file
data = {'col1': ['Hola', 'Mundo'], 'col2': ['Adi√≥s', 'Amigos']}
df = pd.DataFrame(data)
df.to_excel("example.xlsx", index=False)

# Create dummy PPTX file
prs = Presentation()
slide = prs.slides.add_slide(prs.slide_layouts[0]) # Changed layout to 0 (Title and Body)
title = slide.shapes.title
title.text = "Hallo, dies ist eine Beispiel-PPTX"
body_shape = slide.shapes.placeholders[1]
tf = body_shape.text_frame
tf.text = "Dies ist ein Beispieltext auf einer Folie."
prs.save("example.pptx")

# Example usage of translation functions
import asyncio

async def translate_and_print():
    pdf_translation = await check_translation_pdf('example.pdf')
    print("PDF Translation:")
    print(pdf_translation)

    docx_translation = await check_translation_docx('example.docx')
    print("\nDOCX Translation:")
    print(docx_translation)

    # Excel translation now needs await as check_translation_excel is async
    excel_translation = await check_translation_excel('example.xlsx')
    print("\nExcel Translation:")
    display(excel_translation)

    pptx_translation = await check_translation_pptx('example.pptx')
    print("\nPPTX Translation:")
    print(pptx_translation)

await translate_and_print()

"""# Task
Explain the error in the selected code, fix it, and then export the tool as a standalone executable for a standard Windows environment.

## Identify dependencies

### Subtask:
List all the Python libraries used in the code (`PyMuPDF`, `python-docx`, `openpyxl`, `xlrd`, `pandas`, `googletrans`, `python-pptx`, `asyncio`).

**Reasoning**:
I need to list all the Python libraries imported in the provided code cells. I will review the imports in the first code cell and list them.
"""

libraries = ["PyMuPDF", "python-docx", "openpyxl", "xlrd", "pandas", "googletrans", "python-pptx", "asyncio"]
print("The Python libraries used are:")
for lib in libraries:
    print(f"- {lib}")

"""## Choose packaging method

### Subtask:
Select a suitable method for packaging Python applications for Windows (e.g., PyInstaller, cx_Freeze, nuitka). PyInstaller is a popular choice for creating standalone executables.

**Reasoning**:
Confirm PyInstaller as the chosen packaging tool and briefly justify the choice.
"""

packaging_tool = "PyInstaller"
justification = """
PyInstaller is chosen as the packaging tool for creating a standalone executable on Windows.
It is a popular choice due to its ease of use in bundling Python applications and their dependencies into a single executable file, making distribution straightforward without requiring the end-user to install Python or any libraries.
"""

print(f"Selected packaging tool: {packaging_tool}")
print(f"Justification:\n{justification}")

"""## Create a python script

### Subtask:
Combine all the necessary functions and example usage into a single Python script (`.py` file). This script will be the entry point for the packaged application.

**Reasoning**:
Create the `translation_tool.py` file and write the necessary code into it, including imports, function definitions, and the example usage.
"""