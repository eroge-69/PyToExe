# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yi7glyt-YnYGSFp8JLNJzTW-WlG8sLcX
"""

from google.colab import files
uploaded = files.upload()

import requests
import re

# 判断 TRON 地址格式是否正确
def is_valid_tron_address(address):
    return bool(re.match(r"^T[1-9A-HJ-NP-Za-km-z]{33}$", address))

# 查询 TRON 地址的 TRX 和 USDT(TRC20) 余额
def get_tron_balances(address):
    if not is_valid_tron_address(address):
        return None  # 地址格式错误

    url = f"https://apilist.tronscan.org/api/account?address={address}"
    try:
        response = requests.get(url, timeout=5)
        data = response.json()

        # TRX 余额
        trx_balance = round(int(data.get("balance", 0)) / 1_000_000, 6)

        # USDT(TRC20) 余额
        usdt_balance = 0.0
        if "trc20token_balances" in data:
            for token in data["trc20token_balances"]:
                if token.get("tokenAbbr", "").upper() == "USDT":
                    usdt_balance = round(int(token.get("balance", 0)) / (10 ** token.get("tokenDecimal", 6)), 6)

        return trx_balance, usdt_balance
    except Exception:
        return 0.0, 0.0  # 出错时返回 0

# 文件名
input_file = "tron_addresses.txt"
output_file = "result.txt"

# 从文件读取地址
try:
    with open(input_file, "r") as f:
        addresses = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    print(f"❌ 未找到文件 {input_file}，请确认文件存在")
    exit()

results = []

# 循环查询
for addr in addresses:
    balances = get_tron_balances(addr)
    if balances is None:
        results.append(f"{addr} → 地址格式错误 ❌")
    else:
        trx, usdt = balances
        results.append(f"{addr} → TRX: {trx} | USDT: {usdt}")
    print(results[-1])  # 实时输出

# 保存结果
with open(output_file, "w", encoding="utf-8") as f:
    f.write("\n".join(results))

print(f"\n✅ 查询完成，结果已保存到 {output_file}")

import os

# 文件路径
file_path = "tron_addresses.txt"

# 检查文件是否存在并删除
if os.path.exists(file_path):
    os.remove(file_path)
    print(f"已删除文件: {file_path}")
else:
    print(f"文件不存在: {file_path}")

import requests
import re
import os
import sys

# -------------------- 配置文件路径 --------------------
# 获取程序运行所在目录（兼容 .py 和 .exe）
BASE_DIR = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
input_file = os.path.join(BASE_DIR, "tron_addresses.txt")  # 输入文件
output_file = os.path.join(BASE_DIR, "result.txt")         # 输出文件

# -------------------- 地址校验函数 --------------------
def is_valid_tron_address(address):
    return bool(re.match(r"^T[1-9A-HJ-NP-Za-km-z]{33}$", address))

# -------------------- 查询余额函数 --------------------
def get_tron_balances(address):
    if not is_valid_tron_address(address):
        return None  # 地址格式错误

    url = f"https://apilist.tronscan.org/api/account?address={address}"
    try:
        response = requests.get(url, timeout=5)
        data = response.json()

        # TRX 余额
        trx_balance = round(int(data.get("balance", 0)) / 1_000_000, 6)

        # USDT(TRC20) 余额
        usdt_balance = 0.0
        if "trc20token_balances" in data:
            for token in data["trc20token_balances"]:
                if token.get("tokenAbbr", "").upper() == "USDT":
                    usdt_balance = round(
                        int(token.get("balance", 0)) / (10 ** token.get("tokenDecimal", 6)), 6
                    )

        return trx_balance, usdt_balance
    except Exception:
        return 0.0, 0.0  # 出错返回 0

# -------------------- 主程序 --------------------
def main():
    # 读取地址文件
    if not os.path.exists(input_file):
        print(f"❌ 未找到文件 {input_file}，请在同目录放置 tron_addresses.txt")
        input("\n按 Enter 键退出...")
        return

    with open(input_file, "r", encoding="utf-8") as f:
        addresses = [line.strip() for line in f if line.strip()]

    results = []

    # 查询每个地址
    for addr in addresses:
        balances = get_tron_balances(addr)
        if balances is None:
            results.append(f"{addr} → 地址格式错误 ❌")
        else:
            trx, usdt = balances
            results.append(f"{addr} → TRX: {trx} | USDT: {usdt}")
        print(results[-1])

    # 保存结果
    with open(output_file, "w", encoding="utf-8") as f:
        f.write("\n".join(results))

    print(f"\n✅ 查询完成，结果已保存到 {output_file}")
    input("\n按 Enter 键退出...")  # 防止闪退

if __name__ == "__main__":
    main()