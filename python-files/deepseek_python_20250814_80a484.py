import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®!
BOT_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–≥–æ–¥–æ–π –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/weather [–≥–æ—Ä–æ–¥] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n/weather –ú–æ—Å–∫–≤–∞\n/weather London"
    )

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        city = " ".join(context.args) if context.args else "–ú–æ—Å–∫–≤–∞"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: {city}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
        url = f"https://wttr.in/{city}?format=%l:\n+%c+%t\nüå¨Ô∏è–í–µ—Ç–µ—Ä:%w\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å:%h\nüå°–û—â—É—â–∞–µ—Ç—Å—è:%f\n"
        response = requests.get(
            url,
            headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        )
        
        if response.status_code == 200:
            weather_text = response.text.replace("¬∞F", "¬∞C").replace("mph", "–º/—Å")
            await update.message.reply_text(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞:\n{weather_text}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
    
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ weather: {e}")

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Tass.ru –∫–∞–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        url = "https://tass.ru/rss/v2.xml"
        response = requests.get(url)
        response.raise_for_status()
        
        # –ü–∞—Ä—Å–∏–º XML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
        soup = BeautifulSoup(response.content, 'xml')
        items = soup.find_all('item')[:5]  # –ë–µ—Ä–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        
        news_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (TASS):\n\n"
        for i, item in enumerate(items, 1):
            title = item.title.text.strip()
            link = item.link.text.strip()
            news_text += f"{i}. {title}\n{link}\n\n"
        
        await update.message.reply_text(news_text.strip())
        logger.info("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ news: {e}")
        logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200] if 'response' in locals() else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("weather", weather))
        application.add_handler(CommandHandler("news", news))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if update:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
        )

if __name__ == "__main__":
    main()