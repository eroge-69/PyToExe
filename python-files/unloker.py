import random
import string
import psutil
import os
import platform
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, simpledialog
import webbrowser
from datetime import datetime
from PIL import Image, ImageTk
import hashlib
import threading
import time
import winreg
import requests


class AntivirusUnlockerPro(tk.Tk):
    def __init__(self):
        super().__init__()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (6 —Ä–∞–∑–Ω—ã—Ö –±—É–∫–≤ –æ—Ç A –¥–æ Z)
        self.title(f"AV_{''.join(random.sample(string.ascii_uppercase, 6))}_{random.randint(100, 999)}")
        self.geometry("1300x900")
        self.minsize(1100, 750)


        # –°–∫—Ä—ã—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.stealth_mode = False
        self.fake_process_names = ["svchost.exe", "explorer.exe", "System"]

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        self.virus_db = {
            "malware.exe": "Trojan.Win32.Generic",
            "cryptominer.exe": "Riskware.Win32.Miner",
            "ransomware.exe": "Trojan-Ransom.Win32.Generic"
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.set_icon()
        self.setup_styles()
        self.create_widgets()
        self.update_process_list()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_update_interval = 2500  # 2.5 —Å–µ–∫—É–Ω–¥—ã
        self.setup_auto_update()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_column = 'memory'
        self.sort_reverse = True

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
        self.protocol("WM_DELETE_WINDOW", self.on_close)

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.start_background_checks()

    def generate_random_name(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–æ–≤"""
        prefixes = ["svc", "win", "sys", "net", "dll"]
        suffixes = ["host", "manager", "service", "helper", "update"]
        return f"{random.choice(prefixes)}_{random.choice(suffixes)}_{random.randint(1000, 9999)}"

    def set_icon(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"""
        try:
            img = Image.open("icon.png")
        except:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
                response = requests.get("https://cdn-icons-png.flaticon.com/512/2889/2889676.png")
                img = Image.open(BytesIO(response.content))
            except:
                img = Image.new('RGB', (16, 16), color='gray')

        self.iconphoto(False, ImageTk.PhotoImage(img))

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —Å –∑–∞—â–∏—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º"""
        self.style = ttk.Style()
        self.style.theme_use('clam')

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∑–∞—â–∏—Ç—ã
        bg_color = '#1e1e2d'
        fg_color = '#e0e0f0'
        accent_color = '#45aaf2'
        warning_color = '#ff4757'
        header_color = '#252538'
        select_color = '#3e3e5a'

        self.configure(bg=bg_color)
        self.style.configure('.', background=bg_color, foreground=fg_color)

        # –°—Ç–∏–ª—å –¥–ª—è Treeview
        self.style.configure('Treeview', background=bg_color, foreground=fg_color,
                             fieldbackground=bg_color, rowheight=25, font=('Consolas', 9))
        self.style.configure('Treeview.Heading', background=header_color,
                             foreground=accent_color, font=('Segoe UI', 9, 'bold'))
        self.style.map('Treeview', background=[('selected', select_color)],
                       foreground=[('selected', fg_color)])

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞—â–∏—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—â–∏—Ç—ã
        self.create_protection_toolbar(main_frame)

        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.create_quick_actions_panel(main_frame)

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —É–≥—Ä–æ–∑
        self.create_process_tree(main_frame)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        self.create_status_panel(main_frame)

        # –°–∫—Ä—ã—Ç–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.create_expert_panel(main_frame)

        # –û–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.create_message_window(main_frame)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        self.setup_context_menu()

    def create_message_window(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_frame = ttk.LabelFrame(parent, text="–°–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã", padding=5)
        message_frame.pack(fill=tk.X, pady=(10, 0))

        self.message_area = scrolledtext.ScrolledText(
            message_frame,
            wrap=tk.WORD,
            width=40,
            height=4,
            font=('Consolas', 9)
        )
        self.message_area.pack(fill=tk.BOTH, expand=True)
        self.message_area.configure(state='disabled')

    def log_message(self, message, msg_type='info'):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_area.configure(state='normal')

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        colors = {
            'info': 'black',
            'warning': 'orange',
            'error': 'red',
            'success': 'green'
        }

        self.message_area.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')} - {message}\n", msg_type)
        self.message_area.tag_config(msg_type, foreground=colors.get(msg_type, 'black'))
        self.message_area.see(tk.END)
        self.message_area.configure(state='disabled')

    def create_protection_toolbar(self, parent):
        """–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞—â–∏—Ç—ã"""
        toolbar = ttk.Frame(parent)
        toolbar.pack(fill=tk.X, pady=(0, 10))

        protection_buttons = [
            ("üõ°Ô∏è –ó–∞—â–∏—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", self.run_system_protection),
            ("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã", self.scan_for_malware),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –û–ó–£", self.clean_memory),
            ("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—É—Å—ã", self.block_viruses),
            ("üëª –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º", self.toggle_stealth_mode),
            ("‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", self.emergency_stop)
        ]

        for text, cmd in protection_buttons:
            btn = ttk.Button(toolbar, text=text, command=cmd, style='Bold.TButton')
            btn.pack(side=tk.LEFT, padx=2)

        self.style.configure('Bold.TButton', font=('Segoe UI', 9, 'bold'))

    def create_search_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        search_frame = ttk.Frame(parent)
        search_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        self.search_entry.bind('<KeyRelease>', self.filter_processes)

        search_btn = ttk.Button(search_frame, text="üîç", command=self.filter_processes, width=3)
        search_btn.pack(side=tk.LEFT, padx=2)

    def filter_processes(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É"""
        search_term = self.search_var.get().lower()

        for child in self.tree.get_children():
            item = self.tree.item(child)
            process_name = item['values'][1].lower()
            if search_term in process_name:
                self.tree.selection_add(child)
                self.tree.focus(child)
                self.tree.see(child)
            else:
                self.tree.selection_remove(child)

    def create_quick_actions_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        quick_frame = ttk.Frame(parent)
        quick_frame.pack(fill=tk.X, pady=(0, 10))

        # –ü–æ–∏—Å–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        self.create_search_panel(quick_frame)

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        actions_frame = ttk.Frame(quick_frame)
        actions_frame.pack(side=tk.RIGHT)

        quick_buttons = [
            ("üîÑ", self.update_process_list),
            ("‚èπÔ∏è", self.kill_selected_process),
            ("üìÇ", self.open_selected_process_path),
            ("üîê", self.show_startup_manager),
            ("üìå", self.toggle_topmost),
            ("üé≠", self.change_window_name)
        ]

        for icon, cmd in quick_buttons:
            btn = ttk.Button(actions_frame, text=icon, command=cmd, width=3)
            btn.pack(side=tk.LEFT, padx=1)

    def create_process_tree(self, parent):
        """–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π —É–≥—Ä–æ–∑"""
        self.tree_frame = ttk.Frame(parent)
        self.tree_frame.pack(fill=tk.BOTH, expand=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–≥—Ä–æ–∑–∞—Ö
        columns = ('pid', 'name', 'memory', 'cpu', 'status', 'user', 'threat', 'hash')

        self.tree = ttk.Treeview(self.tree_frame, columns=columns, show='headings')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading('pid', text='PID', command=lambda: self.sort_column('pid'))
        self.tree.heading('name', text='–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞', command=lambda: self.sort_column('name'))
        self.tree.heading('memory', text='–û–ó–£ (MB)', command=lambda: self.sort_column('memory'))
        self.tree.heading('cpu', text='CPU %', command=lambda: self.sort_column('cpu'))
        self.tree.heading('status', text='–°—Ç–∞—Ç—É—Å', command=lambda: self.sort_column('status'))
        self.tree.heading('user', text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', command=lambda: self.sort_column('user'))
        self.tree.heading('threat', text='–£–≥—Ä–æ–∑–∞', command=lambda: self.sort_column('threat'))
        self.tree.heading('hash', text='–•—ç—à', command=lambda: self.sort_column('hash'))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        widths = {'pid': 70, 'name': 220, 'memory': 90, 'cpu': 70,
                  'status': 90, 'user': 120, 'threat': 120, 'hash': 100}

        for col, width in widths.items():
            self.tree.column(col, width=width, anchor=tk.CENTER if col != 'name' else tk.W)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(self.tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.pack(fill=tk.BOTH, expand=True)

        # –¢–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.tree.tag_configure('suspicious', foreground='orange')
        self.tree.tag_configure('malicious', foreground='red')
        self.tree.tag_configure('trusted', foreground='green')
        self.tree.tag_configure('system', foreground='#45aaf2')

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.tree.bind('<Button-3>', self.show_context_menu)
        self.tree.bind('<Double-1>', self.show_process_details)

    def create_status_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—â–∏—Ç–µ"""
        status_frame = ttk.Frame(parent)
        status_frame.pack(fill=tk.X, pady=(10, 0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        sys_info = ttk.Label(status_frame, text=self.get_system_info())
        sys_info.pack(side=tk.LEFT, padx=5)

        # –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã
        self.protection_status = ttk.Label(status_frame, text="üü¢ –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞", foreground="green")
        self.protection_status.pack(side=tk.LEFT, padx=20)

        # –°—á–µ—Ç—á–∏–∫ —É–≥—Ä–æ–∑
        self.threat_count = ttk.Label(status_frame, text="–£–≥—Ä–æ–∑: 0", foreground="white")
        self.threat_count.pack(side=tk.LEFT)

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_time = ttk.Label(status_frame, text="")
        self.update_time.pack(side=tk.RIGHT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        clear_btn = ttk.Button(status_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_messages, width=10)
        clear_btn.pack(side=tk.RIGHT, padx=5)

    def clear_messages(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_area.configure(state='normal')
        self.message_area.delete(1.0, tk.END)
        self.message_area.configure(state='disabled')

    def create_expert_panel(self, parent):
        """–°–∫—Ä—ã—Ç–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        self.expert_frame = ttk.Frame(parent)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        expert_btn = ttk.Button(parent, text="‚öôÔ∏è –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º",
                                command=self.toggle_expert_panel, style='Small.TButton')
        expert_btn.pack(fill=tk.X, pady=(5, 0))

        self.style.configure('Small.TButton', font=('Segoe UI', 8))

        # –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã)
        ttk.Label(self.expert_frame, text="MD5 —Ö—ç—à –ø—Ä–æ—Ü–µ—Å—Å–∞:").pack(side=tk.LEFT, padx=5)
        self.hash_entry = ttk.Entry(self.expert_frame, width=40)
        self.hash_entry.pack(side=tk.LEFT, padx=5)

        check_btn = ttk.Button(self.expert_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ VirusTotal",
                               command=self.check_virustotal)
        check_btn.pack(side=tk.LEFT, padx=5)

        block_btn = ttk.Button(self.expert_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                               command=self.add_to_blacklist)
        block_btn.pack(side=tk.LEFT, padx=5)

        self.expert_shown = False

    def toggle_expert_panel(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        if self.expert_shown:
            self.expert_frame.pack_forget()
            self.log_message("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫—Ä—ã—Ç")
        else:
            self.expert_frame.pack(fill=tk.X, pady=(5, 0))
            self.log_message("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        self.expert_shown = not self.expert_shown

    def setup_context_menu(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        self.context_menu = tk.Menu(self, tearoff=0)

        self.context_menu.add_command(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", command=self.kill_selected_process)
        self.context_menu.add_command(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", command=self.kill_process_tree)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", command=self.open_selected_process_path)
        self.context_menu.add_command(label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å", command=self.copy_process_path)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤–∏—Ä—É—Å—ã", command=self.scan_selected_process)
        self.context_menu.add_command(label="–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", command=self.search_process_online)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–°–≤–æ–π—Å—Ç–≤–∞", command=self.show_process_details)

        # –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π —Å–ø–∏—Å–∫–∏
        lists_menu = tk.Menu(self.context_menu, tearoff=0)
        lists_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", command=self.add_to_blacklist)
        lists_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", command=self.add_to_whitelist)
        self.context_menu.add_cascade(label="–°–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–∞", menu=lists_menu)

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç—à –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            selected = self.tree.selection()
            if selected:
                item = self.tree.item(selected[0])
                pid = item['values'][0]
                self.update_hash_entry(pid)

    def update_hash_entry(self, pid):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Ö—ç—à–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            process = psutil.Process(pid)
            exe_path = process.exe()
            if os.path.exists(exe_path):
                file_hash = self.calculate_md5(exe_path)
                self.hash_entry.delete(0, tk.END)
                self.hash_entry.insert(0, file_hash)
                self.log_message(f"–•—ç—à –ø—Ä–æ—Ü–µ—Å—Å–∞ {process.name()}: {file_hash}")
        except:
            self.hash_entry.delete(0, tk.END)
            self.hash_entry.insert(0, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å")
            self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö—ç—à –ø—Ä–æ—Ü–µ—Å—Å–∞", 'error')

    def calculate_md5(self, file_path):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ MD5 —Ö—ç—à–∞ —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def update_process_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        for i in self.tree.get_children():
            self.tree.delete(i)

        for proc in psutil.process_iter(['pid', 'name', 'memory_info', 'cpu_percent', 'status', 'username']):
            try:
                mem_usage = proc.info['memory_info'].rss / (1024 * 1024)  # –≤ MB
                cpu_usage = proc.info['cpu_percent']
                status = proc.info['status']
                username = proc.info['username'].split('\\')[-1] if proc.info['username'] else "SYSTEM"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã
                threat = "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
                tags = ()
                if proc.info['name'].lower() in self.virus_db:
                    threat = self.virus_db[proc.info['name'].lower()]
                    tags = ('malicious',)
                elif "system" in username.lower():
                    tags = ('system',)

                self.tree.insert('', 'end', values=(
                    proc.info['pid'],
                    proc.info['name'],
                    f"{mem_usage:.1f}",
                    f"{cpu_usage:.1f}",
                    status,
                    username,
                    threat,
                    ""
                ), tags=tags)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue

        self.update_time.config(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
        self.log_message("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω", 'info')

    def sort_column(self, col):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ"""
        if col == self.sort_column:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_column = col
            self.sort_reverse = False

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        items = [(self.tree.set(child, col), child) for child in self.tree.get_children('')]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        try:
            items.sort(key=lambda x: float(x[0]), reverse=self.sort_reverse)
        except ValueError:
            items.sort(reverse=self.sort_reverse)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for index, (val, child) in enumerate(items):
            self.tree.move(child, '', index)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.tree.heading(col, command=lambda: self.sort_column(col))
        self.log_message(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ: {col}", 'info')

    def scan_for_malware(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≥—Ä–æ–∑"""
        threat_count = 0

        for child in self.tree.get_children():
            item = self.tree.item(child)
            process_name = item['values'][1].lower()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤
            threat = self.virus_db.get(process_name, None)
            if threat:
                self.tree.item(child, values=(*item['values'][:-2], threat, ""))
                self.tree.item(child, tags=('malicious',))
                threat_count += 1
                self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {process_name} ({threat})", 'warning')
            elif any(name in process_name for name in self.fake_process_names):
                self.tree.item(child, values=(*item['values'][:-2], "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è", ""))
                self.tree.item(child, tags=('suspicious',))
                threat_count += 1
                self.log_message(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_name}", 'warning')
            elif float(item['values'][3]) > 50:  # –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU
                self.tree.item(child, values=(*item['values'][:-2], "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", ""))
                self.tree.item(child, tags=('suspicious',))
                threat_count += 1
                self.log_message(f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU –ø—Ä–æ—Ü–µ—Å—Å–æ–º: {process_name}", 'warning')
            else:
                self.tree.item(child, values=(*item['values'][:-2], "–ù–µ—Ç —É–≥—Ä–æ–∑", ""))
                self.tree.item(child, tags=('trusted',))

        self.threat_count.config(text=f"–£–≥—Ä–æ–∑: {threat_count}")
        if threat_count > 0:
            self.protection_status.config(text="üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–≥—Ä–æ–∑—ã!", foreground="red")
            self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {threat_count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑!", 'error')
        else:
            self.protection_status.config(text="üü¢ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", foreground="green")
            self.log_message("–£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", 'success')

    def run_system_protection(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        self.protection_status.config(text="üü° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...", foreground="orange")
        self.update()
        self.log_message("–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...", 'info')

        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.scan_for_malware()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
        self.check_startup_programs()

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.clean_temp_files()

        self.protection_status.config(text="üü¢ –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞", foreground="green")
        self.log_message("–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 'success')

    def block_viruses(self):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤"""
        count = 0

        for child in self.tree.get_children():
            item = self.tree.item(child)
            if item['values'][6] != "–ù–µ—Ç —É–≥—Ä–æ–∑":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–£–≥—Ä–æ–∑–∞"
                try:
                    pid = item['values'][0]
                    p = psutil.Process(pid)
                    p.kill()
                    count += 1
                    self.log_message(f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {p.name()} (PID: {pid})", 'warning')
                except:
                    continue

        self.update_process_list()
        self.threat_count.config(text=f"–£–≥—Ä–æ–∑: 0")
        self.protection_status.config(text="üü¢ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", foreground="green")
        self.log_message(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 'success')

    def clean_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        before_mem = psutil.virtual_memory().percent

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        for proc in psutil.process_iter():
            try:
                if proc.memory_percent() < 0.1 and proc.status() == 'sleeping':
                    proc.kill()
                    self.log_message(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.name()}", 'info')
            except:
                continue

        after_mem = psutil.virtual_memory().percent
        self.log_message(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: {before_mem - after_mem:.1f}%", 'success')
        self.update_process_list()

    def toggle_stealth_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.stealth_mode = not self.stealth_mode

        if self.stealth_mode:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º—Å—è –ø–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            self.title(random.choice(self.fake_process_names))
            self.protection_status.config(text="üëª –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º", foreground="gray")
            self.log_message("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º (–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)", 'info')
        else:
            self.title(f"SystemHelper_{self.generate_random_name()}")
            self.protection_status.config(text="üü¢ –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞", foreground="green")
            self.log_message("–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 'info')

    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.log_message("–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...", 'warning')

        count = 0
        for proc in psutil.process_iter():
            try:
                if proc.name().lower() in self.virus_db or proc.memory_percent() > 20:
                    proc.kill()
                    count += 1
                    self.log_message(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.name()}", 'warning')
            except:
                continue

        self.log_message(f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–æ {count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 'info')
        self.update_process_list()

    def check_virustotal(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ –Ω–∞ VirusTotal"""
        hash_value = self.hash_entry.get()
        if len(hash_value) == 32:  # MD5 —Ö—ç—à
            self.log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ {hash_value} –Ω–∞ VirusTotal...", 'info')
            webbrowser.open(f"https://www.virustotal.com/gui/file/{hash_value}")
        else:
            self.log_message("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MD5 —Ö—ç—à", 'error')

    def add_to_blacklist(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        selected = self.tree.selection()
        if selected:
            item = self.tree.item(selected[0])
            process_name = item['values'][1].lower()

            if process_name not in self.virus_db:
                self.virus_db[process_name] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
                self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", 'warning')
                self.scan_for_malware()
            else:
                self.log_message("–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ", 'info')

    def add_to_whitelist(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        selected = self.tree.selection()
        if selected:
            item = self.tree.item(selected[0])
            process_name = item['values'][1].lower()

            if process_name in self.virus_db:
                del self.virus_db[process_name]
                self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", 'success')
                self.scan_for_malware()
            else:
                self.log_message("–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ", 'info')

    def kill_selected_process(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", 'error')
            return

        item = self.tree.item(selected[0])
        pid = item['values'][0]
        name = item['values'][1]

        try:
            p = psutil.Process(pid)
            p.kill()
            self.update_process_list()
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å {name} (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", 'success')
        except Exception as e:
            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}", 'error')

    def kill_process_tree(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", 'error')
            return

        item = self.tree.item(selected[0])
        pid = item['values'][0]
        name = item['values'][1]

        try:
            parent = psutil.Process(pid)
            children = parent.children(recursive=True)

            for child in children:
                try:
                    child.kill()
                    self.log_message(f"–ó–∞–≤–µ—Ä—à–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {child.name()} (PID: {child.pid})", 'warning')
                except:
                    continue

            parent.kill()
            self.update_process_list()
            self.log_message(f"–î–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {name} (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 'success')
        except Exception as e:
            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}", 'error')

    def open_selected_process_path(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è", 'error')
            return

        item = self.tree.item(selected[0])
        pid = item['values'][0]
        name = item['values'][1]

        try:
            process = psutil.Process(pid)
            exe_path = process.exe()
            dir_path = os.path.dirname(exe_path)
            os.startfile(dir_path)
            self.log_message(f"–û—Ç–∫—Ä—ã—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {exe_path}", 'info')
        except Exception as e:
            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {e}", 'error')

    def copy_process_path(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", 'error')
            return

        item = self.tree.item(selected[0])
        pid = item['values'][0]
        name = item['values'][1]

        try:
            process = psutil.Process(pid)
            exe_path = process.exe()
            self.clipboard_clear()
            self.clipboard_append(exe_path)
            self.log_message(f"–ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {exe_path}", 'success')
        except Exception as e:
            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å: {e}", 'error')

    def scan_selected_process(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", 'error')
            return

        item = self.tree.item(selected[0])
        process_name = item['values'][1].lower()

        if process_name in self.virus_db:
            threat = self.virus_db[process_name]
            self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞! –ü—Ä–æ—Ü–µ—Å—Å {process_name} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {threat}", 'error')
        else:
            self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ —É–≥—Ä–æ–∑", 'success')

    def search_process_online(self):
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞", 'error')
            return

        item = self.tree.item(selected[0])
        process_name = item['values'][1]
        self.log_message(f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ {process_name} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...", 'info')
        webbrowser.open(f"https://www.google.com/search?q={process_name}+process")

    def show_process_details(self, event=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        selected = self.tree.selection()
        if not selected:
            self.log_message("–ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", 'error')
            return

        item = self.tree.item(selected[0])
        pid = item['values'][0]

        try:
            process = psutil.Process(pid)
            details = (
                f"–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.name()}\n"
                f"PID: {process.pid}\n"
                f"–°—Ç–∞—Ç—É—Å: {process.status()}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {process.username()}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {process.cpu_percent()}%\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {process.memory_info().rss / (1024 * 1024):.1f} MB\n\n"
                f"–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: {process.exe()}\n"
                f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.fromtimestamp(process.create_time())}\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {process.num_threads()}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {process.nice()}"
            )

            self.log_message(f"–°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process.name()} (PID: {pid}):\n{details}", 'info')
        except Exception as e:
            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}", 'error')

    def show_startup_manager(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏"""
        self.log_message("–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏...", 'info')
        startup_programs = []

        if platform.system() == "Windows":
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                key = winreg.OpenKey(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Run"
                )

                i = 0
                while True:
                    try:
                        name, value, _ = winreg.EnumValue(key, i)
                        startup_programs.append((name, value, "Current User"))
                        i += 1
                    except OSError:
                        break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
                key = winreg.OpenKey(
                    winreg.HKEY_LOCAL_MACHINE,
                    r"Software\Microsoft\Windows\CurrentVersion\Run"
                )

                i = 0
                while True:
                    try:
                        name, value, _ = winreg.EnumValue(key, i)
                        startup_programs.append((name, value, "All Users"))
                        i += 1
                    except OSError:
                        break

            except Exception as e:
                self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}", 'error')
                return

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ
        if startup_programs:
            top = tk.Toplevel(self)
            top.title("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏")
            top.geometry("800x500")

            tree = ttk.Treeview(top, columns=('name', 'path', 'scope'), show='headings')
            tree.heading('name', text='–ò–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã')
            tree.heading('path', text='–ü—É—Ç—å')
            tree.heading('scope', text='–û–±–ª–∞—Å—Ç—å')
            tree.column('name', width=200)
            tree.column('path', width=450)
            tree.column('scope', width=150)

            for name, path, scope in startup_programs:
                tree.insert('', 'end', values=(name, path, scope))

            scrollbar = ttk.Scrollbar(top, orient=tk.VERTICAL, command=tree.yview)
            tree.configure(yscrollcommand=scrollbar.set)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            tree.pack(fill=tk.BOTH, expand=True)

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
            def remove_from_startup():
                selected = tree.selection()
                if not selected:
                    return

                item = tree.item(selected[0])
                name = item['values'][0]
                scope = item['values'][2]

                try:
                    if scope == "Current User":
                        key = winreg.OpenKey(
                            winreg.HKEY_CURRENT_USER,
                            r"Software\Microsoft\Windows\CurrentVersion\Run",
                            0, winreg.KEY_WRITE
                        )
                    else:
                        key = winreg.OpenKey(
                            winreg.HKEY_LOCAL_MACHINE,
                            r"Software\Microsoft\Windows\CurrentVersion\Run",
                            0, winreg.KEY_WRITE
                        )

                    winreg.DeleteValue(key, name)
                    winreg.CloseKey(key)
                    tree.delete(selected[0])
                    self.log_message(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", 'success')
                except Exception as e:
                    self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É: {e}", 'error')

            remove_btn = ttk.Button(top, text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", command=remove_from_startup)
            remove_btn.pack(pady=5)

            self.log_message("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω", 'info')
        else:
            self.log_message("–ü—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", 'info')

    def check_startup_programs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ"""
        self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ...", 'info')
        suspicious_count = 0

        if platform.system() == "Windows":
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                key = winreg.OpenKey(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Run"
                )

                i = 0
                while True:
                    try:
                        name, value, _ = winreg.EnumValue(key, i)
                        if any(virus in value.lower() for virus in self.virus_db):
                            suspicious_count += 1
                            self.log_message(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ: {name} ({value})", 'warning')
                        i += 1
                    except OSError:
                        break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
                key = winreg.OpenKey(
                    winreg.HKEY_LOCAL_MACHINE,
                    r"Software\Microsoft\Windows\CurrentVersion\Run"
                )

                i = 0
                while True:
                    try:
                        name, value, _ = winreg.EnumValue(key, i)
                        if any(virus in value.lower() for virus in self.virus_db):
                            suspicious_count += 1
                            self.log_message(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ: {name} ({value})", 'warning')
                        i += 1
                    except OSError:
                        break

            except Exception as e:
                self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}", 'error')

        if suspicious_count > 0:
            self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {suspicious_count} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ!", 'error')
        else:
            self.log_message("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", 'success')

    def clean_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log_message("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...", 'info')
        if platform.system() == "Windows":
            try:
                temp_dir = os.path.join(os.environ['TEMP'])
                count = 0

                for filename in os.listdir(temp_dir):
                    file_path = os.path.join(temp_dir, filename)
                    try:
                        if os.path.isfile(file_path):
                            os.unlink(file_path)
                            count += 1
                    except:
                        continue

                self.log_message(f"–£–¥–∞–ª–µ–Ω–æ {count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", 'success')
            except Exception as e:
                self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}", 'error')

    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = f"""
        –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
        –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}
        –ü–∞–º—è—Ç—å: {psutil.virtual_memory().total / (1024 ** 3):.1f} GB
        """
        return ' | '.join(line.strip() for line in info.split('\n') if line.strip())

    def show_help(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
        help_text = """
        Antivirus Unlocker Pro - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±–æ—Ä—å–±—ã —Å –≤–∏—Ä—É—Å–∞–º–∏

        –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≥—Ä–æ–∑
        - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        - –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ü–ö–ú) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
        """
        self.log_message("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n" + help_text, 'info')

    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.log_message("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", 'info')
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—â–∏—Ç–Ω–∏–∫?"):
            self.log_message("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É", 'info')
            self.destroy()

    def setup_auto_update(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.after(self.auto_update_interval, self.auto_update)

    def auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.update_process_list()
        self.setup_auto_update()

    def toggle_topmost(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        is_topmost = not self.attributes('-topmost')
        self.attributes('-topmost', is_topmost)
        if is_topmost:
            self.log_message("–û–∫–Ω–æ —Ç–µ–ø–µ—Ä—å –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω", 'info')
        else:
            self.log_message("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –æ–∫–Ω–∞", 'info')

    def change_window_name(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ–∫–Ω–∞"""
        new_name = simpledialog.askstring("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –æ–∫–Ω–∞:")
        if new_name:
            self.title(new_name)
            self.log_message(f"–ò–º—è –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", 'info')

    def start_background_checks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""

        def checker():
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É CPU
                    for proc in psutil.process_iter():
                        try:
                            if proc.cpu_percent() > 90 and proc.pid != os.getpid():
                                self.log_message(
                                    f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞! –ü—Ä–æ—Ü–µ—Å—Å {proc.name()} (PID: {proc.pid}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {proc.cpu_percent()}% CPU!",
                                    'warning'
                                )
                        except:
                            continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                    if psutil.virtual_memory().percent > 90:
                        self.log_message(
                            f"–ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {psutil.virtual_memory().percent}% –û–ó–£!",
                            'warning'
                        )

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    time.sleep(10)
                except:
                    continue

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=checker, daemon=True).start()


if __name__ == "__main__":
    app = AntivirusUnlockerPro()
    app.mainloop()