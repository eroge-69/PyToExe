import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import hashlib
import secrets
import time
import sys

# Import BLAKE3 v·ªõi error handling
try:
    from blake3 import blake3
    BLAKE3_AVAILABLE = True
except ImportError:
    BLAKE3_AVAILABLE = False

class ChecksumTool:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.create_widgets()
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("üîê Checksum Tool Pro")
        # ===== K√çCH TH∆Ø·ªöC THEO Y√äU C·∫¶U =====
        self.root.geometry("800x900")  # TƒÉng l√™n ƒë·ªÉ gi·ªëng ·∫£nh
        self.root.resizable(True, True)
        self.root.minsize(800,900)    # Minimum size gi·ªëng v·ªõi default
        
        # Center window
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (self.root.winfo_width() // 2)
        y = (self.root.winfo_screenheight() // 2) - (self.root.winfo_height() // 2)
        self.root.geometry(f"+{x}+{y}")
        
        # Set style
        try:
            style = ttk.Style()
            style.theme_use('clam')
        except:
            pass
    
    def create_widgets(self):
        """T·∫°o giao di·ªán v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p"""
        
        # Main frame v·ªõi padding l·ªõn h∆°n
        main_frame = ttk.Frame(self.root, padding="20")  # TƒÉng padding
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title v·ªõi kho·∫£ng c√°ch l·ªõn h∆°n
        title_label = ttk.Label(main_frame, text="üîê Checksum Tool Pro", 
                               font=("Arial", 20, "bold"))  # TƒÉng font size
        title_label.pack(pady=(0, 20))  # TƒÉng kho·∫£ng c√°ch
        
        # Top section - Input v√† controls
        top_section = ttk.Frame(main_frame)
        top_section.pack(fill=tk.X, pady=(0, 20))  # TƒÉng kho·∫£ng c√°ch
        
        # Input section v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        input_frame = ttk.LabelFrame(top_section, text="üìù Nh·∫≠p chu·ªói c·∫ßn hash", padding="12")
        input_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.input_text = scrolledtext.ScrolledText(input_frame, height=4, font=("Consolas", 11))  # TƒÉng height v√† font
        self.input_text.pack(fill=tk.X)
        
        # Character count
        self.char_count_var = tk.StringVar(value="0 k√Ω t·ª±")
        char_label = ttk.Label(input_frame, textvariable=self.char_count_var, 
                              font=("Arial", 9), foreground="gray")
        char_label.pack(anchor=tk.E, pady=(5, 0))
        
        self.input_text.bind('<KeyRelease>', self.update_char_count)
        
        # Private key section v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        key_frame = ttk.LabelFrame(top_section, text="üîë Private Key", padding="12")
        key_frame.pack(fill=tk.X, pady=(0, 15))
        
        key_container = ttk.Frame(key_frame)
        key_container.pack(fill=tk.X)
        
        self.private_key = tk.Entry(key_container, show="*", font=("Consolas", 11))  # TƒÉng font
        self.private_key.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Key buttons v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        key_buttons = ttk.Frame(key_container)
        key_buttons.pack(side=tk.RIGHT, padx=(10, 0))
        
        ttk.Button(key_buttons, text="üé≤ T·∫°o Key", command=self.generate_key, width=12).pack(side=tk.TOP, pady=(0, 3))
        ttk.Button(key_buttons, text="üëÅÔ∏è Hi·ªán/·∫®n", command=self.toggle_key_visibility, width=12).pack(side=tk.TOP)
        
        # Algorithm selection v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        algo_frame = ttk.LabelFrame(top_section, text="üîß Ch·ªçn thu·∫≠t to√°n", padding="12")
        algo_frame.pack(fill=tk.X, pady=(0, 15))
        
        algorithms = ["MD5", "SHA-256"]
        if BLAKE3_AVAILABLE:
            algorithms.append("BLAKE3")
        else:
            algorithms.append("BLAKE3 (Kh√¥ng kh·∫£ d·ª•ng)")
        
        algo_container = ttk.Frame(algo_frame)
        algo_container.pack(fill=tk.X)
        
        self.algo_choice = ttk.Combobox(algo_container, values=algorithms, state="readonly", 
                                       width=30, font=("Arial", 10))  # TƒÉng width v√† font
        self.algo_choice.current(1)  # Default to SHA-256
        self.algo_choice.pack(side=tk.LEFT)
        
        # Algorithm info
        self.algo_info = ttk.Label(algo_container, text="", foreground="blue", font=("Arial", 10))
        self.algo_info.pack(side=tk.LEFT, padx=(15, 0))
        
        self.algo_choice.bind('<<ComboboxSelected>>', self.on_algorithm_change)
        self.on_algorithm_change()
        
        # Control buttons v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        button_frame = ttk.Frame(top_section)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(button_frame, text="üîê T√çNH CHECKSUM", command=self.calculate_checksum,
                  style="Accent.TButton", width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üóëÔ∏è X√ìA", command=self.clear_all, width=12).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üìã COPY", command=self.copy_result, width=12).pack(side=tk.LEFT)
        
        # ===== KHU V·ª∞C K·∫æT QU·∫¢ V·ªöI K√çCH TH∆Ø·ªöC L·ªöN =====
        result_frame = ttk.LabelFrame(main_frame, text="üìä K·∫øt qu·∫£", padding="15")
        result_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        self.output_text = scrolledtext.ScrolledText(
            result_frame, 
            height=30,      # K√≠ch th∆∞·ªõc v·ª´a ph·∫£i
            width=100,       # R·ªông h∆°n
            font=("Consolas", 11),  # Font l·ªõn h∆°n
            wrap=tk.WORD,
            bg="#f8f9fa",
            fg="#212529",
            selectbackground="#007bff",
            selectforeground="white",
            padx=10,        # Padding n·ªôi dung
            pady=8
        )
        self.output_text.pack(fill=tk.BOTH, expand=True)
        
        # Status bar v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        self.status_var = tk.StringVar(value="S·∫µn s√†ng - Nh·∫≠p d·ªØ li·ªáu v√† nh·∫•n 'T√çNH CHECKSUM'")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W, font=("Arial", 10),
                              padding="8")
        status_bar.pack(fill=tk.X)
        
        # Keyboard shortcuts
        self.root.bind('<Return>', lambda e: self.calculate_checksum())
        self.root.bind('<Control-n>', lambda e: self.clear_all())
        self.root.bind('<Control-c>', lambda e: self.copy_result())
        
        # Welcome message ƒë∆°n gi·∫£n
        welcome_msg = """üîê CHECKSUM TOOL PRO

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. Nh·∫≠p chu·ªói c·∫ßn hash v√†o √¥ tr√™n
2. Nh·∫≠p private key (ho·∫∑c nh·∫•n "T·∫°o Key" ƒë·ªÉ t·∫°o t·ª± ƒë·ªông)
3. Ch·ªçn thu·∫≠t to√°n hash (MD5, SHA-256, BLAKE3)
4. Nh·∫•n "T√çNH CHECKSUM" ƒë·ªÉ t·∫°o hash

Ph√≠m t·∫Øt:
‚Ä¢ Enter: T√≠nh checksum
‚Ä¢ Ctrl+N: X√≥a t·∫•t c·∫£
‚Ä¢ Ctrl+C: Copy k·∫øt qu·∫£

S·∫µn s√†ng t·∫°o checksum!"""
        
        self.output_text.insert("1.0", welcome_msg)
    
    def update_char_count(self, event=None):
        """C·∫≠p nh·∫≠t s·ªë k√Ω t·ª±"""
        text = self.input_text.get("1.0", tk.END).strip()
        char_count = len(text)
        byte_count = len(text.encode('utf-8'))
        self.char_count_var.set(f"{char_count} k√Ω t·ª± ({byte_count} bytes)")
    
    def on_algorithm_change(self, event=None):
        """C·∫≠p nh·∫≠t th√¥ng tin thu·∫≠t to√°n"""
        algorithm = self.algo_choice.get()
        
        info_map = {
            "MD5": "‚ö†Ô∏è 128-bit, kh√¥ng an to√†n",
            "SHA-256": "‚úÖ 256-bit, an to√†n cao", 
            "BLAKE3": "üöÄ 256-bit, nhanh nh·∫•t",
            "BLAKE3 (Kh√¥ng kh·∫£ d·ª•ng)": "‚ùå C·∫ßn c√†i ƒë·∫∑t"
        }
        
        self.algo_info.config(text=info_map.get(algorithm, ""))
    
    def generate_key(self):
        """T·∫°o private key ng·∫´u nhi√™n"""
        try:
            key = secrets.token_hex(32)
            self.private_key.delete(0, tk.END)
            self.private_key.insert(0, key)
            self.status_var.set("ƒê√£ t·∫°o private key 256-bit an to√†n")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o key: {e}")
    
    def toggle_key_visibility(self):
        """Hi·ªán/·∫©n private key"""
        if self.private_key.cget('show') == '*':
            self.private_key.config(show='')
        else:
            self.private_key.config(show='*')
    
    def calculate_checksum(self):
        """T√≠nh checksum v·ªõi k·∫øt qu·∫£ ƒë∆°n gi·∫£n"""
        try:
            # Validate input
            text = self.input_text.get("1.0", tk.END).strip()
            key = self.private_key.get().strip()
            algorithm = self.algo_choice.get()
            
            if not text:
                messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p chu·ªói c·∫ßn hash!")
                self.input_text.focus()
                return
                
            if not key:
                messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p private key!")
                self.private_key.focus()
                return
            
            # Check BLAKE3 availability
            if algorithm == "BLAKE3" and not BLAKE3_AVAILABLE:
                messagebox.showerror("L·ªói", "BLAKE3 kh√¥ng kh·∫£ d·ª•ng!\nVui l√≤ng ch·ªçn MD5 ho·∫∑c SHA-256.")
                return
            
            # Update status
            self.status_var.set("ƒêang t√≠nh checksum...")
            self.root.update()
            
            # Combine text and key
            combined = (text + key).encode('utf-8')
            
            # Calculate checksum
            if algorithm == "MD5":
                result = hashlib.md5(combined).hexdigest()
            elif algorithm == "SHA-256":
                result = hashlib.sha256(combined).hexdigest()
            elif algorithm == "BLAKE3":
                result = blake3(combined).hexdigest()
            else:
                raise ValueError(f"Thu·∫≠t to√°n kh√¥ng h·ªó tr·ª£: {algorithm}")
            
            # ===== K·∫æT QU·∫¢ ƒê∆†N GI·∫¢N =====
            simple_result = f"""üìä K·∫æT QU·∫¢ CHECKSUM

üìù D·ªØ li·ªáu ƒë·∫ßu v√†o:
{text}

üîë Private Key:
{key}

üîß Thu·∫≠t to√°n:
{algorithm}

üîê K·∫øt qu·∫£:
{result}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ Checksum ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!
üìã Nh·∫•n "COPY" ƒë·ªÉ sao ch√©p k·∫øt qu·∫£."""
            
            # Clear and display result
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert("1.0", simple_result)
            
            # Scroll to top
            self.output_text.see("1.0")
            
            # Update status
            self.status_var.set(f"‚úÖ Checksum t·∫°o th√†nh c√¥ng - {algorithm}")
            
        except Exception as e:
            error_msg = f"L·ªói: {str(e)}"
            
            # Display simple error
            self.output_text.delete("1.0", tk.END)
            error_display = f"""‚ùå L·ªñI T√çNH CHECKSUM

Chi ti·∫øt l·ªói: {error_msg}

Vui l√≤ng ki·ªÉm tra:
‚Ä¢ D·ªØ li·ªáu ƒë·∫ßu v√†o c√≥ h·ª£p l·ªá kh√¥ng
‚Ä¢ Thu·∫≠t to√°n ƒë√£ ch·ªçn c√≥ kh·∫£ d·ª•ng kh√¥ng
‚Ä¢ Th·ª≠ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng n·∫øu c·∫ßn

Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói v·∫´n ti·∫øp t·ª•c."""
            
            self.output_text.insert("1.0", error_display)
            messagebox.showerror("L·ªói", error_msg)
            self.status_var.set("‚ùå L·ªói khi t√≠nh checksum")
    
    def clear_all(self):
        """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu"""
        if messagebox.askyesno("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu?"):
            self.input_text.delete("1.0", tk.END)
            self.private_key.delete(0, tk.END)
            self.output_text.delete("1.0", tk.END)
            self.char_count_var.set("0 k√Ω t·ª±")
            self.status_var.set("ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu - S·∫µn s√†ng nh·∫≠p m·ªõi")
            self.input_text.focus()
    
    def copy_result(self):
        """Copy checksum result"""
        try:
            result_content = self.output_text.get("1.0", tk.END).strip()
            if not result_content:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ copy!")
                return
            
            # T√¨m d√≤ng ch·ª©a k·∫øt qu·∫£ checksum
            lines = result_content.split('\n')
            checksum_line = None
            
            # T√¨m d√≤ng sau "üîê K·∫øt qu·∫£:"
            found_result_section = False
            for line in lines:
                if "üîê K·∫øt qu·∫£:" in line:
                    found_result_section = True
                    continue
                if found_result_section and line.strip() and not line.startswith('‚îÅ'):
                    checksum_line = line.strip()
                    break
            
            if checksum_line:
                # Copy ch·ªâ checksum
                self.root.clipboard_clear()
                self.root.clipboard_append(checksum_line)
                self.root.update()
                
                self.status_var.set("üìã ƒê√£ copy checksum v√†o clipboard")
                messagebox.showinfo("Copy th√†nh c√¥ng", f"Checksum ƒë√£ ƒë∆∞·ª£c copy:\n\n{checksum_line}")
            else:
                # Copy to√†n b·ªô
                self.root.clipboard_clear()
                self.root.clipboard_append(result_content)
                self.root.update()
                
                self.status_var.set("üìã ƒê√£ copy to√†n b·ªô k·∫øt qu·∫£ v√†o clipboard")
                messagebox.showinfo("Copy th√†nh c√¥ng", "To√†n b·ªô k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c copy!")
                
        except Exception as e:
            messagebox.showerror("L·ªói copy", f"Kh√¥ng th·ªÉ copy: {str(e)}")

def main():
    """Main function"""
    try:
        root = tk.Tk()
        app = ChecksumTool(root)
        root.mainloop()
    except Exception as e:
        print(f"ERROR: {e}")
        messagebox.showerror("L·ªói kh·ªüi ƒë·ªông", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng:\n{str(e)}")

if __name__ == "__main__":
    main()
