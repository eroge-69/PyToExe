import requests
import time
import sys
import os
from datetime import datetime

# ANSI color codes cho hi·ªáu ·ª©ng 7 m√†u rainbow
class Colors:
    RED = '\033[91m'
    ORANGE = '\033[38;5;208m'
    YELLOW = '\033[93m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    INDIGO = '\033[38;5;63m'
    VIOLET = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    RESET = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'

# Gradient colors cho loading bar
RAINBOW_COLORS = [Colors.RED, Colors.ORANGE, Colors.YELLOW, Colors.GREEN, Colors.BLUE, Colors.INDIGO, Colors.VIOLET]

class LoadingBar:
    def __init__(self, total, prefix='Progress', length=40):
        self.total = total
        self.current = 0
        self.prefix = prefix
        self.length = length
        
    def update(self, current, status_text=""):
        self.current = current
        percent = (current / self.total) * 100
        filled_length = int(self.length * current // self.total)
        
        # T·∫°o gradient bar v·ªõi 7 m√†u
        bar = ""
        for i in range(self.length):
            color_index = (i * len(RAINBOW_COLORS)) // self.length
            color = RAINBOW_COLORS[color_index]
            
            if i < filled_length:
                bar += f"{color}‚ñà{Colors.RESET}"
            else:
                bar += f"{Colors.DIM}‚ñë{Colors.RESET}"
        
        # T·∫°o ph·∫ßn trƒÉm v·ªõi m√†u gradient
        percent_color = RAINBOW_COLORS[min(int(percent / 100 * len(RAINBOW_COLORS)), len(RAINBOW_COLORS) - 1)]
        
        # Clear line v√† in progress bar
        sys.stdout.write('\r' + ' ' * 100 + '\r')
        progress_line = (f"{Colors.BOLD}{self.prefix}:{Colors.RESET} "
                        f"|{bar}| "
                        f"{percent_color}{percent:5.1f}%{Colors.RESET} "
                        f"{Colors.CYAN}[{current}/{self.total}]{Colors.RESET}")
        
        if status_text:
            progress_line += f" {Colors.WHITE}{status_text}{Colors.RESET}"
            
        sys.stdout.write(progress_line)
        sys.stdout.flush()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def show_startup_loading():
    """Hi·ªÉn th·ªã loading screen khi kh·ªüi ƒë·ªông"""
    clear_screen()
    print(f"\n{Colors.CYAN}{'='*70}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.VIOLET}                  Discord Exm{Colors.RESET}")
    print(f"{Colors.YELLOW}                  ‚ú® exm.x10.mx ‚ú®{Colors.RESET}")
    print(f"{Colors.CYAN}{'='*70}{Colors.RESET}\n")
    
    print(f"{Colors.YELLOW}üîÑ He thong dang tai ! ...{Colors.RESET}")
    
    # Loading bar kh·ªüi t·∫°o
    loading = LoadingBar(100, "Loading", 50)
    
    stages = [
        (20, "loading modules..."),
        (40, "checking dependencies..."),
        (60, "colors loading..."),
        (80, "succes..."),
        (100, "ready !")
    ]
    
    current_progress = 0
    for target, message in stages:
        while current_progress <= target:
            loading.update(current_progress, message)
            time.sleep(0.03)
            current_progress += 1
    
    print(f"\n\n{Colors.GREEN}‚úÖ System ready!{Colors.RESET}")
    time.sleep(1)

def print_main_menu():
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    clear_screen()
    
    banner = f"""
{Colors.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         {Colors.BOLD}{Colors.VIOLET}Discord Exm{Colors.RESET}{Colors.CYAN}                                  ‚ïë
‚ïë                        {Colors.YELLOW}‚ú® exm.x10.mx ‚ú®{Colors.RESET}{Colors.CYAN}                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}
    """
    print(banner)
    
    # Menu ch·ª©c nƒÉng v·ªõi alignment ch√≠nh x√°c
    menu = f"""
{Colors.BLUE}‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                       {Colors.BOLD}{Colors.WHITE}EXM TOOL DISCORD FREE{Colors.RESET}{Colors.BLUE}                         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                                     ‚îÇ
‚îÇ  {Colors.GREEN}[1]{Colors.RESET} {Colors.BOLD}Check Token{Colors.RESET}{Colors.BLUE}                                                    ‚îÇ
‚îÇ  {Colors.RED}[0]{Colors.RESET} {Colors.BOLD}Exit{Colors.RESET}{Colors.BLUE}                                                           ‚îÇ
‚îÇ                                                                     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ{Colors.RESET}

{Colors.DIM}{Colors.GREEN}C√≥ b√°n tool generator account discord auto verify mail + sdt ƒëa lu·ªìng ho·∫∑c source. {Colors.RESET}
{Colors.DIM}{Colors.GREEN}Cho thu√™ api bypass hcaptcha 7000 captcha/30k vnd. {Colors.RESET}
"""
    print(menu)

def check_token(token):
    """Ki·ªÉm tra xem token Discord c√≥ h·ª£p l·ªá v√† ho·∫°t ƒë·ªông hay kh√¥ng"""
    headers = {
        'Authorization': token,
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get('https://discord.com/api/v9/users/@me', headers=headers, timeout=10)
        
        if response.status_code == 200:
            user_data = response.json()
            username = user_data.get('username', 'N/A')
            user_id = user_data.get('id', 'N/A')
            email = user_data.get('email', 'N/A')
            verified = user_data.get('verified', False)
            
            return {
                'status': 'VALID',
                'username': username,
                'user_id': user_id,
                'email': email,
                'verified': verified
            }
        elif response.status_code == 401:
            return {'status': 'INVALID', 'error': 'Unauthorized - Token kh√¥ng h·ª£p l·ªá'}
        elif response.status_code == 429:
            return {'status': 'RATE_LIMITED', 'error': 'Rate limited - Qu√° nhi·ªÅu request'}
        else:
            return {'status': 'ERROR', 'error': f'HTTP {response.status_code}'}
            
    except requests.exceptions.RequestException as e:
        return {'status': 'ERROR', 'error': f'Network error: {str(e)}'}

def create_live_folder():
    """T·∫°o th∆∞ m·ª•c live n·∫øu ch∆∞a t·ªìn t·∫°i"""
    if not os.path.exists('live'):
        os.makedirs('live')
        print(f"{Colors.GREEN}‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c 'live'{Colors.RESET}")

def load_tokens_from_file(filename):
    """ƒê·ªçc tokens t·ª´ file v·ªõi loading animation"""
    print(f"\n{Colors.YELLOW}üìÇ ƒêang ƒë·ªçc file {filename}...{Colors.RESET}")
    
    # Loading cho vi·ªác ƒë·ªçc file
    loading = LoadingBar(100, "Loading file", 40)
    for i in range(101):
        loading.update(i, f"Reading {filename}")
        time.sleep(0.01)
    
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            tokens = []
            for line in file:
                token = line.strip()
                if token and not token.startswith('#'):  # B·ªè qua comment v√† d√≤ng tr·ªëng
                    tokens.append(token)
            
            print(f"\n{Colors.GREEN}‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng {len(tokens)} tokens{Colors.RESET}")
            return tokens
    except FileNotFoundError:
        print(f"\n{Colors.RED}‚ùå Kh√¥ng t√¨m th·∫•y file {filename}{Colors.RESET}")
        print(f"{Colors.YELLOW}üí° Vui l√≤ng t·∫°o file tokens.txt v√† ƒë·∫∑t tokens v√†o ƒë√≥{Colors.RESET}")
        return None
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå L·ªói ƒë·ªçc file: {str(e)}{Colors.RESET}")
        return None

def check_tokens_function():
    """Ch·ª©c nƒÉng [1] - Check Token"""
    clear_screen()
    print(f"{Colors.BOLD}{Colors.GREEN}üîç CH·ª®C NƒÇNG CHECK TOKEN{Colors.RESET}")
    print(f"{Colors.CYAN}{'='*50}{Colors.RESET}\n")
    
    # T·∫°o th∆∞ m·ª•c live
    create_live_folder()
    
    # ƒê·ªçc tokens t·ª´ file
    tokens = load_tokens_from_file('tokens.txt')
    if not tokens:
        input(f"\n{Colors.YELLOW}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
        return
    
    print(f"\n{Colors.BOLD}{Colors.BLUE}üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra {len(tokens)} tokens...{Colors.RESET}")
    print(f"{Colors.DIM}üíæ Live tokens s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: live/livetokens.txt{Colors.RESET}\n")
    time.sleep(2)
    
    live_tokens = []
    dead_tokens = []
    
    # Progress bar ch√≠nh
    progress = LoadingBar(len(tokens), "Checking tokens", 50)
    
    for i, token in enumerate(tokens):
        # Hi·ªÉn th·ªã token preview
        token_preview = f"{token[:15]}...{token[-10:]}" if len(token) > 25 else token
        progress.update(i, f"Token: {token_preview}")
        
        result = check_token(token)
        
        print(f"\n{Colors.DIM}[{i+1:03d}/{len(tokens):03d}]{Colors.RESET} ", end="")
        
        if result['status'] == 'VALID':
            print(f"{Colors.GREEN}‚úÖ LIVE{Colors.RESET} - {Colors.BOLD}{result['username']}{Colors.RESET} "
                  f"{Colors.DIM}(ID: {result['user_id']}){Colors.RESET}")
            
            if result['email'] != 'N/A':
                verified_icon = "‚úÖ" if result['verified'] else "‚ùå"
                print(f"   {Colors.CYAN}üìß {result['email']} {verified_icon}{Colors.RESET}")
            
            # L∆∞u th√¥ng tin chi ti·∫øt
            live_tokens.append({
                'token': token,
                'username': result['username'],
                'user_id': result['user_id'],
                'email': result['email'],
                'verified': result['verified']
            })
            
        elif result['status'] == 'INVALID':
            print(f"{Colors.RED}‚ùå DEAD{Colors.RESET} - {Colors.DIM}{result['error']}{Colors.RESET}")
            dead_tokens.append(token)
            
        elif result['status'] == 'RATE_LIMITED':
            print(f"{Colors.YELLOW}‚è≥ RATE LIMITED{Colors.RESET} - {Colors.DIM}Ch·ªù 5 gi√¢y...{Colors.RESET}")
            # Mini progress bar cho rate limit
            rate_limit_bar = LoadingBar(50, "Cooldown", 30)
            for j in range(51):
                rate_limit_bar.update(j, f"Wait {5-j//10}s")
                time.sleep(0.1)
            print()
            # Th·ª≠ l·∫°i token n√†y (gi·∫£m i ƒë·ªÉ kh√¥ng b·ªè qua token)
            continue
            
        else:
            print(f"{Colors.ORANGE}‚ö†Ô∏è ERROR{Colors.RESET} - {Colors.DIM}{result['error']}{Colors.RESET}")
            dead_tokens.append(token)
        
        # Delay ƒë·ªÉ tr√°nh rate limit
        time.sleep(0.5)
    
    # Ho√†n th√†nh progress bar
    progress.update(len(tokens), "Completed!")
    
    # L∆∞u live tokens v√†o file
    if live_tokens:
        print(f"\n\n{Colors.YELLOW}üíæ ƒêang l∆∞u {len(live_tokens)} live tokens...{Colors.RESET}")
        
        save_progress = LoadingBar(100, "Saving", 40)
        for i in range(101):
            save_progress.update(i, "Writing to live/livetokens.txt")
            time.sleep(0.01)
        
        try:
            with open('live/livetokens.txt', 'w', encoding='utf-8') as f:
                f.write("# Discord Live Tokens\n")
                f.write(f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# Total: {len(live_tokens)} live tokens\n\n")
                
                for token_info in live_tokens:
                    # Ghi token v·ªõi th√¥ng tin comment
                    f.write(f"{token_info['token']} # {token_info['username']} | {token_info['user_id']}")
                    if token_info['email'] != 'N/A':
                        f.write(f" | {token_info['email']}")
                    f.write("\n")
            
            print(f"\n{Colors.GREEN}‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng v√†o live/livetokens.txt{Colors.RESET}")
            
        except Exception as e:
            print(f"\n{Colors.RED}‚ùå L·ªói l∆∞u file: {str(e)}{Colors.RESET}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng k·∫øt
    print(f"\n\n{Colors.CYAN}{'='*60}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.VIOLET}                  üìä K·∫æT QU·∫¢ KI·ªÇM TRA                   {Colors.RESET}")
    print(f"{Colors.CYAN}{'='*60}{Colors.RESET}")
    
    total_checked = len(live_tokens) + len(dead_tokens)
    live_percent = (len(live_tokens) / total_checked * 100) if total_checked > 0 else 0
    
    print(f"{Colors.GREEN}‚úÖ Live tokens:  {Colors.BOLD}{len(live_tokens):4d}{Colors.RESET} "
          f"{Colors.DIM}({live_percent:.1f}%){Colors.RESET}")
    print(f"{Colors.RED}‚ùå Dead tokens:  {Colors.BOLD}{len(dead_tokens):4d}{Colors.RESET} "
          f"{Colors.DIM}({100-live_percent:.1f}%){Colors.RESET}")
    
    if live_tokens:
        print(f"\n{Colors.CYAN}üìÅ File location: {Colors.BOLD}live/livetokens.txt{Colors.RESET}")
        print(f"{Colors.DIM}üí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng file n√†y cho c√°c m·ª•c ƒë√≠ch kh√°c{Colors.RESET}")
    
    print(f"\n{Colors.BOLD}{Colors.GREEN}üéâ HO√ÄN TH√ÄNH! üéâ{Colors.RESET}")
    input(f"{Colors.DIM}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")

def main():
    # Hi·ªÉn th·ªã loading screen
    show_startup_loading()
    
    while True:
        print_main_menu()
        
        try:
            choice = input(f"\n{Colors.BOLD}{Colors.WHITE}Ch·ªçn ch·ª©c nƒÉng: {Colors.RESET}")
            
            if choice == '1':
                check_tokens_function()
            elif choice == '0':
                clear_screen()
                print(f"\n{Colors.BOLD}{Colors.GREEN}üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Discord Token Checker!{Colors.RESET}")
                print(f"{Colors.CYAN}üåà See you next time!{Colors.RESET}\n")
                break
            else:
                print(f"{Colors.RED}‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 1 ho·∫∑c 0.{Colors.RESET}")
                time.sleep(2)
                
        except KeyboardInterrupt:
            clear_screen()
            print(f"\n{Colors.YELLOW}‚èπÔ∏è ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh!{Colors.RESET}")
            break

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}{Colors.RESET}")
        input(f"{Colors.DIM}Nh·∫•n Enter ƒë·ªÉ tho√°t...{Colors.RESET}")