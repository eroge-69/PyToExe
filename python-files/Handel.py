import random
import json
import os

# --- Konstanten ---

WAREN = {
    0: "Holz", 1: "Wein", 2: "Gew√ºrze", 3: "Stoffe", 4: "Eisen",
    5: "Salz", 6: "Fische", 7: "Getreide", 8: "Gold", 9: "Keramik"
}

ST√ÑDTE = {
    0: "M√ºnchen", 1: "Hamburg", 2: "Berlin", 3: "K√∂ln", 4: "Frankfurt",
    5: "Dresden", 6: "Leipzig", 7: "Stuttgart", 8: "Bremen", 9: "N√ºrnberg"
}

STADT_BONI = {
    2: {3: 0.10}  # Berlin gibt 10% mehr f√ºr Stoffe (ware 3)
}

MELDUNGEN = [
    "Starker Sturm verz√∂gert die Reise.",
    "G√ºnstige Handelsbedingungen in der Stadt.",
    "Piratenangriff! Einige Waren gehen verloren.",
    "Markt ist √ºberf√ºllt, Preise sinken.",
    "Gute Ernte, Preise f√ºr Getreide fallen.",
    "Seuchenwarnung! Handel eingeschr√§nkt.",
    "Neue Handelsroute er√∂ffnet.",
    "Preise f√ºr Gew√ºrze steigen.",
    "Zoll erh√∂ht, Handel wird teurer.",
    "Lagerfeuer am Hafen bringt Gl√ºck.",
]

while len(MELDUNGEN) < 50:
    MELDUNGEN.append(f"Zuf√§lliges Ereignis Nummer {len(MELDUNGEN) + 1}")

AUFTR√ÑGE = [
    {"ware": 0, "menge": 50, "stadt": 1, "belohnung": 500},
    {"ware": 4, "menge": 30, "stadt": 3, "belohnung": 700},
    {"ware": 2, "menge": 20, "stadt": 5, "belohnung": 600},
    {"ware": 9, "menge": 10, "stadt": 0, "belohnung": 1000},
    {"ware": 1, "menge": 40, "stadt": 7, "belohnung": 450},
]

while len(AUFTR√ÑGE) < 50:
    AUFTR√ÑGE.append({
        "ware": random.randint(0, 9),
        "menge": random.randint(10, 60),
        "stadt": random.randint(0, 9),
        "belohnung": random.randint(100, 1200)
    })

SCHWIERIGKEITSGRADE = {1: "Einfach", 2: "Mittel", 3: "Schwer"}

def get_startkapital(schwierigkeit):
    return {1: 5000, 2: 3000, 3: 1500}.get(schwierigkeit, 3000)

def get_preisschwankung(schwierigkeit):
    return {1: 0.1, 2: 0.25, 3: 0.5}.get(schwierigkeit, 0.25)

basis_preise = {
    stadt: {ware: random.randint(10, 100) for ware in WAREN}
    for stadt in ST√ÑDTE
}

# --- Spielklasse beginnt hier ---
class SchiffhandelSpiel:
    def __init__(self, schwierigkeit, max_runden, name):
        self.name = name
        self.schwierigkeit = schwierigkeit
        self.max_runden = max_runden
        self.runde = 0
        self.geld = get_startkapital(schwierigkeit)
        self.max_lager = 100
        self.lager = {ware: 0 for ware in WAREN}
        self.position = 0
        self.auftr√§ge = random.sample(AUFTR√ÑGE, 5)
        self.meldungen = MELDUNGEN
        self.preisverlauf = {
            stadt: {ware: [] for ware in WAREN}
            for stadt in ST√ÑDTE
        }
        self.schiff_upgrades = {
            "lager": 0,
            "schnelligkeit": 0,
            "piratenschutz": 0,
            "verkaufsbonus": 0
        }
        print(f"Spiel gestartet von {self.name} ‚Äì {SCHWIERIGKEITSGRADE[schwierigkeit]} ‚Äì Startkapital: {self.geld} Gold.")
        print(f"Startort: {ST√ÑDTE[self.position]}")

    def get_aktueller_preis(self, stadt, ware):
        basis = basis_preise[stadt][ware]
        schwankung = get_preisschwankung(self.schwierigkeit)
        faktor = 1 + random.uniform(-schwankung, schwankung)
        
        # Einfluss von NPC-H√§ndlern auf Preise:
        npc_einfluss = self.npc_preise_einfluss(stadt, ware)
        faktor *= (1 + npc_einfluss)

        preis = max(int(basis * faktor), 1)
        verlauf = self.preisverlauf[stadt][ware]
        verlauf.append(preis)
        if len(verlauf) > 5:
            verlauf.pop(0)
        return preis

    def npc_preise_einfluss(self, stadt, ware):
        # NPC H√§ndler beeinflussen Preis zwischen -10% und +10%
        einfluss = 0
        for npc in self.npc_h√§ndler:
            if npc["stadt"] == stadt and npc["ware"] == ware:
                einfluss += npc["preis_modifikator"]
        return einfluss

    def aktueller_lagerplatz(self):
        return sum(self.lager.values())

    def zeige_standort_und_geld(self):
        print(f"\nüìç Aktueller Ort: {ST√ÑDTE[self.position]} | üí∞ Geld: {self.geld} Gold | üö¢ Lagerplatz: {self.aktueller_lagerplatz()}/{self.max_lager}")

    def zeige_status(self):
        print(f"\nüë§ Spieler: {self.name}")
        print(f"üì¶ Runde {self.runde}/{self.max_runden if self.max_runden else '‚àû'}")
        print(f"üèôÔ∏è  Stadt: {ST√ÑDTE[self.position]}")
        print(f"üí∞ Geld: {self.geld} Gold")
        print(f"üì¶ Lagerplatz: {self.aktueller_lagerplatz()}/{self.max_lager}")
        print(f"üö¢ Schiff-Upgrades: Lager +{self.schiff_upgrades['lager']*50}, Geschwindigkeit +{self.schiff_upgrades['schnelligkeit']}, Piratenschutz +{self.schiff_upgrades['piratenschutz']}, Verkaufsbonus +{int(self.schiff_upgrades['verkaufsbonus']*100)}%")
        print("üì¶ Lagerbestand:")
        for ware, menge in self.lager.items():
            if menge > 0:
                print(f"  - {WAREN[ware]}: {menge}")
        print("\nüìú Auftr√§ge:")
        for i, auftrag in enumerate(self.auftr√§ge):
            print(f" {i}: {auftrag['menge']} {WAREN[auftrag['ware']]} nach {ST√ÑDTE[auftrag['stadt']]} (Belohnung: {auftrag['belohnung']} Gold)")
        upgrade_slots = max(0, 5 - sum(self.schiff_upgrades.values()))
        print(f"\nüîß Verf√ºgbare Schiff-Upgrades: {upgrade_slots} (jeweils +50 Lagerplatz, +1 Geschwindigkeit, +1 Piratenschutz, +5% Verkaufsbonus)")
        print(f"   Kosten: Lager 1000 Gold, Geschwindigkeit 1500 Gold, Piratenschutz 2000 Gold, Verkaufsbonus 1200 Gold")

    def zeige_karte(self):
        print("\nüó∫Ô∏è Minikarte:")
        for stadt_id, name in ST√ÑDTE.items():
            marker = "üõ≥Ô∏è" if stadt_id == self.position else "   "
            print(f"{marker} {stadt_id}: {name}")

    def zeige_handels√ºbersicht(self):
        print("\nüìä Handels√ºbersicht:")
        for ware, name in WAREN.items():
            verlauf = self.preisverlauf[self.position][ware]
            if verlauf:
                verlauf_str = " ‚Üí ".join(str(p) for p in verlauf)
                print(f"{name}: {verlauf_str}")

    def reise(self):
        self.zeige_standort_und_geld()
        self.zeige_karte()
        try:
            ziel = int(input("Wohin m√∂chtest du reisen? (ID): "))
            if ziel in ST√ÑDTE and ziel != self.position:
                reisen_runden = max(1, 2 - self.schiff_upgrades["schnelligkeit"])  # Schnellere Schiffe brauchen weniger Runden
                self.runde += reisen_runden
                self.position = ziel
                print(f"{self.name} ist angekommen in {ST√ÑDTE[self.position]} nach {reisen_runden} Runde(n).")
                self.ereignis_ausl√∂sen()
            else:
                print(f"{self.name}, ung√ºltiges Ziel oder du bist bereits dort.")
        except ValueError:
            print("Bitte g√ºltige Zahl eingeben.")

    def kaufen(self):
        self.zeige_standort_und_geld()
        print("\nüõí Waren zum Kauf:")
        for ware in WAREN:
            preis = self.get_aktueller_preis(self.position, ware)
            print(f" {ware}: {WAREN[ware]} ‚Äì {preis} Gold")
        print(" 99: Schiff-Upgrades kaufen")
        try:
            ware_id = int(input("Welche Ware kaufen? (ID): "))
            if ware_id == 99:
                self.schiff_upgrade_kaufen()
                return
            menge = int(input("Wie viel kaufen?: "))
            preis = self.get_aktueller_preis(self.position, ware_id)
            kosten = preis * menge
            if menge > 0 and self.geld >= kosten:
                if self.aktueller_lagerplatz() + menge > self.max_lager:
                    print(f"{self.name}, nicht genug Platz im Lager!")
                    return
                self.geld -= kosten
                self.lager[ware_id] += menge
                print(f"{self.name} hat {menge} {WAREN[ware_id]} f√ºr {kosten} Gold gekauft.")
            else:
                print(f"{self.name}, nicht genug Geld oder ung√ºltige Menge.")
        except ValueError:
            print("Ung√ºltige Eingabe.")

    def schiff_upgrade_kaufen(self):
        print("\nüö¢ Schiff-Upgrades:")
        print(" 1: Lager +50 Platz (1000 Gold)")
        print(" 2: Schnellere Reise (1500 Gold)")
        print(" 3: Piratenschutz (2000 Gold)")
        print(" 4: Verkaufsbonus +5% (1200 Gold)")
        print(" 0: Abbrechen")
        try:
            wahl = int(input("Upgrade w√§hlen: "))
            if wahl == 0:
                print("Upgrade abgebrochen.")
                return
            kosten_map = {1:1000, 2:1500, 3:2000, 4:1200}
            key_map = {1:"lager", 2:"schnelligkeit", 3:"piratenschutz", 4:"verkaufsbonus"}
            if wahl in kosten_map:
                if sum(self.schiff_upgrades.values()) >= 5:
                    print("Maximale Anzahl an Upgrades erreicht!")
                    return
                kosten = kosten_map[wahl]
                if self.geld >= kosten:
                    self.geld -= kosten
                    self.schiff_upgrades[key_map[wahl]] += 1
                    if key_map[wahl] == "lager":
                        self.max_lager += 50
                    print(f"{self.name} hat Upgrade {key_map[wahl]} gekauft!")
                else:
                    print("Nicht genug Gold f√ºr dieses Upgrade.")
            else:
                print("Ung√ºltige Auswahl.")
        except ValueError:
            print("Ung√ºltige Eingabe.")

    def verkaufen(self):
        self.zeige_standort_und_geld()
        print("\nüí∏ Waren zum Verkauf:")
        for ware in WAREN:
            if self.lager[ware] > 0:
                preis = self.get_aktueller_preis(self.position, ware)
                print(f" {ware}: {WAREN[ware]} ‚Äì {preis} Gold, Lager: {self.lager[ware]}")
        try:
            ware_id = int(input("Welche Ware verkaufen? (ID): "))
            menge = int(input("Wie viel verkaufen?: "))
            if 0 < menge <= self.lager[ware_id]:
                rest = menge
                erf√ºllte = []
                for auftrag in self.auftr√§ge:
                    if auftrag['ware'] == ware_id and auftrag['stadt'] == self.position and rest >= auftrag['menge']:
                        print(f"‚úÖ {self.name} hat einen Auftrag erf√ºllt und {auftrag['belohnung']} Gold erhalten!")
                        self.geld += auftrag['belohnung']
                        self.lager[ware_id] -= auftrag['menge']
                        rest -= auftrag['menge']
                        erf√ºllte.append(auftrag)
                for a in erf√ºllte:
                    self.auftr√§ge.remove(a)
                    self.auftr√§ge.append(random.choice(AUFTR√ÑGE))
                if rest > 0:
                    preis = self.get_aktueller_preis(self.position, ware_id)
                    bonus = STADT_BONI.get(self.position, {}).get(ware_id, 0) + self.schiff_upgrades["verkaufsbonus"]*0.05
                    einnahmen = int(preis * rest * (1 + bonus))
                    self.geld += einnahmen
                    self.lager[ware_id] -= rest
                    print(f"{self.name} hat {rest} {WAREN[ware_id]} f√ºr {einnahmen} Gold verkauft (inkl. Bonus {int(bonus*100)}%).")
            else:
                print(f"{self.name}, ung√ºltige Menge.")
        except (ValueError, KeyError):
            print("Ung√ºltige Eingabe.")

    def ereignis_ausl√∂sen(self):
        meldung = random.choice(self.meldungen)
        print(f"\nüì£ Ereignis f√ºr {self.name}: {meldung}")
        if "Sturm" in meldung:
            verlust = 5 + self.schiff_upgrades["piratenschutz"] * -3
            verlust = max(0, verlust)
            for ware in self.lager:
                if self.lager[ware] > 0:
                    verloren = min(self.lager[ware], verlust)
                    self.lager[ware] -= verloren
                    print(f"‚õàÔ∏è Verlust von {verloren} {WAREN[ware]} durch Sturm.")
        elif "Piratenangriff" in meldung:
            if self.schiff_upgrades["piratenschutz"] > 0:
                print("üö® Piratenschutz verhindert Verluste!")
            else:
                verlust = 10
                for ware in self.lager:
                    if self.lager[ware] > 0:
                        verloren = min(self.lager[ware], verlust)
                        self.lager[ware] -= verloren
                        print(f"üè¥‚Äç‚ò†Ô∏è Verlust von {verloren} {WAREN[ware]} durch Piraten!")
        elif "G√ºnstige Handelsbedingungen" in meldung:
            bonus = 0.10
            self.geld += int(self.geld * bonus)
            print(f"üíµ Geld durch g√ºnstige Bedingungen um {int(bonus*100)}% erh√∂ht.")
        # Hier kannst du weitere Event-Entscheidungen einbauen

    def npc_h√§ndler_bewegen(self):
        # Beispiel: NPC H√§ndler √§ndern zuf√§llig Stadt & Preise modifizieren
        for npc in self.npc_h√§ndler:
            alt_stadt = npc["stadt"]
            neu_stadt = random.choice(list(ST√ÑDTE.keys()))
            npc["stadt"] = neu_stadt
            # Preismodifikator zwischen -0.1 und 0.1
            npc["preis_modifikator"] = random.uniform(-0.1, 0.1)
            if neu_stadt != alt_stadt:
                print(f"NPC-H√§ndler zieht von {ST√ÑDTE[alt_stadt]} nach {ST√ÑDTE[neu_stadt]}")

    def npc_init(self):
        # Erstelle NPC H√§ndler mit zuf√§lligen St√§dten und Waren
        self.npc_h√§ndler = []
        for _ in range(5):
            npc = {
                "stadt": random.choice(list(ST√ÑDTE.keys())),
                "ware": random.choice(list(WAREN.keys())),
                "preis_modifikator": random.uniform(-0.1, 0.1)
            }
            self.npc_h√§ndler.append(npc)

    def spielzug(self):
        self.zeige_status()
        self.zeige_karte()
        print("\nAktionen:")
        print(" 1: Reisen")
        print(" 2: Kaufen")
        print(" 3: Verkaufen")
        print(" 4: Lager & Auftr√§ge anzeigen")
        print(" 5: Schiff-Upgrades kaufen")
        print(" 0: Spiel beenden")
        try:
            wahl = int(input("Deine Wahl: "))
            if wahl == 1:
                self.reise()
            elif wahl == 2:
                self.kaufen()
            elif wahl == 3:
                self.verkaufen()
            elif wahl == 4:
                self.zeige_status()
            elif wahl == 5:
                self.schiff_upgrade_kaufen()
            elif wahl == 0:
                print(f"{self.name} beendet das Spiel.")
                return False
            else:
                print("Ung√ºltige Eingabe.")
        except ValueError:
            print("Ung√ºltige Eingabe.")
        # NPC H√§ndler bewegen sich nach jedem Zug
        self.npc_h√§ndler_bewegen()
        self.runde += 1
        if self.max_runden and self.runde >= self.max_runden:
            print("Maximale Rundenzahl erreicht. Spiel endet.")
            return False
        if self.geld <= 0:
            print("Kein Geld mehr. Spiel endet.")
            return False
        return True

# --- Spielstart ---

def spiel_starten():
    print("üé≤ Willkommen zum Schiffhandel-Spiel!")
    name = input("Wie hei√üt du? ")
    print("W√§hle Schwierigkeitsgrad: 1=Einfach, 2=Mittel, 3=Schwer")
    try:
        schwierigkeit = int(input("Schwierigkeitsgrad: "))
        max_runden = int(input("Maximale Runden (0 = unbegrenzt): "))
        spiel = SchiffhandelSpiel(schwierigkeit, max_runden, name)
        spiel.npc_init()
        running = True
        while running:
            running = spiel.spielzug()
    except ValueError:
        print("Ung√ºltige Eingabe. Spiel beendet.")

if __name__ == "__main__":
    spiel_starten()
