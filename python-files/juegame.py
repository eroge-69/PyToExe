import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import subprocess, threading, time, os, json, re
import sys

# =========================
# CONFIGURACI√ìN
# =========================
COLOR_FONDO = "#1e1e1e"
COLOR_TEXTO = "#ffffff"
COLOR_ACENTO = "#9b59b6"  # morado

CARPETA_SCRIPT = os.path.dirname(os.path.abspath(__file__))
FLASHGBX = r"C:\Users\mrmur\AppData\Local\Programs\FlashGBX\FlashGBX-app.exe"
MGBA = r"C:\Program Files\mGBA\mGBA.exe"
CARPETA_PORTADAS = os.path.join(CARPETA_SCRIPT, "PORTADAS")
LOGO_PATH = os.path.join(CARPETA_SCRIPT, "logo.png")

ROM_PATH = os.path.join(CARPETA_SCRIPT, "cartucho.gb")
SAV_PATH = os.path.join(CARPETA_SCRIPT, "cartucho.sav")

# =========================
# FUNCIONES
# =========================
def centrar_ventana(ventana):
    """Centra cualquier ventana en la pantalla"""
    ventana.update_idletasks()
    ancho = ventana.winfo_width()
    alto = ventana.winfo_height()
    x = (ventana.winfo_screenwidth() // 2) - (ancho // 2)
    y = (ventana.winfo_screenheight() // 2) - (alto // 2)
    ventana.geometry(f"+{x}+{y}")

def mostrar_manual_usuario():
    """Muestra ventana de selecci√≥n de idioma para el manual"""
    def seleccionar_idioma(idioma):
        ventana_idioma.destroy()
        mostrar_instrucciones(idioma)
    
    ventana_idioma = tk.Toplevel()
    ventana_idioma.title("GB Player - Seleccionar Idioma")
    ventana_idioma.configure(bg=COLOR_FONDO)
    ventana_idioma.geometry("400x250")
    ventana_idioma.resizable(False, False)
    
    # Centrar ventana
    centrar_ventana(ventana_idioma)
    
    ventana_idioma.transient()
    ventana_idioma.grab_set()
    
    frame_principal = tk.Frame(ventana_idioma, bg=COLOR_FONDO)
    frame_principal.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)
    
    # T√≠tulo
    lbl_titulo = tk.Label(frame_principal, text="SELECCIONA IDIOMA", 
                         font=("Arial", 16, "bold"), bg=COLOR_FONDO, fg=COLOR_TEXTO)
    lbl_titulo.pack(pady=(0, 30))
    
    # Bot√≥n Espa√±ol - MISMO COLOR QUE LOS DEM√ÅS
    btn_espanol = tk.Button(frame_principal, text="ESPA√ëOL", 
                           command=lambda: seleccionar_idioma("es"),
                           bg=COLOR_ACENTO, fg="white", 
                           font=("Arial", 12, "bold"),
                           relief="flat", padx=20, pady=12,
                           width=15)
    btn_espanol.pack(pady=10)
    
    # Bot√≥n English - MISMO COLOR QUE LOS DEM√ÅS
    btn_english = tk.Button(frame_principal, text="ENGLISH", 
                           command=lambda: seleccionar_idioma("en"),
                           bg=COLOR_ACENTO, fg="white", 
                           font=("Arial", 12, "bold"),
                           relief="flat", padx=20, pady=12,
                           width=15)
    btn_english.pack(pady=10)
    
    # Centrar nuevamente despu√©s de crear los widgets
    ventana_idioma.after(100, lambda: centrar_ventana(ventana_idioma))

def mostrar_instrucciones(idioma):
    """Muestra las instrucciones seg√∫n el idioma seleccionado"""
    # Textos en espa√±ol
    textos_es = {
        "titulo": "MANUAL DE USUARIO - INSTRUCCIONES",
        "instrucciones": [
            "1. Aseg√∫rate de que tu cartucho est√© limpio y bien conectado",
            "2. Algunos cartuchos bootleg de Pok√©mon o sin bater√≠a pueden no funcionar correctamente",
            "3. NO desconectes el cartucho hasta que todas las ventanas se hayan cerrado",
            "4. Tu partida guardada se restaurar√° autom√°ticamente al cerrar mGBA",
            "5. Algunos juegos homebrew pueden no mostrar portada pero funcionar√°n correctamente",
            "6. Mant√©n el cartucho insertado durante todo el proceso",
            "7. ¬°Feliz gaming! üéÆ"
        ]
    }
    
    # Textos en ingl√©s
    textos_en = {
        "titulo": "USER MANUAL - INSTRUCTIONS", 
        "instrucciones": [
            "1. Ensure your cartridge is clean and properly connected",
            "2. Some Pok√©mon bootleg or battery-less cartridges may not work properly",
            "3. DO NOT disconnect the cartridge until all windows have closed",
            "4. Your saved game will be automatically restored when closing mGBA",
            "5. Some homebrew games may not show cover art but will work correctly",
            "6. Keep the cartridge inserted throughout the entire process",
            "7. Happy gaming! üéÆ"
        ]
    }
    
    textos = textos_es if idioma == "es" else textos_en
    
    ventana_instrucciones = tk.Toplevel()
    ventana_instrucciones.title("GB Player - Manual")
    ventana_instrucciones.configure(bg=COLOR_FONDO)
    ventana_instrucciones.geometry("700x450")
    ventana_instrucciones.resizable(False, False)
    
    # Centrar ventana
    centrar_ventana(ventana_instrucciones)
    
    ventana_instrucciones.transient()
    ventana_instrucciones.grab_set()
    
    frame_principal = tk.Frame(ventana_instrucciones, bg=COLOR_FONDO)
    frame_principal.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)
    
    # T√≠tulo
    lbl_titulo = tk.Label(frame_principal, text=textos["titulo"],
                         font=("Arial", 16, "bold"), bg=COLOR_FONDO, fg=COLOR_TEXTO)
    lbl_titulo.pack(pady=(0, 25))
    
    # Frame para instrucciones con scroll
    frame_scroll = tk.Frame(frame_principal, bg=COLOR_FONDO)
    frame_scroll.pack(fill=tk.BOTH, expand=True)
    
    canvas = tk.Canvas(frame_scroll, bg=COLOR_FONDO, highlightthickness=0)
    scrollbar = ttk.Scrollbar(frame_scroll, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas, bg=COLOR_FONDO)
    
    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )
    
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)
    
    # Instrucciones
    for i, instruccion in enumerate(textos["instrucciones"]):
        frame_inst = tk.Frame(scrollable_frame, bg=COLOR_FONDO)
        frame_inst.pack(fill=tk.X, pady=8, padx=10)
        
        # N√∫mero
        lbl_num = tk.Label(frame_inst, text=str(i+1), font=("Arial", 12, "bold"),
                          bg=COLOR_ACENTO, fg="white", width=3, height=1)
        lbl_num.pack(side=tk.LEFT, padx=(0, 15))
        
        # Texto de la instrucci√≥n
        lbl_texto = tk.Label(frame_inst, text=instruccion, font=("Arial", 11),
                            bg=COLOR_FONDO, fg=COLOR_TEXTO, justify=tk.LEFT, anchor="w")
        lbl_texto.pack(side=tk.LEFT, fill=tk.X, expand=True)
    
    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    # Bot√≥n Cerrar
    btn_cerrar = tk.Button(frame_principal, text="CERRAR", 
                          command=ventana_instrucciones.destroy,
                          bg=COLOR_ACENTO, fg="white", 
                          font=("Arial", 12, "bold"),
                          relief="flat", padx=30, pady=10)
    btn_cerrar.pack(pady=20)
    
    # Centrar nuevamente despu√©s de crear los widgets
    ventana_instrucciones.after(100, lambda: centrar_ventana(ventana_instrucciones))

def mostrar_advertencia_inicial():
    """Muestra ventana de advertencia antes de iniciar el proceso"""
    root_advertencia = tk.Tk()
    root_advertencia.title("GB Player Launcher - Informaci√≥n")
    root_advertencia.configure(bg=COLOR_FONDO)
    root_advertencia.geometry("600x350")
    root_advertencia.resizable(False, False)
    
    # Centrar ventana
    centrar_ventana(root_advertencia)
    
    # Frame principal
    frame_principal = tk.Frame(root_advertencia, bg=COLOR_FONDO)
    frame_principal.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)
    
    # Icono de advertencia
    lbl_icono = tk.Label(frame_principal, text="‚ö†Ô∏è", font=("Arial", 32), 
                         bg=COLOR_FONDO, fg="#f39c12")
    lbl_icono.pack(pady=(0, 20))
    
    # Mensaje principal
    lbl_mensaje = tk.Label(frame_principal, 
                          text="ALGUNOS T√çTULOS NO TENDR√ÅN PORTADA\nPERO SER√ÅN JUGABLES",
                          font=("Arial", 14, "bold"),
                          bg=COLOR_FONDO, fg=COLOR_TEXTO,
                          justify=tk.CENTER)
    lbl_mensaje.pack(pady=(0, 15))
    
    # Mensaje adicional
    lbl_info = tk.Label(frame_principal, 
                       text="El juego funcionar√° correctamente incluso si no se muestra portada.",
                       font=("Arial", 11),
                       bg=COLOR_FONDO, fg=COLOR_TEXTO,
                       justify=tk.CENTER)
    lbl_info.pack(pady=(0, 25))
    
    # Bot√≥n Manual de Usuario - MISMO COLOR QUE LOS DEM√ÅS
    btn_manual = tk.Button(frame_principal, text="MANUAL DE USUARIO", 
                          command=mostrar_manual_usuario,
                          bg=COLOR_ACENTO, fg="white", 
                          font=("Arial", 11, "bold"),
                          relief="flat", padx=20, pady=10)
    btn_manual.pack(pady=(0, 10))
    
    # Bot√≥n Aceptar
    btn_aceptar = tk.Button(frame_principal, text="ACEPTAR", 
                           command=root_advertencia.destroy,
                           bg=COLOR_ACENTO, fg="white", 
                           font=("Arial", 12, "bold"),
                           relief="flat", padx=30, pady=12)
    btn_aceptar.pack()
    
    # Hacer que la ventana sea modal
    root_advertencia.transient()
    root_advertencia.grab_set()
    
    # Centrar nuevamente despu√©s de crear los widgets
    root_advertencia.after(100, lambda: centrar_ventana(root_advertencia))
    
    root_advertencia.mainloop()

def limpiar_archivos():
    """Eliminar ROM y SAVE generados."""
    for archivo in [ROM_PATH, SAV_PATH]:
        if os.path.exists(archivo):
            os.remove(archivo)

def buscar_nombre_en_json(game_title):
    json_path = os.path.join(CARPETA_SCRIPT, "juegos.json")
    if not os.path.exists(json_path):
        print(f"‚ùå Archivo juegos.json no encontrado en: {json_path}")
        return game_title, game_title  # Retorna ambos: (nombre_bonito, nombre_para_portada)
    
    with open(json_path, "r", encoding="utf-8") as f:
        try:
            juegos = json.load(f)
        except json.JSONDecodeError as e:
            print(f"‚ùå Error leyendo juegos.json: {e}")
            return game_title, game_title
    
    print(f"üîç Buscando t√≠tulo: '{game_title}' en juegos.json")
    
    # DIAGN√ìSTICO: Mostrar qu√© estamos buscando exactamente
    print(f"üéØ B√∫squeda exacta para: '{game_title.strip()}'")
    
    # Buscar coincidencia exacta primero (case sensitive)
    for juego in juegos:
        titulo_json = juego.get("title", "").strip()
        if titulo_json == game_title.strip():
            nombre_encontrado = juego.get("name", game_title)
            print(f"‚úÖ Coincidencia exacta encontrada:")
            print(f"   T√≠tulo FlashGBX: '{game_title}'")
            print(f"   T√≠tulo JSON: '{titulo_json}'") 
            print(f"   Nombre bonito: '{nombre_encontrado}'")
            return nombre_encontrado, nombre_encontrado
    
    # Si no encuentra coincidencia exacta, buscar case insensitive
    for juego in juegos:
        titulo_json = juego.get("title", "").strip().lower()
        if titulo_json == game_title.strip().lower():
            nombre_encontrado = juego.get("name", game_title)
            print(f"‚úÖ Coincidencia (case-insensitive) encontrada: {nombre_encontrado}")
            return nombre_encontrado, nombre_encontrado
    
    print("‚ùå No se encontr√≥ coincidencia en juegos.json")
    print(f"üìù Usando t√≠tulo original: '{game_title}'")
    return game_title, game_title

def buscar_portada(nombre_mostrado):
    """Busca la portada del juego. Si no se encuentra, usa NO GAME IN DATABASE.png"""
    
    # Primero buscar imagen exacta
    ruta_exacta = os.path.join(CARPETA_PORTADAS, f"{nombre_mostrado}.png")
    if os.path.exists(ruta_exacta):
        print(f"üñºÔ∏è  Portada encontrada (exacta): {ruta_exacta}")
        return ruta_exacta
    
    # Buscar coincidencia parcial (solo si no hay coincidencia exacta)
    base_name = re.sub(r"\(.*?\)", "", nombre_mostrado).strip().lower()
    for archivo in os.listdir(CARPETA_PORTADAS):
        if archivo.lower().endswith(".png"):
            nombre_archivo_sin_extension = os.path.splitext(archivo)[0]
            nombre_archivo_limpio = re.sub(r"\(.*?\)", "", nombre_archivo_sin_extension.lower()).strip()
            
            # Coincidencia m√°s estricta - el nombre base debe ser igual
            if base_name == nombre_archivo_limpio:
                ruta_encontrada = os.path.join(CARPETA_PORTADAS, archivo)
                print(f"üñºÔ∏è  Portada encontrada (parcial estricta): {ruta_encontrada}")
                return ruta_encontrada
    
    # Si no se encuentra ninguna portada, usar "NO GAME IN DATABASE.png"
    ruta_no_game = os.path.join(CARPETA_PORTADAS, "NO GAME IN DATABASE.png")
    if os.path.exists(ruta_no_game):
        print(f"üîç No se encontr√≥ portada para '{nombre_mostrado}'. Usando: NO GAME IN DATABASE.png")
        return ruta_no_game
    else:
        print(f"‚ö†Ô∏è  No se encontr√≥ portada y NO GAME IN DATABASE.png no existe. Usando portada por defecto.")
        return os.path.join(CARPETA_SCRIPT, "portada.png")

def actualizar_progreso(porcentaje, estado, detalle=""):
    barra_progreso['value'] = porcentaje
    lbl_estado.config(text=estado)
    lbl_detalle.config(text=detalle)
    barra_inferior['value'] = porcentaje
    lbl_estado_inferior.config(text=estado)
    ventana.update_idletasks()

def verificar_cartucho():
    """Verifica si hay cartucho - retorna False o el t√≠tulo del juego"""
    try:
        MODE = "dmg"
        
        print("=== üîç INICIANDO VERIFICACI√ìN DE CARTUCHO ===")
        print(f"üìÅ Carpeta de trabajo: {CARPETA_SCRIPT}")
        print(f"üõ†Ô∏è  Ejecutando: {FLASHGBX}")
        
        # Ejecutar con CREATE_NO_WINDOW para ocultar la ventana de comandos
        resultado = subprocess.run(
            [FLASHGBX, "--cli", "--mode", MODE, "--action", "info"],
            capture_output=True, text=True, timeout=30,
            cwd=CARPETA_SCRIPT,
            creationflags=subprocess.CREATE_NO_WINDOW
        )

        print(f"üìä Return code: {resultado.returncode}")
        print("=== üìã SALIDA COMPLETA DE FLASHGBX ===")
        print(resultado.stdout)
        print("=======================================")
        
        if resultado.stderr:
            print("=== ‚ö†Ô∏è  ERRORES ===")
            print(resultado.stderr)
            print("===================")

        if resultado.returncode != 0:
            print("‚ùå FlashGBX retorn√≥ c√≥digo de error")
            return False, "‚ùå No se detect√≥ cartucho o est√° mal conectado."

        # Buscar el t√≠tulo del juego de m√∫ltiples formas
        game_title_detectado = "Juego Desconocido"
        not_in_database = False
        
        for linea in resultado.stdout.splitlines():
            linea = linea.strip()
            print(f"üìù Analizando l√≠nea: {linea}")
            
            # Verificar si FlashGBX reporta "Not in database"
            if "(Not in database)" in linea:
                print("üîç FlashGBX reporta: (Not in database)")
                not_in_database = True
            
            if "Game Title:" in linea:
                game_title_detectado = linea.split("Game Title:")[1].strip()
                break
            elif "Title:" in linea:
                game_title_detectado = linea.split("Title:")[1].strip()
                break
            elif "Name:" in linea:
                game_title_detectado = linea.split("Name:")[1].strip()
                break

        if not game_title_detectado or game_title_detectado == "Juego Desconocido":
            print("‚ùå No se pudo encontrar el t√≠tulo en la salida")
            # Mostrar m√°s l√≠neas para debug
            print("=== üîç PRIMERAS 15 L√çNEAS PARA DEBUG ===")
            for i, linea in enumerate(resultado.stdout.splitlines()[:15]):
                print(f"L√≠nea {i}: {linea}")
            return False, "‚ùå No se pudo leer el t√≠tulo del juego."

        print(f"‚úÖ T√≠tulo detectado: '{game_title_detectado}'")
        print(f"üìä Estado de base de datos: {'NO EN BASE DE DATOS' if not_in_database else 'EN BASE DE DATOS'}")

        # Si FlashGBX reporta "Not in database", forzar el uso de NO GAME IN DATABASE.png
        if not_in_database:
            return True, (game_title_detectado, True)  # True = not in database
        else:
            return True, (game_title_detectado, False)  # False = est√° en database

    except subprocess.TimeoutExpired:
        print("‚ùå Timeout: FlashGBX tard√≥ demasiado en responder")
        return False, "‚ùå Timeout: El cartucho no respondi√≥ a tiempo."
    except Exception as e:
        print(f"‚ùå EXCEPCI√ìN: {e}")
        return False, f"‚ùå Ocurri√≥ un error verificando el cartucho:\n{e}"

def proceso_juego(datos_cartucho):
    """Proceso principal que se ejecuta solo si hay cartucho v√°lido"""
    try:
        MODE = "dmg"
        
        game_title_detectado, not_in_database = datos_cartucho
        
        print(f"üéÆ Iniciando proceso para: {game_title_detectado}")
        print(f"üìä Estado base datos FlashGBX: {'NO EN DB' if not_in_database else 'EN DB'}")
        
        # Actualizar interfaz con informaci√≥n del juego
        nombre_mostrado, nombre_para_portada = buscar_nombre_en_json(game_title_detectado)
        
        print(f"üè∑Ô∏è  Nombre a mostrar: '{nombre_mostrado}'")
        print(f"üñºÔ∏è  Nombre para portada: '{nombre_para_portada}'")
        
        # MOSTRAR EL NOMBRE BONITO EN LA INTERFAZ
        lbl_nombre_juego.config(text=nombre_mostrado)

        # Si FlashGBX reporta "Not in database", usar directamente NO GAME IN DATABASE.png
        if not_in_database:
            ruta_no_game = os.path.join(CARPETA_PORTADAS, "NO GAME IN DATABASE.png")
            if os.path.exists(ruta_no_game):
                print(f"üîç Juego reportado como 'Not in database'. Usando: NO GAME IN DATABASE.png")
                ruta_portada = ruta_no_game
            else:
                print(f"‚ö†Ô∏è  NO GAME IN DATABASE.png no existe. Usando portada por defecto.")
                ruta_portada = os.path.join(CARPETA_SCRIPT, "portada.png")
        else:
            # Buscar portada usando el NOMBRE PARA PORTADA (que es el mismo que el nombre mostrado)
            ruta_portada = buscar_portada(nombre_para_portada)

        try:
            img = Image.open(ruta_portada).resize((200, 200))
            print(f"üñºÔ∏è  Portada cargada: {ruta_portada}")
        except Exception as e:
            print(f"‚ùå Error cargando portada: {e}")
            img = Image.new("RGB", (200, 200), color="#555555")
            print("‚ö†Ô∏è  No se pudo cargar la portada, usando imagen por defecto")
        portada_img = ImageTk.PhotoImage(img)
        lbl_portada.config(image=portada_img)
        lbl_portada.image = portada_img

        # Actualizar logo GameBoy Color - 50% M√ÅS PEQUE√ëO
        if os.path.exists(LOGO_PATH):
            logo_img = Image.open(LOGO_PATH)
            largo_barra = barra_progreso.winfo_width() or 300
            proporcion = logo_img.height / logo_img.width
            
            # Reducir el tama√±o en un 50%
            nuevo_ancho = int(largo_barra * 0.5)  # 50% del tama√±o original
            nuevo_alto = int(nuevo_ancho * proporcion)
            
            logo_img = logo_img.resize((nuevo_ancho, nuevo_alto))
            logo_tk = ImageTk.PhotoImage(logo_img)
            lbl_logo.config(image=logo_tk)
            lbl_logo.image = logo_tk
            print("üì± Logo redimensionado al 50%")

        # -------- Extracci√≥n ROM --------
        actualizar_progreso(10, "Leyendo Cartucho...")
        print("üíæ Leyendo Cartucho...")
        resultado = subprocess.run(
            [FLASHGBX, "--cli", "--mode", MODE, "--action", "backup-rom",
             "--overwrite", ROM_PATH],
            timeout=60, cwd=CARPETA_SCRIPT,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        if resultado.returncode != 0:
            print("‚ùå Error extrayendo ROM")
            messagebox.showerror("ERROR", "‚ùå Error extrayendo ROM")
            limpiar_archivos()
            return
        else:
            print("‚úÖ ROM extra√≠da correctamente")

        # -------- Extracci√≥n SAVE --------
        actualizar_progreso(30, "Leyendo SAVE...")
        print("üíæ Leyendo SAVE...")
        resultado = subprocess.run(
            [FLASHGBX, "--cli", "--mode", MODE, "--action", "backup-save",
             "--overwrite", SAV_PATH],
            timeout=60, cwd=CARPETA_SCRIPT,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        if resultado.returncode != 0:
            actualizar_progreso(35, "SAVE no encontrado")
            print("‚ö†Ô∏è  SAVE no encontrado")
        else:
            actualizar_progreso(60, "SAVE extra√≠do")
            print("‚úÖ SAVE extra√≠do correctamente")

        # -------- Preparar Launch (bot√≥n) ----------
        btn_launch.pack(side=tk.BOTTOM, pady=10)
        actualizar_progreso(70, "Cartucho listo", "Presiona Launch para jugar")
        print("üéØ Cartucho listo, mostrando bot√≥n Launch")

    except Exception as e:
        print(f"‚ùå Error en proceso_juego: {e}")
        messagebox.showerror("ERROR", f"Ocurri√≥ un error:\n{e}")
        limpiar_archivos()

def abrir_mgba():
    if not os.path.exists(ROM_PATH):
        messagebox.showerror("ERROR", "‚ùå No hay ROM para ejecutar.")
        return

    actualizar_progreso(75, "Iniciando mGBA...")

    # Ejecutar mGBA sin bloquear la interfaz
    proceso_mgba = subprocess.Popen([MGBA, ROM_PATH])

    # Esperar a que cierre mGBA
    def esperar_cierre():
        proceso_mgba.wait()

        # -------- Restaurar SAVE con barra animada --------
        porcentaje_actual = 80
        actualizar_progreso(porcentaje_actual, "Restaurando SAVE al cartucho...")

        resultado = subprocess.Popen(
            [FLASHGBX, "--cli", "--mode", "dmg", "--action", "restore-save",
             "--overwrite", SAV_PATH],
            cwd=CARPETA_SCRIPT,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NO_WINDOW
        )

        while resultado.poll() is None:
            porcentaje_actual += 2
            if porcentaje_actual > 99:
                porcentaje_actual = 99
            actualizar_progreso(porcentaje_actual, "Restaurando SAVE al cartucho...")
            time.sleep(0.05)

        salida, error = resultado.communicate()
        if resultado.returncode == 0:
            actualizar_progreso(100, "Proceso completado", "SAVE restaurado correctamente")
        else:
            actualizar_progreso(100, "Error", "‚ùå No se pudo restaurar SAVE")

        limpiar_archivos()
        time.sleep(2)
        ventana.quit()

    hilo_espera = threading.Thread(target=esperar_cierre)
    hilo_espera.start()

# =========================
# INTERFAZ PRINCIPAL
# =========================
def crear_interfaz():
    """Crea la interfaz gr√°fica completa"""
    global ventana, frame_principal, lbl_nombre_juego, lbl_portada, lbl_logo
    global lbl_estado, lbl_detalle, barra_progreso, btn_launch
    global frame_inferior, lbl_estado_inferior, barra_inferior, style
    
    ventana = tk.Tk()
    ventana.title("GB Player Launcher")
    ventana.configure(bg=COLOR_FONDO)
    ventana.geometry("800x520")

    # Centrar ventana principal
    centrar_ventana(ventana)

    frame_principal = tk.Frame(ventana, bg=COLOR_FONDO)
    frame_principal.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Nombre del juego
    lbl_nombre_juego = tk.Label(frame_principal, text="", fg=COLOR_TEXTO,
                                bg=COLOR_FONDO, font=("Arial", 16, "bold"))
    lbl_nombre_juego.pack(pady=5)

    # Portada
    lbl_portada = tk.Label(frame_principal, bg=COLOR_FONDO)
    lbl_portada.pack(pady=5)

    # Logo GameBoy Color
    lbl_logo = tk.Label(frame_principal, bg=COLOR_FONDO)
    lbl_logo.pack(pady=5)

    # Estado y barra
    lbl_estado = tk.Label(frame_principal, text="Iniciando...", fg=COLOR_TEXTO, bg=COLOR_FONDO,
                          font=("Arial", 12))
    lbl_estado.pack()
    lbl_detalle = tk.Label(frame_principal, text="", fg=COLOR_TEXTO, bg=COLOR_FONDO,
                           font=("Arial", 10))
    lbl_detalle.pack()

    barra_progreso = ttk.Progressbar(frame_principal, orient="horizontal", length=400,
                                     mode="determinate", style="GameBoy.Horizontal.TProgressbar")
    barra_progreso.pack(pady=10)

    # Bot√≥n Launch oculto al inicio
    btn_launch = tk.Button(frame_principal, text="Launch", command=abrir_mgba,
                           bg=COLOR_ACENTO, fg="white", font=("Arial", 12, "bold"),
                           relief="flat", padx=20, pady=10)
    btn_launch.pack_forget()

    # Barra inferior fija
    frame_inferior = tk.Frame(ventana, bg=COLOR_FONDO)
    frame_inferior.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=5)
    lbl_estado_inferior = tk.Label(frame_inferior, text="Iniciando...",
                                   font=("Courier New", 9, "bold"),
                                   fg=COLOR_TEXTO, bg=COLOR_FONDO, anchor="w")
    lbl_estado_inferior.pack(side=tk.LEFT, padx=5)
    barra_inferior = ttk.Progressbar(frame_inferior, orient=tk.HORIZONTAL,
                                     length=300, mode='determinate',
                                     maximum=100, style="GameBoy.Horizontal.TProgressbar")
    barra_inferior.pack(side=tk.RIGHT, padx=5, pady=5)

    # Estilo barra
    style = ttk.Style()
    style.theme_use("clam")
    style.configure("GameBoy.Horizontal.TProgressbar",
                    troughcolor="#2c2c2c", background=COLOR_ACENTO,
                    thickness=12)

    # Centrar nuevamente despu√©s de crear todos los widgets
    ventana.after(100, lambda: centrar_ventana(ventana))

    return ventana

# =========================
# EJECUCI√ìN PRINCIPAL
# =========================
if __name__ == "__main__":
    print("üöÄ INICIANDO GB PLAYER LAUNCHER")
    print(f"üìÅ Directorio actual: {os.getcwd()}")
    print(f"üìÅ Script en: {CARPETA_SCRIPT}")
    
    # MOSTRAR ADVERTENCIA INICIAL ANTES DE TODO
    print("üì¢ Mostrando advertencia inicial...")
    mostrar_advertencia_inicial()
    print("‚úÖ Advertencia aceptada, continuando...")
    
    # Primero verificamos el cartucho SIN interfaz gr√°fica
    print("üîÑ Verificando cartucho...")
    cartucho_ok, resultado = verificar_cartucho()
    
    if not cartucho_ok:
        print("‚ùå No hay cartucho v√°lido")
        # Si no hay cartucho, mostramos error con una mini ventana temporal
        root_temp = tk.Tk()
        root_temp.withdraw()  # Ocultar ventana principal
        messagebox.showerror("ERROR", resultado)
        # Centrar tambi√©n la ventana de error
        root_temp.update_idletasks()
        centrar_ventana(root_temp)
        root_temp.deiconify()  # Mostrar ventana centrada
        root_temp.mainloop()
        sys.exit(1)  # Salir del programa
    
    # Si hay cartucho v√°lido, creamos la interfaz completa
    print("‚úÖ Cartucho detectado. Iniciando interfaz...")
    ventana = crear_interfaz()
    
    # Iniciar proceso del juego en un hilo
    hilo = threading.Thread(target=proceso_juego, args=(resultado,))
    hilo.start()
    
    # Iniciar el loop principal de tkinter
    print("üéÆ Iniciando interfaz gr√°fica...")
    ventana.mainloop()