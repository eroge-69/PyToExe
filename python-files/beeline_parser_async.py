import asyncio
import json
import re
import random
import os
from datetime import datetime
from typing import List, Set, Optional
from playwright.async_api import async_playwright
try:
    from playwright_stealth import Stealth
    STEALTH_AVAILABLE = True
except ImportError:
    STEALTH_AVAILABLE = False
    print("[‚ö†] playwright-stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ stealth —Ä–µ–∂–∏–º–∞.")
import tkinter as tk
from tkinter import ttk, messagebox
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    API_PATTERN = re.compile(r"/basketapi/api/v1/Basket/ctnList/")
    OUTPUT_FILE = "beeline_numbers.json"
    MAX_CYCLES = 6000
    URL_BASKET = "https://vladivostok.beeline.ru/basket/"
    NUM_CONTEXTS = 7
    CAPTCHA_TIMEOUT = 60
    PROXY_CREDENTIALS = {"username": "eD7spc", "password": "nRh1VM"}
    CHROME_VERSIONS = list(range(131, 140))
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã
    CAPTCHA_SELECTORS = [
        "iframe[src*='captcha']",
        "iframe[src*='yandex']", 
        "[data-testid*='captcha']",
        ".captcha", 
        ".smart-captcha"
    ]
    
    BROWSER_ARGS = [
        "--disable-blink-features=AutomationControlled",
        "--disable-extensions",
        "--disable-plugins-discovery", 
        "--disable-default-apps",
        "--no-first-run",
        "--disable-dev-shm-usage",
        "--window-size=375,812",
        "--no-sandbox",
        "--disable-gpu"
    ]


class NumberStorage:
    def __init__(self):
        self.numbers: Set[str] = set()
        self._load_existing_numbers()
    
    def _load_existing_numbers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(Config.OUTPUT_FILE):
            try:
                with open(Config.OUTPUT_FILE, "r", encoding="utf-8") as f:
                    loaded = json.load(f)
                    self.numbers.update(loaded)
                    print(f"[üìÇ] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.numbers)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ {Config.OUTPUT_FILE}")
            except Exception as e:
                print(f"[‚ö†] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
    
    def add_numbers(self, new_numbers: List[str]) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–µ"""
        truly_new = []
        for number in new_numbers:
            if number not in self.numbers:
                self.numbers.add(number)
                truly_new.append(number)
        return truly_new
    
    async def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(Config.OUTPUT_FILE, "w", encoding="utf-8") as f:
                json.dump(list(self.numbers), f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def __len__(self):
        return len(self.numbers)


class ProxyManager:
    def __init__(self, proxy_file: str = "proxies.txt"):
        self.proxies = self._load_proxies(proxy_file)
    
    def _load_proxies(self, file_path: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        proxies = []
        if not os.path.exists(file_path):
            print(f"[‚ö†] –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
            return []
        
        with open(file_path, "r", encoding="utf-8") as f:
            for line in f:
                proxy = line.strip()
                if proxy:
                    proxies.append(proxy)
        
        if not proxies:
            print("[‚ö†] –§–∞–π–ª proxies.txt –ø—É—Å—Ç! –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        return proxies
    
    def get_random_proxy(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None"""
        return random.choice(self.proxies) if self.proxies else None


class BeelineParser:
    def __init__(self, storage: NumberStorage, proxy_manager: ProxyManager):
        self.storage = storage
        self.proxy_manager = proxy_manager
        self.browser = None
        self.contexts = []
        self.playwright = None
    
    @staticmethod
    def format_phone_number(number: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        digits = re.sub(r"\D", "", number)
        if digits.startswith("8"):
            digits = "7" + digits[1:]
        elif not digits.startswith("7"):
            digits = "7" + digits
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    
    @staticmethod
    def generate_user_agent(prev_version: Optional[int] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
        available_versions = [v for v in Config.CHROME_VERSIONS if v != prev_version]
        version = random.choice(available_versions)
        return f"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{version}.0.0.0 Mobile Safari/537.36"
    
    async def create_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–∫—Å–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã–º User-Agent"""
        proxy = self.proxy_manager.get_random_proxy()
        user_agent = self.generate_user_agent()

        context_options = {
            "user_agent": user_agent,
            "viewport": {"width": 375, "height": 812},
            "is_mobile": True,
            "extra_http_headers": {
                "accept-language": "ru-RU,ru;q=0.9",
                "sec-ch-ua": f'"Chromium";v="{user_agent.split("Chrome/")[1].split(".")[0]}", "Not.A/Brand";v="99"',
                "sec-ch-ua-mobile": "?1",
                "sec-ch-ua-platform": '"Android"'
            }
        }

        if proxy:
            context_options["proxy"] = {
                "server": proxy,
                **Config.PROXY_CREDENTIALS
            }

        context = await self.browser.new_context(**context_options)

        await context.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            Object.defineProperty(navigator, 'plugins', {get: () => [1,2,3]});
            Object.defineProperty(navigator, 'languages', {get: () => ['ru-RU','ru']});
        """)

        if STEALTH_AVAILABLE:
            try:
                stealth = Stealth()
                await stealth.apply_stealth_async(context)
            except Exception as e:
                print(f"[‚ö†] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è stealth: {e}")

        return context, proxy, user_agent
    
    async def setup_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã"""

        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(
            headless=True,
            args=Config.BROWSER_ARGS
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ "–æ–∫–Ω–∞"
        for i in range(Config.NUM_CONTEXTS):
            context, proxy, user_agent = await self.create_context()
            
            self.contexts.append({
                "context": context,
                "context_id": i + 1,
                "proxy": proxy,
                "user_agent": user_agent
            })
            
            print(f"[üì±][–ö–æ–Ω—Ç–µ–∫—Å—Ç {i + 1}] –°–æ–∑–¥–∞–Ω —Å User-Agent: {user_agent}")
            print(f"[üåê][–ö–æ–Ω—Ç–µ–∫—Å—Ç {i + 1}] –ü—Ä–æ–∫—Å–∏: {proxy if proxy else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    async def check_for_captcha(self, page) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        for selector in Config.CAPTCHA_SELECTORS:
            if await page.query_selector(selector):
                return True
        return False
    
    async def wait_for_captcha_solution(self, page, context_id: int) -> bool:
        """–ñ–¥–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        start_time = asyncio.get_event_loop().time()
        
        while asyncio.get_event_loop().time() - start_time < Config.CAPTCHA_TIMEOUT:
            try:
                if not await self.check_for_captcha(page):
                    return True
                if await page.query_selector("button[data-testid='changeNumber']"):
                    return True
            except Exception:
                pass
            #await asyncio.sleep(2)
        
        print(f"[‚ùå][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏!")
        return False
        
    async def process_api_response(self, response, context_info: dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API"""
        if not Config.API_PATTERN.search(response.url):
            return
        
        context = context_info["context"]
        context_id = context_info["context_id"]
        
        try:
            if response.status != 200:
                print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] HTTP {response.status}")

                await context.close()

                new_context, proxy, user_agent = await self.create_context()
                context_info.update({
                    "context": new_context,
                    "proxy": proxy,
                    "user_agent": user_agent
                })

                print(f"[üîÑ][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º User-Agent")
                return
            
            text = await response.text()
            if not text.strip():
                print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                await context.close()
                return
            
            try:
                data = json.loads(text)
            except json.JSONDecodeError as e:
                print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] JSON –æ—à–∏–±–∫–∞: {e}")
                await context.close()
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            new_numbers = []
            for category in data.get("numbers", []):
                if category.get("price") == 0:
                    for num in category.get("numbers", []):
                        if num.get("price") == 0:
                            value = num.get("value")
                            if value:
                                formatted_value = self.format_phone_number(value)
                                new_numbers.append(formatted_value)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
            truly_new = self.storage.add_numbers(new_numbers)
            
            if truly_new:
                await self.storage.save_to_file()
                print(f"[üíæ][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] +{len(truly_new)} –Ω–æ–º–µ—Ä–æ–≤. –í—Å–µ–≥–æ: {len(self.storage)}")
        
        except Exception as e:
            print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def close_modal(self, page) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"""
        try:
            close_button = await page.wait_for_selector(
                "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ']", 
                timeout=5000
            )
            if close_button:
                await close_button.click()
                await asyncio.sleep(1.6)
        except Exception:
            pass
    
    async def worker(self, context_info: dict) -> None:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = context_info["context"]
        context_id = context_info["context_id"]
        
        page = await context.new_page()
        cycle_count = 0
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
        async def handle_response(response):
            await self.process_api_response(response, context_info)
        
        page.on("response", handle_response)
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(Config.URL_BASKET, wait_until="networkidle")
            await asyncio.sleep(random.uniform(1, 2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
            if await self.check_for_captcha(page):
                if not await self.wait_for_captcha_solution(page, context_id):
                    return
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            while cycle_count < Config.MAX_CYCLES:
                try:
                    change_button = await page.wait_for_selector(
                        "button[data-testid='changeNumber']", 
                        timeout=10000
                    )
                    
                    if change_button:
                        await asyncio.sleep(random.uniform(1, 2))
                        await change_button.click()
                        await asyncio.sleep(0.7)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                        if await self.check_for_captcha(page):
                            if not await self.wait_for_captcha_solution(page, context_id):
                                break
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        await self.close_modal(page)
                        
                        cycle_count += 1
                    else:
                        print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        break
                
                except Exception as e:
                    print(f"[‚ö†][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    try:
                        await page.reload(wait_until="networkidle")
                        await asyncio.sleep(2)
                    except Exception:
                        break
        
        except Exception as e:
            print(f"[‚ùå][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        finally:
            try:
                await page.close()
            except Exception:
                pass
            print(f"[üèÅ][–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}] –ó–∞–≤–µ—Ä—à–µ–Ω.")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
        await self.setup_browser()
        
        print(f"[‚ñ∂] –ó–∞–ø—É—Å–∫ {Config.NUM_CONTEXTS} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for context_info in self.contexts:
            task = asyncio.create_task(self.worker(context_info))
            tasks.append(task)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            await asyncio.sleep(0.7)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)
        
        print(f"[üèÅ] –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ò—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {len(self.storage)}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()


class BeelineApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Beeline Parser")
        self.root.geometry("500x300")

        self.running = False
        self.thread = None

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(root, text="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...")
        self.status_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏
        self.start_button = ttk.Button(root, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start_parser)
        self.start_button.pack(pady=5)

        self.stop_button = ttk.Button(root, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_parser, state="disabled")
        self.stop_button.pack(pady=5)

        # –õ–æ–≥
        self.log_text = tk.Text(root, height=10, width=60, state="disabled")
        self.log_text.pack(pady=10)

    def log(self, msg: str):
        """–ü–∏—à–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        self.log_text.configure(state="normal")
        self.log_text.insert("end", f"{datetime.now().strftime('%H:%M:%S')} {msg}\n")
        self.log_text.see("end")
        self.log_text.configure(state="disabled")

    def start_parser(self):
        if self.running:
            return
        self.running = True
        self.start_button.configure(state="disabled")
        self.stop_button.configure(state="normal")
        self.log("–°—Ç–∞—Ä—Ç—É–µ–º –ø–∞—Ä—Å–µ—Ä...")

        self.thread = threading.Thread(target=self._run_asyncio, daemon=True)
        self.thread.start()

    def stop_parser(self):
        if not self.running:
            return
        self.running = False
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
        self.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞...")

    def _run_asyncio(self):
        asyncio.run(self._async_main())

    async def _async_main(self):
        storage = NumberStorage()
        proxy_manager = ProxyManager()
        parser = BeelineParser(storage, proxy_manager)

        try:
            await parser.run()
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}")
        finally:
            await parser.cleanup()
            await storage.save_to_file()
            self.log(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ò—Ç–æ–≥–æ: {len(storage)} –Ω–æ–º–µ—Ä–æ–≤")
            self.running = False
            self.root.after(0, self._on_finish)

    def _on_finish(self):
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
        self.log("–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    root = tk.Tk()
    app = BeelineApp(root)
    root.mainloop()
