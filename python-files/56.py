import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import threading
import time
import json
import os
import random
from datetime import datetime, timedelta

class RPGSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("–í–∏—Ä—Ç—É–æ–∑ –ñ–∏–∑–Ω–∏")
        self.root.geometry("1920x1080")
        self.root.resizable(True, True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        self.setup_theme()
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data = {
            "name": "", "surname": "", "password": "", "balance": 0,
            "weapon_license": False, "farm_license": False, "last_farm_click": None,
            "weapons": [], "current_job": None, "last_mission_time": None,
            "experience": 0, "level": 1, "click_count": 0, "house": None,
            "furniture": [], "food_items": [], "hunger": 100, "sleep": 100,
            "is_sick": False, "last_disease_check": None, "is_unconscious": False,
            "skills": {"strength": 1, "intelligence": 1, "charisma": 1},
            "reputation": 0, "achievements": [], "vehicles": [],
            "businesses": [], "investments": [], "pets": [],
            "clothing": [], "quests": [], "daily_rewards": [],
            "friends": [], "guild": None, "energy": 100,
            "last_login": None, "play_time": 0, "kill_count": 0,
            "crafting_level": 1, "mining_level": 1, "fishing_level": 1,
            "bank_deposit": 0, "loan": 0, "last_business_income": None
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.load_user_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        if not self.user_data["last_login"]:
            self.user_data["last_login"] = datetime.now().isoformat()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä–º–∞
        self.farming = False
        self.farm_thread = None
        self.mission_available = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_notebook()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        self.create_all_tabs()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.update_balance()
        self.update_licenses_display()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º
        self.root.after(1000, self.update_farm_timer)
        self.root.after(1000, self.check_missions)
        self.root.after(1000, self.update_needs)
        self.root.after(1000, self.check_disease)
        self.root.after(1000, self.update_play_time)
        self.root.after(60000, self.process_business_income)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞
    
    def setup_theme(self):
        style = ttk.Style()
        style.theme_use('clam')
        
        self.bg_color = '#121212'
        self.fg_color = '#FFFFFF'
        self.accent_color = '#8A2BE2'
        self.secondary_color = '#4B0082'
        self.progress_color = '#9370DB'
        
        style.configure("TNotebook", background=self.bg_color, borderwidth=0)
        style.configure("TNotebook.Tab", background=self.bg_color, foreground=self.fg_color, padding=[10, 5])
        style.map("TNotebook.Tab", background=[("selected", self.accent_color)], foreground=[("selected", self.fg_color)])
        
        style.configure("TFrame", background=self.bg_color)
        style.configure("TLabel", background=self.bg_color, foreground=self.fg_color)
        style.configure("TButton", background=self.accent_color, foreground=self.fg_color, focuscolor="none")
        style.map("TButton", background=[("active", self.secondary_color), ("pressed", self.secondary_color)])
        style.configure("Large.TButton", font=("Arial", 12), padding=10)
        style.configure("Danger.TButton", background="#FF4444", foreground=self.fg_color)
        
        self.root.configure(bg=self.bg_color)
    
    def create_notebook(self):
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è 30 –≤–∫–ª–∞–¥–æ–∫
        self.tab_frames = {}
        tab_names = [
            "üí∞ –ì–ª–∞–≤–Ω–∞—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìú –õ–∏—Ü–µ–Ω–∑–∏–∏", "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ñ–∞—Ä–º",
            "üî´ –û—Ä—É–∂–∏–µ", "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üíº –†–∞–±–æ—Ç–∞", "‚≠ê –ü—Ä–æ–∫–∞—á–∫–∞",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üõãÔ∏è –ú–µ–±–µ–ª—å", "üçï –ï–¥–∞", "üè° –î–æ–º",
            "üè• –ë–æ–ª—å–Ω–∏—Ü–∞", "üí™ –ù–∞–≤—ã–∫–∏", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
            "üè¢ –ë–∏–∑–Ω–µ—Å", "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üêæ –ü–∏—Ç–æ–º—Ü—ã", "üëï –û–¥–µ–∂–¥–∞",
            "üéØ –ó–∞–¥–∞–Ω–∏—è", "üéÅ –ù–∞–≥—Ä–∞–¥—ã", "üë• –î—Ä—É–∑—å—è", "‚öîÔ∏è –ì–∏–ª—å–¥–∏—è",
            "‚öíÔ∏è –ö—Ä–∞—Ñ—Ç", "‚õèÔ∏è –®–∞—Ö—Ç–∞", "üé£ –†—ã–±–∞–ª–∫–∞", "üèõÔ∏è –ë–∞–Ω–∫",
            "üé∞ –ö–∞–∑–∏–Ω–æ", "üåç –ö–∞—Ä—Ç–∞"
        ]
        
        for name in tab_names:
            self.tab_frames[name] = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_frames[name], text=name)
    
    def create_all_tabs(self):
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        self.create_main_tab()
        self.create_profile_tab()
        self.create_licenses_tab()
        self.create_quick_farm_tab()
        self.create_weapons_tab()
        self.create_inventory_tab()
        self.create_work_tab()
        self.create_skills_tab()
        self.create_real_estate_tab()
        self.create_furniture_tab()
        self.create_food_tab()
        self.create_house_tab()
        self.create_hospital_tab()
        self.create_attributes_tab()
        self.create_achievements_tab()
        self.create_vehicles_tab()
        self.create_business_tab()
        self.create_investments_tab()
        self.create_pets_tab()
        self.create_clothing_tab()
        self.create_quests_tab()
        self.create_rewards_tab()
        self.create_friends_tab()
        self.create_guild_tab()
        self.create_crafting_tab()
        self.create_mining_tab()
        self.create_fishing_tab()
        self.create_bank_tab()
        self.create_casino_tab()
        self.create_map_tab()
    
    def create_main_tab(self):
        frame = self.tab_frames["üí∞ –ì–ª–∞–≤–Ω–∞—è"]
        
        title = ttk.Label(frame, text="RPG x –°–∏–º—É–ª—è—Ç–æ—Ä", font=("Arial", 24, "bold"))
        title.pack(pady=20)
        
        # –ë–∞–ª–∞–Ω—Å
        self.balance_label = ttk.Label(frame, text="0 —Ä—É–±", font=("Arial", 28, "bold"), foreground=self.accent_color)
        self.balance_label.pack(pady=10)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_frame = ttk.Frame(frame)
        actions_frame.pack(pady=20)
        
        ttk.Button(actions_frame, text="üí§ –ü–æ—Å–ø–∞—Ç—å", command=self.sleep, width=15).grid(row=0, column=0, padx=5, pady=5)
        ttk.Button(actions_frame, text="üçï –ü–æ–µ—Å—Ç—å", command=self.open_fridge, width=15).grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(actions_frame, text="üíº –†–∞–±–æ—Ç–∞", command=lambda: self.notebook.select(6), width=15).grid(row=0, column=2, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(frame, text="", font=("Arial", 12), wraplength=400)
        self.status_label.pack(pady=10)
        
        # –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        charity_frame = ttk.LabelFrame(frame, text="–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", padding=10)
        charity_frame.pack(pady=10)
        
        ttk.Button(charity_frame, text="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 1000 —Ä—É–± (+1 –æ–ø—ã—Ç)", command=self.donate_charity).pack(pady=5)
    
    def create_profile_tab(self):
        frame = self.tab_frames["üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
        
        ttk.Label(frame, text="–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞", font=("Arial", 20, "bold")).pack(pady=20)
        
        # –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è
        form_frame = ttk.Frame(frame)
        form_frame.pack(pady=20)
        
        ttk.Label(form_frame, text="–ò–º—è:").grid(row=0, column=0, sticky="w", pady=5)
        self.name_entry = ttk.Entry(form_frame, width=20)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)
        self.name_entry.insert(0, self.user_data["name"])
        
        ttk.Label(form_frame, text="–§–∞–º–∏–ª–∏—è:").grid(row=1, column=0, sticky="w", pady=5)
        self.surname_entry = ttk.Entry(form_frame, width=20)
        self.surname_entry.grid(row=1, column=1, padx=5, pady=5)
        self.surname_entry.insert(0, self.user_data["surname"])
        
        ttk.Button(frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", command=self.save_profile).pack(pady=10)
        ttk.Button(frame, text="–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", command=self.reset_progress, style="Danger.TButton").pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        self.profile_info = ttk.Label(frame, text="", font=("Arial", 12), wraplength=500)
        self.profile_info.pack(pady=20)
        
        self.update_profile_info()
    
    def create_licenses_tab(self):
        frame = self.tab_frames["üìú –õ–∏—Ü–µ–Ω–∑–∏–∏"]
        ttk.Label(frame, text="–õ–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        # –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –æ—Ä—É–∂–∏–µ
        weapon_frame = ttk.LabelFrame(frame, text="–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –æ—Ä—É–∂–∏–µ", padding=10)
        weapon_frame.pack(fill='x', pady=5, padx=20)
        
        ttk.Label(weapon_frame, text="–°—Ç–æ–∏–º–æ—Å—Ç—å: 100,000 —Ä—É–±").pack(anchor='w')
        self.weapon_license_btn = ttk.Button(weapon_frame, text="–ö—É–ø–∏—Ç—å", command=lambda: self.buy_license("weapon", 100000))
        self.weapon_license_btn.pack(anchor='w', pady=5)
        
        self.update_licenses_display()
    
    def create_quick_farm_tab(self):
        frame = self.tab_frames["‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ñ–∞—Ä–º"]
        ttk.Label(frame, text="–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Button(frame, text="–ü–æ–ª—É—á–∏—Ç—å 50,000 —Ä—É–±", command=self.farm_no_license, style="Large.TButton").pack(pady=10)
        self.farm_timer_label = ttk.Label(frame, text="–î–æ—Å—Ç—É–ø–Ω–æ")
        self.farm_timer_label.pack(pady=5)
    
    def create_weapons_tab(self):
        frame = self.tab_frames["üî´ –û—Ä—É–∂–∏–µ"]
        ttk.Label(frame, text="–ê—Ä—Å–µ–Ω–∞–ª", font=("Arial", 20, "bold")).pack(pady=20)
        
        weapons = [
            ("–ü–∏—Å—Ç–æ–ª–µ—Ç", 50000), ("–î—Ä–æ–±–æ–≤–∏–∫", 100000), 
            ("–°–Ω–∞–π–ø–µ—Ä–∫–∞", 150000), ("–ê–≤—Ç–æ–º–∞—Ç", 200000)
        ]
        
        for name, price in weapons:
            weapon_frame = ttk.LabelFrame(frame, text=name, padding=10)
            weapon_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(weapon_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(weapon_frame, text="–ö—É–ø–∏—Ç—å", command=lambda n=name, p=price: self.buy_weapon(n, p)).pack(anchor='w', pady=5)
    
    def create_inventory_tab(self):
        frame = self.tab_frames["üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"]
        ttk.Label(frame, text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", font=("Arial", 20, "bold")).pack(pady=20)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        columns = ("–ü—Ä–µ–¥–º–µ—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¢–∏–ø")
        self.inventory_tree = ttk.Treeview(frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.inventory_tree.heading(col, text=col)
            self.inventory_tree.column(col, width=150)
        
        self.inventory_tree.pack(pady=10, padx=20, fill='both', expand=True)
        
        self.update_inventory_display()
    
    def create_work_tab(self):
        frame = self.tab_frames["üíº –†–∞–±–æ—Ç–∞"]
        ttk.Label(frame, text="–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", font=("Arial", 20, "bold")).pack(pady=20)
        
        jobs = [
            ("üëÆ –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "police", "100,000 —Ä—É–±/–∑–∞–¥–∞–Ω–∏–µ", "–û—Ä—É–∂–∏–µ + –ª–∏—Ü–µ–Ω–∑–∏—è"),
            ("üë®‚Äç‚öïÔ∏è –í—Ä–∞—á", "doctor", "50,000 —Ä—É–±/–∑–∞–¥–∞–Ω–∏–µ", "50 –æ–ø—ã—Ç–∞"),
            ("üë®‚Äçüöí –ü–æ–∂–∞—Ä–Ω—ã–π", "fireman", "125,000 —Ä—É–±/–∑–∞–¥–∞–Ω–∏–µ", "150 –æ–ø—ã—Ç–∞")
        ]
        
        for name, job_type, salary, req in jobs:
            job_frame = ttk.LabelFrame(frame, text=name, padding=10)
            job_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(job_frame, text=f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}").pack(anchor='w')
            ttk.Label(job_frame, text=f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {req}").pack(anchor='w')
            ttk.Button(job_frame, text="–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è", command=lambda t=job_type: self.get_job(t)).pack(anchor='w', pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        ttk.Button(frame, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", command=self.do_job, style="Large.TButton").pack(pady=20)
        self.job_status_label = ttk.Label(frame, text="")
        self.job_status_label.pack(pady=5)
    
    def create_skills_tab(self):
        frame = self.tab_frames["‚≠ê –ü—Ä–æ–∫–∞—á–∫–∞"]
        ttk.Label(frame, text="–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", font=("Arial", 20, "bold")).pack(pady=20)
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
        exp_frame = ttk.LabelFrame(frame, text="–û–ø—ã—Ç", padding=10)
        exp_frame.pack(fill='x', pady=5, padx=20)
        
        self.exp_label = ttk.Label(exp_frame, text=f"–£—Ä–æ–≤–µ–Ω—å: {self.user_data['level']} | –û–ø—ã—Ç: {self.user_data['experience']}")
        self.exp_label.pack(anchor='w')
        
        ttk.Button(exp_frame, text="–ü–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç (+10)", command=self.gain_experience).pack(anchor='w', pady=5)
    
    def create_real_estate_tab(self):
        frame = self.tab_frames["üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"]
        ttk.Label(frame, text="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", font=("Arial", 20, "bold")).pack(pady=20)
        
        properties = [
            ("üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞", 500000), ("üè† –î–æ–º", 1000000), 
            ("üè∞ –û—Å–æ–±–Ω—è–∫", 5000000), ("üè¢ –ü–µ–Ω—Ç—Ö–∞—É—Å", 10000000)
        ]
        
        for name, price in properties:
            prop_frame = ttk.LabelFrame(frame, text=name, padding=10)
            prop_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(prop_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(prop_frame, text="–ö—É–ø–∏—Ç—å", command=lambda n=name, p=price: self.buy_house(n, p)).pack(anchor='w', pady=5)
    
    def create_furniture_tab(self):
        frame = self.tab_frames["üõãÔ∏è –ú–µ–±–µ–ª—å"]
        ttk.Label(frame, text="–ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä", font=("Arial", 20, "bold")).pack(pady=20)
        
        furniture = [
            ("üõãÔ∏è –î–∏–≤–∞–Ω", 50000), ("ü™ë –°—Ç–æ–ª", 30000),
            ("üõèÔ∏è –ö—Ä–æ–≤–∞—Ç—å", 75000), ("üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä", 100000)
        ]
        
        for name, price in furniture:
            furn_frame = ttk.LabelFrame(frame, text=name, padding=10)
            furn_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(furn_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(furn_frame, text="–ö—É–ø–∏—Ç—å", command=lambda n=name, p=price: self.buy_furniture(n, p)).pack(anchor='w', pady=5)
    
    def create_food_tab(self):
        frame = self.tab_frames["üçï –ï–¥–∞"]
        ttk.Label(frame, text="–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        foods = [
            ("ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥", 500, 20), ("üçï –ü–∏—Ü—Ü–∞", 1500, 50),
            ("ü•© –°—Ç–µ–π–∫", 3000, 80), ("üç£ –°—É—à–∏", 5000, 100)
        ]
        
        for name, price, hunger in foods:
            food_frame = ttk.LabelFrame(frame, text=name, padding=10)
            food_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(food_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–± | +{hunger} –≥–æ–ª–æ–¥–∞").pack(anchor='w')
            ttk.Button(food_frame, text="–ö—É–ø–∏—Ç—å", command=lambda n=name, p=price, h=hunger: self.buy_food(n, p, h)).pack(anchor='w', pady=5)
    
    def create_house_tab(self):
        frame = self.tab_frames["üè° –î–æ–º"]
        ttk.Label(frame, text="–í–∞—à –¥–æ–º", font=("Arial", 20, "bold")).pack(pady=20)
        
        if not self.user_data["house"]:
            ttk.Label(frame, text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞! –ö—É–ø–∏—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'", 
                     foreground="orange").pack(pady=50)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ
        house_info = ttk.LabelFrame(frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        house_info.pack(fill='x', pady=5, padx=20)
        
        ttk.Label(house_info, text=f"–¢–∏–ø: {self.user_data['house']}").pack(anchor='w')
        ttk.Label(house_info, text=f"–ú–µ–±–µ–ª—å: {len(self.user_data['furniture'])} –ø—Ä–µ–¥–º–µ—Ç–æ–≤").pack(anchor='w')
        
        # –î–µ–π—Å—Ç–≤–∏—è –≤ –¥–æ–º–µ
        actions = ttk.LabelFrame(frame, text="–î–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions.pack(fill='x', pady=5, padx=20)
        
        ttk.Button(actions, text="üí§ –ü–æ—Å–ø–∞—Ç—å (+50 —Å–Ω–∞)", command=self.sleep, width=20).pack(pady=5)
        ttk.Button(actions, text="üßä –û—Ç–∫—Ä—ã—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", command=self.open_fridge, width=20).pack(pady=5)
    
    def create_hospital_tab(self):
        frame = self.tab_frames["üè• –ë–æ–ª—å–Ω–∏—Ü–∞"]
        ttk.Label(frame, text="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Button(frame, text="–õ–µ—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ–¥–∞ - 25,000 —Ä—É–±", 
                  command=lambda: self.get_treatment("hunger", 25000)).pack(pady=5)
        ttk.Button(frame, text="–õ–µ—á–µ–Ω–∏–µ –æ—Ç –±–æ–ª–µ–∑–Ω–∏ - 100,000 —Ä—É–±", 
                  command=lambda: self.get_treatment("disease", 100000)).pack(pady=5)
    
    def create_attributes_tab(self):
        frame = self.tab_frames["üí™ –ù–∞–≤—ã–∫–∏"]
        ttk.Label(frame, text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", font=("Arial", 20, "bold")).pack(pady=20)
        
        skills = ttk.LabelFrame(frame, text="–ù–∞–≤—ã–∫–∏", padding=10)
        skills.pack(fill='x', pady=5, padx=20)
        
        for skill, level in self.user_data["skills"].items():
            skill_frame = ttk.Frame(skills)
            skill_frame.pack(fill='x', pady=2)
            ttk.Label(skill_frame, text=f"{skill.title()}: {level}").pack(side='left')
            ttk.Button(skill_frame, text="–ü—Ä–æ–∫–∞—á–∞—Ç—å", 
                      command=lambda s=skill: self.upgrade_skill(s)).pack(side='right')
    
    def create_achievements_tab(self):
        frame = self.tab_frames["üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"]
        ttk.Label(frame, text="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        achievements = [
            ("üí∞ –ü–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏", "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100,000 —Ä—É–±", lambda: self.user_data["balance"] >= 100000),
            ("üè† –î–æ–º–æ–≤–ª–∞–¥–µ–ª–µ—Ü", "–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ–º", lambda: self.user_data["house"] is not None),
            ("üíº –ö–∞—Ä—å–µ—Ä–∏—Å—Ç", "–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", lambda: self.user_data["current_job"] is not None),
            ("‚öîÔ∏è –í–æ–∏–Ω", "–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤–æ–µ –æ—Ä—É–∂–∏–µ", lambda: len(self.user_data["weapons"]) > 0)
        ]
        
        for name, desc, condition in achievements:
            ach_frame = ttk.LabelFrame(frame, text=name, padding=10)
            ach_frame.pack(fill='x', pady=5, padx=20)
            ttk.Label(ach_frame, text=desc).pack(anchor='w')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            if condition():
                ttk.Label(ach_frame, text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", foreground="green").pack(anchor='w')
            else:
                ttk.Label(ach_frame, text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", foreground="red").pack(anchor='w')
    
    def create_vehicles_tab(self):
        frame = self.tab_frames["üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]
        ttk.Label(frame, text="–ê–≤—Ç–æ–ø–∞—Ä–∫", font=("Arial", 20, "bold")).pack(pady=20)
        
        vehicles = [
            ("üöó –°–µ–¥–∞–Ω", 500000), ("üöô –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫", 1000000),
            ("üèéÔ∏è –°–ø–æ—Ä—Ç–∫–∞—Ä", 5000000), ("üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç", 20000000)
        ]
        
        for name, price in vehicles:
            vehicle_frame = ttk.LabelFrame(frame, text=name, padding=10)
            vehicle_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(vehicle_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(vehicle_frame, text="–ö—É–ø–∏—Ç—å", 
                      command=lambda n=name, p=price: self.buy_vehicle(n, p)).pack(anchor='w', pady=5)
    
    def create_business_tab(self):
        frame = self.tab_frames["üè¢ –ë–∏–∑–Ω–µ—Å"]
        ttk.Label(frame, text="–ë–∏–∑–Ω–µ—Å", font=("Arial", 20, "bold")).pack(pady=20)
        
        businesses = [
            ("üè™ –ú–∞–≥–∞–∑–∏–Ω", 1000000, 50000), ("üè¢ –û—Ñ–∏—Å", 5000000, 200000),
            ("üè≠ –ó–∞–≤–æ–¥", 20000000, 1000000)
        ]
        
        for name, price, income in businesses:
            biz_frame = ttk.LabelFrame(frame, text=name, padding=10)
            biz_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(biz_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Label(biz_frame, text=f"–î–æ—Ö–æ–¥: {income:,} —Ä—É–±/–¥–µ–Ω—å").pack(anchor='w')
            ttk.Button(biz_frame, text="–ö—É–ø–∏—Ç—å", 
                      command=lambda n=name, p=price, i=income: self.buy_business(n, p, i)).pack(anchor='w', pady=5)
    
    def create_investments_tab(self):
        frame = self.tab_frames["üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
        ttk.Label(frame, text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", font=("Arial", 20, "bold")).pack(pady=20)
        
        investments = [
            ("üìä –ê–∫—Ü–∏–∏", 50000, 1.1), ("üè¶ –û–±–ª–∏–≥–∞—Ü–∏–∏", 100000, 1.05),
            ("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", 50000, 1.2)
        ]
        
        for name, min_invest, multiplier in investments:
            inv_frame = ttk.LabelFrame(frame, text=name, padding=10)
            inv_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(inv_frame, text=f"–ú–∏–Ω. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: {min_invest:,} —Ä—É–±").pack(anchor='w')
            ttk.Label(inv_frame, text=f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}").pack(anchor='w')
            ttk.Button(inv_frame, text="–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                      command=lambda n=name, m=min_invest, mult=multiplier: self.invest_money(n, m, mult)).pack(anchor='w', pady=5)
    
    def create_pets_tab(self):
        frame = self.tab_frames["üêæ –ü–∏—Ç–æ–º—Ü—ã"]
        ttk.Label(frame, text="–ü–∏—Ç–æ–º—Ü—ã", font=("Arial", 20, "bold")).pack(pady=20)
        
        pets = [
            ("üê∂ –°–æ–±–∞–∫–∞", 50000), ("üê± –ö–æ—Ç", 30000),
            ("üê¥ –õ–æ—à–∞–¥—å", 200000), ("üêâ –î—Ä–∞–∫–æ–Ω", 5000000)
        ]
        
        for name, price in pets:
            pet_frame = ttk.LabelFrame(frame, text=name, padding=10)
            pet_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(pet_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(pet_frame, text="–ö—É–ø–∏—Ç—å", 
                      command=lambda n=name, p=price: self.buy_pet(n, p)).pack(anchor='w', pady=5)
    
    def create_clothing_tab(self):
        frame = self.tab_frames["üëï –û–¥–µ–∂–¥–∞"]
        ttk.Label(frame, text="–ì–∞—Ä–¥–µ—Ä–æ–±", font=("Arial", 20, "bold")).pack(pady=20)
        
        clothes = [
            ("üëï –§—É—Ç–±–æ–ª–∫–∞", 5000), ("üëî –ö–æ—Å—Ç—é–º", 50000),
            ("ü•ã –ë—Ä–æ–Ω—è", 100000), ("üëë –ö–æ—Ä–æ–Ω–∞", 1000000)
        ]
        
        for name, price in clothes:
            cloth_frame = ttk.LabelFrame(frame, text=name, padding=10)
            cloth_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(cloth_frame, text=f"–¶–µ–Ω–∞: {price:,} —Ä—É–±").pack(anchor='w')
            ttk.Button(cloth_frame, text="–ö—É–ø–∏—Ç—å", 
                      command=lambda n=name, p=price: self.buy_clothing(n, p)).pack(anchor='w', pady=5)
    
    def create_quests_tab(self):
        frame = self.tab_frames["üéØ –ó–∞–¥–∞–Ω–∏—è"]
        ttk.Label(frame, text="–ó–∞–¥–∞–Ω–∏—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        quests = [
            ("üí∞ –ù–∞–∫–æ–ø–∏—Ç—å 1,000,000 —Ä—É–±", 50000, lambda: self.user_data["balance"] >= 1000000),
            ("üè† –ö—É–ø–∏—Ç—å –¥–æ–º", 25000, lambda: self.user_data["house"] is not None),
            ("üíº –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", 10000, lambda: self.user_data["current_job"] is not None)
        ]
        
        for desc, reward, condition in quests:
            quest_frame = ttk.LabelFrame(frame, text=f"–ù–∞–≥—Ä–∞–¥–∞: {reward:,} —Ä—É–±", padding=10)
            quest_frame.pack(fill='x', pady=5, padx=20)
            ttk.Label(quest_frame, text=desc).pack(anchor='w')
            
            if condition():
                ttk.Label(quest_frame, text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", foreground="green").pack(anchor='w')
            else:
                ttk.Label(quest_frame, text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", foreground="red").pack(anchor='w')
    
    def create_rewards_tab(self):
        frame = self.tab_frames["üéÅ –ù–∞–≥—Ä–∞–¥—ã"]
        ttk.Label(frame, text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Button(frame, text="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É", command=self.claim_daily_reward, 
                  style="Large.TButton").pack(pady=20)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥—ã
        self.reward_status = ttk.Label(frame, text="")
        self.reward_status.pack(pady=10)
        self.update_reward_status()
    
    def create_friends_tab(self):
        frame = self.tab_frames["üë• –î—Ä—É–∑—å—è"]
        ttk.Label(frame, text="–î—Ä—É–∑—å—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Label(frame, text="–°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞!", foreground="orange").pack(pady=50)
    
    def create_guild_tab(self):
        frame = self.tab_frames["‚öîÔ∏è –ì–∏–ª—å–¥–∏—è"]
        ttk.Label(frame, text="–ì–∏–ª—å–¥–∏—è", font=("Arial", 20, "bold")).pack(pady=20)
        
        if not self.user_data["guild"]:
            ttk.Button(frame, text="–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é", command=self.create_guild).pack(pady=10)
            ttk.Button(frame, text="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é").pack(pady=10)
        else:
            ttk.Label(frame, text=f"–ì–∏–ª—å–¥–∏—è: {self.user_data['guild']}").pack(pady=10)
            ttk.Button(frame, text="–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é", command=self.leave_guild).pack(pady=10)
    
    def create_crafting_tab(self):
        frame = self.tab_frames["‚öíÔ∏è –ö—Ä–∞—Ñ—Ç"]
        ttk.Label(frame, text="–ö—Ä–∞—Ñ—Ç–∏–Ω–≥", font=("Arial", 20, "bold")).pack(pady=20)
        
        recipes = [
            ("üõ°Ô∏è –©–∏—Ç", "100 –¥–µ—Ä–µ–≤–∞, 50 –∂–µ–ª–µ–∑–∞"),
            ("‚öîÔ∏è –ú–µ—á", "50 –∂–µ–ª–µ–∑–∞, 25 –∑–æ–ª–æ—Ç–∞"),
            ("üíé –£–∫—Ä–∞—à–µ–Ω–∏–µ", "10 –∞–ª–º–∞–∑–æ–≤, 5 –∏–∑—É–º—Ä—É–¥–æ–≤")
        ]
        
        for name, materials in recipes:
            recipe_frame = ttk.LabelFrame(frame, text=name, padding=10)
            recipe_frame.pack(fill='x', pady=5, padx=20)
            
            ttk.Label(recipe_frame, text=f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials}").pack(anchor='w')
            ttk.Button(recipe_frame, text="–°–æ–∑–¥–∞—Ç—å", command=lambda n=name: self.craft_item(n)).pack(anchor='w', pady=5)
    
    def create_mining_tab(self):
        frame = self.tab_frames["‚õèÔ∏è –®–∞—Ö—Ç–∞"]
        ttk.Label(frame, text="–®–∞—Ö—Ç–∞", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Button(frame, text="‚õèÔ∏è –î–æ–±—ã—Ç—å —Ä–µ—Å—É—Ä—Å—ã", command=self.mine_resources, 
                  style="Large.TButton").pack(pady=20)
        
        self.mining_status = ttk.Label(frame, text=f"–£—Ä–æ–≤–µ–Ω—å –¥–æ–±—ã—á–∏: {self.user_data['mining_level']:.1f}")
        self.mining_status.pack(pady=10)
    
    def create_fishing_tab(self):
        frame = self.tab_frames["üé£ –†—ã–±–∞–ª–∫–∞"]
        ttk.Label(frame, text="–†—ã–±–∞–ª–∫–∞", font=("Arial", 20, "bold")).pack(pady=20)
        
        ttk.Button(frame, text="üé£ –†—ã–±–∞—á–∏—Ç—å", command=self.go_fishing, 
                  style="Large.TButton").pack(pady=20)
        
        self.fishing_status = ttk.Label(frame, text=f"–£—Ä–æ–≤–µ–Ω—å —Ä—ã–±–∞–ª–∫–∏: {self.user_data['fishing_level']:.1f}")
        self.fishing_status.pack(pady=10)
    
    def create_bank_tab(self):
        frame = self.tab_frames["üèõÔ∏è –ë–∞–Ω–∫"]
        ttk.Label(frame, text="–ë–∞–Ω–∫", font=("Arial", 20, "bold")).pack(pady=20)
        
        bank_frame = ttk.LabelFrame(frame, text="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", padding=10)
        bank_frame.pack(fill='x', pady=5, padx=20)
        
        ttk.Button(bank_frame, text="–í–∫–ª–∞–¥ –ø–æ–¥ 5%", command=self.make_deposit).pack(pady=5)
        ttk.Button(bank_frame, text="–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", command=self.take_loan).pack(pady=5)
        ttk.Button(bank_frame, text="–ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç", command=self.repay_loan).pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        info_frame = ttk.LabelFrame(frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill='x', pady=5, padx=20)
        
        self.bank_info = ttk.Label(info_frame, text="")
        self.bank_info.pack(anchor='w')
        self.update_bank_info()
    
    def create_casino_tab(self):
        frame = self.tab_frames["üé∞ –ö–∞–∑–∏–Ω–æ"]
        ttk.Label(frame, text="–ö–∞–∑–∏–Ω–æ", font=("Arial", 20, "bold")).pack(pady=20)
        
        games_frame = ttk.LabelFrame(frame, text="–ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã", padding=10)
        games_frame.pack(fill='x', pady=5, padx=20)
        
        ttk.Button(games_frame, text="üé∞ –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç", command=self.play_slot_machine).pack(pady=5)
        ttk.Button(games_frame, text="üé≤ –ö–æ—Å—Ç–∏", command=self.play_dice).pack(pady=5)
        ttk.Button(games_frame, text="üÉè –ë–ª—ç–∫–¥–∂–µ–∫", command=self.play_blackjack).pack(pady=5)
    
    def create_map_tab(self):
        frame = self.tab_frames["üåç –ö–∞—Ä—Ç–∞"]
        ttk.Label(frame, text="–ö–∞—Ä—Ç–∞ –º–∏—Ä–∞", font=("Arial", 20, "bold")).pack(pady=20)
        
        locations = [
            "üèôÔ∏è –ì–æ—Ä–æ–¥", "üå≤ –õ–µ—Å", "üèîÔ∏è –ì–æ—Ä—ã", 
            "üèñÔ∏è –ü–ª—è–∂", "üè∞ –ó–∞–º–æ–∫", "üïµÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∑–æ–Ω–∞"
        ]
        
        for location in locations:
            ttk.Button(frame, text=location, command=lambda l=location: self.travel_to(l), 
                      width=20).pack(pady=5)
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–≥—Ä—ã
    def update_balance(self):
        self.balance_label.config(text=f"{self.user_data['balance']:,} —Ä—É–±")
        self.update_status()
    
    def update_status(self):
        status = f"–ì–æ–ª–æ–¥: {self.user_data['hunger']}/100 | –°–æ–Ω: {self.user_data['sleep']}/100"
        if self.user_data["is_sick"]:
            status += " | ü§í –ë–æ–ª–µ–Ω"
        if self.user_data["is_unconscious"]:
            status += " | üòµ –ë–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è"
        self.status_label.config(text=status)
    
    def update_profile_info(self):
        info = f"–ò–≥—Ä–æ–∫: {self.user_data['name']} {self.user_data['surname']}\n"
        info += f"–£—Ä–æ–≤–µ–Ω—å: {self.user_data['level']} | –û–ø—ã—Ç: {self.user_data['experience']}\n"
        info += f"–ë–∞–ª–∞–Ω—Å: {self.user_data['balance']:,} —Ä—É–±\n"
        info += f"–î–æ–º: {self.user_data['house'] or '–ù–µ—Ç'}\n"
        info += f"–†–∞–±–æ—Ç–∞: {self.get_job_name(self.user_data['current_job'])}"
        self.profile_info.config(text=info)
    
    def update_inventory_display(self):
        # –û—á–∏—â–∞–µ–º Treeview
        for item in self.inventory_tree.get_children():
            self.inventory_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ
        for weapon in self.user_data["weapons"]:
            self.inventory_tree.insert("", "end", values=(weapon, 1, "–û—Ä—É–∂–∏–µ"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–±–µ–ª—å
        for furniture in self.user_data["furniture"]:
            self.inventory_tree.insert("", "end", values=(furniture, 1, "–ú–µ–±–µ–ª—å"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ–¥—É
        food_count = {}
        for food in self.user_data["food_items"]:
            name = food["name"]
            food_count[name] = food_count.get(name, 0) + 1
        
        for name, count in food_count.items():
            self.inventory_tree.insert("", "end", values=(name, count, "–ï–¥–∞"))
    
    def update_licenses_display(self):
        if self.user_data["weapon_license"]:
            self.weapon_license_btn.config(text="–ö—É–ø–ª–µ–Ω–æ", state="disabled")
        if self.user_data["farm_license"]:
            self.farm_license_btn.config(text="–ö—É–ø–ª–µ–Ω–æ", state="disabled")
    
    def update_reward_status(self):
        today = datetime.now().date().isoformat()
        if today in self.user_data["daily_rewards"]:
            self.reward_status.config(text="–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è", foreground="orange")
        else:
            self.reward_status.config(text="–ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", foreground="green")
    
    def get_job_name(self, job_type):
        job_names = {
            "police": "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "doctor": "–í—Ä–∞—á", 
            "fireman": "–ü–æ–∂–∞—Ä–Ω—ã–π", None: "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π"
        }
        return job_names.get(job_type, "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    def buy_house(self, house_type, cost):
        if self.user_data["house"]:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º!")
            return
        if self.user_data["balance"] < cost:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        self.user_data["balance"] -= cost
        self.user_data["house"] = house_type
        self.update_balance()
        self.update_profile_info()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{house_type} –∫—É–ø–ª–µ–Ω!")
    
    def sleep(self):
        if self.user_data["sleep"] >= 100:
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ç—å!")
            return
        self.user_data["sleep"] = min(100, self.user_data["sleep"] + 50)
        self.update_status()
        self.save_user_data()
        messagebox.showinfo("–û—Ç–¥—ã—Ö", "–í—ã –ø–æ—Å–ø–∞–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–∏–ª—ã!")
    
    def open_fridge(self):
        if not self.user_data["food_items"]:
            messagebox.showinfo("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—É—Å—Ç!")
            return
        
        fridge_window = tk.Toplevel(self.root)
        fridge_window.title("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
        fridge_window.geometry("300x400")
        fridge_window.configure(bg=self.bg_color)
        
        for food in self.user_data["food_items"]:
            frame = ttk.Frame(fridge_window)
            frame.pack(fill='x', pady=2, padx=10)
            ttk.Label(frame, text=food["name"]).pack(side='left')
            ttk.Button(frame, text="–°—ä–µ—Å—Ç—å", 
                      command=lambda f=food: self.eat_food(f, fridge_window)).pack(side='right')
    
    def eat_food(self, food, window):
        self.user_data["hunger"] = min(100, self.user_data["hunger"] + food["hunger_restore"])
        self.user_data["food_items"].remove(food)
        self.update_status()
        self.update_inventory_display()
        self.save_user_data()
        window.destroy()
        messagebox.showinfo("–ü–æ–µ–ª", f"–í—ã —Å—ä–µ–ª–∏ {food['name']}!")
    
    def buy_food(self, name, price, hunger):
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["food_items"].append({"name": name, "hunger_restore": hunger})
        self.update_balance()
        self.update_inventory_display()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def buy_furniture(self, name, price):
        if not self.user_data["house"]:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –¥–æ–º!")
            return
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["furniture"].append(name)
        self.update_balance()
        self.update_inventory_display()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def buy_weapon(self, name, price):
        if not self.user_data["weapon_license"]:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –æ—Ä—É–∂–∏–µ!")
            return
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["weapons"].append(name)
        self.update_balance()
        self.update_inventory_display()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def buy_license(self, license_type, cost):
        if self.user_data["balance"] < cost:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= cost
        self.user_data[f"{license_type}_license"] = True
        self.update_balance()
        self.update_licenses_display()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–∏—Ü–µ–Ω–∑–∏—è –∫—É–ø–ª–µ–Ω–∞!")
    
    def farm_no_license(self):
        if self.user_data["last_farm_click"]:
            last_click = datetime.fromisoformat(self.user_data["last_farm_click"])
            if (datetime.now() - last_click).total_seconds() < 60:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É!")
                return
        
        self.user_data["balance"] += 50000
        self.user_data["last_farm_click"] = datetime.now().isoformat()
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "50,000 —Ä—É–± –ø–æ–ª—É—á–µ–Ω—ã!")
    
    def gain_experience(self):
        if self.user_data["level"] >= 25:
            messagebox.showinfo("–ú–∞–∫—Å–∏–º—É–º", "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!")
            return
        self.user_data["experience"] += 10
        self.user_data["click_count"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–∫–∞–∂–¥—ã–µ 50 –æ–ø—ã—Ç–∞)
        required_exp = self.user_data["level"] * 50
        if self.user_data["experience"] >= required_exp:
            self.user_data["level"] += 1
            self.user_data["experience"] -= required_exp
            messagebox.showinfo("–£—Ä–æ–≤–µ–Ω—å UP!", f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {self.user_data['level']}!")
        
        self.exp_label.config(text=f"–£—Ä–æ–≤–µ–Ω—å: {self.user_data['level']} | –û–ø—ã—Ç: {self.user_data['experience']}")
        self.update_profile_info()
        self.save_user_data()
    
    def donate_charity(self):
        if self.user_data["balance"] < 1000:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= 1000
        self.user_data["experience"] += 1
        self.update_balance()
        self.update_profile_info()
        self.save_user_data()
        messagebox.showinfo("–°–ø–∞—Å–∏–±–æ!", "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    
    def get_job(self, job_type):
        if job_type == "police" and (not self.user_data["weapon_license"] or not self.user_data["weapons"]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∏ –æ—Ä—É–∂–∏–µ!")
            return
        if job_type == "doctor" and self.user_data["experience"] < 50:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ 50 –æ–ø—ã—Ç–∞!")
            return
        if job_type == "fireman" and self.user_data["experience"] < 150:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ 150 –æ–ø—ã—Ç–∞!")
            return
        
        self.user_data["current_job"] = job_type
        self.update_profile_info()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å {self.get_job_name(job_type)}–æ–º!")
    
    def do_job(self):
        if not self.user_data["current_job"]:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç—Ä–æ–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        if self.user_data["last_mission_time"]:
            last_mission = datetime.fromisoformat(self.user_data["last_mission_time"])
            if (datetime.now() - last_mission).total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!")
                return
        
        # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã
        salary = 0
        if self.user_data["current_job"] == "police":
            salary = 100000
        elif self.user_data["current_job"] == "doctor":
            salary = 50000
        elif self.user_data["current_job"] == "fireman":
            salary = 125000
        
        self.user_data["balance"] += salary
        self.user_data["last_mission_time"] = datetime.now().isoformat()
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {salary:,} —Ä—É–±!")
    
    def get_treatment(self, treatment_type, cost):
        if self.user_data["balance"] < cost:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= cost
        if treatment_type == "hunger":
            self.user_data["is_unconscious"] = False
            self.user_data["hunger"] = 50
        else:
            self.user_data["is_sick"] = False
        self.update_balance()
        self.update_status()
        self.save_user_data()
        messagebox.showinfo("–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª", "–õ–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
    
    def save_profile(self):
        self.user_data["name"] = self.name_entry.get()
        self.user_data["surname"] = self.surname_entry.get()
        self.update_profile_info()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    def reset_progress(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?"):
            self.user_data = {
                "name": "", "surname": "", "password": "", "balance": 0,
                "weapon_license": False, "farm_license": False, "last_farm_click": None,
                "weapons": [], "current_job": None, "last_mission_time": None,
                "experience": 0, "level": 1, "click_count": 0, "house": None,
                "furniture": [], "food_items": [], "hunger": 100, "sleep": 100,
                "is_sick": False, "last_disease_check": None, "is_unconscious": False,
                "skills": {"strength": 1, "intelligence": 1, "charisma": 1},
                "reputation": 0, "achievements": [], "vehicles": [],
                "businesses": [], "investments": [], "pets": [],
                "clothing": [], "quests": [], "daily_rewards": [],
                "friends": [], "guild": None, "energy": 100,
                "last_login": None, "play_time": 0, "kill_count": 0,
                "crafting_level": 1, "mining_level": 1, "fishing_level": 1,
                "bank_deposit": 0, "loan": 0, "last_business_income": None
            }
            self.name_entry.delete(0, tk.END)
            self.surname_entry.delete(0, tk.END)
            self.update_balance()
            self.update_profile_info()
            self.update_inventory_display()
            self.update_licenses_display()
            self.save_user_data()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!")
    
    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def buy_vehicle(self, name, price):
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["vehicles"].append(name)
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def buy_business(self, name, price, income):
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["businesses"].append({"name": name, "income": income})
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë–∏–∑–Ω–µ—Å '{name}' –∫—É–ø–ª–µ–Ω!")
    
    def process_business_income(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if self.user_data["last_business_income"]:
            last_income = datetime.fromisoformat(self.user_data["last_business_income"])
            if (datetime.now() - last_income).total_seconds() >= 86400:  # 24 —á–∞—Å–∞
                total_income = 0
                for business in self.user_data["businesses"]:
                    total_income += business["income"]
                
                if total_income > 0:
                    self.user_data["balance"] += total_income
                    self.user_data["last_business_income"] = datetime.now().isoformat()
                    self.update_balance()
                    self.save_user_data()
                    # messagebox.showinfo("–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞", f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {total_income:,} —Ä—É–± –æ—Ç –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!")
        
        self.root.after(60000, self.process_business_income)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def buy_pet(self, name, price):
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["pets"].append(name)
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def buy_clothing(self, name, price):
        if self.user_data["balance"] < price:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        self.user_data["balance"] -= price
        self.user_data["clothing"].append(name)
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{name} –∫—É–ø–ª–µ–Ω!")
    
    def upgrade_skill(self, skill):
        cost = self.user_data["skills"][skill] * 1000
        if self.user_data["balance"] < cost:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù—É–∂–Ω–æ {cost} —Ä—É–±!")
            return
        self.user_data["balance"] -= cost
        self.user_data["skills"][skill] += 1
        self.update_balance()
        self.save_user_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞–≤—ã–∫ {skill} —É–ª—É—á—à–µ–Ω!")
    
    def claim_daily_reward(self):
        today = datetime.now().date().isoformat()
        if today in self.user_data["daily_rewards"]:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        reward = random.randint(5000, 50000)
        self.user_data["balance"] += reward
        self.user_data["daily_rewards"].append(today)
        self.update_balance()
        self.update_reward_status()
        self.save_user_data()
        messagebox.showinfo("–ù–∞–≥—Ä–∞–¥–∞", f"–ü–æ–ª—É—á–µ–Ω–æ {reward} —Ä—É–±!")
    
    def create_guild(self):
        guild_name = simpledialog.askstring("–ì–∏–ª—å–¥–∏—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏:")
        if guild_name:
            self.user_data["guild"] = guild_name
            self.save_user_data()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ì–∏–ª—å–¥–∏—è '{guild_name}' —Å–æ–∑–¥–∞–Ω–∞!")
    
    def leave_guild(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–¢–æ—á–Ω–æ –ø–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é?"):
            self.user_data["guild"] = None
            self.save_user_data()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é!")
    
    def craft_item(self, item_name):
        messagebox.showinfo("–ö—Ä–∞—Ñ—Ç", f"–°–æ–∑–¥–∞–Ω–∏–µ {item_name} —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")
    
    def mine_resources(self):
        resources = ["–ñ–µ–ª–µ–∑–æ", "–ó–æ–ª–æ—Ç–æ", "–ê–ª–º–∞–∑—ã", "–ò–∑—É–º—Ä—É–¥—ã"]
        resource = random.choice(resources)
        amount = random.randint(1, 5) * self.user_data["mining_level"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        self.user_data["mining_level"] += 0.1
        self.mining_status.config(text=f"–£—Ä–æ–≤–µ–Ω—å –¥–æ–±—ã—á–∏: {self.user_data['mining_level']:.1f}")
        self.save_user_data()
        messagebox.showinfo("–î–æ–±—ã—á–∞", f"–í—ã –¥–æ–±—ã–ª–∏ {amount} {resource}!")
    
    def go_fishing(self):
        fish_types = ["–ö–∞—Ä–ø", "–©—É–∫–∞", "–õ–æ—Å–æ—Å—å", "–ê–∫—É–ª–∞"]
        fish = random.choice(fish_types)
        size = random.randint(1, 10) * self.user_data["fishing_level"]
        
        self.user_data["fishing_level"] += 0.1
        self.fishing_status.config(text=f"–£—Ä–æ–≤–µ–Ω—å —Ä—ã–±–∞–ª–∫–∏: {self.user_data['fishing_level']:.1f}")
        self.save_user_data()
        messagebox.showinfo("–†—ã–±–∞–ª–∫–∞", f"–í—ã –ø–æ–π–º–∞–ª–∏ {fish} —Ä–∞–∑–º–µ—Ä–æ–º {size} —Å–º!")
    
    def make_deposit(self):
        amount = simpledialog.askinteger("–í–∫–ª–∞–¥", "–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞:", minvalue=1000, maxvalue=self.user_data["balance"])
        if amount:
            self.user_data["balance"] -= amount
            self.user_data["bank_deposit"] += amount
            self.update_balance()
            self.update_bank_info()
            self.save_user_data()
            messagebox.showinfo("–í–∫–ª–∞–¥", f"–í–∫–ª–∞–¥ –Ω–∞ {amount} —Ä—É–± –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    
    def take_loan(self):
        amount = simpledialog.askinteger("–ö—Ä–µ–¥–∏—Ç", "–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:", minvalue=1000, maxvalue=1000000)
        if amount:
            self.user_data["balance"] += amount
            self.user_data["loan"] += amount
            self.update_balance()
            self.update_bank_info()
            self.save_user_data()
            messagebox.showinfo("–ö—Ä–µ–¥–∏—Ç", f"–ö—Ä–µ–¥–∏—Ç –Ω–∞ {amount} —Ä—É–± –ø–æ–ª—É—á–µ–Ω!")
    
    def repay_loan(self):
        if self.user_data["loan"] <= 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞!")
            return
        
        amount = simpledialog.askinteger("–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞", "–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è:", 
                                       minvalue=1000, maxvalue=min(self.user_data["balance"], self.user_data["loan"]))
        if amount:
            self.user_data["balance"] -= amount
            self.user_data["loan"] -= amount
            self.update_balance()
            self.update_bank_info()
            self.save_user_data()
            messagebox.showinfo("–ü–æ–≥–∞—à–µ–Ω–∏–µ", f"–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω –Ω–∞ {amount} —Ä—É–±!")
    
    def update_bank_info(self):
        info = f"–í–∫–ª–∞–¥: {self.user_data['bank_deposit']:,} —Ä—É–±\n"
        info += f"–ö—Ä–µ–¥–∏—Ç: {self.user_data['loan']:,} —Ä—É–±"
        self.bank_info.config(text=info)
    
    def invest_money(self, investment_type, min_amount, multiplier):
        amount = simpledialog.askinteger("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"–°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ {investment_type}:", 
                                       minvalue=min_amount, maxvalue=self.user_data["balance"])
        if amount:
            self.user_data["balance"] -= amount
            profit = int(amount * (multiplier - 1))
            self.user_data["balance"] += amount + profit
            self.user_data["investments"].append({
                "type": investment_type,
                "amount": amount,
                "profit": profit
            })
            self.update_balance()
            self.save_user_data()
            messagebox.showinfo("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–∏–Ω–µ—Å–ª–∞ {profit} —Ä—É–± –ø—Ä–∏–±—ã–ª–∏!")
    
    def play_slot_machine(self):
        if self.user_data["balance"] < 1000:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ 1000 —Ä—É–± –¥–ª—è –∏–≥—Ä—ã!")
            return
        
        self.user_data["balance"] -= 1000
        symbols = ["üçí", "üçã", "üçâ", "‚≠ê", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        
        if result[0] == result[1] == result[2]:
            win = 10000
            self.user_data["balance"] += win
            messagebox.showinfo("–î–ñ–ï–ö–ü–û–¢!", f"{' '.join(result)}\n–í—ã–∏–≥—Ä—ã—à: {win} —Ä—É–±!")
        else:
            messagebox.showinfo("–ê–≤—Ç–æ–º–∞—Ç", f"{' '.join(result)}\n–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        
        self.update_balance()
        self.save_user_data()
    
    def play_dice(self):
        if self.user_data["balance"] < 500:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù—É–∂–Ω–æ 500 —Ä—É–± –¥–ª—è –∏–≥—Ä—ã!")
            return
        
        self.user_data["balance"] -= 500
        player_roll = random.randint(1, 6)
        dealer_roll = random.randint(1, 6)
        
        if player_roll > dealer_roll:
            win = 1000
            self.user_data["balance"] += win
            messagebox.showinfo("–ö–æ—Å—Ç–∏", f"–í—ã: {player_roll} | –î–∏–ª–µ—Ä: {dealer_roll}\n–ü–æ–±–µ–¥–∞! +{win} —Ä—É–±!")
        elif player_roll == dealer_roll:
            self.user_data["balance"] += 500
            messagebox.showinfo("–ö–æ—Å—Ç–∏", f"–í—ã: {player_roll} | –î–∏–ª–µ—Ä: {dealer_roll}\n–ù–∏—á—å—è! –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏.")
        else:
            messagebox.showinfo("–ö–æ—Å—Ç–∏", f"–í—ã: {player_roll} | –î–∏–ª–µ—Ä: {dealer_roll}\n–ü—Ä–æ–∏–≥—Ä—ã—à!")
        
        self.update_balance()
        self.save_user_data()
    
    def play_blackjack(self):
        messagebox.showinfo("–ë–ª—ç–∫–¥–∂–µ–∫", "–ë–ª—ç–∫–¥–∂–µ–∫ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    def travel_to(self, location):
        messagebox.showinfo("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ {location}!")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def update_needs(self):
        if not self.user_data["is_unconscious"]:
            self.user_data["hunger"] = max(0, self.user_data["hunger"] - 1)
            self.user_data["sleep"] = max(0, self.user_data["sleep"] - 0.5)
            
            if self.user_data["hunger"] <= 0:
                self.user_data["is_unconscious"] = True
                messagebox.showerror("–ì–æ–ª–æ–¥", "–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –≥–æ–ª–æ–¥–∞!")
        
        self.update_status()
        self.save_user_data()
        self.root.after(10000, self.update_needs)
    
    def check_disease(self):
        if not self.user_data["is_sick"] and random.random() < 0.01:  # 1% —à–∞–Ω—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            self.user_data["is_sick"] = True
            messagebox.showwarning("–ë–æ–ª–µ–∑–Ω—å", "–í—ã –∑–∞–±–æ–ª–µ–ª–∏! –°—Ö–æ–¥–∏—Ç–µ –≤ –±–æ–ª—å–Ω–∏—Ü—É.")
            self.update_status()
            self.save_user_data()
        
        self.root.after(1000, self.check_disease)
    
    def update_play_time(self):
        self.user_data["play_time"] += 1
        self.save_user_data()
        self.root.after(1000, self.update_play_time)
    
    def update_farm_timer(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∞—Ä–º–∞
        if self.user_data["last_farm_click"]:
            last_click = datetime.fromisoformat(self.user_data["last_farm_click"])
            seconds_left = 60 - (datetime.now() - last_click).total_seconds()
            if seconds_left > 0:
                self.farm_timer_label.config(text=f"–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {int(seconds_left)}—Å")
            else:
                self.farm_timer_label.config(text="–î–æ—Å—Ç—É–ø–Ω–æ")
        else:
            self.farm_timer_label.config(text="–î–æ—Å—Ç—É–ø–Ω–æ")
        
        self.root.after(1000, self.update_farm_timer)
    
    def check_missions(self):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π
        self.root.after(1000, self.check_missions)
    
    def save_user_data(self):
        try:
            with open("user_data.json", "w", encoding="utf-8") as f:
                json.dump(self.user_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_user_data(self):
        try:
            if os.path.exists("user_data.json"):
                with open("user_data.json", "r", encoding="utf-8") as f:
                    data = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
                    for key, value in data.items():
                        if key in self.user_data:
                            self.user_data[key] = value
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = RPGSimulator(root)
    root.mainloop()