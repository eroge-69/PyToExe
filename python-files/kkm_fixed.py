import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import csv
import socket
import uuid
import datetime
import time
import select
import threading
import ipaddress
import subprocess
import sys
import os
from xml.etree import ElementTree as ET
from concurrent.futures import ThreadPoolExecutor, as_completed
from ipaddress import ip_address, summarize_address_range

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pandas –∏ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç
try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False
    print("pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pandas", "openpyxl"])
        import pandas as pd
        PANDAS_AVAILABLE = True
        print("pandas —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pandas –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

class KKTCheckerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("KKT Checker Pro")
        self.root.geometry("1400x800")
        self.root.configure(bg='#2c3e50')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.DEVICES_FILE = "devices.txt"
        self.STORE_MAPPING_FILE = "store_mapping.xlsx"
        self.RESULTS_FILE = "results.csv"
        self.DEFAULT_PORT = 6667
        self.SOCKET_TIMEOUT = 5
        self.MAX_WORKERS = 100
        self.TERMINATOR = b'\x00'
        self.MAX_IPS_PER_GATEWAY = 24
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_running = False
        self.results = []
        self.total_devices = 0
        self.checked_count = 0
        self.success_count = 0
        self.store_mapping = {}
        self.devices_to_check = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_vars = {
            'IP': tk.StringVar(),
            'Port': tk.StringVar(),
            'Status': tk.StringVar(),
            'FN_Serial': tk.StringVar(),
            'ExpirationDate': tk.StringVar(),
            'FW_Version': tk.StringVar(),
            'Address': tk.StringVar(),
            'Error': tk.StringVar(),
            'StoreName': tk.StringVar()
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pandas
        if not PANDAS_AVAILABLE:
            self.show_pandas_error()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
    
    def show_pandas_error(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ pandas"""
        error_msg = (
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "pip install pandas openpyxl\n\n"
            "–ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
        )
        messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
        self.status_var.set("–û—à–∏–±–∫–∞: pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        style.theme_use('clam')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
        style.configure('Modern.TFrame', background='#34495e')
        style.configure('Modern.TLabelframe', background='#2c3e50', foreground='white', 
                       font=('Segoe UI', 10, 'bold'))
        style.configure('Modern.TLabelframe.Label', background='#2c3e50', foreground='white')
        style.configure('Modern.TButton', background='#3498db', foreground='white', 
                       font=('Segoe UI', 10, 'bold'), borderwidth=0)
        style.map('Modern.TButton', 
                 background=[('active', '#2980b9'), ('pressed', '#21618c')])
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        style.configure("Treeview",
                      background="#ecf0f1",
                      foreground="#2c3e50",
                      rowheight=28,
                      fieldbackground="#ecf0f1",
                      font=('Segoe UI', 9))
        style.configure("Treeview.Heading",
                      background="#3498db",
                      foreground="white",
                      font=('Segoe UI', 10, 'bold'))
        style.map('Treeview', background=[('selected', '#e74c3c')])
    
    def load_store_mapping(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        if not PANDAS_AVAILABLE:
            self.show_pandas_error()
            return False
            
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['–¢–æ—Ä–≥–æ–≤–∞—è –¢–æ—á–∫–∞', 'IP –∞–¥—Ä–µ—Å —à–ª—é–∑–∞']
            for col in required_columns:
                if col not in df.columns:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É '{col}'")
                    return False
            
            self.store_mapping = {}
            for _, row in df.iterrows():
                store_name = str(row['–¢–æ—Ä–≥–æ–≤–∞—è –¢–æ—á–∫–∞']).strip()
                gateway_ip = str(row['IP –∞–¥—Ä–µ—Å —à–ª—é–∑–∞']).strip()
                
                if store_name and gateway_ip and gateway_ip != 'nan':
                    self.store_mapping[gateway_ip] = store_name
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.store_mapping)} –∑–∞–ø–∏—Å–µ–π –º–∞–ø–ø–∏–Ω–≥–∞")
            return True
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞: {str(e)}")
            return False
    
    def generate_ips_from_gateway(self, gateway_ip, store_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 23 IP –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –ø–æ–¥—Å–µ—Ç–∏ —à–ª—é–∑–∞ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º —à–ª—é–∑)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–ª—é–∑–∞
            network = ipaddress.IPv4Network(f"{gateway_ip}/24", strict=False)
            ips = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ç–∏, –∏—Å–∫–ª—é—á–∞—è —à–ª—é–∑ –∏ broadcast
            count = 0
            for ip in network.hosts():
                if count >= 23:  # –ú–∞–∫—Å–∏–º—É–º 23 –∞–¥—Ä–µ—Å–∞ (–≤—Å–µ –∫—Ä–æ–º–µ —à–ª—é–∑–∞)
                    break
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º —à–ª—é–∑
                if str(ip) == gateway_ip:
                    continue
                
                ips.append({
                    'ip': str(ip),
                    'port': self.DEFAULT_PORT,
                    'gateway': gateway_ip,
                    'store_name': store_name
                })
                count += 1
            
            return ips
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ IP –∏–∑ —à–ª—é–∑–∞ {gateway_ip}: {e}")
            return []
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15", style='Modern.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 15))
        
        title_label = tk.Label(header_frame, 
                              text="KKT CHECKER PRO", 
                              font=('Segoe UI', 20, 'bold'),
                              fg='#3498db',
                              bg='#2c3e50')
        title_label.pack(pady=10)
        
        subtitle_label = tk.Label(header_frame,
                                 text="Professional KKT Device Monitoring System with Store Mapping",
                                 font=('Segoe UI', 10),
                                 fg='#bdc3c7',
                                 bg='#2c3e50')
        subtitle_label.pack()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="12", style='Modern.TLabelframe')
        control_frame.pack(fill=tk.X, pady=(0, 12))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(control_frame, style='Modern.TFrame')
        button_frame.pack(fill=tk.X, pady=8)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons = [
            ("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ Excel", self.load_store_mapping_file, '#f39c12'),
            ("üåê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", self.generate_devices, '#27ae60'),
            ("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏", self.start_check, '#3498db'),
            ("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self.stop_check, '#e74c3c'),
            ("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.export_results, '#9b59b6')
        ]
        
        for text, command, color in buttons:
            btn = tk.Button(button_frame, 
                          text=text,
                          command=command,
                          font=('Segoe UI', 10, 'bold'),
                          bg=color,
                          fg='white',
                          relief='flat',
                          bd=0,
                          padx=12,
                          pady=8,
                          cursor='hand2',
                          activebackground=self.darken_color(color),
                          activeforeground='white')
            btn.pack(side=tk.LEFT, padx=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        status_frame = tk.Frame(control_frame, bg='#34495e', relief='flat', height=40)
        status_frame.pack(fill=tk.X, pady=8)
        status_frame.pack_propagate(False)
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ - –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º")
        status_bar = tk.Label(status_frame, 
                             textvariable=self.status_var,
                             font=('Segoe UI', 10),
                             bg='#34495e',
                             fg='#ecf0f1',
                             padx=15,
                             pady=8)
        status_bar.pack(fill=tk.X)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(status_frame, 
                                     variable=self.progress_var,
                                     maximum=100,
                                     style='Modern.Horizontal.TProgressbar')
        progress_bar.pack(fill=tk.X, padx=15, pady=(0, 8))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        params_frame = ttk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", padding="12", style='Modern.TLabelframe')
        params_frame.pack(fill=tk.X, pady=(0, 12))
        
        params_grid = tk.Frame(params_frame, bg='#34495e')
        params_grid.pack(fill=tk.X, pady=8, padx=5)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.timeout_var = tk.StringVar(value=str(self.SOCKET_TIMEOUT))
        self.workers_var = tk.StringVar(value=str(self.MAX_WORKERS))
        self.port_var = tk.StringVar(value=str(self.DEFAULT_PORT))
        
        labels = [
            ("–¢–∞–π–º–∞—É—Ç (—Å–µ–∫):", self.timeout_var, 0, 0),
            ("–ü–æ—Ç–æ–∫–æ–≤:", self.workers_var, 0, 2),
            ("–ü–æ—Ä—Ç:", self.port_var, 0, 4),
        ]
        
        for text, var, row, col in labels:
            label = tk.Label(params_grid, text=text, bg='#34495e', fg='#ecf0f1', 
                           font=('Segoe UI', 9, 'bold'))
            label.grid(row=row, column=col, padx=8, pady=8, sticky='e')
            
            entry = tk.Entry(params_grid, textvariable=var, width=8, 
                           font=('Segoe UI', 10), bg='#ecf0f1', fg='#2c3e50',
                           relief='flat', bd=2, highlightthickness=1,
                           highlightcolor='#3498db', highlightbackground='#bdc3c7')
            entry.grid(row=row, column=col+1, padx=8, pady=8)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = tk.Frame(params_grid, bg='#34495e')
        stats_frame.grid(row=0, column=6, columnspan=2, padx=20, pady=8, sticky='e')
        
        self.stats_var = tk.StringVar(value="–®–ª—é–∑–æ–≤: 0 | –£—Å—Ç—Ä–æ–π—Å—Ç–≤: 0 | –£—Å–ø–µ—à–Ω–æ: 0")
        stats_label = tk.Label(stats_frame, textvariable=self.stats_var,
                              bg='#34495e', fg='#ecf0f1', font=('Segoe UI', 9))
        stats_label.pack()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_container = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="12", style='Modern.TLabelframe')
        results_container.pack(fill=tk.BOTH, expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä—ã
        filter_frame = tk.Frame(results_container, bg='#34495e')
        filter_frame.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(filter_frame, text="–§–∏–ª—å—Ç—Ä—ã:", bg='#34495e', fg='#ecf0f1', 
                font=('Segoe UI', 9, 'bold')).grid(row=0, column=0, padx=8, pady=8)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        columns = ['IP', 'Status', 'FN_Serial', 'StoreName']
        for i, col in enumerate(columns):
            tk.Label(filter_frame, text=f"{col}:", bg='#34495e', fg='#ecf0f1',
                    font=('Segoe UI', 8)).grid(row=0, column=i*2+1, padx=4, pady=8)
            
            var = tk.StringVar()
            self.filter_vars[col] = var
            
            entry = tk.Entry(filter_frame, textvariable=var, width=12, 
                           bg='#ecf0f1', fg='#2c3e50', relief='flat', bd=1,
                           font=('Segoe UI', 8))
            entry.grid(row=0, column=i*2+2, padx=4, pady=8)
            entry.bind('<KeyRelease>', lambda e: self.apply_filters())
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_buttons = [
            ("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", self.apply_filters, '#27ae60'),
            ("–°–±—Ä–æ—Å–∏—Ç—å", self.reset_filters, '#e74c3c')
        ]
        
        for i, (text, command, color) in enumerate(filter_buttons):
            btn = tk.Button(filter_frame, text=text, command=command,
                          bg=color, fg='white', font=('Segoe UI', 8, 'bold'),
                          relief='flat', bd=0, padx=12, pady=4,
                          activebackground=self.darken_color(color))
            btn.grid(row=0, column=len(columns)*2+1+i, padx=6, pady=8)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_container = tk.Frame(results_container, bg='#2c3e50')
        table_container.pack(fill=tk.BOTH, expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.tree = ttk.Treeview(table_container, 
                                columns=('IP', 'Port', 'Status', 'FN_Serial', 'ExpirationDate', 'FW_Version', 'Address', 'Error', 'StoreName'), 
                                show='headings',
                                height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_config = {
            'IP': ('IP', 120),
            'Port': ('–ü–æ—Ä—Ç', 60),
            'Status': ('–°—Ç–∞—Ç—É—Å', 100),
            'FN_Serial': ('–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ –§–ù', 120),
            'ExpirationDate': ('–û–∫–æ–Ω—á–∞–Ω–∏–µ –§–ù', 120),
            'FW_Version': ('–í–µ—Ä—Å–∏—è –ü–û', 100),
            'Address': ('–ê–¥—Ä–µ—Å', 200),
            'Error': ('–û—à–∏–±–∫–∞', 200),
            'StoreName': ('–¢–æ—Ä–≥–æ–≤–∞—è –¢–æ—á–∫–∞', 150)
        }
        
        for col, (heading, width) in column_config.items():
            self.tree.heading(col, text=heading)
            self.tree.column(col, width=width, anchor=tk.W)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_container, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0, bg='#34495e', fg='white',
                                  font=('Segoe UI', 9))
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP", command=self.copy_ip)
        self.context_menu.add_command(label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", command=self.show_details)
        self.tree.bind("<Button-3>", self.show_context_menu)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel(main_frame)
    
    def load_store_mapping_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫"""
        if not PANDAS_AVAILABLE:
            self.show_pandas_error()
            return
            
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫",
                filetypes=(("Excel files", "*.xlsx *.xls"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")),
                initialfile="store_mapping.xlsx"
            )
            
            if file_path:
                if self.load_store_mapping(file_path):
                    self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥: {len(self.store_mapping)} —à–ª—é–∑–æ–≤")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞: {str(e)}")
    
    def generate_devices(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
        if not self.store_mapping:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º")
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results = []
        self.checked_count = 0
        self.success_count = 0
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = []
        for gateway_ip, store_name in self.store_mapping.items():
            gateway_ips = self.generate_ips_from_gateway(gateway_ip, store_name)
            if gateway_ips:
                devices.extend(gateway_ips)
                print(f"–î–ª—è —à–ª—é–∑–∞ {gateway_ip} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(gateway_ips)} IP –∞–¥—Ä–µ—Å–æ–≤")
        
        self.total_devices = len(devices)
        self.devices_to_check = devices
        self.status_var.set(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {self.total_devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ {len(self.store_mapping)} —à–ª—é–∑–æ–≤")
        self.stats_var.set(f"–®–ª—é–∑–æ–≤: {len(self.store_mapping)} | –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.total_devices} | –£—Å–ø–µ—à–Ω–æ: 0")
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {self.total_devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    def darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞–≤–µ–¥–µ–Ω–∏—è"""
        if color.startswith('#'):
            r = int(color[1:3], 16)
            g = int(color[3:5], 16)
            b = int(color[5:7], 16)
            return f'#{max(0, r-30):02x}{max(0, g-30):02x}{max(0, b-30):02x}'
        return color
    
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        bottom_frame = tk.Frame(parent, bg='#34495e', height=30, relief='flat')
        bottom_frame.pack(fill=tk.X, pady=(12, 0))
        bottom_frame.pack_propagate(False)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        self.status_indicator = tk.Label(bottom_frame, 
                                       text="‚óè",
                                       font=('Arial', 12),
                                       fg='#e74c3c',
                                       bg='#34495e')
        self.status_indicator.pack(side=tk.LEFT, padx=15)
        
        status_text = tk.Label(bottom_frame, 
                             text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                             font=('Segoe UI', 9),
                             fg='#bdc3c7',
                             bg='#34495e')
        status_text.pack(side=tk.LEFT)
        
        # –í–µ—Ä—Å–∏—è
        version_text = tk.Label(bottom_frame, 
                              text="v2.1.0 | Store Mapping Edition",
                              font=('Segoe UI', 8),
                              fg='#95a5a6',
                              bg='#34495e')
        version_text.pack(side=tk.RIGHT, padx=15)
    
    def update_status_indicator(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.is_running:
            self.status_indicator.config(fg='#27ae60')
            status_text = "‚óè –†–∞–±–æ—Ç–∞–µ—Ç"
        else:
            self.status_indicator.config(fg='#e74c3c')
            status_text = "‚óè –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–π–±–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        for widget in self.status_indicator.master.winfo_children():
            if isinstance(widget, tk.Label) and widget != self.status_indicator:
                widget.config(text=status_text)
                break
    
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            filters = {col: var.get().lower() for col, var in self.filter_vars.items()}
            
            for item in self.tree.get_children():
                values = [str(v).lower() for v in self.tree.item(item, 'values')]
                show = True
                
                for i, col in enumerate(self.tree['columns']):
                    if col in filters:
                        filter_text = filters[col]
                        if filter_text and filter_text not in values[i]:
                            show = False
                            break
                
                if show:
                    self.tree.item(item, tags=('visible',))
                else:
                    self.tree.item(item, tags=('hidden',))
            
            self.tree.tag_configure('visible', display='')
            self.tree.tag_configure('hidden', display='none')
            
        except Exception:
            pass
    
    def reset_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        for var in self.filter_vars.values():
            var.set('')
        self.apply_filters()
    
    def start_check(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.is_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        if not hasattr(self, 'devices_to_check') or not self.devices_to_check:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.SOCKET_TIMEOUT = int(self.timeout_var.get())
            self.MAX_WORKERS = int(self.workers_var.get())
            self.DEFAULT_PORT = int(self.port_var.get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_running = True
        self.update_status_indicator()
        threading.Thread(target=self.run_check, daemon=True).start()
    
    def stop_check(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.is_running = False
        self.update_status_indicator()
        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def run_check(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        devices = self.devices_to_check
        
        if not devices:
            self.root.after(0, lambda: messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"))
            self.is_running = False
            self.update_status_indicator()
            return
        
        self.total_devices = len(devices)
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        unique_stores = set(device['store_name'] for device in devices)
        
        self.root.after(0, lambda: self.status_var.set(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: 0/{self.total_devices} (0 —É—Å–ø–µ—à–Ω–æ)"))
        self.root.after(0, lambda: self.progress_var.set(0))
        self.root.after(0, lambda: self.stats_var.set(f"–®–ª—é–∑–æ–≤: {len(self.store_mapping)} | –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.total_devices} | –£—Å–ø–µ—à–Ω–æ: 0"))
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        start_time = time.time()
        
        try:
            with ThreadPoolExecutor(max_workers=min(self.MAX_WORKERS, 50)) as executor:
                futures = {executor.submit(self.check_device, device): device for device in devices}
                
                for future in as_completed(futures):
                    if not self.is_running:
                        executor.shutdown(wait=False)
                        break
                    
                    try:
                        result = future.result()
                        self.results.append(result)
                        self.checked_count += 1
                        
                        if result['Status'] == 'Success':
                            self.success_count += 1
                            self.root.after(0, self.add_result_to_tree, result)
                        
                        progress = self.checked_count / self.total_devices * 100
                        self.root.after(0, self.update_status, progress)
                        
                    except Exception:
                        self.checked_count += 1
                        progress = self.checked_count / self.total_devices * 100
                        self.root.after(0, self.update_status, progress)
        
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"))
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        elapsed_time = time.time() - start_time
        self.is_running = False
        self.update_status_indicator()
        
        self.root.after(0, lambda: messagebox.showinfo(
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", 
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.checked_count} –∏–∑ {self.total_devices}\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {self.success_count}\n"
            f"–¢–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(unique_stores)}"
        ))
        
        self.root.after(0, lambda: self.status_var.set(
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.checked_count}/{self.total_devices} ({self.success_count} —É—Å–ø–µ—à–Ω–æ)"
        ))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.save_results()
    
    def update_status(self, progress):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_var.set(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {self.checked_count}/{self.total_devices} ({self.success_count} —É—Å–ø–µ—à–Ω–æ) - {progress:.1f}%")
        self.progress_var.set(progress)
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        unique_stores = set()
        for result in self.results:
            if 'StoreName' in result:
                unique_stores.add(result['StoreName'])
        
        self.stats_var.set(f"–®–ª—é–∑–æ–≤: {len(self.store_mapping)} | –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {self.total_devices} | –£—Å–ø–µ—à–Ω–æ: {self.success_count}")
    
    def add_result_to_tree(self, result):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            values = (
                result['IP'],
                result['Port'],
                result['Status'],
                result['FN_Serial'],
                result['ExpirationDate'],
                result['FW_Version'],
                result['Address'],
                result['Error'],
                result.get('StoreName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            )
            
            item = self.tree.insert("", tk.END, values=values)
            self.tree.see(item)
        except Exception:
            pass
    
    def check_device(self, device: dict) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        ip = device['ip']
        port = device['port']
        store_name = device['store_name']
        
        device_info = {
            'IP': ip,
            'Port': port,
            'Timestamp': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'Status': '–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
            'Error': '',
            'FN_Serial': '',
            'ShiftState': '',
            'LastDocNumber': '',
            'FW_Version': '',
            'IP_Address': '',
            'ExpirationDate': '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            'pa_1013': '',
            'Command50_Status': '',
            'Command50_Error': '',
            'Address': '',
            'StoreName': store_name
        }
        
        if not self.is_running:
            return device_info
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞ 58)
            response = self.send_request(ip, port, 58)
            if not response:
                device_info['Error'] = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                return device_info
            
            # 2. –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–º–∞–Ω–¥–∞ 2)
            status_response = self.send_request(ip, port, 2)
            if not status_response:
                device_info['Error'] = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞'
                return device_info
            
            parsed_data = self.parse_response(status_response)
            device_info.update(parsed_data)
            
            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã 50 —Å FFD –≤–µ—Ä—Å–∏–µ–π 4
            cmd50_response = self.send_request(ip, port, 50, 4)
            if cmd50_response:
                cmd50_data = self.parse_response(cmd50_response, command=50)
                device_info.update({
                    'Command50_Status': cmd50_data['Command50_Status'],
                    'Command50_Error': cmd50_data['Command50_Error'],
                    'Address': cmd50_data['Address']
                })
            else:
                device_info.update({
                    'Command50_Status': 'Error',
                    'Command50_Error': '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É 50'
                })
                
        except Exception as e:
            device_info['Error'] = f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'
        
        return device_info
    
    def send_request(self, ip: str, port: int, command: int, ffd_version: int = 2) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(self.SOCKET_TIMEOUT)
                s.connect((ip, port))
                
                request = self.create_request(command, ffd_version)
                s.sendall(request)
                
                response = b''
                while True:
                    ready, _, _ = select.select([s], [], [], self.SOCKET_TIMEOUT)
                    if ready:
                        data = s.recv(4096)
                        if not data:
                            break
                        response += data
                        if self.TERMINATOR in data:
                            break
                    else:
                        break

                return response.decode('utf-8', errors='ignore').strip() if response else ""
        except Exception:
            return ""
    
    def create_request(self, command: int, ffd_version: int = 2) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ XML-–∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request = ET.Element("ArmRequest")
            body = ET.SubElement(request, "RequestBody")
            
            ET.SubElement(body, "ProtocolLabel").text = "OFDFNARMUKM"
            ET.SubElement(body, "ProtocolVersion").text = "13.0"
            ET.SubElement(body, "RequestId").text = f"{{{uuid.uuid4()}}}"
            ET.SubElement(body, "DateTime").text = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ET.SubElement(body, "Command").text = str(command)
            ET.SubElement(body, "msgFFDVer").text = str(ffd_version)
            ET.SubElement(body, "msgContVer").text = "1"
            ET.SubElement(request, "RequestData").text = "<![CDATA[]]>"
            
            xml_data = ET.tostring(request, encoding='UTF-8')
            xml_declaration = b'<?xml version="1.0" encoding="UTF-8"?>\n'
            return xml_declaration + xml_data + self.TERMINATOR
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    def parse_response(self, response: str, command: int = None) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞"""
        result = {
            'Status': 'Error',
            'Error': '',
            'FN_Serial': '',
            'ShiftState': '',
            'LastDocNumber': '',
            'FW_Version': '',
            'IP_Address': '',
            'ExpirationDate': '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            'pa_1013': '',
            'Command50_Status': '',
            'Command50_Error': '',
            'Address': ''
        }
        
        if not response or not response.startswith('<'):
            result['Error'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
            return result
            
        try:
            clean_response = response.replace('\x00', '').strip()
            root = ET.fromstring(clean_response)
            
            body = root.find('ResponseBody')
            if body is not None:
                result_code = body.find('Result')
                status = 'Success' if (result_code is not None and result_code.text == '0') else 'Error'
                
                if command == 50:
                    result['Command50_Status'] = status
                    error_desc = body.find('ErrorDescription')
                    result['Command50_Error'] = error_desc.text if error_desc is not None else ''
                else:
                    result['Status'] = status
                    error_desc = body.find('ErrorDescription')
                    result['Error'] = error_desc.text if error_desc is not None else ''
            
            data = root.find('ResponseData')
            if data is not None and data.text:
                try:
                    cdata = data.text.strip()
                    if cdata.startswith('<'):
                                               clean_cdata = cdata.replace('<![CDATA[', '').replace(']]>', '')
                        data_root = ET.fromstring(clean_cdata)
                        
                        for elem in data_root.iter():
                            if ('n' in elem.attrib and elem.attrib['n'] == 'ExpirationDate') or elem.tag == 'ExpirationDate':
                                if elem.text and elem.text.strip():
                                    result['ExpirationDate'] = elem.text.strip()
                            
                            if elem.tag == 'pa':
                                n = elem.get('n')
                                t = elem.get('t', '')
                                text = elem.text.strip() if elem.text else ''
                                
                                if n == "1041":
                                    result['FN_Serial'] = text
                                elif n == "ShiftState":
                                    result['ShiftState'] = text
                                elif n == "lastDocNumber":
                                    result['LastDocNumber'] = text
                                elif n == "KKTFWVersion":
                                    result['FW_Version'] = text
                                elif n == "1013" and t == "1":
                                    result['pa_1013'] = text if text else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                                elif n == "NetworkInterface" and text and 'IP=' in text:
                                    result['IP_Address'] = text.split('IP=')[1].split()[0]
                                elif n == "1009" and t == "1":
                                    result['Address'] = text if text else '–ù–µ —É–∫–∞–∑–∞–Ω'
                except ET.ParseError:
                    pass
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {str(e)}"
            if command == 50:
                result['Command50_Error'] = error_msg
            else:
                result['Error'] = error_msg
        
        return result
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        try:
            fieldnames = [
                'IP', 'Port', 'Timestamp', 'Status', 'Error',
                'FN_Serial', 'ShiftState', 'LastDocNumber',
                'FW_Version', 'IP_Address', 'ExpirationDate',
                'pa_1013', 'Command50_Status', 'Command50_Error',
                'Address', 'StoreName'
            ]
            
            with open(self.RESULTS_FILE, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(self.results)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if not self.results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            filetypes=(("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")),
            defaultextension=".csv",
            initialfile="kkt_results.csv"
        )
        
        if file_path:
            try:
                fieldnames = [
                    'IP', 'Port', 'Timestamp', 'Status', 'Error',
                    'FN_Serial', 'ShiftState', 'LastDocNumber',
                    'FW_Version', 'IP_Address', 'ExpirationDate',
                    'pa_1013', 'Command50_Status', 'Command50_Error',
                    'Address', 'StoreName'
                ]
                
                with open(file_path, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(self.results)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(e)}")
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_ip(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selected_item = self.tree.selection()
        if selected_item:
            ip = self.tree.item(selected_item, 'values')[0]
            self.root.clipboard_clear()
            self.root.clipboard_append(ip)
            self.status_var.set(f"IP {ip} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")
    
    def show_details(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        selected_item = self.tree.selection()
        if selected_item:
            values = self.tree.item(selected_item, 'values')
            ip = values[0]
            
            for result in self.results:
                if result['IP'] == ip:
                    details = "\n".join([f"{k}: {v}" for k, v in result.items() if v])
                    messagebox.showinfo(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è {ip}", details)
                    break

# –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def create_install_bat():
    bat_content = '''@echo off
echo –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è KKT Checker...
python -m pip install --upgrade pip
pip install pandas openpyxl
echo –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!
pause
'''
    with open("install_dependencies.bat", "w", encoding='utf-8') as f:
        f.write(bat_content)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    create_install_bat()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pandas
    if not PANDAS_AVAILABLE:
        print("pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ install_dependencies.bat –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        response = messagebox.askyesno(
            "–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", 
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π?\n"
            "(–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
        )
        if response:
            try:
                subprocess.run("install_dependencies.bat", shell=True)
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                os.execv(sys.executable, ['python'] + sys.argv)
            except:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        else:
            sys.exit(1)
    
    root = tk.Tk()
    app = KKTCheckerApp(root)
    root.mainloop()