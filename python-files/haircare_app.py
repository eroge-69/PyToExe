import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
import random

# === –¢–µ–º—ã ===
themes = {
    "–°–≤–µ—Ç–ª–∞—è": {"bg": "white", "fg": "black"},
    "–¢—ë–º–Ω–∞—è": {"bg": "#2c2c2c", "fg": "white"},
    "–†–∞–¥—É–∂–Ω–∞—è": {"bg": random.choice(["#ff9999", "#99ff99", "#9999ff", "#ffff99"]), "fg": "black"},
}

def apply_theme(theme_name):
    theme = themes[theme_name]
    root.configure(bg=theme["bg"])
    for widget in root.winfo_children():
        try:
            widget.configure(bg=theme["bg"], fg=theme["fg"])
        except:
            pass

def update_table(data):
    tree.delete(*tree.get_children())
    for row in data:
        tree.insert("", "end", values=row)

def load_database():
    global df, headers
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.xls")])
    if not file_path:
        return
    try:
        df = pd.read_excel(file_path)
        headers = list(df.columns)
        tree["columns"] = headers
        tree["show"] = "headings"
        for col in headers:
            tree.heading(col, text=col)
            tree.column(col, anchor='center')
        update_table(df.values.tolist())
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
        search_btn.config(state="normal")
        price_btn.config(state="normal")
        brand_entry.config(state="normal")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

def search_by_brand():
    brand = brand_entry.get().lower()
    if brand:
        if '–§–∏—Ä–º–∞' in df.columns:
            filtered = df[df['–§–∏—Ä–º–∞'].str.lower().str.contains(brand)]
            update_table(filtered.values.tolist())
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '–§–∏—Ä–º–∞'!")
    else:
        update_table(df.values.tolist())

sort_asc = [True]
def sort_by_price():
    if '–¶–µ–Ω–∞ (‚ÇΩ)' in df.columns:
        sorted_df = df.sort_values(by='–¶–µ–Ω–∞ (‚ÇΩ)', ascending=sort_asc[0])
        update_table(sorted_df.values.tolist())
        sort_asc[0] = not sort_asc[0]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '–¶–µ–Ω–∞ (‚ÇΩ)'!")

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
root = tk.Tk()
root.title("–£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏")
root.geometry("1000x600")

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
label = tk.Label(root, text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏", font=("Arial", 16, "bold"))
label.pack(pady=10)

# === –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞ ===
search_frame = tk.Frame(root)
search_frame.pack(pady=5)

tk.Button(search_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", command=load_database).pack(side="left", padx=5)

tk.Label(search_frame, text="–§–∏—Ä–º–∞:").pack(side="left")
brand_entry = tk.Entry(search_frame, state="disabled")
brand_entry.pack(side="left", padx=5)

search_btn = tk.Button(search_frame, text="–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏—Ä–º–µ", command=search_by_brand, state="disabled")
search_btn.pack(side="left", padx=5)

price_btn = tk.Button(search_frame, text="–¶–µ–Ω–∞", command=sort_by_price, state="disabled")
price_btn.pack(side="left", padx=5)

# === –¢–∞–±–ª–∏—Ü–∞ ===
frame = tk.Frame(root)
frame.pack(expand=True, fill='both', padx=10)

tree = ttk.Treeview(frame)
tree.pack(side="left", fill="both", expand=True)

scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
tree.configure(yscrollcommand=scrollbar.set)
scrollbar.pack(side="right", fill="y")
# === –¢–µ–º—ã ===
theme_frame = tk.Frame(root)
theme_frame.pack(pady=5)
tk.Label(theme_frame, text="–¢–µ–º–∞:").pack(side="left", padx=5)

for name in themes:
    tk.Button(theme_frame, text=name, command=lambda n=name: apply_theme(n)).pack(side="left", padx=5)

# === –§–∞–∫—Ç ===
facts = [
    "–í–æ–ª–æ—Å—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –∫–µ—Ä–∞—Ç–∏–Ω–∞.",
    "–ú—ã —Ç–µ—Ä—è–µ–º –¥–æ 100 –≤–æ–ª–æ—Å –≤ –¥–µ–Ω—å.",
    "–ú–∞—Å–∫–∏ —É–ª—É—á—à–∞—é—Ç —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –≤–æ–ª–æ—Å.",
    "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –º—ã—Ç—å—ë ‚Äî –≤—Ä–µ–¥–Ω–æ.",
    "–ú–æ–∫—Ä—ã–µ –≤–æ–ª–æ—Å—ã –±–æ–ª–µ–µ —É—è–∑–≤–∏–º—ã –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º.",
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤–ª–∏—è–µ—Ç –Ω–∞ –±–ª–µ—Å–∫ –≤–æ–ª–æ—Å.",
    "–ú–∞—Å–ª–∞ –∑–∞—â–∏—â–∞—é—Ç –≤–æ–ª–æ—Å—ã –æ—Ç –ª–æ–º–∫–æ—Å—Ç–∏."
]

tk.Button(
    root,
    text="üí° –§–∞–∫—Ç –æ –≤–æ–ª–æ—Å–∞—Ö",
    command=lambda: messagebox.showinfo("–§–∞–∫—Ç", random.choice(facts))
).pack(pady=10)

root.mainloop()