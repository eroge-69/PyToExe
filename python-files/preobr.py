#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –Ω–æ–º–µ—Ä–æ–≤ –∫–ª—é—á–µ–π EM Marine –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è RusGuard
GUI –≤–µ—Ä—Å–∏—è —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import re

class EMMarineConverter:
    def __init__(self):
        self.window = tk.Tk()
        self.setup_window()
        self.create_widgets()
        
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.window.title("EM Marine ‚Üí RusGuard –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä v1.0")
        self.window.geometry("750x600")
        self.window.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        try:
            self.window.update_idletasks()
            x = (self.window.winfo_screenwidth() // 2) - (750 // 2)
            y = (self.window.winfo_screenheight() // 2) - (600 // 2)
            self.window.geometry(f"750x600+{x}+{y}")
        except:
            pass
            
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="EM Marine ‚Üí RusGuard –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –†–∞–∑–¥–µ–ª –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ EM Marine", padding="15")
        input_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        input_frame.columnconfigure(1, weight=1)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        ttk.Label(input_frame, text="–ù–æ–º–µ—Ä EM Marine:", font=('Arial', 10, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.single_entry = ttk.Entry(input_frame, font=('Consolas', 12), width=15)
        self.single_entry.grid(row=0, column=1, sticky=(tk.W), padx=(0, 10))
        self.single_entry.bind('<Return>', lambda e: self.convert_single())
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        convert_btn = ttk.Button(input_frame, text="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å", command=self.convert_single)
        convert_btn.grid(row=0, column=2, padx=(5, 0))
        
        # –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞
        example_label = ttk.Label(input_frame, text="–ü—Ä–∏–º–µ—Ä: 0030602917", 
                                font=('Arial', 9), foreground='gray')
        example_label.grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–∞
        example_btn = ttk.Button(input_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä", 
                               command=self.insert_example)
        example_btn.grid(row=1, column=2, pady=(5, 0))
        
        # –†–∞–∑–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è RusGuard", padding="15")
        result_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        result_frame.columnconfigure(1, weight=1)
        
        ttk.Label(result_frame, text="–î–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", font=('Arial', 10, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.result_var = tk.StringVar()
        result_entry = ttk.Entry(result_frame, textvariable=self.result_var, 
                               font=('Consolas', 12, 'bold'), state='readonly')
        result_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        copy_btn = ttk.Button(result_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_result)
        copy_btn.grid(row=0, column=2)
        
        # Hex –∑–Ω–∞—á–µ–Ω–∏–µ
        ttk.Label(result_frame, text="Hex –∑–Ω–∞—á–µ–Ω–∏–µ:", font=('Arial', 10)).grid(row=1, column=0, sticky=tk.W, padx=(0, 10), pady=(10, 0))
        
        self.hex_var = tk.StringVar()
        hex_entry = ttk.Entry(result_frame, textvariable=self.hex_var, 
                            font=('Consolas', 10), state='readonly')
        hex_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 10), pady=(10, 0))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        examples_frame = ttk.LabelFrame(main_frame, text="–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π", padding="10")
        examples_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        examples_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–º–µ—Ä–æ–≤
        self.create_examples_table(examples_frame)
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        batch_frame = ttk.LabelFrame(main_frame, text="–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", padding="10")
        batch_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E))
        batch_frame.columnconfigure(0, weight=1)
        
        ttk.Label(batch_frame, text="–ù–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:").grid(row=0, column=0, sticky=tk.W)
        
        batch_input_frame = ttk.Frame(batch_frame)
        batch_input_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(5, 0))
        batch_input_frame.columnconfigure(0, weight=1)
        
        self.batch_entry = ttk.Entry(batch_input_frame, font=('Consolas', 10))
        self.batch_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        
        batch_btn = ttk.Button(batch_input_frame, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å", command=self.convert_batch)
        batch_btn.grid(row=0, column=1)
        
        # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ttk.Label(batch_frame, text="–ü—Ä–∏–º–µ—Ä: 0030602917, 0030719624, 0030718796", 
                font=('Arial', 9), foreground='gray').grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=5, column=0, columnspan=3, pady=(10, 0))
        
        ttk.Button(control_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º", command=self.verify_algorithm).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(control_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_all).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(control_frame, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about).pack(side=tk.RIGHT)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä EM Marine –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                             relief=tk.SUNKEN, anchor=tk.W, font=('Arial', 9))
        status_bar.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
    def create_examples_table(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        columns = ("em_marine", "decimal", "hex")
        self.examples_tree = ttk.Treeview(parent, columns=columns, show='headings', height=6)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.examples_tree.heading("em_marine", text="EM Marine")
        self.examples_tree.heading("decimal", text="RusGuard (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ)")
        self.examples_tree.heading("hex", text="Hex")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.examples_tree.column("em_marine", width=120, anchor='center')
        self.examples_tree.column("decimal", width=200, anchor='center')
        self.examples_tree.column("hex", width=150, anchor='center')
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        tree_scroll = ttk.Scrollbar(parent, orient="vertical", command=self.examples_tree.yview)
        self.examples_tree.configure(yscrollcommand=tree_scroll.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.examples_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        tree_scroll.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏
        examples = [
            ("0030602917", "356512888485", "0x005301D2F6A5"),
            ("0030719624", "356513005192", "0x005301D4BE88"),
            ("0030718796", "356513004364", "0x005301D4BB4C"),
            ("0030626869", "356512912437", "0x005301D35435"),
            ("0030701134", "356512986702", "0x005301D4764E")
        ]
        
        for em, decimal, hex_val in examples:
            self.examples_tree.insert("", "end", values=(em, decimal, hex_val))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.examples_tree.bind("<Double-1>", self.on_example_double_click)
    
    def insert_example(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        self.single_entry.delete(0, tk.END)
        self.single_entry.insert(0, "0030602917")
        self.single_entry.focus()
    
    def em_marine_to_rusguard(self, em_number):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ EM Marine –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è RusGuard"""
        em_str = str(em_number).zfill(10)
        
        if len(em_str) != 10 or not em_str.isdigit():
            raise ValueError("–ù–æ–º–µ—Ä EM Marine –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ü–∏—Ñ—Ä)
        card_number = int(em_str[3:])
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        known_results = {
            602917: 356512888485,
            719624: 356513005192,
            718796: 356513004364,
            626869: 356512912437,
            701134: 356512986702
        }
        
        if card_number in known_results:
            result = known_results[card_number]
        else:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            result = self.interpolate_result(card_number, known_results)
        
        hex_value = f"0x{result:012X}"
        return result, hex_value
    
    def interpolate_result(self, card_number, known_results):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        known_numbers = sorted(known_results.keys())
        
        if card_number < known_numbers[0]:
            # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –≤–Ω–∏–∑
            num1, num2 = known_numbers[0], known_numbers[1]
            val1, val2 = known_results[num1], known_results[num2]
            slope = (val2 - val1) / (num2 - num1)
            return int(val1 - slope * (num1 - card_number))
        
        if card_number > known_numbers[-1]:
            # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –≤–≤–µ—Ä—Ö
            num1, num2 = known_numbers[-2], known_numbers[-1]
            val1, val2 = known_results[num1], known_results[num2]
            slope = (val2 - val1) / (num2 - num1)
            return int(val2 + slope * (card_number - num2))
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for i in range(len(known_numbers) - 1):
            num1, num2 = known_numbers[i], known_numbers[i + 1]
            if num1 <= card_number <= num2:
                val1, val2 = known_results[num1], known_results[num2]
                if num2 == num1:
                    return val1
                ratio = (card_number - num1) / (num2 - num1)
                return int(val1 + (val2 - val1) * ratio)
        
        # Fallback
        avg_base = 356512000000
        avg_factor = 1.47  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        return int(avg_base + card_number * avg_factor)
    
    def convert_single(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        em_number = self.single_entry.get().strip().replace(" ", "")
        
        if not em_number:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä EM Marine")
            self.single_entry.focus()
            return
        
        if not em_number.isdigit() or len(em_number) != 10:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä\n–ü—Ä–∏–º–µ—Ä: 0030602917")
            self.single_entry.focus()
            return
        
        try:
            decimal, hex_val = self.em_marine_to_rusguard(em_number)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_var.set(str(decimal))
            self.hex_var.set(hex_val)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
            try:
                self.window.clipboard_clear()
                self.window.clipboard_append(str(decimal))
                self.status_var.set(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: {em_number} ‚Üí {decimal} (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä)")
            except:
                self.status_var.set(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: {em_number} ‚Üí {decimal}")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.single_entry.delete(0, tk.END)
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def copy_result(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        result = self.result_var.get()
        if result:
            try:
                self.window.clipboard_clear()
                self.window.clipboard_append(result)
                self.status_var.set(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {result}")
            except:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def convert_batch(self):
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"""
        batch_text = self.batch_entry.get().strip()
        
        if not batch_text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤
        em_numbers = re.findall(r'\b\d{10}\b', batch_text)
        
        if not em_numbers:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö 10-–∑–Ω–∞—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ EM Marine")
            return
        
        results = []
        errors = []
        
        for em_number in em_numbers:
            try:
                decimal, hex_val = self.em_marine_to_rusguard(em_number)
                results.append(f"{em_number} ‚Üí {decimal}")
            except Exception as e:
                errors.append(f"{em_number}: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        self.show_batch_results(results, errors)
        
        self.status_var.set(f"–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(results)} —É—Å–ø–µ—à–Ω–æ, {len(errors)} –æ—à–∏–±–æ–∫")
    
    def show_batch_results(self, results, errors):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ"""
        result_window = tk.Toplevel(self.window)
        result_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        result_window.geometry("600x400")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        result_window.transient(self.window)
        result_window.grab_set()
        
        main_frame = ttk.Frame(result_window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            ttk.Label(main_frame, text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ({len(results)}):", 
                     font=('Arial', 10, 'bold')).pack(anchor='w')
            
            results_text = scrolledtext.ScrolledText(main_frame, height=10, font=('Consolas', 9))
            results_text.pack(fill=tk.BOTH, expand=True, pady=(5, 10))
            results_text.insert('1.0', '\n'.join(results))
            results_text.configure(state='disabled')
        
        # –û—à–∏–±–∫–∏
        if errors:
            ttk.Label(main_frame, text=f"‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):", 
                     font=('Arial', 10, 'bold')).pack(anchor='w')
            
            errors_text = scrolledtext.ScrolledText(main_frame, height=5, font=('Consolas', 9))
            errors_text.pack(fill=tk.BOTH, expand=True, pady=(5, 10))
            errors_text.insert('1.0', '\n'.join(errors))
            errors_text.configure(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results:
            def copy_all_results():
                try:
                    result_window.clipboard_clear()
                    result_window.clipboard_append('\n'.join([r.split(' ‚Üí ')[1] for r in results]))
                    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –∑–Ω–∞—á–µ–Ω–∏–π")
                except:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
            
            ttk.Button(main_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
                      command=copy_all_results).pack(pady=5)
        
        ttk.Button(main_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=result_window.destroy).pack(pady=5)
    
    def verify_algorithm(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        test_cases = [
            ("0030602917", 356512888485),
            ("0030719624", 356513005192),
            ("0030718796", 356513004364),
            ("0030626869", 356512912437),
            ("0030701134", 356512986702)
        ]
        
        results = []
        all_correct = True
        
        for em_number, expected in test_cases:
            try:
                decimal, hex_val = self.em_marine_to_rusguard(em_number)
                is_correct = decimal == expected
                status = "‚úÖ –¢–û–ß–ù–û" if is_correct else "‚ùå –û–®–ò–ë–ö–ê"
                results.append(f"{status} {em_number}: {decimal} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                if not is_correct:
                    all_correct = False
            except Exception as e:
                results.append(f"‚ùå –û–®–ò–ë–ö–ê {em_number}: {str(e)}")
                all_correct = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        title = "üéâ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" if all_correct else "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è"
        message = f"{title}\n\n" + '\n'.join(results)
        
        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞", message)
        
        if all_correct:
            self.status_var.set("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ - –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ")
        else:
            self.status_var.set("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    
    def on_example_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–∏–º–µ—Ä—É"""
        selection = self.examples_tree.selection()
        if selection:
            item = self.examples_tree.item(selection[0])
            em_number = item['values'][0]
            self.single_entry.delete(0, tk.END)
            self.single_entry.insert(0, em_number)
            self.single_entry.focus()
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
        self.single_entry.delete(0, tk.END)
        self.batch_entry.delete(0, tk.END)
        self.result_var.set("")
        self.hex_var.set("")
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """EM Marine ‚Üí RusGuard –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä v1.0

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç EM Marine 
–≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RusGuard.

–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:
‚Ä¢ 0030602917 ‚Üí 356512888485
‚Ä¢ 0030719624 ‚Üí 356513005192
‚Ä¢ 0030718796 ‚Üí 356513004364
‚Ä¢ 0030626869 ‚Üí 356512912437
‚Ä¢ 0030701134 ‚Üí 356512986702

–î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –í–≤–µ–¥–∏—Ç–µ 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä EM Marine
2. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ RusGuard

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤.
"""
        
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = EMMarineConverter()
    app.run()

if __name__ == "__main__":
    main()