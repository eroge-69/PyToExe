import json
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import MessageEntityType
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8493914531:AAFBWbiFVit4J-nj8vTruXaFV8l73BgC42Q')
USERS_FILE = 'users.json'

bot = Bot(token=API_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

# === –£–¢–ò–õ–ò–¢–ê –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===

def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
    return re.sub(r'([_*[$]()>~`#+\-=|{}.!])', r'\\\1', text)

# === –•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

def register_user(user_id, username):
    users = load_users()
    users[str(user_id)] = {
        "username": username or "",
        "enabled": True
    }
    save_users(users)

def find_user_by_username(username):
    users = load_users()
    for user_id_str, data in users.items():
        if data.get("username", "").lower() == username.lower():
            return int(user_id_str)
    return None

# === /START –∫–æ–º–∞–Ω–¥–∞ ===

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    register_user(message.from_user.id, message.from_user.username)
    await message.reply(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, {escape_markdown(message.from_user.first_name)}\\!")
    print(f"[START] @{message.from_user.username} ({message.from_user.id})")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –õ–° ===

@dp.message_handler(lambda message: message.chat.type == 'private', content_types=types.ContentType.TEXT)
async def reply_in_dm(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ *–Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*.\n"
        "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Ç–µ –†–ï–î–ê–ö–¶–ò–ò ‚Äî [–∑–¥–µ—Å—å](https://t.me/c/2671747194/537/1299?single).\n\n"
        "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –≤–µ—Ç–∫—É –í–û–ü–†–û–°–´.\n"
        "–ì–æ—Ç–æ–≤–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–π–Ω–æ–≥–æ –¢–ó –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å? –¢–æ–≥–¥–∞ –≤ –û–¢–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ó–ê–î–ê–ß.\n\n"
        "–°–ø–∞—Å–∏–±–æ! üôå",
        parse_mode="Markdown"
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö ===

@dp.message_handler(content_types=types.ContentType.TEXT)
async def mention_handler(message: types.Message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    if message.entities:
        for entity in message.entities:
            if entity.type == MessageEntityType.MENTION:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –±–µ–∑ '@'
                username = message.text[entity.offset + 1: entity.offset + entity.length]
                user_id = find_user_by_username(username)

                if user_id:
                    try:
                        chat_id_clean = str(message.chat.id).replace("-100", "")
                        message_link = f"https://t.me/c/{chat_id_clean}/{message.message_id}"

                        await bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"üì£ *–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ —á–∞—Ç–µ* {escape_markdown('¬´' + message.chat.title + '¬ª')}\n"
                                f"[–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})\n\n"
                                f"{escape_markdown(message.text)}"
                            ),
                            parse_mode="MarkdownV2",
                            disable_web_page_preview=True
                        )
                        print(f"[INFO] –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{username} ‚Üí {user_id}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ @{username} ‚Üí {e}")
                else:
                    print(f"[WARN] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")
    executor.start_polling(dp, skip_updates=True)