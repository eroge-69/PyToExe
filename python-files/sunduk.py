import pandas as pd
import random
import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import math

class WheelOfFortune:
    def __init__(self, root):
        self.root = root
        self.root.title("üè¥‚Äç‚ò†Ô∏è–ü–∏—Ä–∞—Ç—Å–∫–∏–π —Å—É–Ω–¥—É–∫")
        self.root.geometry("900x700")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
        self.options = [
            '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –∏–≥—Ä–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π',
            '–ò–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 30 –º–∏–Ω—É—Ç –ª–µ–≤–æ–π —Ä—É–∫–æ–π',
            '–ü—Ä–æ–π—Ç–∏ –æ—Ç—Ä–µ–∑–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ',
            '–í–∫–ª—é—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
            '–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é –¥–∞–≤–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª',
            '–°–¥–µ–ª–∞—Ç—å —Å–∞–º–æ–≥–æ –Ω–µ–ª—é–±–∏–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≥–ª–∞–≤–Ω—ã–º',
            '–ü—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–µ—Å—Ç—ã, –≤—ã–±–∏—Ä–∞—è —Ç–æ–ª—å–∫–æ –∑–ª—ã–µ –æ—Ç–≤–µ—Ç—ã',
            '–ü—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–µ—Å—Ç—ã, –≤—ã–±–∏—Ä–∞—è —Ç–æ–ª—å–∫–æ –¥–æ–±—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã',
            '–°—ã–≥—Ä–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç–æ–º',
            '–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–µ—â–∏',
            '–£—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞–æ—Å –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ (GTA, Skyrim)',
            '–ü—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä—ë–¥',
            '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏/–º–∞–≥–∏—é',
            '–ì–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–º–µ—à–Ω—ã–º –≥–æ–ª–æ—Å–æ–º',
            '–°–¥–µ–ª–∞—Ç—å —Å–∞–º—É—é –Ω–µ–∫—Ä–∞—Å–∏–≤—É—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É',
            '–°—ã–≥—Ä–∞—Ç—å –≤ —Ö–æ—Ä—Ä–æ—Ä —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∑–≤—É–∫–æ–º',
            '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–µ–±–µ –±–µ–≥–∞—Ç—å, —Ç–æ–ª—å–∫–æ —Ö–æ–¥–∏—Ç—å',
            '–°—ã–≥—Ä–∞—Ç—å –≤ –º–æ–±–∏–ª—å–Ω—É—é –∏–≥—Ä—É –Ω–∞ –ø–∫'
        ]
        
        self.is_spinning = False
        self.current_angle = 0
        self.animation_id = None
        
        self.setup_ui()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, 
                               text="üè¥‚Äç‚ò†Ô∏è–ü–∏—Ä–∞—Ç—Å–∫–∏–π —Å—É–Ω–¥—É–∫", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=10)
        
        # –•–æ–ª—Å—Ç –¥–ª—è –∫–æ–ª–µ—Å–∞
        self.canvas = tk.Canvas(main_frame, width=400, height=400, bg='white', relief='raised', bd=3)
        self.canvas.grid(row=1, column=0, columnspan=2, pady=20)
        
        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–µ—Å–æ
        self.draw_wheel()
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        self.spin_button = ttk.Button(main_frame, 
                                    text="üéØ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!", 
                                    command=self.start_spin)
        self.spin_button.grid(row=2, column=0, columnspan=2, pady=20)
        
        # –ü–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_var = tk.StringVar()
        self.result_var.set("–ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ —É–∑–Ω–∞–π—Ç–µ –≤–∞—à—É —Å—É–¥—å–±—É!")
        
        result_label = ttk.Label(main_frame, 
                                textvariable=self.result_var,
                                font=("Arial", 12, "bold"),
                                wraplength=600,
                                justify=tk.CENTER,
                                foreground="darkblue")
        result_label.grid(row=3, column=0, columnspan=2, pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
        chart_button = ttk.Button(main_frame,
                                 text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É",
                                 command=self.show_chart)
        chart_button.grid(row=4, column=0, columnspan=2, pady=10)
        
    def draw_wheel(self, angle=0):
        """–†–∏—Å—É–µ—Ç –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã —Å —Ç–µ–∫—É—â–∏–º —É–≥–ª–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞"""
        self.canvas.delete("all")
        
        # –¶–µ–Ω—Ç—Ä –∏ —Ä–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞
        center_x, center_y = 200, 200
        radius = 180
        
        # –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
        self.canvas.create_oval(center_x - radius, center_y - radius,
                               center_x + radius, center_y + radius,
                               outline="black", width=3, fill="lightblue")
        
        # –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä–∞
        num_sectors = len(self.options)
        angle_per_sector = 360 / num_sectors
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
        colors = [
            "#FF6B6B", "#4ECDC4", "#45B7D1", "#FFBE0B", 
            "#FB5607", "#FF006E", "#8338EC", "#3A86FF",
            "#38B000", "#FDFFB6", "#9BF6FF", "#BDB2FF",
            "#FFC6FF", "#A0C4FF", "#FFD6FF", "#BBDBFF",
            "#D0F4DE", "#FF99C8", "#FCF6BD"
        ]
        
        for i in range(num_sectors):
            start_angle = angle + i * angle_per_sector
            end_angle = start_angle + angle_per_sector
            
            # –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
            self.canvas.create_arc(center_x - radius, center_y - radius,
                                  center_x + radius, center_y + radius,
                                  start=start_angle, extent=angle_per_sector,
                                  fill=colors[i % len(colors)], outline="black")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞
            mid_angle = start_angle + angle_per_sector / 2
            text_radius = radius * 0.7
            text_x = center_x + text_radius * math.cos(math.radians(mid_angle))
            text_y = center_y + text_radius * math.sin(math.radians(mid_angle))
            
            self.canvas.create_text(text_x, text_y, text=str(i+1), 
                                   font=("Arial", 12, "bold"), fill="white")
        
        # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        self.canvas.create_oval(center_x - 15, center_y - 15,
                               center_x + 15, center_y + 15,
                               fill="red", outline="black", width=2)
        
        # –†–∏—Å—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å (—Å—Ç—Ä–µ–ª–∫—É)
        pointer_length = 30
        self.canvas.create_polygon(
            center_x, center_y - radius - 10,
            center_x - 15, center_y - radius + pointer_length,
            center_x + 15, center_y - radius + pointer_length,
            fill="gold", outline="black", width=2
        )
        
        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ
        self.canvas.create_text(center_x, center_y, text="—Å—É–Ω–¥—É–∫\n–¥–µ—Ñ–∏—Ü–∏—Ç–∞", 
                               font=("Arial", 14, "bold"), fill="darkred")
    
    def start_spin(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞"""
        if not self.is_spinning:
            self.is_spinning = True
            self.spin_button.config(state="disabled")
            self.result_var.set("–ö–æ–ª–µ—Å–æ –≤—Ä–∞—â–∞–µ—Ç—Å—è...")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
            self.spin_speed = 30  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            self.slowdown_factor = 0.96  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
            self.min_speed = 0.5  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            self.animate_spin()
    
    def animate_spin(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞"""
        if self.spin_speed > self.min_speed:
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª
            self.current_angle = (self.current_angle + self.spin_speed) % 360
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
            self.draw_wheel(self.current_angle)
            
            # –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
            self.spin_speed *= self.slowdown_factor
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            self.animation_id = self.root.after(30, self.animate_spin)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
            self.finish_spin()
    
    def finish_spin(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_angle = self.current_angle % 360
        sector_size = 360 / len(self.options)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–∏–≥—Ä–∞–≤—à–∏–π —Å–µ–∫—Ç–æ—Ä (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–≤–µ—Ä—Ö—É)
        winning_sector = int((360 - final_angle) / sector_size) % len(self.options)
        result = self.options[winning_sector]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_var.set(f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´–ü–ê–õ–û:\n{result}")
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        self.flash_effect(0)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—Ä–∞—â–µ–Ω–∏—è
        self.is_spinning = False
        self.spin_button.config(state="normal")
    
    def flash_effect(self, count):
        """–ú–∏–≥–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if count < 6:
            if count % 2 == 0:
                self.canvas.config(bg="lightyellow")
            else:
                self.canvas.config(bg="white")
            self.root.after(150, lambda: self.flash_effect(count + 1))
    
    def show_chart(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        chart_window = tk.Toplevel(self.root)
        chart_window.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")
        chart_window.geometry("1000x800")
        
        fig, ax = plt.subplots(figsize=(12, 10))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        sizes = [100/len(self.options)] * len(self.options)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        wedges, texts, autotexts = ax.pie(sizes, labels=self.options, autopct='%1.1f%%',
                                         startangle=90, colors=plt.cm.Set3.colors)
        
        # –£–ª—É—á—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–µ–∫—Å—Ç–∞
        for text in texts:
            text.set_fontsize(8)
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        ax.set_title('üé° –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã', fontsize=16, fontweight='bold')
        ax.axis('equal')
        
        canvas = FigureCanvasTkAgg(fig, chart_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

# –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if __name__ == "__main__":
    root = tk.Tk()
    app = WheelOfFortune(root)
    root.mainloop()