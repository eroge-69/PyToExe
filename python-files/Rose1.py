{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox, filedialog\n",
    "import sqlite3\n",
    "from datetime import datetime, timedelta\n",
    "import os\n",
    "import pandas as pd\n",
    "from openpyxl import Workbook\n",
    "from openpyxl.styles import Font, Alignment, PatternFill, Border, Side\n",
    "\n",
    "class HotelApp:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Rose Hotel Management System - Gold & Diamond Edition\")\n",
    "\n",
    "        # --- Gold & Diamond Color Scheme ---\n",
    "        self.bg_color = \"#2C3E50\"           # Deep Charcoal/Slate\n",
    "        self.header_color = \"#1F2B38\"       # Darker Slate Header\n",
    "        self.frame_color = \"#34495E\"        # Lighter Slate for Frames\n",
    "        self.text_color = \"#ECF0F1\"         # Off-white/Silver Text\n",
    "        self.gold_accent = \"#F1C40F\"        # Shimmering Gold\n",
    "        self.diamond_accent = \"#E0E0E0\"     # Bright Diamond/Silver Highlight\n",
    "        self.button_color = self.gold_accent\n",
    "        self.button_text_color = \"#1F2B38\"\n",
    "        self.entry_bg = \"#BDC3C7\"\n",
    "\n",
    "        # Configure root window\n",
    "        self.root.configure(bg=self.bg_color)\n",
    "        self.root.geometry(\"1100x750\")\n",
    "        self.root.minsize(1000, 700)  # Set minimum window size\n",
    "\n",
    "        # Add logo and title frame\n",
    "        self.create_header()\n",
    "\n",
    "        # Initialize database\n",
    "        if not self.init_db():\n",
    "            messagebox.showerror(\"Error\", \"Failed to initialize database. Application will close.\")\n",
    "            self.root.destroy()\n",
    "            return\n",
    "\n",
    "        # Create tabs\n",
    "        self.notebook = ttk.Notebook(root)\n",
    "        self.notebook.pack(expand=True, fill='both', padx=15, pady=15)\n",
    "\n",
    "        # Style configuration\n",
    "        self.configure_styles()\n",
    "\n",
    "        # Create tabs\n",
    "        self.create_data_entry_tab()\n",
    "        self.create_search_tab()\n",
    "        self.create_reports_tab()\n",
    "        self.create_about_tab()\n",
    "\n",
    "        # Add developer credit\n",
    "        self.create_footer()\n",
    "\n",
    "    def create_header(self):\n",
    "        \"\"\"Create the header with logo and title\"\"\"\n",
    "        header_frame = tk.Frame(self.root, bg=self.header_color, pady=10)\n",
    "        header_frame.pack(fill='x')\n",
    "\n",
    "        title_label = tk.Label(header_frame,\n",
    "                             text=\"Rose Hotel Management System\",\n",
    "                             font=('Arial', 22, 'bold'),  # Changed to Arial for better compatibility\n",
    "                             fg=self.gold_accent,\n",
    "                             bg=self.header_color)\n",
    "        title_label.pack()\n",
    "\n",
    "    def create_footer(self):\n",
    "        \"\"\"Create footer with developer credit\"\"\"\n",
    "        footer_frame = tk.Frame(self.root, bg=self.header_color, pady=5)\n",
    "        footer_frame.pack(fill='x', side='bottom')\n",
    "\n",
    "        dev_label = tk.Label(footer_frame,\n",
    "                           text=\"Developed by Ararsa Tadesse | Gold & Diamond Edition\",\n",
    "                           font=('Arial', 9),\n",
    "                           fg=self.diamond_accent,\n",
    "                           bg=self.header_color)\n",
    "        dev_label.pack()\n",
    "\n",
    "    def configure_styles(self):\n",
    "        \"\"\"Configure custom styles for the application\"\"\"\n",
    "        style = ttk.Style()\n",
    "        style.theme_use('clam')\n",
    "\n",
    "        # --- Notebook Style ---\n",
    "        style.configure('TNotebook', background=self.bg_color, borderwidth=0)\n",
    "        style.configure('TNotebook.Tab',\n",
    "                      background=self.frame_color,\n",
    "                      foreground=self.text_color,\n",
    "                      padding=[15, 8],\n",
    "                      font=('Arial', 11, 'bold'),\n",
    "                      borderwidth=0)\n",
    "        style.map('TNotebook.Tab',\n",
    "                background=[('selected', self.gold_accent)],\n",
    "                foreground=[('selected', self.button_text_color)])\n",
    "\n",
    "        # --- Button Style ---\n",
    "        style.configure('Gold.TButton',\n",
    "                       background=self.button_color,\n",
    "                       foreground=self.button_text_color,\n",
    "                       font=('Arial', 10, 'bold'),\n",
    "                       borderwidth=2,\n",
    "                       relief='raised',\n",
    "                       padding=8,\n",
    "                       bordercolor=self.header_color)\n",
    "        style.map('Gold.TButton',\n",
    "                background=[('active', '#F39C12')],  # Slightly lighter gold\n",
    "                relief=[('pressed', 'sunken')])\n",
    "\n",
    "        # --- Label & Frame Styles ---\n",
    "        style.configure('Gold.TLabel',\n",
    "                      background=self.frame_color,\n",
    "                      foreground=self.text_color,\n",
    "                      font=('Arial', 10))\n",
    "        style.configure('Outer.TFrame', background=self.bg_color)\n",
    "        style.configure('Gold.TFrame', background=self.frame_color)\n",
    "        style.configure('Gold.TLabelframe',\n",
    "                      background=self.frame_color,\n",
    "                      borderwidth=1,\n",
    "                      relief=\"solid\",\n",
    "                      bordercolor=self.gold_accent)\n",
    "        style.configure('Gold.TLabelframe.Label',\n",
    "                      background=self.frame_color,\n",
    "                      foreground=self.gold_accent,\n",
    "                      font=('Arial', 14, 'bold'))  # Changed to Arial for better compatibility\n",
    "\n",
    "        # --- Entry & Combobox Style ---\n",
    "        style.configure('Gold.TEntry',\n",
    "                      fieldbackground=self.entry_bg,\n",
    "                      foreground=self.header_color,\n",
    "                      insertcolor=self.header_color,\n",
    "                      padding=8,\n",
    "                      font=('Arial', 10),\n",
    "                      borderwidth=2,\n",
    "                      relief='flat')\n",
    "        style.map('Gold.TEntry', bordercolor=[('focus', self.gold_accent)])\n",
    "\n",
    "        style.configure('Gold.TCombobox',\n",
    "                      fieldbackground=self.entry_bg,\n",
    "                      foreground=self.header_color,\n",
    "                      padding=5,\n",
    "                      font=('Arial', 10),\n",
    "                      arrowcolor=self.button_text_color,\n",
    "                      bordercolor=self.frame_color)\n",
    "        style.map('Gold.TCombobox',\n",
    "                background=[('readonly', self.entry_bg)],\n",
    "                fieldbackground=[('readonly', self.entry_bg)],\n",
    "                selectbackground=[('readonly', self.entry_bg)])\n",
    "\n",
    "        # --- Treeview Style ---\n",
    "        style.configure('Gold.Treeview',\n",
    "                      background='#ECF0F1',\n",
    "                      foreground=self.header_color,\n",
    "                      fieldbackground='#ECF0F1',\n",
    "                      rowheight=28,\n",
    "                      font=('Arial', 10))\n",
    "        style.configure('Gold.Treeview.Heading',\n",
    "                      background=self.header_color,\n",
    "                      foreground=self.gold_accent,\n",
    "                      font=('Arial', 11, 'bold'),  # Changed to Arial for better compatibility\n",
    "                      padding=8)\n",
    "        style.map('Gold.Treeview',\n",
    "                background=[('selected', self.gold_accent)],\n",
    "                foreground=[('selected', self.button_text_color)])\n",
    "        style.layout(\"Gold.Treeview\", [('Gold.Treeview.treearea', {'sticky': 'nswe'})])  # Remove borders\n",
    "\n",
    "    def init_db(self):\n",
    "        \"\"\"Initialize the database and create tables if they don't exist\"\"\"\n",
    "        try:\n",
    "            db_dir = 'database'\n",
    "            if not os.path.exists(db_dir):\n",
    "                os.makedirs(db_dir)\n",
    "            self.db_path = os.path.join(db_dir, 'rose_hotel_gold.db')\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute('''\n",
    "                CREATE TABLE IF NOT EXISTS bookings (\n",
    "                    id INTEGER PRIMARY KEY AUTOINCREMENT, room TEXT NOT NULL, guest_name TEXT,\n",
    "                    zone TEXT, woreda TEXT, kebele TEXT, contact TEXT, check_in TEXT,\n",
    "                    check_out TEXT, room_type TEXT, price REAL, total REAL, accuracy TEXT DEFAULT 'pk'\n",
    "                )''')\n",
    "                cursor.execute('''\n",
    "                CREATE TABLE IF NOT EXISTS rooms (\n",
    "                    id INTEGER PRIMARY KEY AUTOINCREMENT, room_number TEXT NOT NULL UNIQUE,\n",
    "                    room_type TEXT, price REAL\n",
    "                )''')\n",
    "                cursor.execute(\"SELECT COUNT(*) FROM rooms\")\n",
    "                if cursor.fetchone()[0] == 0:\n",
    "                    sample_rooms = [\n",
    "                        ('G1 101', 'Single', 1000), ('G1 102', 'Single', 1000),\n",
    "                        ('G1 103', 'Single', 1000), ('G1 104', 'Double', 1500),\n",
    "                        ('G1 105', 'Double', 1500), ('G1 106', 'Suite', 2500),\n",
    "                        ('G2 201', 'Single', 1000), ('G2 202', 'Single', 1000),\n",
    "                        ('G2 203', 'Single', 1000), ('G2 204', 'Double', 1500),\n",
    "                        ('G2 205', 'Double', 1500), ('G2 206', 'Suite', 2500),\n",
    "                    ]\n",
    "                    cursor.executemany(\"INSERT INTO rooms (room_number, room_type, price) VALUES (?, ?, ?)\", sample_rooms)\n",
    "                conn.commit()\n",
    "            return True\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Database Critical Error\", f\"Could not initialize database: {e}\")\n",
    "            return False\n",
    "\n",
    "    def create_data_entry_tab(self):\n",
    "        tab = ttk.Frame(self.notebook, style='Outer.TFrame')\n",
    "        self.notebook.add(tab, text=' NEW BOOKING ')\n",
    "\n",
    "        container = ttk.Frame(tab, style='Outer.TFrame')\n",
    "        container.pack(fill='both', expand=True, padx=30, pady=30)\n",
    "        container.grid_columnconfigure(0, weight=1)\n",
    "        container.grid_rowconfigure(0, weight=1)\n",
    "        container.grid_rowconfigure(1, weight=1)\n",
    "\n",
    "        guest_frame = ttk.LabelFrame(container, text=\" Guest Information \", style='Gold.TLabelframe')\n",
    "        guest_frame.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)\n",
    "        guest_frame.grid_columnconfigure(1, weight=1)\n",
    "        guest_frame.grid_columnconfigure(3, weight=1)\n",
    "\n",
    "        fields = [(\"Full Name:\", 0, 0), (\"Contact Number:\", 0, 2), (\"Zone:\", 1, 0), (\"Woreda:\", 1, 2), (\"Kebele:\", 2, 0)]\n",
    "        self.entries = {}\n",
    "        for text, r, c in fields:\n",
    "            label = ttk.Label(guest_frame, text=text, style='Gold.TLabel', font=('Arial', 10, 'bold'))\n",
    "            label.grid(row=r, column=c, sticky='w', padx=10, pady=8)\n",
    "            entry = ttk.Entry(guest_frame, style='Gold.TEntry', width=30)\n",
    "            entry.grid(row=r, column=c+1, padx=10, pady=8, sticky='ew')\n",
    "            self.entries[text.split(':')[0].lower().replace(' ', '_')] = entry\n",
    "\n",
    "        room_frame = ttk.LabelFrame(container, text=\" Booking Details \", style='Gold.TLabelframe')\n",
    "        room_frame.grid(row=1, column=0, sticky='nsew', padx=10, pady=10)\n",
    "        room_frame.grid_columnconfigure(1, weight=1)\n",
    "        room_frame.grid_columnconfigure(3, weight=1)\n",
    "\n",
    "        room_fields = [(\"Room Number:\", 0, 0), (\"Room Type:\", 1, 0), (\"Price per Night:\", 2, 0),\n",
    "                      (\"Check-in Date:\", 0, 2), (\"Check-out Date:\", 1, 2), (\"Total:\", 2, 2)]\n",
    "\n",
    "        for text, r, c in room_fields:\n",
    "            ttk.Label(room_frame, text=text, style='Gold.TLabel', font=('Arial', 10, 'bold')).grid(row=r, column=c, sticky='w', padx=10, pady=8)\n",
    "\n",
    "        self.room_var = tk.StringVar()\n",
    "        self.room_dropdown = ttk.Combobox(room_frame, textvariable=self.room_var, state='readonly', style='Gold.TCombobox', font=('Arial', 10))\n",
    "        self.room_dropdown.grid(row=0, column=1, padx=10, pady=8, sticky='ew')\n",
    "\n",
    "        self.room_type_var = tk.StringVar()\n",
    "        ttk.Entry(room_frame, textvariable=self.room_type_var, state='readonly', style='Gold.TEntry').grid(row=1, column=1, padx=10, pady=8, sticky='ew')\n",
    "\n",
    "        self.price_var = tk.StringVar()\n",
    "        self.price_entry = ttk.Entry(room_frame, textvariable=self.price_var, style='Gold.TEntry')\n",
    "        self.price_entry.grid(row=2, column=1, padx=10, pady=8, sticky='ew')\n",
    "        self.price_entry.bind('<KeyRelease>', self.calculate_total)\n",
    "\n",
    "        self.check_in_entry = ttk.Entry(room_frame, style='Gold.TEntry')\n",
    "        self.check_in_entry.grid(row=0, column=3, padx=10, pady=8, sticky='ew')\n",
    "        self.check_in_entry.insert(0, datetime.now().strftime('%Y-%m-%d'))\n",
    "\n",
    "        self.check_out_entry = ttk.Entry(room_frame, style='Gold.TEntry')\n",
    "        self.check_out_entry.grid(row=1, column=3, padx=10, pady=8, sticky='ew')\n",
    "        self.check_out_entry.insert(0, (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'))\n",
    "\n",
    "        self.total_var = tk.StringVar()\n",
    "        ttk.Entry(room_frame, textvariable=self.total_var, state='readonly', style='Gold.TEntry').grid(row=2, column=3, padx=10, pady=8, sticky='ew')\n",
    "\n",
    "        button_frame = ttk.Frame(container, style='Outer.TFrame')\n",
    "        button_frame.grid(row=2, column=0, pady=20, sticky='e')\n",
    "\n",
    "        submit_btn = ttk.Button(button_frame, text=\"Submit Booking\", command=self.submit_booking, style='Gold.TButton')\n",
    "        submit_btn.pack(side='left', padx=10)\n",
    "        clear_btn = ttk.Button(button_frame, text=\"Clear Form\", command=self.clear_form, style='Gold.TButton')\n",
    "        clear_btn.pack(side='left', padx=10)\n",
    "\n",
    "        self.room_var.trace_add('write', self.update_room_details)\n",
    "        for entry in [self.check_in_entry, self.check_out_entry]:\n",
    "            entry.bind('<FocusOut>', self.calculate_total)\n",
    "        self.update_room_dropdown()\n",
    "\n",
    "    def update_room_dropdown(self):\n",
    "        try:\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute(\"\"\"\n",
    "                    SELECT r.room_number FROM rooms r\n",
    "                    LEFT JOIN bookings b ON r.room_number = b.room AND b.guest_name IS NOT NULL AND b.guest_name != ''\n",
    "                    WHERE b.id IS NULL ORDER BY r.room_number\n",
    "                \"\"\")\n",
    "                self.room_dropdown['values'] = [row[0] for row in cursor.fetchall()]\n",
    "        except sqlite3.Error as e:\n",
    "            messagebox.showerror(\"Database Error\", f\"Failed to load rooms: {e}\")\n",
    "\n",
    "    def update_room_details(self, *args):\n",
    "        room = self.room_var.get()\n",
    "        if not room: return\n",
    "        try:\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute(\"SELECT room_type, price FROM rooms WHERE room_number = ?\", (room,))\n",
    "                result = cursor.fetchone()\n",
    "                if result:\n",
    "                    self.room_type_var.set(result[0])\n",
    "                    self.price_var.set(f\"{result[1]:.2f}\")\n",
    "                    self.calculate_total()\n",
    "        except sqlite3.Error as e:\n",
    "            messagebox.showerror(\"Database Error\", f\"Failed to get room details: {e}\")\n",
    "\n",
    "    def calculate_total(self, *args):\n",
    "        try:\n",
    "            check_in = datetime.strptime(self.check_in_entry.get(), '%Y-%m-%d')\n",
    "            check_out = datetime.strptime(self.check_out_entry.get(), '%Y-%m-%d')\n",
    "\n",
    "            # Ensure price is a valid number before calculating\n",
    "            price_str = self.price_var.get()\n",
    "            if not price_str:\n",
    "                self.total_var.set('')\n",
    "                return\n",
    "\n",
    "            price = float(price_str)\n",
    "\n",
    "            if check_out <= check_in:\n",
    "                self.total_var.set('')\n",
    "                return\n",
    "            days = (check_out - check_in).days\n",
    "            self.total_var.set(f\"{days * price:.2f}\")\n",
    "        except (ValueError, TypeError):\n",
    "            self.total_var.set('')\n",
    "\n",
    "    def submit_booking(self):\n",
    "        if not all([self.entries['full_name'].get(), self.room_var.get(), self.check_in_entry.get(), self.check_out_entry.get(), self.total_var.get()]):\n",
    "            messagebox.showwarning(\"Incomplete Form\", \"Please fill all required fields, including selecting a room.\")\n",
    "            return\n",
    "\n",
    "        # Input validation for price\n",
    "        try:\n",
    "            price_value = float(self.price_var.get())\n",
    "            total_value = float(self.total_var.get())\n",
    "        except ValueError:\n",
    "            messagebox.showwarning(\"Invalid Input\", \"Please enter a valid number for Price per Night.\")\n",
    "            return\n",
    "\n",
    "        try:\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute(\"\"\"\n",
    "                    INSERT INTO bookings (room, guest_name, zone, woreda, kebele, contact, check_in, check_out, room_type, price, total)\n",
    "                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n",
    "                \"\"\", (\n",
    "                    self.room_var.get(), self.entries['full_name'].get(), self.entries['zone'].get(),\n",
    "                    self.entries['woreda'].get(), self.entries['kebele'].get(), self.entries['contact_number'].get(),\n",
    "                    self.check_in_entry.get(), self.check_out_entry.get(), self.room_type_var.get(),\n",
    "                    price_value, total_value\n",
    "                ))\n",
    "            messagebox.showinfo(\"Success\", \"Booking submitted successfully!\")\n",
    "            self.clear_form()\n",
    "            self.perform_search()  # Refresh search tab\n",
    "        except sqlite3.Error as e:\n",
    "            messagebox.showerror(\"Database Error\", f\"Failed to submit booking: {e}\")\n",
    "\n",
    "    def clear_form(self):\n",
    "        for entry in self.entries.values():\n",
    "            entry.delete(0, tk.END)\n",
    "        self.check_in_entry.delete(0, tk.END)\n",
    "        self.check_in_entry.insert(0, datetime.now().strftime('%Y-%m-%d'))\n",
    "        self.check_out_entry.delete(0, tk.END)\n",
    "        self.check_out_entry.insert(0, (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'))\n",
    "        self.room_var.set('')\n",
    "        self.room_type_var.set('')\n",
    "        self.price_var.set('')\n",
    "        self.total_var.set('')\n",
    "        self.update_room_dropdown()\n",
    "\n",
    "    def create_search_tab(self):\n",
    "        tab = ttk.Frame(self.notebook, style='Outer.TFrame')\n",
    "        self.notebook.add(tab, text=' MANAGE BOOKINGS ')\n",
    "\n",
    "        container = ttk.Frame(tab, style='Outer.TFrame')\n",
    "        container.pack(fill='both', expand=True, padx=30, pady=20)\n",
    "\n",
    "        search_frame = ttk.LabelFrame(container, text=\" Search & Filter \", style='Gold.TLabelframe')\n",
    "        search_frame.pack(fill='x', padx=5, pady=5)\n",
    "        search_frame.grid_columnconfigure(1, weight=1)\n",
    "        search_frame.grid_columnconfigure(3, weight=1)\n",
    "\n",
    "        ttk.Label(search_frame, text=\"Guest Name:\", style='Gold.TLabel', font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=10)\n",
    "        self.search_name_entry = ttk.Entry(search_frame, style='Gold.TEntry')\n",
    "        self.search_name_entry.grid(row=0, column=1, padx=5, pady=5, sticky='ew')\n",
    "\n",
    "        ttk.Label(search_frame, text=\"Room Number:\", style='Gold.TLabel', font=('Arial', 10, 'bold')).grid(row=0, column=2, padx=10, pady=10)\n",
    "        self.search_room_entry = ttk.Entry(search_frame, style='Gold.TEntry')\n",
    "        self.search_room_entry.grid(row=0, column=3, padx=5, pady=5, sticky='ew')\n",
    "\n",
    "        button_frame = ttk.Frame(container, style='Outer.TFrame')\n",
    "        button_frame.pack(pady=15, anchor='w', padx=5)\n",
    "\n",
    "        ttk.Button(button_frame, text=\"Search\", command=self.perform_search, style='Gold.TButton').pack(side='left', padx=5)\n",
    "        ttk.Button(button_frame, text=\"Export to Excel\", command=self.export_to_excel, style='Gold.TButton').pack(side='left', padx=5)\n",
    "        ttk.Button(button_frame, text=\"Check Out Selected\", command=self.check_out_guest, style='Gold.TButton').pack(side='left', padx=5)\n",
    "\n",
    "        tree_container = ttk.Frame(container, style='Outer.TFrame')\n",
    "        tree_container.pack(fill='both', expand=True, padx=5, pady=5)\n",
    "\n",
    "        columns = ('id', 'room', 'guest_name', 'contact', 'check_in', 'check_out', 'total')\n",
    "        self.results_tree = ttk.Treeview(tree_container, columns=columns, show='headings', style='Gold.Treeview')\n",
    "\n",
    "        for col in columns:\n",
    "            self.results_tree.heading(col, text=col.replace('_', ' ').title())\n",
    "        widths = {'id': 50, 'room': 100, 'guest_name': 200, 'contact': 150, 'check_in': 120, 'check_out': 120, 'total': 120}\n",
    "        for col, w in widths.items():\n",
    "            self.results_tree.column(col, width=w, anchor='center')\n",
    "\n",
    "        ysb = ttk.Scrollbar(tree_container, orient='vertical', command=self.results_tree.yview)\n",
    "        self.results_tree.configure(yscrollcommand=ysb.set)\n",
    "        ysb.pack(side='right', fill='y')\n",
    "        self.results_tree.pack(side='left', fill='both', expand=True)\n",
    "\n",
    "        self.perform_search()\n",
    "\n",
    "    def perform_search(self):\n",
    "        for item in self.results_tree.get_children():\n",
    "            self.results_tree.delete(item)\n",
    "        query = \"SELECT id, room, guest_name, contact, check_in, check_out, total FROM bookings WHERE guest_name IS NOT NULL AND guest_name != ''\"\n",
    "        params = []\n",
    "        if self.search_name_entry.get():\n",
    "            query += \" AND guest_name LIKE ?\"\n",
    "            params.append(f\"%{self.search_name_entry.get()}%\")\n",
    "        if self.search_room_entry.get():\n",
    "            query += \" AND room LIKE ?\"\n",
    "            params.append(f\"%{self.search_room_entry.get()}%\")\n",
    "        query += \" ORDER BY check_in DESC\"\n",
    "\n",
    "        try:\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute(query, params)\n",
    "                for row in cursor.fetchall():\n",
    "                    self.results_tree.insert('', 'end', values=row)\n",
    "        except sqlite3.Error as e:\n",
    "            messagebox.showerror(\"Search Error\", f\"Database search failed: {e}\")\n",
    "\n",
    "    def check_out_guest(self):\n",
    "        selected = self.results_tree.focus()\n",
    "        if not selected:\n",
    "            messagebox.showwarning(\"Selection Error\", \"Please select a booking to check out.\")\n",
    "            return\n",
    "        booking_id = self.results_tree.item(selected)['values'][0]\n",
    "        if messagebox.askyesno(\"Confirm Check-Out\", \"Are you sure you want to check out this guest? This action cannot be undone.\"):\n",
    "            try:\n",
    "                with sqlite3.connect(self.db_path) as conn:\n",
    "                    conn.execute(\"DELETE FROM bookings WHERE id = ?\", (booking_id,))\n",
    "                messagebox.showinfo(\"Success\", \"Guest checked out successfully.\")\n",
    "                self.perform_search()\n",
    "                self.update_room_dropdown()\n",
    "            except sqlite3.Error as e:\n",
    "                messagebox.showerror(\"Database Error\", f\"Failed to check out guest: {e}\")\n",
    "\n",
    "    def export_to_excel(self):\n",
    "        if not self.results_tree.get_children():\n",
    "            messagebox.showwarning(\"No Data\", \"There is no data to export.\")\n",
    "            return\n",
    "\n",
    "        file_path = filedialog.asksaveasfilename(defaultextension=\".xlsx\", filetypes=[(\"Excel files\", \"*.xlsx\")], title=\"Save Report\")\n",
    "        if not file_path:\n",
    "            return\n",
    "\n",
    "        try:\n",
    "            columns = [self.results_tree.heading(col)['text'] for col in self.results_tree['columns']]\n",
    "            data = [self.results_tree.item(item)['values'] for item in self.results_tree.get_children()]\n",
    "            df = pd.DataFrame(data, columns=columns)\n",
    "\n",
    "            writer = pd.ExcelWriter(file_path, engine='openpyxl')\n",
    "            df.to_excel(writer, index=False, sheet_name='Bookings')\n",
    "\n",
    "            ws = writer.sheets['Bookings']\n",
    "            header_font = Font(bold=True, color=\"FFFFFF\", size=12, name='Arial')\n",
    "            header_fill = PatternFill(start_color=\"1F2B38\", end_color=\"1F2B38\", fill_type=\"solid\")\n",
    "            thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))\n",
    "\n",
    "            for cell in ws[\"1:1\"]:\n",
    "                cell.font = header_font\n",
    "                cell.fill = header_fill\n",
    "                cell.border = thin_border\n",
    "\n",
    "            for column_cells in ws.columns:\n",
    "                length = max(len(str(cell.value)) for cell in column_cells)\n",
    "                ws.column_dimensions[column_cells[0].column_letter].width = length + 4\n",
    "\n",
    "            writer.close()\n",
    "            messagebox.showinfo(\"Success\", f\"Data exported to\\n{file_path}\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Export Error\", f\"Failed to export data: {e}\")\n",
    "\n",
    "    def create_reports_tab(self):\n",
    "        tab = ttk.Frame(self.notebook, style='Outer.TFrame')\n",
    "        self.notebook.add(tab, text=' FINANCIAL REPORTS ')\n",
    "\n",
    "        container = ttk.Frame(tab, style='Outer.TFrame')\n",
    "        container.pack(fill='both', expand=True, padx=30, pady=30)\n",
    "\n",
    "        period_frame = ttk.LabelFrame(container, text=\" Report Period \", style='Gold.TLabelframe')\n",
    "        period_frame.pack(fill='x', padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(period_frame, text=\"From:\", style='Gold.TLabel', font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=10)\n",
    "        self.report_from = ttk.Entry(period_frame, style='Gold.TEntry')\n",
    "        self.report_from.grid(row=0, column=1, padx=5, pady=5)\n",
    "        self.report_from.insert(0, (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))\n",
    "\n",
    "        ttk.Label(period_frame, text=\"To:\", style='Gold.TLabel', font=('Arial', 10, 'bold')).grid(row=0, column=2, padx=10, pady=10)\n",
    "        self.report_to = ttk.Entry(period_frame, style='Gold.TEntry')\n",
    "        self.report_to.grid(row=0, column=3, padx=5, pady=5)\n",
    "        self.report_to.insert(0, datetime.now().strftime('%Y-%m-%d'))\n",
    "\n",
    "        ttk.Button(period_frame, text=\"Generate Report\", command=self.generate_report, style='Gold.TButton').grid(row=0, column=4, padx=20, pady=5)\n",
    "\n",
    "        results_frame = ttk.LabelFrame(container, text=\" Report Summary \", style='Gold.TLabelframe')\n",
    "        results_frame.pack(fill='both', expand=True, padx=5, pady=20)\n",
    "\n",
    "        self.total_revenue_var = tk.StringVar(value=\"ETB 0.00\")\n",
    "        self.occupancy_rate_var = tk.StringVar(value=\"0.00%\")\n",
    "\n",
    "        font_style = ('Arial', 18, 'bold')  # Changed to Arial for better compatibility\n",
    "        ttk.Label(results_frame, text=\"Total Revenue:\", font=font_style, foreground=self.text_color, style='Gold.TLabel').pack(pady=(20, 5))\n",
    "        ttk.Label(results_frame, textvariable=self.total_revenue_var, font=font_style, foreground=self.gold_accent, style='Gold.TLabel').pack()\n",
    "        ttk.Label(results_frame, text=\"Average Occupancy:\", font=font_style, foreground=self.text_color, style='Gold.TLabel').pack(pady=(20, 5))\n",
    "        ttk.Label(results_frame, textvariable=self.occupancy_rate_var, font=font_style, foreground=self.gold_accent, style='Gold.TLabel').pack()\n",
    "\n",
    "    def generate_report(self):\n",
    "        try:\n",
    "            start_date = datetime.strptime(self.report_from.get(), '%Y-%m-%d').date()\n",
    "            end_date = datetime.strptime(self.report_to.get(), '%Y-%m-%d').date()\n",
    "            if end_date <= start_date:\n",
    "                messagebox.showerror(\"Date Error\", \"End date must be after start date.\")\n",
    "                return\n",
    "\n",
    "            with sqlite3.connect(self.db_path) as conn:\n",
    "                cursor = conn.cursor()\n",
    "                cursor.execute(\"SELECT COUNT(*) FROM rooms\")\n",
    "                total_rooms = cursor.fetchone()[0]\n",
    "                cursor.execute(\"SELECT check_in, check_out, total FROM bookings WHERE guest_name IS NOT NULL\")\n",
    "                bookings = cursor.fetchall()\n",
    "\n",
    "            total_revenue = sum(b[2] for b in bookings if start_date <= datetime.strptime(b[0], '%Y-%m-%d').date() < end_date)\n",
    "\n",
    "            report_days = (end_date - start_date).days\n",
    "            occupied_days = 0\n",
    "            for check_in_str, check_out_str, _ in bookings:\n",
    "                booking_start = datetime.strptime(check_in_str, '%Y-%m-%d').date()\n",
    "                booking_end = datetime.strptime(check_out_str, '%Y-%m-%d').date()\n",
    "                overlap_start = max(start_date, booking_start)\n",
    "                overlap_end = min(end_date, booking_end)\n",
    "                if overlap_end > overlap_start:\n",
    "                    occupied_days += (overlap_end - overlap_start).days\n",
    "\n",
    "            occupancy = (occupied_days / (total_rooms * report_days)) * 100 if total_rooms and report_days else 0\n",
    "\n",
    "            self.total_revenue_var.set(f\"ETB {total_revenue:,.2f}\")\n",
    "            self.occupancy_rate_var.set(f\"{occupancy:.2f}%\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Report Error\", f\"An error occurred while generating the report: {e}\")\n",
    "\n",
    "    def create_about_tab(self):\n",
    "        \"\"\"Creates the 'About' tab with developer information.\"\"\"\n",
    "        tab = ttk.Frame(self.notebook, style='Outer.TFrame')\n",
    "        self.notebook.add(tab, text=' ABOUT ')\n",
    "\n",
    "        # Use a main container to allow centering\n",
    "        container = ttk.Frame(tab, style='Outer.TFrame')\n",
    "        container.pack(fill='both', expand=True)\n",
    "\n",
    "        # A frame to hold the actual content, which we can then center\n",
    "        content_frame = ttk.Frame(container, style='Gold.TFrame')\n",
    "        content_frame.place(relx=0.5, rely=0.45, anchor='center')\n",
    "\n",
    "        # Title Label\n",
    "        title_label = ttk.Label(content_frame,\n",
    "                             text=\"About the Developer\",\n",
    "                             font=('Arial', 24, 'bold'),  # Changed to Arial for better compatibility\n",
    "                             foreground=self.gold_accent,\n",
    "                             style='Gold.TLabel')\n",
    "        title_label.pack(pady=(0, 30))\n",
    "\n",
    "        # Info Frame\n",
    "        info_frame = ttk.Frame(content_frame, style='Gold.TFrame')\n",
    "        info_frame.pack()\n",
    "\n",
    "        info_font = ('Arial', 12)\n",
    "        label_font = ('Arial', 12, 'bold')\n",
    "\n",
    "        # Developer Info\n",
    "        ttk.Label(info_frame, text=\"Name:\", font=label_font, style='Gold.TLabel').grid(row=0, column=0, sticky='e', padx=10, pady=10)\n",
    "        ttk.Label(info_frame, text=\"Ararsa Tadesse\", font=info_font, style='Gold.TLabel').grid(row=0, column=1, sticky='w', padx=10, pady=10)\n",
    "\n",
    "        ttk.Label(info_frame, text=\"Contact No:\", font=label_font, style='Gold.TLabel').grid(row=1, column=0, sticky='e', padx=10, pady=10)\n",
    "        ttk.Label(info_frame, text=\"0912688641\", font=info_font, style='Gold.TLabel').grid(row=1, column=1, sticky='w', padx=10, pady=10)\n",
    "\n",
    "        ttk.Label(info_frame, text=\"Email:\", font=label_font, style='Gold.TLabel').grid(row=2, column=0, sticky='e', padx=10, pady=10)\n",
    "        ttk.Label(info_frame, text=\"ararsa1221@gmail.com\", font=info_font, style='Gold.TLabel').grid(row=2, column=1, sticky='w', padx=10, pady=10)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = HotelApp(root)\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
