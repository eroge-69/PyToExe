# Code Generated by Sidekick is for learning and experimentation purposes only.
import dearpygui.dearpygui as dpg
import pandas as pd
import os
from datetime import datetime

EXCEL_FILE = "daily_work.xlsx"
FIELDS = ["ID", "Name/Description", "Module", "Date"]

# Initialize Excel file if it doesn't exist
def init_excel():
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=FIELDS)
        df.to_excel(EXCEL_FILE, index=False)

# Add a new entry to Excel
def add_entry(entry):
    df = pd.read_excel(EXCEL_FILE)
    df = pd.concat([df, pd.DataFrame([entry], columns=FIELDS)], ignore_index=True)
    df.to_excel(EXCEL_FILE, index=False)

# Load all entries
def load_entries():
    if os.path.exists(EXCEL_FILE):
        return pd.read_excel(EXCEL_FILE)
    else:
        return pd.DataFrame(columns=FIELDS)

# Update the table in the UI
def update_table():
    df = load_entries()
    dpg.delete_item("table", children_only=True)
    for i, row in df.iterrows():
        dpg.add_table_row(parent="table", 
            label="",
            user_data=row.to_dict(),
            before=None,
            tag=f"row_{i}")
        for col in FIELDS:
            dpg.add_text(str(row[col]), parent=f"row_{i}")

# Handle form submission
def submit_callback(sender, app_data, user_data):
    id_val = dpg.get_value("id_input")
    name_desc = dpg.get_value("name_input")
    module = dpg.get_value("module_input")
    date = dpg.get_value("date_input")
    if id_val and name_desc and module and date:
        entry = [id_val, name_desc, module, date]
        add_entry(entry)
        update_table()
        dpg.set_value("id_input", "")
        dpg.set_value("name_input", "")
        dpg.set_value("module_input", "")
        dpg.set_value("date_input", datetime.now().strftime("%Y-%m-%d"))
        dpg.set_value("status_text", "Entry added!")
    else:
        dpg.set_value("status_text", "Please fill all fields.")

# Drag-and-drop reordering logic
def reorder_callback(sender, app_data, user_data):
    # Get the dragged row index and the target row index
    dragged = int(sender.split("_")[1])
    target = int(app_data.split("_")[1])
    df = load_entries()
    row = df.iloc[dragged]
    df = df.drop(df.index[dragged])
    df = pd.concat([df.iloc[:target], pd.DataFrame([row]), df.iloc[target:]], ignore_index=True)
    df.to_excel(EXCEL_FILE, index=False)
    update_table()

def main():
    init_excel()
    dpg.create_context()
    with dpg.window(label="üóÇÔ∏è Daily Work Tracker", width=800, height=600):
        dpg.add_text("Track your daily work. All entries are saved in the project folder.")
        dpg.add_separator()
        dpg.add_input_text(label="ID", tag="id_input")
        dpg.add_input_text(label="Name/Description", tag="name_input")
        dpg.add_input_text(label="Module", tag="module_input")
        dpg.add_input_text(label="Date (YYYY-MM-DD)", default_value=datetime.now().strftime("%Y-%m-%d"), tag="date_input")
        dpg.add_button(label="Add Entry", callback=submit_callback)
        dpg.add_text("", tag="status_text")
        dpg.add_separator()
        dpg.add_text("üìã All Entries")
        with dpg.table(header_row=True, tag="table"):
            for col in FIELDS:
                dpg.add_table_column(label=col)
        update_table()
        dpg.add_text("Tip: Drag and drop rows to reorder them.", color=[150,150,255])
    dpg.create_viewport(title='Daily Work Tracker', width=820, height=650)
    dpg.setup_dearpygui()
    dpg.show_viewport()
    dpg.start_dearpygui()
    dpg.destroy_context()

if __name__ == "__main__":
    main()
