import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import webbrowser
import json
import os
from datetime import datetime

class VortexBrowser:
    def __init__(self, root):
        self.root = root
        self.search_engines = {
            "Google": "https://www.google.com/search?q={}",
            "DuckDuckGo": "https://duckduckgo.com/?q={}",
            "Bing": "https://www.bing.com/search?q={}",
            "Yandex": "https://yandex.ru/search/?text={}",
            "YouTube": "https://www.youtube.com/results?search_query={}",
            "GitHub": "https://github.com/search?q={}"
        }
        self.current_engine = "Google"
        self.config_dir = "VortexBrowserData"
        self.history_file = os.path.join(self.config_dir, "history.json")
        self.settings_file = os.path.join(self.config_dir, "settings.json")
        
        self.create_config_dir()
        self.load_settings()
        
        self.setup_window()
        self.create_menu()
        self.create_toolbar()
        self.create_main_interface()
        self.create_history_panel()
        self.create_statusbar()
        
        self.load_history()

    def create_config_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)

    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.root.title("Vortex Browser")
        self.root.geometry(self.settings.get("window_size", "1000x800"))
        self.root.minsize(800, 600)
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        try:
            self.root.iconbitmap(default=os.path.join(self.config_dir, 'icon.ico'))
        except:
            pass
        
        # –°—Ç–∏–ª—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TButton', font=('Arial', 10), padding=6)
        style.configure('TEntry', font=('Arial', 12), padding=5)
        style.configure('TFrame', background='#f5f5f5')
        style.configure('TLabel', background='#f5f5f5')
        style.configure('History.TFrame', background='#ffffff')
        style.configure('Status.TLabel', background='#e0e0e0', font=('Arial', 9))

    def create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="–ù–æ–≤–æ–µ –æ–∫–Ω–æ", command=self.new_window)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        
        # –ú–µ–Ω—é –ü—Ä–∞–≤–∫–∞
        edit_menu = tk.Menu(menubar, tearoff=0)
        edit_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings)
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        
        # –ú–µ–Ω—é –°–ø—Ä–∞–≤–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        
        self.root.config(menu=menubar)

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill='x', padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            ("–î–æ–º–æ–π", self.go_home, "üè†"),
            ("–ù–∞–∑–∞–¥", self.go_back, "‚¨Ö"),
            ("–í–ø–µ—Ä–µ–¥", self.go_forward, "‚û°"),
            ("–û–±–Ω–æ–≤–∏—Ç—å", self.refresh_search, "üîÑ")
        ]
        
        for text, command, emoji in nav_buttons:
            btn = ttk.Button(
                toolbar,
                text=f"{emoji} {text}",
                command=command
            )
            btn.pack(side='left', padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(toolbar, orient='vertical').pack(side='left', padx=5, fill='y')
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_history_btn = ttk.Button(
            toolbar,
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=self.clear_history
        )
        clear_history_btn.pack(side='right', padx=2)

    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.root)
        main_frame.pack(expand=True, fill='both', padx=20, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill='x', pady=(0, 20))
        
        title_label = ttk.Label(
            title_frame,
            text="Vortex Browser",
            font=("Arial", 24, "bold"),
            foreground="#333333"
        )
        title_label.pack(side='left')
        
        version_label = ttk.Label(
            title_frame,
            text="v1.0",
            font=("Arial", 10),
            foreground="#666666"
        )
        version_label.pack(side='right')

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_frame = ttk.Frame(main_frame)
        search_frame.pack(fill='x', pady=10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        self.search_entry = ttk.Entry(
            search_frame,
            width=50,
            font=("Arial", 12)
        )
        self.search_entry.pack(side='left', expand=True, fill='x', padx=(0, 10))
        self.set_placeholder()
        self.search_entry.bind("<FocusIn>", self.clear_placeholder)
        self.search_entry.bind("<FocusOut>", self.set_placeholder)
        self.search_entry.focus()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter
        self.search_entry.bind('<Return>', lambda event: self.perform_search())

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_btn = ttk.Button(
            search_frame,
            text="üîç –ü–æ–∏—Å–∫",
            command=self.perform_search
        )
        search_btn.pack(side='left')

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
        engine_frame = ttk.Frame(main_frame)
        engine_frame.pack(fill='x', pady=10)

        ttk.Label(
            engine_frame,
            text="–ü–æ–∏—Å–∫–æ–≤–∏–∫:",
            font=("Arial", 10)
        ).pack(side='left')

        # –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.engine_var = tk.StringVar(value=self.current_engine)
        engine_menu = ttk.OptionMenu(
            engine_frame,
            self.engine_var,
            self.current_engine,
            *self.search_engines.keys()
        )
        engine_menu.pack(side='left', padx=10)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = ttk.Button(
            engine_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_search
        )
        clear_btn.pack(side='left')

    def create_history_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏"""
        history_frame = ttk.Frame(self.root, style='History.TFrame')
        history_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π
        header_frame = ttk.Frame(history_frame)
        header_frame.pack(fill='x')
        
        ttk.Label(
            header_frame,
            text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:",
            font=("Arial", 10)
        ).pack(side='left')
        
        ttk.Button(
            header_frame,
            text="–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏",
            command=self.export_history
        ).pack(side='right', padx=5)
        
        ttk.Button(
            header_frame,
            text="–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏",
            command=self.import_history
        ).pack(side='right', padx=5)
        
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_listbox = tk.Listbox(
            history_frame,
            height=12,
            font=("Arial", 10),
            selectbackground="#e0e0e0",
            bg="white"
        )
        self.history_listbox.pack(fill='both', expand=True, pady=(5, 0))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        scrollbar = ttk.Scrollbar(self.history_listbox)
        scrollbar.pack(side='right', fill='y')
        self.history_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.history_listbox.yview)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_menu = tk.Menu(self.root, tearoff=0)
        self.history_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫", command=self.repeat_selected_search)
        self.history_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", command=self.delete_history_item)
        self.history_menu.add_separator()
        self.history_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=self.clear_history)
        
        self.history_listbox.bind("<Double-Button-1>", self.repeat_search)
        self.history_listbox.bind("<Button-3>", self.show_history_menu)

    def create_statusbar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–±–∞—Ä"""
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        statusbar = ttk.Frame(self.root, style='Status.TFrame')
        statusbar.pack(fill='x', padx=0, pady=0)
        
        ttk.Label(
            statusbar,
            textvariable=self.status_var,
            style='Status.TLabel'
        ).pack(side='left', padx=10)
        
        ttk.Label(
            statusbar,
            text=f"–ü–æ–∏—Å–∫–æ–≤–∏–∫: {self.current_engine}",
            style='Status.TLabel'
        ).pack(side='right', padx=10)

    def perform_search(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫"""
        query = self.search_entry.get().strip()
        if query and query != "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...":
            engine = self.engine_var.get()
            self.current_engine = engine
            url = self.search_engines[engine].format(query)
            self.open_url(url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            history_item = f"{timestamp} | {engine}: {query}"
            
            if self.history_listbox.size() == 0 or self.history_listbox.get(0) != history_item:
                self.history_listbox.insert(0, history_item)
                self.save_history()
                
            self.status_var.set(f"–í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫: '{query}' –≤ {engine}")
        else:
            self.status_var.set("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!")
            self.search_entry.focus()

    def open_url(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        webbrowser.open(url)

    def clear_search(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        self.search_entry.delete(0, tk.END)
        self.set_placeholder()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É")

    def clear_placeholder(self, event=None):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ"""
        if self.search_entry.get() == "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...":
            self.search_entry.delete(0, tk.END)
            self.search_entry.config(foreground="black")

    def set_placeholder(self, event=None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞"""
        if not self.search_entry.get():
            self.search_entry.insert(0, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            self.search_entry.config(foreground="gray")

    def go_home(self):
        """–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        self.clear_search()
        self.engine_var.set("Google")
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É")

    def go_back(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥"""
        self.status_var.set("–§—É–Ω–∫—Ü–∏—è '–ù–∞–∑–∞–¥' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def go_forward(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥"""
        self.status_var.set("–§—É–Ω–∫—Ü–∏—è '–í–ø–µ—Ä–µ–¥' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def refresh_search(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫"""
        if self.search_entry.get() and self.search_entry.get() != "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...":
            self.perform_search()

    def repeat_search(self, event):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.repeat_selected_search()

    def repeat_selected_search(self):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selection = self.history_listbox.curselection()
        if selection:
            selected_item = self.history_listbox.get(selection[0])
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∏ –∑–∞–ø—Ä–æ—Å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            parts = selected_item.split(" | ")[1].split(": ", 1)
            if len(parts) == 2:
                engine, query = parts
                if engine in self.search_engines:
                    self.engine_var.set(engine)
                    self.search_entry.delete(0, tk.END)
                    self.search_entry.insert(0, query)
                    self.search_entry.config(foreground="black")
                    self.perform_search()

    def show_history_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            self.history_listbox.selection_clear(0, tk.END)
            self.history_listbox.selection_set(self.history_listbox.nearest(event.y))
            self.history_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.history_menu.grab_release()

    def delete_history_item(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏"""
        selection = self.history_listbox.curselection()
        if selection:
            self.history_listbox.delete(selection[0])
            self.save_history()

    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"""
        if messagebox.askyesno(
            "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞?",
            parent=self.root
        ):
            self.history_listbox.delete(0, tk.END)
            self.save_history()

    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        file_path = tk.filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        )
        if file_path:
            history = [self.history_listbox.get(i) for i in range(self.history_listbox.size())]
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(history, f, ensure_ascii=False, indent=2)
                self.status_var.set(f"–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

    def import_history(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = tk.filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                
                if isinstance(history, list):
                    self.history_listbox.delete(0, tk.END)
                    for item in history:
                        self.history_listbox.insert(tk.END, item)
                    self.save_history()
                    self.status_var.set(f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(history)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_win = tk.Toplevel(self.root)
        settings_win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_win.geometry("400x300")
        
        ttk.Label(
            settings_win,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Vortex Browser",
            font=("Arial", 14)
        ).pack(pady=10)
        
        # –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ttk.Label(
            settings_win,
            text="–ü–æ–∏—Å–∫–æ–≤–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Arial", 10)
        ).pack(anchor='w', padx=20, pady=(10, 0))
        
        default_engine = ttk.Combobox(
            settings_win,
            values=list(self.search_engines.keys()),
            font=("Arial", 10)
        )
        default_engine.set(self.settings.get("default_engine", "Google"))
        default_engine.pack(fill='x', padx=20, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        btn_frame = ttk.Frame(settings_win)
        btn_frame.pack(fill='x', padx=20, pady=20)
        
        ttk.Button(
            btn_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=lambda: self.save_settings({
                "default_engine": default_engine.get(),
                "window_size": self.settings.get("window_size", "1000x800")
            }, settings_win)
        ).pack(side='right', padx=5)
        
        ttk.Button(
            btn_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=settings_win.destroy
        ).pack(side='right', padx=5)

    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_win = tk.Toplevel(self.root)
        about_win.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ Vortex Browser")
        about_win.geometry("400x300")
        
        ttk.Label(
            about_win,
            text="Vortex Browser",
            font=("Arial", 18, "bold")
        ).pack(pady=10)
        
        ttk.Label(
            about_win,
            text="–í–µ—Ä—Å–∏—è 1.0",
            font=("Arial", 12)
        ).pack()
        
        ttk.Label(
            about_win,
            text="\n–ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é\n"
                 "–ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö\n",
            font=("Arial", 10)
        ).pack()
        
        ttk.Label(
            about_win,
            text="¬© 2023 Vortex Browser Team",
            font=("Arial", 9)
        ).pack(side='bottom', pady=10)

    def new_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        new_root = tk.Toplevel(self.root)
        app = VortexBrowser(new_root)

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        self.settings = {
            "default_engine": "Google",
            "window_size": "1000x800"
        }
        
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r') as f:
                    self.settings.update(json.load(f))
                self.current_engine = self.settings["default_engine"]
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_settings(self, settings, window):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        self.settings.update(settings)
        try:
            with open(self.settings_file, 'w') as f:
                json.dump(self.settings, f, indent=2)
            
            self.current_engine = settings["default_engine"]
            self.engine_var.set(self.current_engine)
            window.destroy()
            self.status_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.history_file):
            try:
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    for item in reversed(history):
                        self.history_listbox.insert(0, item)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        history = [self.history_listbox.get(i) for i in range(self.history_listbox.size())]
        try:
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = VortexBrowser(root)
    root.mainloop()