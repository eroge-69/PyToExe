# -*- coding: utf-8 -*-
"""Colab'e hoş geldiniz.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Aylık sıra için sözlük
ay_map = {'Oca': 1, 'Şub': 2, 'Mar': 3, 'Nis': 4, 'May': 5, 'Haz': 6,
          'Tem': 7, 'Ağu': 8, 'Eyl': 9, 'Eki': 10, 'Kas': 11, 'Ara': 12}

# Veri listesi (Tarih, İletkenlik)
raw_data = '''
Oca.13 361
Oca.14 368
Oca.15 376
Oca.16 331
Oca.17 364
Şub.13 373
Şub.14 376
Şub.15 375
Şub.16 337
Şub.17 380
Mar.13 375
Mar.14 380
Mar.15 369
Mar.16 346
Mar.17 396
Nis.13 359
Nis.14 310
Nis.15 361
Nis.16 343
Nis.17 403
May.13 347
May.14 359
May.15 363
May.16 359
May.17 383
Haz.13 323
Haz.14 356
Haz.15 341
Haz.16 338
Haz.17 372
Tem.13 315
Tem.14 355
Tem.15 321
Tem.16 328
Tem.17 349
Ağu.13 315
Ağu.14 363
Ağu.15 306
Ağu.16 316
Ağu.17 287
Eyl.13 326
Eyl.14 347
Eyl.15 286
Eyl.16 314
Eyl.17 284
Eki.13 326
Eki.14 311
Eki.15 291
Eki.16 318
Eki.17 303
Kas.13 339
Kas.14 334
Kas.15 311
Kas.16 317
Kas.17 333
Ara.13 363
Ara.14 363
Ara.15 335
Ara.16 354
Ara.17 331
'''

# Satırları işleyerek DataFrame'e çevirme
lines = raw_data.strip().split('\n')
data = []
for line in lines:
    tarih, deger = line.split()
    ay, yil = tarih.split('.')
    data.append({'Yıl': int('20' + yil), 'Ay': ay_map[ay], 'İletkenlik': int(deger)})

df = pd.DataFrame(data)

# Özellikler ve hedef
X = df[['Yıl', 'Ay']]
y = df['İletkenlik']

# Model oluştur
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Modeli eğit
model.fit(X, y)

# 2018 yılına ait 12 ay verisini oluştur
aylar_2018 = pd.DataFrame({'Yıl': [2018]*12, 'Ay': list(range(1, 13))})

# Tahmin yap
tahminler_2018 = model.predict(aylar_2018)

# Tahmin sonuçlarını DataFrame olarak sakla
tahmin_df = aylar_2018.copy()
tahmin_df['Tahmin_İletkenlik'] = tahminler_2018.round(2)

print(tahmin_df)



# Grafik ile göster
plt.figure(figsize=(10,6))
plt.plot(df['Yıl'] + df['Ay']/12, df['İletkenlik'], label='Geçmiş Veriler (2013–2017)', marker='o')
plt.plot(tahmin_df['Yıl'] + tahmin_df['Ay']/12, tahmin_df['Tahmin_İletkenlik'], label='2018 Tahmin', marker='s', color='red')
plt.xlabel('Yıl')
plt.ylabel('İletkenlik')
plt.title('Baraj Suyu Aylık İletkenlik Değerleri ve 2018 Tahmini')
plt.legend()
plt.grid(True)
plt.show()

# Bar chart – 2018 tahminleri
plt.figure(figsize=(10, 5))
plt.bar(tahmin_df['Ay'], tahmin_df['Tahmin_İletkenlik'], color='orange')
plt.xticks(ticks=range(1,13), labels=['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'])
plt.title('2018 Aylık İletkenlik Tahminleri (Random Forest)')
plt.xlabel('Aylar')
plt.ylabel('Tahmini İletkenlik')
plt.grid(True, axis='y')
plt.tight_layout()
plt.show()

# Tüm veri için scatter + tahmin noktaları
plt.figure(figsize=(10, 6))
plt.scatter(df['Yıl'] + df['Ay']/12, df['İletkenlik'], label='Gerçek Veriler', color='blue')
plt.scatter(tahmin_df['Yıl'] + tahmin_df['Ay']/12, tahmin_df['Tahmin_İletkenlik'], label='2018 Tahminler', color='red')
plt.title('Gerçek Veriler ve Random Forest 2018 Tahminleri')
plt.xlabel('Yıl')
plt.ylabel('İletkenlik')
plt.legend()
plt.grid(True)
plt.show()

# Özelliklerin önem dereceleri
importances = model.feature_importances_
feature_names = X.columns

plt.figure(figsize=(6,4))
plt.barh(feature_names, importances, color='green')
plt.xlabel('Önemi')
plt.title('Özellik Önem Dereceleri (Random Forest)')
plt.grid(True, axis='x')
plt.tight_layout()
plt.show()

# Aylık ortalama (2013–2017) hesapla
ortalama_df = df.groupby('Ay')['İletkenlik'].mean().reset_index()
ortalama_df.rename(columns={'İletkenlik': '2013_2017_Ortalama'}, inplace=True)

# Tahminle birleştir
karşılaştırma = pd.merge(ortalama_df, tahmin_df[['Ay', 'Tahmin_İletkenlik']], on='Ay')

# Çizgi grafiği
plt.figure(figsize=(10,5))
plt.plot(karşılaştırma['Ay'], karşılaştırma['2013_2017_Ortalama'], label='2013–2017 Ortalama', marker='o')
plt.plot(karşılaştırma['Ay'], karşılaştırma['Tahmin_İletkenlik'], label='2018 Tahmini', marker='s')
plt.xticks(ticks=range(1,13), labels=['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'])
plt.xlabel('Ay')
plt.ylabel('İletkenlik')
plt.title('2018 Tahmini vs 2013–2017 Aylık Ortalamalar')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Her ay için 2013–2017 yıllarından kutu grafiği
box_data = df.copy()
plt.figure(figsize=(10,6))
box = box_data.boxplot(column='İletkenlik', by='Ay', grid=True, patch_artist=True)

# 2018 tahmin noktalarını çiz
plt.plot(tahmin_df['Ay'], tahmin_df['Tahmin_İletkenlik'], 'ro', label='2018 Tahmin')
plt.title('2013–2017 Aylık Dağılım (Boxplot) ve 2018 Tahmini')
plt.suptitle('')
plt.xlabel('Ay')
plt.ylabel('İletkenlik')
plt.legend()
plt.xticks(ticks=range(1,13), labels=['Oca','Şub','Mar','Nis','May','Haz','Tem','Ağu','Eyl','Eki','Kas','Ara'])
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 2018 verileri (Tarih, Gerçek, Tahmin)
data_2018 = {
    'Tarih': ['Oca.18', 'Şub.18', 'Mar.18', 'Nis.18', 'May.18', 'Haz.18', 'Tem.18', 'Ağu.18', 'Eyl.18', 'Eki.18', 'Kas.18', 'Ara.18'],
    'Gerçek': [366, 374, 379, 380, 374, 309, 321, 357, 313, 309, 306, 333],
    'Tahmin': [369.57, 376.99, 390.21, 395.44, 385.05, 366.34, 340.86, 297.95, 289.34, 300.86, 324.24, 336.53]
}

df_2018 = pd.DataFrame(data_2018)

# Scatter plot çizimi
plt.figure(figsize=(10,6))
plt.plot(df_2018['Tarih'], df_2018['Gerçek'], marker='o', label='Gerçek Değer', color='blue')
plt.plot(df_2018['Tarih'], df_2018['Tahmin'], marker='s', label='Tahmin Edilen Değer', color='red')
plt.title('2018 Ay Bazında Gerçek ve Tahmini İletkenlik Değerleri')
plt.xlabel('Ay')
plt.ylabel('İletkenlik')
plt.xticks(rotation=45)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Gerçek vs Tahmin scatter (çakışma grafiği)
plt.figure(figsize=(6,6))
plt.scatter(df_2018['Tahmin'], df_2018['Gerçek'], color='purple', label='Gerçek vs Tahmin', s=80)
plt.plot([min(df_2018['Tahmin']), max(df_2018['Tahmin'])], [min(df_2018['Tahmin']), max(df_2018['Tahmin'])], 'k--', label='y = x (mükemmel tahmin)')
plt.xlabel('Tahmin Edilen İletkenlik')
plt.ylabel('Gerçek İletkenlik')
plt.title('2018 – Gerçek vs Tahmin (Random Forest)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()