import base64

code = """# -*- coding: utf-8 -*-
import os
import sys
import shutil
import time
import logging
import platform
import subprocess
import ctypes

# --- Yapılandırma ---
# Windows hosts dosyasının yolu
HOSTS_PATH = r"C:\Windows\System32\drivers\etc\hosts"
# Hosts dosyasının yedeğinin kaydedileceği yol
HOSTS_BACKUP_PATH = r"C:\Windows\System32\drivers\drivers\etc\hosts_backup_original"
# Engellenecek siteler için yönlendirilecek IP adresi (localhost)
REDIRECT_IP = "127.0.0.1"
# Script'in loglarını yazacağı dosya
LOG_FILE = "hosts_manager.log"
# Hosts dosyasının ne sıklıkla kontrol edileceği (saniye cinsinden)
CHECK_INTERVAL_SECONDS = 30

# İzin verilen web siteleri (temel alan adları ve Discord için gerekli olanlar)
# Unutmayın: Discord gibi hizmetler birden fazla alan adı kullanabilir.
# Bu liste kapsamlı olmayabilir ve Discord'un gelecekteki güncellemeleriyle değişebilir.
ALLOWED_DOMAINS = [
    "www.linuxmint.com",
    "linuxmint.com",
    "kozyatagi.mirror.guzel.net.tr", # Yeni eklenen Linux Mint indirme yansıması
    "mirror.ekiphost.com",          # Yeni eklenen Linux Mint indirme yansıması
    "mirror.verinomi.com",          # Yeni eklenen Linux Mint indirme yansıması
    "etcher.balena.io",
    "balena.io",
    "discord.com",
    "www.discord.com",
    "discordapp.com",
    "www.discordapp.com",
    "cdn.discordapp.com",
    "media.discordapp.net",
    "images.discordapp.net",
    "gateway.discord.gg",
    "status.discordapp.com",
    "discord.gg",
    "discord.media",
    "discord.net",
    "discordapp.net",
    "dl.discordapp.net",
    "static.discordapp.net",
    "voice.discord.com",
    "events.discord.com",
    "bugreporter.discord.com",
    "feedback.discord.com",
    "support.discord.com",
    "blog.discord.com",
    "developers.discord.com",
    "api.discord.com",
    "sentry.io", # Discord'un hata raporlama için kullandığı bir servis olabilir
    "www.sentry.io",
    "sentry-cdn.sentry.io",
    "sentry-cdn.sentry.io",
    # Ek olarak, bazı CDN'ler veya API'ler de gerekebilir.
    # Bu liste, Discord'un sorunsuz çalışması için zamanla güncellenmelidir.
]

# Engellenecek yaygın web siteleri ve hizmetler (örnekler)
# Bu liste, "diğer tüm siteler" kavramını hosts dosyası üzerinden kapsamlı bir şekilde engellemek için
# genişletilebilir. hosts dosyası, tam bir güvenlik duvarı değildir ve her siteyi engellemek için
# çok uzun bir liste gerektirir.
BLOCKED_DOMAINS = [
    "google.com", "www.google.com", "youtube.com", "www.youtube.com",
    "facebook.com", "www.facebook.com", "twitter.com", "www.twitter.com",
    "instagram.com", "www.instagram.com", "bing.com", "www.bing.com",
    "microsoft.com", "www.microsoft.com", "update.microsoft.com", # Windows güncellemelerini de engelleyebilir
    "windowsupdate.com", "www.windowsupdate.com",
    "apple.com", "www.apple.com", "amazon.com", "www.amazon.com",
    "netflix.com", "www.netflix.com", "wikipedia.org", "www.wikipedia.org",
    "reddit.com", "www.reddit.com", "linkedin.com", "www.linkedin.com",
    "yahoo.com", "www.yahoo.com", "outlook.com", "www.outlook.com",
    "live.com", "www.live.com", "msn.com", "www.msn.com",
    "baidu.com", "www.baidu.com", "qq.com", "www.qq.com",
    "taobao.com", "www.taobao.com", "vk.com", "www.vk.com",
    "pinterest.com", "www.pinterest.com", "ebay.com", "www.ebay.com",
    "adobe.com", "www.adobe.com", "steamcommunity.com", "www.steamcommunity.com",
    "twitch.tv", "www.twitch.tv", "spotify.com", "www.spotify.com",
    "telegram.org", "www.telegram.org", "whatsapp.com", "www.whatsapp.com",
    "zoom.us", "www.zoom.us", "skype.com", "www.skype.com",
    "teams.microsoft.com", "www.teams.microsoft.com",
    "github.com", "www.github.com", "gitlab.com", "www.gitlab.com",
    "stackoverflow.com", "www.stackoverflow.com",
    # Daha fazla site eklemek istersen buraya ekleyebilirsin.
]

# --- Loglama Yapılandırması ---
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

def is_admin():
    """
    Script'in yönetici yetkileriyle çalışıp çalışmadığını kontrol eder.
    Windows'a özgüdür.
    """
    try:
        return os.getuid() == 0 # Linux/macOS için
    except AttributeError:
        # Windows için
        return ctypes.windll.shell32.IsUserAnAdmin()

def run_as_admin():
    """
    Script'i yönetici yetkileriyle yeniden başlatmaya çalışır.
    Windows'a özgüdür.
    """
    if platform.system() == "Windows":
        script = os.path.abspath(sys.argv[0])
        params = ' '.join([script] + sys.argv[1:])
        try:
            # UAC istemini tetikler
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, params, None, 1)
            logging.info("Script yönetici yetkileriyle yeniden başlatılıyor.")
            sys.exit(0) # Mevcut script'i kapat
        except Exception as e:
            logging.error(f"Yönetici yetkileriyle yeniden başlatma hatası: {e}")
            print(f"Hata: Yönetici yetkileriyle yeniden başlatılamadı. Lütfen script'i yönetici olarak çalıştırın.")
            input("Devam etmek için Enter'a basın...")
            sys.exit(1)
    else:
        logging.warning("Yönetici yetkisi kontrolü ve yeniden başlatma sadece Windows'ta desteklenir.")
        print("Bu script'i çalıştırmak için yönetici yetkilerine ihtiyacınız var.")
        input("Devam etmek için Enter'a basın...")
        sys.exit(1)

def backup_hosts_file():
    """
    Mevcut hosts dosyasının yedeğini alır.
    """
    if not os.path.exists(HOSTS_PATH):
        logging.error(f"Hosts dosyası bulunamadı: {HOSTS_PATH}")
        print(f"Hata: Hosts dosyası bulunamadı: {HOSTS_PATH}")
        return False

    if not os.path.exists(HOSTS_BACKUP_PATH):
        try:
            shutil.copyfile(HOSTS_PATH, HOSTS_BACKUP_PATH)
            logging.info(f"Hosts dosyası yedeği alındı: {HOSTS_BACKUP_PATH}")
            print(f"Hosts dosyası yedeği alındı: {HOSTS_BACKUP_PATH}")
            return True
        except Exception as e:
            logging.error(f"Hosts dosyası yedeği alınamadı: {e}")
            print(f"Hata: Hosts dosyası yedeği alınamadı: {e}")
            return False
    else:
        logging.info("Hosts dosyası yedeği zaten mevcut.")
        print("Hosts dosyası yedeği zaten mevcut.")
        return True

def restore_hosts_file():
    """
    Hosts dosyasını yedekten geri yükler.
    """
    if os.path.exists(HOSTS_BACKUP_PATH):
        try:
            shutil.copyfile(HOSTS_BACKUP_PATH, HOSTS_PATH)
            logging.info("Hosts dosyası yedekten geri yüklendi.")
            print("Hosts dosyası yedekten geri yüklendi.")
            return True
        except Exception as e:
            logging.error(f"Hosts dosyası yedekten geri yüklenirken hata oluştu: {e}")
            print(f"Hata: Hosts dosyası yedekten geri yüklenirken hata oluştu: {e}")
            return False
    else:
        logging.warning("Geri yüklenecek hosts dosyası yedeği bulunamadı.")
        print("Uyarı: Geri yüklenecek hosts dosyası yedeği bulunamadı.")
        return False

def flush_dns_cache():
    """
    DNS önbelleğini temizler. Hosts dosyası değişikliklerinin hemen etkili olması için gereklidir.
    """
    if platform.system() == "Windows":
        try:
            subprocess.run(["ipconfig", "/flushdns"], check=True, capture_output=True)
            logging.info("DNS önbelleği temizlendi.")
        except subprocess.CalledProcessError as e:
            logging.error(f"DNS önbelleği temizlenirken hata oluştu: {e.stderr.decode()}")
        except FileNotFoundError:
            logging.error("ipconfig komutu bulunamadı. DNS önbelleği temizlenemedi.")
    else:
        logging.warning("DNS önbelleği temizleme sadece Windows'ta desteklenir.")

def apply_hosts_rules():
    """
    Hosts dosyasını okur, izin verilen ve engellenen siteleri ekler.
    """
    logging.info("Hosts kuralları uygulanıyor...")
    try:
        with open(HOSTS_PATH, "r", encoding="utf-8") as f:
            lines = f.readlines()

        # Mevcut script tarafından eklenmiş önceki engelleme/izin verme girdilerini temizle
        # Bu, her çalıştığında yinelenen girdileri önler.
        cleaned_lines = []
        for line in lines:
            # Kendi eklediğimiz yorum satırlarını veya engelleme/izin verme girdilerini filtrele
            if "# HOSTS_MANAGER_START" in line or "# HOSTS_MANAGER_END" in line:
                continue
            is_our_entry = False
            for domain in ALLOWED_DOMAINS + BLOCKED_DOMAINS:
                if f"{REDIRECT_IP} {domain}" in line or f"127.0.0.1 {domain}" in line:
                    is_our_entry = True
                    break
            if not is_our_entry:
                cleaned_lines.append(line)

        # Yeni hosts girdilerini oluştur
        new_entries = []
        new_entries.append("\n# HOSTS_MANAGER_START - Bu satırın altındaki girdiler script tarafından yönetilir.\n")

        # İzin verilen siteler (IP adresine yönlendirilmez, normal DNS çözümü yapılır)
        # Hosts dosyası, sadece engellemek veya belirli bir IP'ye yönlendirmek için kullanılır.
        # İzin vermek için hosts dosyasına özel bir girdi eklemeye gerek yoktur,
        # çünkü varsayılan olarak DNS üzerinden çözümlenirler.
        # Ancak, engellenen siteler listesinde olmadıklarından emin olmak önemlidir.
        # Bu kısım, sadece bilgilendirme amaçlıdır ve hosts dosyasına doğrudan ekleme yapmaz.
        # Engellenen sitelerden birinin ALLOWED_DOMAINS içinde olmaması sağlanmalıdır.
        for domain in ALLOWED_DOMAINS:
            # Eğer bir domain hem izin verilen hem de engellenenler listesindeyse, izin verilen olarak kabul edilir.
            # Bu durumun olmaması için listeler dikkatlice yönetilmelidir.
            if domain in BLOCKED_DOMAINS:
                logging.warning(f"'{domain}' hem izin verilen hem de engellenenler listesinde. İzin verilen olarak ele alınacak.")
                # Bu durumda, engellenenler listesinden çıkarılması gerekir.
                # Ancak bu script içinde dinamik olarak BLOCKED_DOMAINS'i değiştirmek yerine,
                # listelerin manuel olarak çakışmayacak şekilde düzenlenmesi daha iyidir.

            # Hosts dosyasına izin verilen siteler için bir girdi eklemeye gerek yoktur,
            # çünkü varsayılan olarak DNS üzerinden çözümlenirler.
            # Bu satır sadece bir açıklama olarak eklenebilir.
            # new_entries.append(f"# {domain} - İzin verilen site\n")
            pass # İzin verilenler için hosts dosyasına özel bir girdi eklemiyoruz.

        # Engellenecek siteler
        for domain in BLOCKED_DOMAINS:
            # İzin verilenler listesinde olan bir domain'i engelleme
            if domain not in ALLOWED_DOMAINS:
                new_entries.append(f"{REDIRECT_IP} {domain}\n")
                new_entries.append(f"{REDIRECT_IP} www.{domain}\n") # Hem ana alan adını hem de www'yi engelle
            else:
                logging.debug(f"'{domain}' izin verilenler listesinde olduğu için engellenmedi.")

        new_entries.append("# HOSTS_MANAGER_END - Bu satırın üzerindeki girdiler script tarafından yönetilir.\n")

        # Hosts dosyasını yeni içerikle yaz
        with open(HOSTS_PATH, "w", encoding="utf-8") as f:
            f.writelines(cleaned_lines + new_entries)

        logging.info("Hosts kuralları başarıyla uygulandı.")
        flush_dns_cache()
        return True
    except PermissionError:
        logging.error("Hosts dosyasına yazma izni yok. Lütfen script'i yönetici olarak çalıştırın.")
        print("Hata: Hosts dosyasına yazma izni yok. Lütfen script'i yönetici olarak çalıştırın.")
        return False
    except Exception as e:
        logging.error(f"Hosts kuralları uygulanırken beklenmeyen bir hata oluştu: {e}")
        print(f"Hata: Hosts kuralları uygulanırken beklenmeyen bir hata oluştu: {e}")
        return False

def main():
    """
    Ana script döngüsü.
    """
    print("Hosts Dosyası Yönetici Scripti Başlatılıyor...")
    logging.info("Hosts Dosyası Yönetici Scripti Başlatılıyor.")

    if not is_admin():
        print("Script yönetici yetkileriyle çalışmıyor. Yeniden başlatmaya çalışılıyor...")
        logging.warning("Script yönetici yetkileriyle çalışmıyor. Yeniden başlatmaya çalışılıyor.")
        run_as_admin() # Bu fonksiyon sys.exit(0) ile çıkış yapabilir.
        # Eğer buraya gelirse, yeniden başlatma başarısız oldu demektir.
        sys.exit("Yönetici yetkileri alınamadı. Lütfen script'i yönetici olarak çalıştırın.")

    print("Yönetici yetkileri doğrulandı.")
    logging.info("Yönetici yetkileri doğrulandı.")

    if not backup_hosts_file():
        print("Hosts dosyası yedeği alınamadı. Script sonlandırılıyor.")
        logging.critical("Hosts dosyası yedeği alınamadı. Script sonlandırılıyor.")
        sys.exit(1)

    print(f"Script çalışıyor. Hosts dosyası her {CHECK_INTERVAL_SECONDS} saniyede bir kontrol edilecek.")
    print("Script'i durdurmak için Ctrl+C tuşlarına basabilirsiniz.")
    logging.info("Script ana döngüye giriyor.")

    try:
        while True:
            apply_hosts_rules()
            time.sleep(CHECK_INTERVAL_SECONDS)
    except KeyboardInterrupt:
        logging.info("Kullanıcı tarafından Ctrl+C ile script sonlandırma isteği alındı.")
        print("\nScript sonlandırılıyor...")
        # İsteğe bağlı: Script kapanırken hosts dosyasını orijinal haline döndürmek istersen
        # restore_hosts_file()
        print("Script başarıyla sonlandırıldı.")
        logging.info("Script başarıyla sonlandırıldı.")
    except Exception as e:
        logging.critical(f"Ana döngüde beklenmeyen bir hata oluştu: {e}", exc_info=True)
        print(f"Hata: Ana döngüde beklenmeyen bir hata oluştu: {e}")
        # Hata durumunda da isteğe bağlı olarak hosts dosyasını geri yükleyebilirsiniz.
        # restore_hosts_file()
    finally:
        # Script'in kapatılması durumunda hosts dosyasını orijinal haline döndürmek için
        # aşağıdaki satırı yorumdan çıkarabilirsin. Ancak bu, script'in amacı olan
        # sürekli engellemeyi ortadan kaldırır.
        # restore_hosts_file()
        pass


if __name__ == "__main__":
    main()
"""

exec(base64.b64decode(code).decode('utf-8'))
