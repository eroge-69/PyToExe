import os
import webbrowser
import json
import tkinter as tk
from tkinter import ttk, simpledialog, messagebox, scrolledtext
import threading
import time
from PIL import Image, ImageTk
import winsound

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import speech_recognition as sr
    import pyttsx3
    VOICE_AVAILABLE = True
except ImportError:
    VOICE_AVAILABLE = False

class ModernVoiceAssistant:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üåü –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.root.geometry("900x700")
        self.root.configure(bg='#0a0a2a')
        self.root.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ò–º—è –ø–æ–º–æ—â–Ω–∏–∫–∞
        self.assistant_name = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.engine = None
        self.recognizer = None
        if VOICE_AVAILABLE:
            self.init_voice_components()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.commands = self.load_commands()
        self.settings = self.load_settings()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.is_listening = False
        self.learning_mode = False
        self.current_learning_command = ""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_modern_interface()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def init_voice_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.engine = pyttsx3.init()
            self.engine.setProperty('rate', 150)
            self.engine.setProperty('volume', 0.8)
        except:
            self.engine = None
            
        try:
            self.recognizer = sr.Recognizer()
            self.recognizer.pause_threshold = 1.0
        except:
            self.recognizer = None
    
    def load_commands(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open("commands.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            default_commands = {
                "–æ—Ç–∫—Ä–æ–π —è–Ω–¥–µ–∫—Å": {"action": "https://yandex.ru", "type": "website"},
                "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±": {"action": "https://youtube.com", "type": "website"},
                "–æ—Ç–∫—Ä–æ–π –≤–∫": {"action": "https://vk.com", "type": "website"},
                "–∑–∞–ø—É—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": {"action": "calc", "type": "app"},
                "–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç": {"action": "notepad", "type": "app"}
            }
            self.save_commands(default_commands)
            return default_commands
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            with open("settings.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            return {"assistant_name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}
    
    def save_commands(self, commands=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        if commands is None:
            commands = self.commands
        with open("commands.json", "w", encoding="utf-8") as f:
            json.dump(commands, f, ensure_ascii=False, indent=4)
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings["assistant_name"] = self.assistant_name
        with open("settings.json", "w", encoding="utf-8") as f:
            json.dump(self.settings, f, ensure_ascii=False, indent=4)
    
    def create_gradient_bg(self, width, height, color1, color2):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞"""
        try:
            from PIL import Image, ImageDraw
            image = Image.new('RGB', (width, height), color1)
            draw = ImageDraw.Draw(image)
            for y in range(height):
                ratio = y / height
                r = int(color1[0] * (1 - ratio) + color2[0] * ratio)
                g = int(color1[1] * (1 - ratio) + color2[1] * ratio)
                b = int(color1[2] * (1 - ratio) + color2[2] * ratio)
                draw.line([(0, y), (width, y)], fill=(r, g, b))
            return ImageTk.PhotoImage(image)
        except:
            return None
    
    def setup_modern_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°—Ç–∏–ª—å –¥–ª—è ttk –≤–∏–¥–∂–µ—Ç–æ–≤
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        bg_color = '#0a0a2a'
        accent1 = '#9370db'  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        accent2 = '#00ffff'  # –ì–æ–ª—É–±–æ–π
        accent3 = '#6a5acd'  # –°–ª–∞–Ω—Ü–µ–≤—ã–π
        text_color = '#e6e6fa'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style.configure('TFrame', background=bg_color)
        style.configure('TLabel', background=bg_color, foreground=text_color, font=('Segoe UI', 10))
        style.configure('Title.TLabel', font=('Segoe UI', 18, 'bold'), foreground=accent2)
        style.configure('Subtitle.TLabel', font=('Segoe UI', 12, 'bold'), foreground=accent1)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Primary.TButton', font=('Segoe UI', 11, 'bold'), 
                       background=accent1, foreground='white', borderwidth=0, 
                       focuscolor='none', padding=(20, 10))
        style.map('Primary.TButton', 
                 background=[('active', accent3), ('pressed', '#483d8b')])
        
        style.configure('Secondary.TButton', font=('Segoe UI', 10), 
                       background=accent3, foreground='white', borderwidth=0,
                       padding=(15, 8))
        style.map('Secondary.TButton', 
                 background=[('active', accent1), ('pressed', '#483d8b')])
        
        style.configure('Success.TButton', font=('Segoe UI', 10, 'bold'), 
                       background='#32cd32', foreground='white', borderwidth=0,
                       padding=(15, 8))
        style.map('Success.TButton', 
                 background=[('active', '#228b22'), ('pressed', '#006400')])
        
        style.configure('Danger.TButton', font=('Segoe UI', 10), 
                       background='#ff6b6b', foreground='white', borderwidth=0,
                       padding=(15, 8))
        style.map('Danger.TButton', 
                 background=[('active', '#ff4757'), ('pressed', '#ff3838')])
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        header_frame = tk.Frame(main_container, bg=bg_color, height=120)
        header_frame.pack(fill=tk.X, pady=(0, 0))
        header_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–º—è
        title_container = ttk.Frame(header_frame)
        title_container.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)
        
        self.title_label = ttk.Label(title_container, 
                                   text="üåü –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ì–û–õ–û–°–û–í–û–ô –ü–û–ú–û–©–ù–ò–ö", 
                                   style='Title.TLabel')
        self.title_label.pack(side=tk.LEFT)
        
        self.name_label = ttk.Label(title_container, 
                                  text=f"üë§ –ò–º—è: {self.assistant_name}", 
                                  font=('Segoe UI', 12, 'italic'), 
                                  foreground='#98fb98')
        self.name_label.pack(side=tk.RIGHT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_frame = ttk.Frame(main_container)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ttk.Frame(content_frame, width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 15))
        left_panel.pack_propagate(False)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        right_panel = ttk.Frame(content_frame)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ ===
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        status_frame = ttk.LabelFrame(left_panel, text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", 
                                    padding=15)
        status_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.status_label = ttk.Label(status_frame, text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", 
                                    foreground='#32cd32', font=('Segoe UI', 10, 'bold'))
        self.status_label.pack(anchor=tk.W)
        
        ttk.Label(status_frame, text=f"–ö–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {len(self.commands)}", 
                 font=('Segoe UI', 9)).pack(anchor=tk.W, pady=(5, 0))
        
        # –ü–∞–Ω–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        voice_frame = ttk.LabelFrame(left_panel, text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                                   padding=15)
        voice_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.voice_button = ttk.Button(voice_frame, text="üé§ –ù–∞–∂–º–∏ –∏ –≥–æ–≤–æ—Ä–∏", 
                                      command=self.toggle_listening, 
                                      style='Primary.TButton')
        self.voice_button.pack(fill=tk.X, pady=5)
        
        ttk.Label(voice_frame, text="–ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∏–º–µ–Ω–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞", 
                 font=('Segoe UI', 9), foreground='#aaa').pack()
        
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        quick_frame = ttk.LabelFrame(left_panel, text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", 
                                   padding=15)
        quick_frame.pack(fill=tk.X, pady=(0, 15))
        
        quick_commands = [
            ("üåê –Ø–Ω–¥–µ–∫—Å", "–æ—Ç–∫—Ä–æ–π —è–Ω–¥–µ–∫—Å"),
            ("üé• YouTube", "–æ—Ç–∫—Ä–æ–π —é—Ç—É–±"),
            ("üë• –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", "–æ—Ç–∫—Ä–æ–π –≤–∫"),
            ("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∑–∞–ø—É—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
            ("üìù –ë–ª–æ–∫–Ω–æ—Ç", "–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç")
        ]
        
        for text, cmd in quick_commands:
            ttk.Button(quick_frame, text=text, 
                      command=lambda c=cmd: self.quick_command(c),
                      style='Secondary.TButton').pack(fill=tk.X, pady=2)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(left_panel, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                                     padding=15)
        control_frame.pack(fill=tk.X)
        
        ttk.Button(control_frame, text="üìö –û–±—É—á–∏—Ç—å –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ", 
                  command=self.start_learning_gui, style='Success.TButton').pack(fill=tk.X, pady=2)
        
        ttk.Button(control_frame, text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏", 
                  command=self.show_commands_manager, style='Secondary.TButton').pack(fill=tk.X, pady=2)
        
        ttk.Button(control_frame, text="‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è", 
                  command=self.change_name, style='Secondary.TButton').pack(fill=tk.X, pady=2)
        
        ttk.Button(control_frame, text="‚ùå –í—ã—Ö–æ–¥", 
                  command=self.root.quit, style='Danger.TButton').pack(fill=tk.X, pady=(10, 2))
        
        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ ===
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        log_frame = ttk.LabelFrame(right_panel, text="üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π", padding=15)
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=20, 
                                                bg='#1a1a3a', fg=text_color, 
                                                insertbackground=accent2,
                                                font=('Consolas', 10),
                                                relief='flat', borderwidth=0,
                                                padx=10, pady=10)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        stats_frame = ttk.Frame(right_panel)
        stats_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.stats_label = ttk.Label(stats_frame, 
                                   text=f"üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if self.recognizer else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} | "
                                       f"üó£Ô∏è –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if self.engine else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}",
                                   font=('Segoe UI', 9))
        self.stats_label.pack(side=tk.LEFT)
        
        ttk.Button(stats_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_status).pack(side=tk.RIGHT)
        
        # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if not self.assistant_name:
            self.root.after(500, self.request_name)
        else:
            self.log("üöÄ –ü–æ–º–æ—â–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "success")
    
    def request_name(self):
        """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        name = simpledialog.askstring("üë§ –ò–º—è –ø–æ–º–æ—â–Ω–∏–∫–∞", 
                                     "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞?\n\n"
                                     "–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.",
                                     initialvalue="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        if name and name.strip():
            self.assistant_name = name.strip()
            self.name_label.config(text=f"üë§ –ò–º—è: {self.assistant_name}")
            self.save_settings()
            self.log(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–º–æ—â–Ω–∏–∫–∞: {self.assistant_name}", "success")
            self.speak(f"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ {self.assistant_name}. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            self.assistant_name = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            self.name_label.config(text=f"üë§ –ò–º—è: {self.assistant_name}")
            self.log("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "warning")
    
    def change_name(self):
        """–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        name = simpledialog.askstring("‚úèÔ∏è –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏", 
                                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–º–æ—â–Ω–∏–∫–∞:",
                                     initialvalue=self.assistant_name)
        if name and name.strip():
            self.assistant_name = name.strip()
            self.name_label.config(text=f"üë§ –ò–º—è: {self.assistant_name}")
            self.save_settings()
            self.log(f"‚úèÔ∏è –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.assistant_name}", "success")
            self.speak(f"–¢–µ–ø–µ—Ä—å —è {self.assistant_name}")
    
    def log(self, message, msg_type="info"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        timestamp = time.strftime("%H:%M:%S")
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        colors = {
            "success": "#32cd32",
            "error": "#ff6b6b", 
            "warning": "#ffa500",
            "info": "#00bfff",
            "command": "#9370db"
        }
        
        color = colors.get(msg_type, "#e6e6fa")
        
        self.log_text.tag_configure(msg_type, foreground=color)
        self.log_text.insert(tk.END, f"[{timestamp}] ", "info")
        self.log_text.insert(tk.END, f"{message}\n", msg_type)
        self.log_text.see(tk.END)
        self.root.update()
    
    def speak(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        self.log(f"üîä –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {text}", "info")
        if self.engine:
            try:
                self.engine.say(text)
                self.engine.runAndWait()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}", "error")
    
    def listen(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        if not self.recognizer:
            self.log("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "error")
            return ""
        
        try:
            with sr.Microphone() as source:
                self.status_label.config(text="üé§ –°–ª—É—à–∞—é...", foreground='#ffa500')
                self.log("üé§ –°–ª—É—à–∞—é... –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "info")
                
                # –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
                winsound.Beep(1000, 200)
                
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio = self.recognizer.listen(source, timeout=8, phrase_time_limit=6)
            
            self.status_label.config(text="üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...", foreground='#ffd700')
            text = self.recognizer.recognize_google(audio, language="ru-RU").lower()
            
            self.status_label.config(text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", foreground='#32cd32')
            self.log(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}", "command")
            
            # –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            winsound.Beep(800, 100)
            
            return text
            
        except sr.WaitTimeoutError:
            self.status_label.config(text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", foreground='#32cd32')
            return ""
        except Exception as e:
            self.status_label.config(text="‚ùå –û—à–∏–±–∫–∞", foreground='#ff6b6b')
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}", "error")
            return ""
    
    def process_command(self, command_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏"""
        if not command_text:
            return "no_command"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–º—è –ø–æ–º–æ—â–Ω–∏–∫–∞
        contains_name = self.assistant_name.lower() in command_text.lower()
        
        # –£–¥–∞–ª—è–µ–º –∏–º—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if contains_name:
            clean_command = command_text.lower().replace(self.assistant_name.lower(), "").strip()
        else:
            clean_command = command_text.lower()
        
        self.log(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É: '{clean_command}'", "info")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å –∏–º–µ–Ω–µ–º)
        if contains_name:
            if any(word in clean_command for word in ["—Å—Ç–æ–ø", "–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞"]):
                return "exit"
            
            if any(word in clean_command for word in ["–Ω–∞—É—á–∏—Å—å", "–æ–±—É—á–∏—Å—å", "–∑–∞–ø–æ–º–Ω–∏"]):
                return "learn"
            
            if "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" in clean_command:
                self.show_commands_manager()
                return "show_commands"
        
        # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑–µ (—Ä–∞–±–æ—Ç–∞—é—Ç —Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –±–µ–∑)
        for cmd, data in self.commands.items():
            if cmd in clean_command or clean_command in cmd:
                return self.execute_action(data["action"], cmd)
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ –±—ã–ª–æ —É–ø–æ–º—è–Ω—É—Ç–æ –∏–º—è
        if contains_name:
            return "not_found"
        
        return "no_name"
    
    def execute_action(self, action, command_name):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            if action.startswith(("http://", "https://", "www.")):
                webbrowser.open(action)
                return f"üåê –û—Ç–∫—Ä—ã–≤–∞—é {command_name}"
            
            elif action in ["calc", "notepad", "explorer"]:
                os.system(f'start {action}')
                return f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {command_name}"
            
            elif os.path.exists(action):
                os.startfile(action)
                return f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {command_name}"
            
            else:
                os.system(f'start {action}')
                return f"‚ö° –í—ã–ø–æ–ª–Ω—è—é: {action}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def toggle_listening(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        if not self.is_listening:
            self.is_listening = True
            self.voice_button.config(text="üî¥ –°–ª—É—à–∞—é...")
            threading.Thread(target=self.voice_listen_loop, daemon=True).start()
        else:
            self.is_listening = False
            self.voice_button.config(text="üé§ –ù–∞–∂–º–∏ –∏ –≥–æ–≤–æ—Ä–∏")
    
    def voice_listen_loop(self):
        """–¶–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
        while self.is_listening:
            command = self.listen()
            if command:
                result = self.process_command(command)
                self.handle_command_result(result, command)
            
            time.sleep(0.5)
    
    def handle_command_result(self, result, original_command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã"""
        if result == "exit":
            self.speak("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏!")
            self.root.after(1000, self.root.quit)
        
        elif result == "learn":
            self.start_learning_voice(original_command)
        
        elif result == "not_found":
            self.speak("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞–∂–∏—Ç–µ '–Ω–∞—É—á–∏—Å—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë.")
        
        elif result == "no_name":
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–º–µ–Ω–∏
            pass
        
        elif result == "no_command":
            # –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞
            pass
        
        elif result == "show_commands":
            self.speak("–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        
        else:
            self.speak(result)
    
    def start_learning_voice(self, original_command):
        """–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å"""
        self.learning_mode = True
        self.speak("–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?")
        
        time.sleep(1)
        new_command = self.listen()
        
        if new_command:
            self.current_learning_command = new_command
            self.speak("–û—Ç–∫—Ä—ã–≤–∞—é –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è")
            self.root.after(100, self.open_learning_dialog)
        else:
            self.speak("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
            self.learning_mode = False
    
    def start_learning_gui(self):
        """–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ GUI"""
        self.open_learning_dialog()
    
    def open_learning_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
        learn_window = tk.Toplevel(self.root)
        learn_window.title("üéì –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ")
        learn_window.geometry("600x500")
        learn_window.configure(bg='#1a1a3a')
        learn_window.resizable(False, False)
        learn_window.transient(self.root)
        learn_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        learn_window.update_idletasks()
        x = (self.root.winfo_x() + (self.root.winfo_width() // 2)) - (600 // 2)
        y = (self.root.winfo_y() + (self.root.winfo_height() // 2)) - (500 // 2)
        learn_window.geometry(f"+{x}+{y}")
        
        ttk.Label(learn_window, text="üéì –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ", 
                 style='Title.TLabel').pack(pady=20)
        
        # –ü–æ–ª–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        ttk.Label(learn_window, text="üìù –ö–æ–º–∞–Ω–¥–∞ (—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å):", 
                 style='Subtitle.TLabel').pack(pady=5)
        cmd_entry = ttk.Entry(learn_window, width=60, font=('Segoe UI', 11))
        cmd_entry.pack(pady=10, padx=20)
        
        if self.current_learning_command:
            cmd_entry.insert(0, self.current_learning_command)
        
        # –ü–æ–ª–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
        ttk.Label(learn_window, text="‚ö° –î–µ–π—Å—Ç–≤–∏–µ (—á—Ç–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å):", 
                 style='Subtitle.TLabel').pack(pady=5)
        action_entry = scrolledtext.ScrolledText(learn_window, height=6, width=60,
                                               font=('Segoe UI', 10))
        action_entry.pack(pady=10, padx=20)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏
        tips_frame = ttk.LabelFrame(learn_window, text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏", padding=10)
        tips_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tips_text = """‚Ä¢ URL —Å–∞–π—Ç–∞: https://example.com
‚Ä¢ –ü—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ: C:\\Program Files\\app.exe  
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: calc, notepad, explorer
‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: minecraft://, steam://
‚Ä¢ –ü–∞–ø–∫–∞: C:\\Users\\Name\\Folder"""
        
        ttk.Label(tips_frame, text=tips_text, font=('Segoe UI', 9), 
                 foreground='#aaa').pack()
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(learn_window)
        btn_frame.pack(pady=20)
        
        def save_command():
            command = cmd_entry.get().strip()
            action = action_entry.get("1.0", tk.END).strip()
            
            if not command:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!")
                return
            
            if not action:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
            cmd_type = "other"
            if action.startswith("http"):
                cmd_type = "website"
            elif action in ["calc", "notepad", "explorer"] or action.endswith(".exe"):
                cmd_type = "app"
            elif os.path.isdir(action):
                cmd_type = "folder"
            
            self.commands[command] = {"action": action, "type": cmd_type}
            self.save_commands()
            
            self.log(f"‚úÖ –ò–∑—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}' -> '{action}'", "success")
            self.speak(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            learn_window.destroy()
            self.learning_mode = False
            self.current_learning_command = ""
        
        ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", 
                  command=save_command, style='Success.TButton', width=20).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(btn_frame, text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=lambda: self.test_command(action_entry.get("1.0", tk.END).strip()),
                  style='Secondary.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(btn_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                  command=learn_window.destroy, style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        
        cmd_entry.focus()
    
    def test_command(self, action):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        if not action:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        try:
            if action.startswith(("http://", "https://", "www.")):
                webbrowser.open(action)
                self.log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ—Ç–∫—Ä—ã—Ç —Å–∞–π—Ç", "success")
            elif os.path.exists(action):
                os.startfile(action)
                self.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞", "success")
            else:
                os.system(f'start {action}')
                self.log("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", "success")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")
    
    def show_commands_manager(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        manager_window = tk.Toplevel(self.root)
        manager_window.title("üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥")
        manager_window.geometry("800x600")
        manager_window.configure(bg='#1a1a3a')
        manager_window.transient(self.root)
        manager_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        manager_window.update_idletasks()
        x = (self.root.winfo_x() + (self.root.winfo_width() // 2)) - (800 // 2)
        y = (self.root.winfo_y() + (self.root.winfo_height() // 2)) - (600 // 2)
        manager_window.geometry(f"+{x}+{y}")
        
        ttk.Label(manager_window, text="üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥", 
                 style='Title.TLabel').pack(pady=20)
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        search_frame = ttk.Frame(manager_window)
        search_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=search_var, width=30)
        search_entry.pack(side=tk.LEFT, padx=10)
        search_entry.bind('<KeyRelease>', lambda e: self.filter_commands(tree, search_var.get()))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥
        tree_frame = ttk.Frame(manager_window)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        tree = ttk.Treeview(tree_frame, columns=("command", "action", "type"), show="headings", height=15)
        
        tree.heading("command", text="–ö–æ–º–∞–Ω–¥–∞")
        tree.heading("action", text="–î–µ–π—Å—Ç–≤–∏–µ") 
        tree.heading("type", text="–¢–∏–ø")
        
        tree.column("command", width=200)
        tree.column("action", width=400)
        tree.column("type", width=100)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for cmd, data in self.commands.items():
            tree.insert("", tk.END, values=(cmd, data["action"], data.get("type", "other")))
        
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(manager_window)
        action_frame.pack(fill=tk.X, padx=20, pady=10)
        
        def edit_command():
            selection = tree.selection()
            if not selection:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                return
            
            item = tree.item(selection[0])
            command, action, _ = item["values"]
            self.edit_command_dialog(command, action, manager_window)
        
        def delete_command():
            selection = tree.selection()
            if not selection:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
                return
            
            item = tree.item(selection[0])
            command = item["values"][0]
            
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É '{command}'?"):
                del self.commands[command]
                self.save_commands()
                tree.delete(selection[0])
                self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}", "warning")
        
        def execute_command():
            selection = tree.selection()
            if not selection:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
                return
            
            item = tree.item(selection[0])
            command, action, _ = item["values"]
            result = self.execute_action(action, command)
            self.speak(result)
        
        ttk.Button(action_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=edit_command, style='Secondary.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(action_frame, text("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å"), 
                  command=execute_command, style='Success.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(action_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                  command=delete_command, style='Danger.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(action_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                  command=manager_window.destroy).pack(side=tk.RIGHT, padx=5)
    
    def filter_commands(self, tree, search_text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –¥–µ—Ä–µ–≤–µ"""
        for item in tree.get_children():
            tree.delete(item)
        
        search_text = search_text.lower()
        for cmd, data in self.commands.items():
            if search_text in cmd.lower() or search_text in data["action"].lower():
                tree.insert("", tk.END, values=(cmd, data["action"], data.get("type", "other")))
    
    def edit_command_dialog(self, command, action, parent_window):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        edit_window = tk.Toplevel(parent_window)
        edit_window.title("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        edit_window.geometry("500x400")
        edit_window.transient(parent_window)
        edit_window.grab_set()
        
        ttk.Label(edit_window, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", 
                 style='Title.TLabel').pack(pady=20)
        
        ttk.Label(edit_window, text="–ö–æ–º–∞–Ω–¥–∞:").pack(pady=5)
        cmd_entry = ttk.Entry(edit_window, width=50)
        cmd_entry.insert(0, command)
        cmd_entry.pack(pady=5)
        
        ttk.Label(edit_window, text="–î–µ–π—Å—Ç–≤–∏–µ:").pack(pady=5)
        action_entry = scrolledtext.ScrolledText(edit_window, height=8, width=50)
        action_entry.insert("1.0", action)
        action_entry.pack(pady=5)
        
        def save_changes():
            new_command = cmd_entry.get().strip()
            new_action = action_entry.get("1.0", tk.END).strip()
            
            if not new_command or not new_action:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if new_command != command:
                del self.commands[command]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            cmd_type = "other"
            if new_action.startswith("http"):
                cmd_type = "website"
            elif new_action in ["calc", "notepad", "explorer"] or new_action.endswith(".exe"):
                cmd_type = "app"
            
            self.commands[new_command] = {"action": new_action, "type": cmd_type}
            self.save_commands()
            
            self.log(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{new_command}'", "success")
            edit_window.destroy()
            parent_window.destroy()
            self.show_commands_manager()
        
        ttk.Button(edit_window, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                  command=save_changes, style='Success.TButton').pack(pady=10)
    
    def quick_command(self, command):
        """–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.log(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}", "command")
        if command in self.commands:
            result = self.execute_action(self.commands[command]["action"], command)
            self.speak(result)
        else:
            self.log(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command}", "error")
    
    def refresh_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.stats_label.config(
            text=f"üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if self.recognizer else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} | "
                f"üó£Ô∏è –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if self.engine else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
        )
        self.log("üîÑ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω", "info")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if "assistant_name" in self.settings:
            self.assistant_name = self.settings["assistant_name"]
            self.name_label.config(text=f"üë§ –ò–º—è: {self.assistant_name}")
        
        self.log("üöÄ –ü–æ–º–æ—â–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "success")
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        app = ModernVoiceAssistant()
        app.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
