# -*- coding: utf-8 -*-
"""Copia de Copia de Copia de ACM_JANNA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XW5GXnhIv5s7-bqZ1FSqYgRqGxFXT1l5
"""

!pip install fpdf

import ipywidgets as widgets
from IPython.display import display, clear_output
import requests
import json
import pandas as pd
from fpdf import FPDF
import urllib.parse
from google.colab import files
import time

# Google Search API configuration (You'll need to get your own API key)
API_KEY = "AIzaSyAEruqvcUNl1cvFsKTdqS3_nmszGvC2z4U"
SEARCH_ENGINE_ID = "443b8b95b8a674697"





# Jujuy locations
jujuy_locations = [
    "Capital", "Cochinocha", "Doctor Manuel Belgrano", "El Carmen",
    "Humahuaca", "Ledesma", "Palpalá", "Rinconada", "San Antonio",
    "San Pedro", "Santa Bárbara", "Susques", "Tilcara", "Tumbaya",
    "Valle Grande", "Yavi"
]

# Property types
property_types = ["Casa", "Departamento", "Terreno", "Local", "Quinta", "Otros"]

# Widgets
property_type = widgets.Dropdown(options=property_types, description="Tipo de Propiedad:")
bedrooms = widgets.IntSlider(value=2, min=0, max=10, description="Dormitorios:")
parking = widgets.Checkbox(value=False, description="Cochera:")
neighborhood = widgets.Text(description="Barrio:")
province_location = widgets.Dropdown(options=jujuy_locations, description="Localidad:")

# Buttons
search_button = widgets.Button(description="Buscar Propiedades")
export_button = widgets.Button(description="Exportar a PDF")
reset_button = widgets.Button(description="Reiniciar Búsqueda")
exit_button = widgets.Button(description="Salir")

# Output area
output = widgets.Output()

# Global variable to store search results
search_results = []

def format_search_query(property_type, bedrooms, parking, neighborhood, province_location):
    """Format the search query for real estate in Jujuy"""
    base_query = f'{property_type} en venta {province_location} Jujuy'
    if bedrooms > 0:
        base_query += f' {bedrooms} dormitorios'
    if parking:
        base_query += ' cochera'
    if neighborhood:
        base_query += f' {neighborhood}'
    return base_query + ' site:mercadolibre.com.ar OR site:argenprop.com OR site:zonaprop.com.ar'

def extract_price(text):
    """Extract price from text (simplified version)"""
    # Remove dots and replace commas with dots for decimal conversion
    text = text.replace('.', '').replace(',', '.')
    import re
    # Look for numbers that might be prices (assuming they're large enough to be property prices)
    prices = re.findall(r'\$?\s*(\d{4,}\.?\d*)', text)
    if prices:
        # Return the first large number found (assuming it's the price)
        try:
            price = float(prices[0])
            # If price seems too small (less than 100), it's likely not in thousands
            if price < 100:
                return None
            # If price seems reasonable for Jujuy properties (adjust as needed)
            if price < 10000000:  # Less than 10 million pesos
                return price
        except ValueError:
            return None
    return None

def extract_size(text):
    """Extract property size in square meters from text (simplified version)"""
    import re
    # Look for patterns like "100 m2" or "100 m²"
    sizes = re.findall(r'(\d+)\s*m2|(\d+)\s*m²', text)
    if sizes:
        # Return the first number found
        try:
            size = int(sizes[0][0] if sizes[0][0] else sizes[0][1])
            if 20 <= size <= 10000:  # Reasonable size range
                return size
        except (ValueError, IndexError):
            return None
    return None

def search_properties(b):
    global search_results
    with output:
        clear_output()
        print("Buscando propiedades...")

        # Format search query
        query = format_search_query(
            property_type.value,
            bedrooms.value,
            parking.value,
            neighborhood.value,
            province_location.value
        )

        print(f"Consulta de búsqueda: {query}")

        # Perform Google search
        search_results = []
        try:
            # URL encode the query
            encoded_query = urllib.parse.quote(query)
            url = f"https://www.googleapis.com/customsearch/v1?key={API_KEY}&cx={SEARCH_ENGINE_ID}&q={encoded_query}&num=10"

            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            if "items" in data:
                for item in data["items"]:
                    title = item.get("title", "")
                    snippet = item.get("snippet", "")
                    link = item.get("link", "")

                    # Try to extract price and size from snippet or title
                    price_text = title + " " + snippet
                    price = extract_price(price_text)
                    size = extract_size(price_text)

                    if price:
                        search_results.append({
                            "title": title,
                            "snippet": snippet,
                            "link": link,
                            "price": price,
                            "size": size
                        })

            # Calculate averages
            if search_results:
                prices = [r["price"] for r in search_results if r["price"] is not None]
                sizes = [r["size"] for r in search_results if r["size"] is not None]

                avg_price = sum(prices) / len(prices) if prices else 0
                avg_price_sqm = 0

                # Calculate average price per square meter
                valid_properties = [r for r in search_results if r["price"] is not None and r["size"] is not None and r["size"] > 0]
                if valid_properties:
                    price_per_sqm_list = [r["price"] / r["size"] for r in valid_properties]
                    avg_price_sqm = sum(price_per_sqm_list) / len(price_per_sqm_list)

                # Create summary
                summary = f"""
                Búsqueda realizada:
                - Tipo de propiedad: {property_type.value}
                - Dormitorios: {bedrooms.value}
                - Cochera: {'Sí' if parking.value else 'No'}
                - Barrio: {neighborhood.value}
                - Localidad: {province_location.value}

                Resultados encontrados: {len(search_results)}
                Precio promedio: USD {avg_price:,.2f}
                Precio promedio por m²: USD {avg_price_sqm:,.2f}
                """

                # Display results
                print(summary)
                print("\nPropiedades encontradas:")
                for i, result in enumerate(search_results[:5]):  # Show first 5 results
                    print(f"\n{i+1}. {result['title']}")
                    print(f"   Precio: ${result['price']:,.2f}")
                    if result['size']:
                        print(f"   Tamaño: {result['size']} m²")
                    print(f"   Enlace: {result['link']}")

                if len(search_results) > 5:
                    print(f"\n... y {len(search_results) - 5} más")

                # Enable export button
                export_button.disabled = False
            else:
                print("No se encontraron resultados para esta búsqueda.")
                export_button.disabled = True

        except requests.exceptions.RequestException as e:
            print(f"Error al realizar la búsqueda: {e}")
            export_button.disabled = True
        except Exception as e:
            print(f"Error inesperado: {e}")
            export_button.disabled = True

def export_to_pdf(b):
    global search_results
    with output:
        if not search_results:
            print("No hay resultados para exportar.")
            return

        try:
            # Create PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)

            # Add title
            pdf.set_font("Arial", 'B', 16)
            pdf.cell(200, 10, txt="Resultados de Búsqueda de Propiedades", ln=True, align='C')
            pdf.ln(10)

            # Add search parameters
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(200, 10, txt="Parámetros de búsqueda:", ln=True)
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt=f"- Tipo de propiedad: {property_type.value}", ln=True)
            pdf.cell(200, 10, txt=f"- Dormitorios: {bedrooms.value}", ln=True)
            pdf.cell(200, 10, txt=f"- Cochera: {'Sí' if parking.value else 'No'}", ln=True)
            pdf.cell(200, 10, txt=f"- Barrio: {neighborhood.value}", ln=True)
            pdf.cell(200, 10, txt=f"- Localidad: {province_location.value}", ln=True)
            pdf.ln(5)

            # Calculate and add averages
            prices = [r["price"] for r in search_results if r["price"] is not None]
            sizes = [r["size"] for r in search_results if r["size"] is not None]

            avg_price = sum(prices) / len(prices) if prices else 0

            valid_properties = [r for r in search_results if r["price"] is not None and r["size"] is not None and r["size"] > 0]
            avg_price_sqm = 0
            if valid_properties:
                price_per_sqm_list = [r["price"] / r["size"] for r in valid_properties]
                avg_price_sqm = sum(price_per_sqm_list) / len(price_per_sqm_list)

            pdf.cell(200, 10, txt=f"Precio promedio: USD {avg_price:,.2f}", ln=True)
            pdf.cell(200, 10, txt=f"Precio promedio por m²: USD {avg_price_sqm:,.2f}", ln=True)
            pdf.ln(10)

            # Add property listings
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(200, 10, txt="Propiedades encontradas:", ln=True)
            pdf.set_font("Arial", size=10)

            for i, result in enumerate(search_results[:10]):  # Limit to first 10 results
                pdf.set_font("Arial", 'B', 10)
                pdf.cell(200, 10, txt=f"{i+1}. {result['title']}", ln=True)
                pdf.set_font("Arial", size=10)
                pdf.cell(200, 10, txt=f"   Precio: ${result['price']:,.2f}", ln=True)
                if result['size']:
                    pdf.cell(200, 10, txt=f"   Tamaño: {result['size']} m²", ln=True)
                pdf.cell(200, 10, txt=f"   Enlace: {result['link']}", ln=True)
                pdf.ln(5)

            # Save PDF
            filename = f"propiedades_{int(time.time())}.pdf"
            pdf.output(filename)

            # Download file
            files.download(filename)
            print(f"\nArchivo '{filename}' descargado exitosamente.")

        except Exception as e:
            print(f"Error al exportar a PDF: {e}")

def reset_search(b):
    with output:
        clear_output()
        # Reset form values
        property_type.value = property_types[0]
        bedrooms.value = 2
        parking.value = False
        neighborhood.value = ""
        province_location.value = jujuy_locations[0]
        export_button.disabled = True
        search_results = []
        print("Formulario reiniciado. Ingrese nuevos criterios de búsqueda.")

def exit_app(b):
    with output:
        clear_output()
        print("Aplicación finalizada. Gracias por usar el buscador de propiedades.")

# Assign button events
search_button.on_click(search_properties)
export_button.on_click(export_to_pdf)
reset_button.on_click(reset_search)
exit_button.on_click(exit_app)

# Disable export button initially
export_button.disabled = True

# Display widgets
display(property_type, bedrooms, parking, neighborhood, province_location)
display(widgets.HBox([search_button, export_button, reset_button, exit_button]))
display(output)

# Initial message
with output:
    print( "PRGRAMA CREADO POR JANNA SEBASTIAN PRUEBA")
    print("Ingrese los criterios de búsqueda y haga clic en 'Buscar Propiedades'")