import pandas as pd
import random
import re
import os
import subprocess
import sys
import glob


def install_package(package):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–∞–∫–µ—Ç"""
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])


def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        import openpyxl
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π openpyxl...")
        install_package("openpyxl")
        print("openpyxl —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


def find_files_in_directory():
    """
    –ò—â–µ—Ç –≤—Å–µ CSV –∏ Excel —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    """
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
    csv_files = glob.glob(os.path.join(current_dir, "*.csv"))
    xlsx_files = glob.glob(os.path.join(current_dir, "*.xlsx"))
    xls_files = glob.glob(os.path.join(current_dir, "*.xls"))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_files = csv_files + xlsx_files + xls_files

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –ø—É—Ç–∏
    file_names = [os.path.basename(f) for f in all_files]

    return file_names


def select_file():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    files = find_files_in_directory()

    if not files:
        print("‚ùå –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ CSV –∏–ª–∏ Excel!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç.")
        return None

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª(–æ–≤) –≤ –ø–∞–ø–∫–µ:")
    print("-" * 50)

    for i, file in enumerate(files, 1):
        file_size = os.path.getsize(file)
        file_size_mb = file_size / (1024 * 1024)
        print(f"{i}. {file} ({file_size_mb:.2f} MB)")

    print("-" * 50)

    while True:
        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (1-{len(files)}): ")
            choice_num = int(choice)

            if 1 <= choice_num <= len(files):
                selected_file = files[choice_num - 1]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file}")
                return selected_file
            else:
                print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(files)}")

        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


def find_email_column(df):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–æ–ª–±–µ—Ü —Å email –∞–¥—Ä–µ—Å–∞–º–∏
    """
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    for column in df.columns:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ email
        sample_data = df[column].dropna().head(10).astype(str)
        email_count = sum(1 for value in sample_data if re.search(email_pattern, value))

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Ö–æ–∂–∏ –Ω–∞ email, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ email —Å—Ç–æ–ª–±—Ü–æ–º
        if email_count > len(sample_data) * 0.5:
            return column

    return None


def extract_emails_from_text(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
    """
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    emails = re.findall(email_pattern, str(text))
    return emails[0] if emails else None


def read_file_safely(filename):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    try:
        if filename.endswith('.csv'):
            return pd.read_csv(filename)
        elif filename.endswith(('.xlsx', '.xls')):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º openpyxl –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            check_and_install_dependencies()
            return pd.read_excel(filename)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV –∏ Excel (.xlsx, .xls)")
    except ImportError as e:
        if "openpyxl" in str(e):
            print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å...")
            check_and_install_dependencies()
            return pd.read_excel(filename)
        else:
            raise e


def main():
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –∞–¥—Ä–µ—Å–æ–≤")
    print("=" * 60)

    try:
        # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
        filename = select_file()

        if filename is None:
            return

        # –ß–∏—Ç–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        df = read_file_safely(filename)

        print(f"\nüìä –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –°—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìã –°—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±–µ—Ü —Å email
        email_column = find_email_column(df)

        if email_column is None:
            print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±–µ—Ü —Å email –∞–¥—Ä–µ—Å–∞–º–∏.")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏.")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å email: '{email_column}'")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å email
        df_with_emails = df.copy()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º email –∞–¥—Ä–µ—Å–∞
        df_with_emails['clean_email'] = df_with_emails[email_column].apply(
            lambda x: extract_emails_from_text(x) if pd.notna(x) else None
        )

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email
        df_with_emails = df_with_emails[df_with_emails['clean_email'].notna()]

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email
        df_unique = df_with_emails.drop_duplicates(subset=['clean_email'])

        total_emails = len(df_unique)

        print(f"üìß –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤: {total_emails}")

        if total_emails == 0:
            print("‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö email
        print("\n" + "=" * 40)
        while True:
            try:
                requested_count = int(input(f"–°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å? (–º–∞–∫—Å–∏–º—É–º {total_emails}): "))

                if requested_count <= 0:
                    print("‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                    continue
                elif requested_count > total_emails:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—à–µ–Ω–æ {requested_count} –∑–∞–ø–∏—Å–µ–π, –Ω–æ –≤ —Ñ–∞–π–ª–µ —Ç–æ–ª—å–∫–æ {total_emails} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤.")
                    continue
                else:
                    break

            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        random_rows = df_unique.sample(n=requested_count, random_state=random.randint(1, 10000))

        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü clean_email
        result_df = random_rows.drop('clean_email', axis=1)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        result_df = result_df.reset_index(drop=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        base_name = os.path.splitext(filename)[0]
        output_filename_csv = f"{base_name}_random_emails.csv"
        output_filename_excel = f"{base_name}_random_emails.xlsx"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
        result_df.to_csv(output_filename_csv, index=False, encoding='utf-8-sig')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel
        check_and_install_dependencies()
        result_df.to_excel(output_filename_excel, index=False)

        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—ã–±—Ä–∞–Ω–æ {requested_count} —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        print(f"üíæ –°–æ–∑–¥–∞–Ω–æ 2 —Ñ–∞–π–ª–∞:")
        print(f"   üìÑ CSV: '{output_filename_csv}'")
        print(f"   üìä Excel: '{output_filename_excel}'")

        print(f"\nüìã –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {list(result_df.columns)}")
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        print(result_df.head(min(5, len(result_df))))

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()
