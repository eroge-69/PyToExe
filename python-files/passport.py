# -*- coding: utf-8 -*-
"""passport.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qeXsvupfc35vSHfSYLdb9brCQH6G2Eix
"""

from passporteye import read_mrz

mrz = read_mrz("1.jpeg")

if mrz is not None:
    mrz_data = mrz.to_dict()
    print(mrz_data)
else:
    print("MRZ tidak terbaca.")

!pip install pdf2image

!apt-get install -y poppler-utils

# !apt-get install -y tesseract-ocr
!pip install PyMuPDF pdf2image

from passporteye import read_mrz
import json
from datetime import datetime
import os
import fitz  # PyMuPDF
from pdf2image import convert_from_path
import tempfile

class PassportEyeExtractor:
    def __init__(self):
        pass

    def get_total_pages(self, pdf_path: str) -> int:
        """Get total number of pages in PDF"""
        try:
            doc = fitz.open(pdf_path)
            total_pages = len(doc)
            doc.close()
            return total_pages
        except:
            # Fallback method
            try:
                images = convert_from_path(pdf_path)
                return len(images)
            except:
                return 1  # Default to 1 if cannot determine

    def extract_mrz_from_pdf(self, pdf_path: str, process_all_pages: bool = True) -> dict:
        """
        Extract MRZ data from PDF using PassportEye for all pages
        """
        print(f"🔍 Processing PDF: {pdf_path}")

        if not os.path.exists(pdf_path):
            return {"error": f"File {pdf_path} tidak ditemukan"}

        try:
            total_pages = self.get_total_pages(pdf_path)
            print(f"📄 Total pages detected: {total_pages}")

            all_results = []
            successful_pages = 0

            if process_all_pages:
                # Process each page individually
                for page_num in range(1, total_pages + 1):
                    print(f"🔄 Processing page {page_num}/{total_pages}...")

                    # Convert single page to image and process
                    try:
                        images = convert_from_path(pdf_path, first_page=page_num, last_page=page_num, dpi=200)
                        if images:
                            # Save temporary image
                            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                                images[0].save(temp_file.name, 'JPEG')
                                temp_path = temp_file.name

                            # Process with PassportEye
                            mrz = read_mrz(temp_path)

                            # Clean up temp file
                            os.unlink(temp_path)

                            if mrz is not None:
                                mrz_data = mrz.to_dict()

                                page_result = {
                                    "page_number": page_num,
                                    "valid": mrz.valid,
                                    "valid_score": mrz.valid_score,
                                    "country": mrz_data.get('country', ''),
                                    "number": mrz_data.get('number', ''),
                                    "surname": mrz_data.get('surname', ''),
                                    "given_names": mrz_data.get('names', ''),
                                    "nationality": mrz_data.get('nationality', ''),
                                    "date_of_birth": mrz_data.get('date_of_birth', ''),
                                    "expiration_date": mrz_data.get('expiration_date', ''),
                                    "sex": mrz_data.get('sex', ''),
                                    "type": mrz_data.get('type', ''),
                                    "raw_mrz": mrz_data
                                }

                                all_results.append(page_result)
                                successful_pages += 1
                                print(f"✅ Page {page_num}: MRZ found (Score: {mrz.valid_score:.2f})")
                            else:
                                all_results.append({
                                    "page_number": page_num,
                                    "error": "No MRZ detected"
                                })
                                print(f"❌ Page {page_num}: No MRZ detected")
                        else:
                            all_results.append({
                                "page_number": page_num,
                                "error": "Could not convert page to image"
                            })
                            print(f"❌ Page {page_num}: Conversion failed")

                    except Exception as e:
                        all_results.append({
                            "page_number": page_num,
                            "error": f"Processing error: {str(e)}"
                        })
                        print(f"❌ Page {page_num}: Error - {str(e)}")
            else:
                # Process only first page (original behavior)
                print("🔄 Processing first page only...")
                mrz = read_mrz(pdf_path)

                if mrz is not None:
                    mrz_data = mrz.to_dict()

                    page_result = {
                        "page_number": 1,
                        "valid": mrz.valid,
                        "valid_score": mrz.valid_score,
                        "country": mrz_data.get('country', ''),
                        "number": mrz_data.get('number', ''),
                        "surname": mrz_data.get('surname', ''),
                        "given_names": mrz_data.get('names', ''),
                        "nationality": mrz_data.get('nationality', ''),
                        "date_of_birth": mrz_data.get('date_of_birth', ''),
                        "expiration_date": mrz_data.get('expiration_date', ''),
                        "sex": mrz_data.get('sex', ''),
                        "type": mrz_data.get('type', ''),
                        "raw_mrz": mrz_data
                    }

                    all_results.append(page_result)
                    successful_pages += 1
                else:
                    all_results.append({
                        "page_number": 1,
                        "error": "No MRZ detected"
                    })

            # Find the best result (highest valid_score)
            best_result = None
            valid_results = [r for r in all_results if r.get('valid_score', 0) > 0]

            if valid_results:
                best_result = max(valid_results, key=lambda x: x.get('valid_score', 0))

            return {
                "all_pages": all_results,
                "best_result": best_result,
                "summary": {
                    "total_pages": total_pages,
                    "pages_with_mrz": successful_pages,
                    "success_rate": f"{(successful_pages/total_pages)*100:.1f}%" if total_pages > 0 else "0%",
                    "best_page": best_result.get('page_number', 0) if best_result else 0,
                    "best_score": best_result.get('valid_score', 0) if best_result else 0
                },
                "metadata": {
                    "processing_time": datetime.now().isoformat(),
                    "method": "PassportEye MRZ - Multi Page",
                    "pdf_file": os.path.basename(pdf_path)
                }
            }

        except Exception as e:
            return {"error": f"Error processing PDF: {str(e)}"}

    def print_results(self, results: dict):
        """Print formatted results for all pages"""
        print("\n" + "=" * 70)
        print("🎯 PASSPORT MRZ EXTRACTION RESULTS - ALL PAGES")
        print("=" * 70)

        if "error" in results:
            print(f"❌ Error: {results['error']}")
            return

        summary = results.get("summary", {})
        best_result = results.get("best_result", {})
        all_pages = results.get("all_pages", [])

        # Print summary
        print(f"📄 Total Pages: {summary.get('total_pages', 0)}")
        print(f"✅ Pages with MRZ: {summary.get('pages_with_mrz', 0)}")
        print(f"📊 Success Rate: {summary.get('success_rate', '0%')}")
        print(f"🏆 Best Page: {summary.get('best_page', 0)} (Score: {summary.get('best_score', 0):.2f})")
        print("-" * 70)

        # Print best result
        if best_result:
            print("🔥 BEST RESULT:")
            self._print_single_result(best_result)
        else:
            print("❌ No valid MRZ found in any page")

        # Print all pages summary
        print("\n📋 ALL PAGES SUMMARY:")
        print("-" * 50)
        for page_data in all_pages:
            page_num = page_data.get('page_number', 0)
            if 'error' in page_data:
                print(f"📄 Page {page_num}: ❌ {page_data['error']}")
            else:
                score = page_data.get('valid_score', 0)
                passport_no = page_data.get('number', 'N/A')
                surname = page_data.get('surname', 'N/A')
                status = "✅" if page_data.get('valid', False) else "⚠️"
                print(f"📄 Page {page_num}: {status} Score: {score:.2f} | Passport: {passport_no} | Name: {surname}")

        print("=" * 70)

    def _print_single_result(self, result: dict):
        """Print single page result"""
        print(f"📄 Page Number: {result.get('page_number', 'N/A')}")
        print(f"✅ Valid: {result.get('valid', False)}")
        print(f"📊 Confidence Score: {result.get('valid_score', 0):.2f}")
        print("-" * 40)

        fields = [
            ("Passport Number", "number"),
            ("Surname", "surname"),
            ("Given Names", "given_names"),
            ("Nationality", "nationality"),
            ("Country", "country"),
            ("Date of Birth", "date_of_birth"),
            ("Expiration Date", "expiration_date"),
            ("Sex", "sex"),
            ("Document Type", "type"),
        ]

        for label, key in fields:
            value = result.get(key, '')
            if value:
                print(f"📝 {label:<18}: {value}")
            else:
                print(f"❌ {label:<18}: Not found")

    def save_detailed_results(self, results: dict, filename: str = "passport_mrz_detailed.json"):
        """Save detailed results to JSON"""
        if "error" in results:
            print(f"❌ Cannot save results: {results['error']}")
            return False

        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            print(f"💾 Detailed results saved to {filename}")
            return True
        except Exception as e:
            print(f"❌ Error saving file: {e}")
            return False

    def export_best_result(self, results: dict, filename: str = "passport_best_result.json"):
        """Export only the best result to a separate file"""
        if "error" in results:
            return False

        best_result = results.get("best_result")
        if not best_result:
            print("❌ No best result to export")
            return False

        try:
            export_data = {
                "extracted_data": best_result,
                "metadata": results.get("metadata", {}),
                "summary": results.get("summary", {})
            }

            with open(filename, "w", encoding="utf-8") as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            print(f"💾 Best result saved to {filename}")
            return True
        except Exception as e:
            print(f"❌ Error saving best result: {e}")
            return False

# Usage Example
def main():
    extractor = PassportEyeExtractor()

    pdf_path = "pass.pdf"  # Ganti dengan path PDF Anda

    # Ask user if they want to process all pages
    try:
        choice = input("Process all pages? (y/n, default=y): ").lower().strip()
        process_all = choice != 'n'
    except:
        process_all = True

    # Extract data from all pages
    print("🚀 Starting multi-page extraction...")
    results = extractor.extract_mrz_from_pdf(pdf_path, process_all_pages=process_all)

    # Print results
    extractor.print_results(results)

    # Save results
    if "error" not in results:
        # Save detailed results (all pages)
        extractor.save_detailed_results(results, "passport_all_pages_detailed.json")

        # Save best result only
        extractor.export_best_result(results, "passport_best_result.json")

        # Show JSON preview of best result
        best_result = results.get("best_result")
        if best_result:
            print("\n📄 BEST RESULT JSON Preview:")
            print(json.dumps(best_result, indent=2, ensure_ascii=False))

        print(f"\n💾 All results saved successfully!")
        print("   - passport_all_pages_detailed.json (All pages data)")
        print("   - passport_best_result.json (Best result only)")

if __name__ == "__main__":
    main()

import os
import glob
import json
from datetime import datetime

def find_passport_json_files():
    """Find all passport JSON files in current directory and subdirectories"""

    print("🔍 Searching for passport JSON files...")
    print("📁 Current directory:", os.getcwd())
    print()

    # Patterns untuk mencari file JSON passport
    patterns = [
        "*passport*.json",
        "*mrz*.json",
        "*all_pages*.json",
        "*detailed*.json",
        "passport_data.json"
    ]

    found_files = []

    for pattern in patterns:
        files = glob.glob(pattern)
        for file in files:
            if file not in found_files:
                found_files.append(file)

    # Juga cari di subdirectories
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.json') and any(keyword in file.lower() for keyword in
                                            ['passport', 'mrz', 'all_pages', 'detailed']):
                full_path = os.path.join(root, file)
                if full_path not in found_files:
                    found_files.append(full_path)

    return found_files

def display_json_files_info():
    """Display information about found JSON files"""

    json_files = find_passport_json_files()

    if not json_files:
        print("❌ No passport JSON files found!")
        print("\n💡 Possible reasons:")
        print("   - Extraction script hasn't been run yet")
        print("   - JSON files are in a different directory")
        print("   - Files have different naming patterns")
        print("\n📝 Run the extraction script first, then run this converter.")
        return []

    print("✅ Found JSON files:")
    print("=" * 80)

    for i, file_path in enumerate(json_files, 1):
        file_size = os.path.getsize(file_path)
        file_time = datetime.fromtimestamp(os.path.getctime(file_path))

        print(f"{i}. 📄 {file_path}")
        print(f"   📏 Size: {file_size:,} bytes")
        print(f"   🕒 Created: {file_time.strftime('%Y-%m-%d %H:%M:%S')}")

        # Coba baca content untuk preview
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if 'all_pages' in data:
                total_pages = data.get('summary', {}).get('total_pages', 0)
                successful = data.get('summary', {}).get('pages_with_mrz', 0)
                print(f"   📊 Content: {total_pages} pages, {successful} with MRZ")
            elif 'data' in data:
                print(f"   📊 Content: Single page extraction")
            else:
                print(f"   📊 Content: Unknown structure")

        except Exception as e:
            print(f"   ❌ Error reading: {e}")

        print()

    return json_files

def get_json_file_path():
    """Get JSON file path from user or auto-detect"""

    json_files = display_json_files_info()

    if not json_files:
        return None

    if len(json_files) == 1:
        # Jika hanya ada 1 file, gunakan itu
        selected_file = json_files[0]
        print(f"🎯 Auto-selected: {selected_file}")
        return selected_file
    else:
        # Jika multiple files, minta user pilih
        print("🎯 Please select a JSON file to convert:")
        for i, file_path in enumerate(json_files, 1):
            print(f"   {i}. {os.path.basename(file_path)}")

        try:
            choice = int(input(f"\nEnter choice (1-{len(json_files)}): "))
            if 1 <= choice <= len(json_files):
                return json_files[choice - 1]
            else:
                print("❌ Invalid choice")
                return None
        except ValueError:
            print("❌ Please enter a valid number")
            return None

# Modified Excel Exporter dengan auto-detect JSON
class PassportExcelExporter:
    def __init__(self, output_dir: str = "passport_excel_results"):
        self.output_dir = output_dir
        self._create_output_dir()

    def _create_output_dir(self):
        """Create output directory if it doesn't exist"""
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            print(f"📁 Created output directory: {self.output_dir}")

    def json_to_excel(self, json_file_path: str = None, excel_file_path: str = None):
        """Convert JSON to Excel - auto-detect JSON if not provided"""

        # Jika json_file_path tidak diberikan, cari otomatis
        if json_file_path is None:
            json_file_path = get_json_file_path()
            if json_file_path is None:
                return False

        # Baca file JSON
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"✅ Successfully loaded JSON: {os.path.basename(json_file_path)}")
        except Exception as e:
            print(f"❌ Error reading JSON file: {e}")
            return False

        # Generate nama file Excel jika tidak disediakan
        if excel_file_path is None:
            json_filename = os.path.basename(json_file_path)
            excel_filename = json_filename.replace('.json', '_excel.xlsx')
            excel_file_path = os.path.join(self.output_dir, excel_filename)

        try:
            import pandas as pd
            from openpyxl import Workbook
            from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

            # Create Excel workbook
            wb = Workbook()

            # Simple data extraction
            all_pages = data.get('all_pages', [])
            best_result = data.get('best_result', {})
            summary = data.get('summary', {})

            # Sheet 1: Summary
            ws_summary = wb.active
            ws_summary.title = "Summary"

            # Title
            ws_summary['A1'] = "PASSPORT MRZ EXTRACTION SUMMARY"
            ws_summary['A1'].font = Font(size=16, bold=True)

            # Summary data
            summary_data = [
                ["PDF File", data.get('metadata', {}).get('pdf_file', 'N/A')],
                ["Total Pages", summary.get('total_pages', 0)],
                ["Pages with MRZ", summary.get('pages_with_mrz', 0)],
                ["Success Rate", summary.get('success_rate', '0%')],
                ["Best Page", summary.get('best_page', 0)],
                ["Best Score", f"{summary.get('best_score', 0):.2f}"],
                ["Processing Time", data.get('metadata', {}).get('processing_time', 'N/A')]
            ]

            for i, (label, value) in enumerate(summary_data, 3):
                ws_summary[f'A{i}'] = label
                ws_summary[f'B{i}'] = value
                ws_summary[f'A{i}'].font = Font(bold=True)

            # Sheet 2: All Pages
            ws_pages = wb.create_sheet("All Pages")

            if all_pages:
                headers = ["Page", "Valid", "Score", "Passport No", "Surname", "Given Names",
                          "Nationality", "Date of Birth", "Expiry Date", "Status"]

                # Write headers
                for col, header in enumerate(headers, 1):
                    cell = ws_pages.cell(row=1, column=col, value=header)
                    cell.font = Font(bold=True)

                # Write data
                for row, page_data in enumerate(all_pages, 2):
                    if 'error' in page_data:
                        ws_pages.cell(row=row, column=1, value=page_data.get('page_number'))
                        ws_pages.cell(row=row, column=10, value=page_data.get('error'))
                    else:
                        ws_pages.cell(row=row, column=1, value=page_data.get('page_number'))
                        ws_pages.cell(row=row, column=2, value="YES" if page_data.get('valid') else "NO")
                        ws_pages.cell(row=row, column=3, value=page_data.get('valid_score'))
                        ws_pages.cell(row=row, column=4, value=page_data.get('number'))
                        ws_pages.cell(row=row, column=5, value=page_data.get('surname'))
                        ws_pages.cell(row=row, column=6, value=page_data.get('given_names'))
                        ws_pages.cell(row=row, column=7, value=page_data.get('nationality'))
                        ws_pages.cell(row=row, column=8, value=page_data.get('date_of_birth'))
                        ws_pages.cell(row=row, column=9, value=page_data.get('expiration_date'))
                        ws_pages.cell(row=row, column=10, value="SUCCESS")

            # Sheet 3: Best Result
            if best_result:
                ws_best = wb.create_sheet("Best Result")

                best_data = [
                    ["Passport Number", best_result.get('number')],
                    ["Surname", best_result.get('surname')],
                    ["Given Names", best_result.get('given_names')],
                    ["Nationality", best_result.get('nationality')],
                    ["Country", best_result.get('country')],
                    ["Date of Birth", best_result.get('date_of_birth')],
                    ["Expiry Date", best_result.get('expiration_date')],
                    ["Sex", best_result.get('sex')],
                    ["Document Type", best_result.get('type')],
                    ["Valid", "YES" if best_result.get('valid') else "NO"],
                    ["Confidence Score", best_result.get('valid_score')]
                ]

                for i, (label, value) in enumerate(best_data, 1):
                    ws_best.cell(row=i, column=1, value=label)
                    ws_best.cell(row=i, column=2, value=value)
                    ws_best.cell(row=i, column=1).font = Font(bold=True)

            # Hapus sheet default jika ada yang tidak terpakai
            if 'Sheet' in wb.sheetnames:
                wb.remove(wb['Sheet'])

            # Simpan file Excel
            wb.save(excel_file_path)
            print(f"💾 Excel file saved: {excel_file_path}")

            # Show file location
            full_path = os.path.abspath(excel_file_path)
            print(f"📍 Full path: {full_path}")

            return excel_file_path

        except ImportError:
            print("❌ Required packages not installed.")
            print("💡 Please install: pip install pandas openpyxl")
            return False
        except Exception as e:
            print(f"❌ Error creating Excel file: {e}")
            return False

    def batch_convert_all_json(self):
        """Convert all found JSON files to Excel"""

        json_files = find_passport_json_files()

        if not json_files:
            print("❌ No JSON files found to convert")
            return []

        print(f"🔄 Converting {len(json_files)} JSON files to Excel...")

        converted_files = []
        for json_file in json_files:
            print(f"\n📁 Processing: {os.path.basename(json_file)}")
            excel_path = self.json_to_excel(json_file)
            if excel_path:
                converted_files.append(excel_path)

        print(f"\n✅ Successfully converted {len(converted_files)} files:")
        for file in converted_files:
            print(f"   📊 {os.path.basename(file)}")

        return converted_files

# Main function yang user-friendly
def main():
    print("📊 PASSPORT JSON TO EXCEL CONVERTER")
    print("=" * 50)

    exporter = PassportExcelExporter()

    # Tampilkan file JSON yang ditemukan
    json_files = display_json_files_info()

    if not json_files:
        return

    print("\n🎯 Conversion Options:")
    print("   1. Convert all JSON files automatically")
    print("   2. Convert specific JSON file")
    print("   3. Manually enter JSON file path")

    try:
        choice = input("\nEnter your choice (1-3): ").strip()

        if choice == "1":
            # Convert semua file
            exporter.batch_convert_all_json()

        elif choice == "2":
            # Convert file spesifik
            if len(json_files) == 1:
                selected_file = json_files[0]
            else:
                file_num = int(input(f"Enter file number (1-{len(json_files)}): "))
                selected_file = json_files[file_num - 1]

            print(f"🔄 Converting: {selected_file}")
            excel_path = exporter.json_to_excel(selected_file)

        elif choice == "3":
            # Manual path
            manual_path = input("Enter full path to JSON file: ").strip()
            if os.path.exists(manual_path):
                exporter.json_to_excel(manual_path)
            else:
                print("❌ File not found!")
        else:
            print("❌ Invalid choice")

    except Exception as e:
        print(f"❌ Error: {e}")

    # Tampilkan hasil
    print(f"\n📁 Output directory: {os.path.abspath(exporter.output_dir)}")
    excel_files = glob.glob(os.path.join(exporter.output_dir, "*.xlsx"))
    if excel_files:
        print("📊 Generated Excel files:")
        for file in excel_files:
            print(f"   ✅ {os.path.basename(file)}")

if __name__ == "__main__":
    main()