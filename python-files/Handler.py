import random
import json
import os

# --- Konstanten ---

WAREN = {
    0: "Holz", 1: "Wein", 2: "Gew√ºrze", 3: "Stoffe", 4: "Eisen",
    5: "Salz", 6: "Fische", 7: "Getreide", 8: "Gold", 9: "Keramik"
}

ST√ÑDTE = {
    0: "M√ºnchen", 1: "Hamburg", 2: "Berlin", 3: "K√∂ln", 4: "Frankfurt",
    5: "Dresden", 6: "Leipzig", 7: "Stuttgart", 8: "Bremen", 9: "N√ºrnberg"
}

# Stadt-spezifische Boni (ware_id: prozentiger Bonus auf Verkaufspreis)
STADT_BONI = {
    2: {3: 0.10}  # Berlin gibt 10% mehr f√ºr Stoffe (ware 3)
}

MELDUNGEN = [
    "Starker Sturm verz√∂gert die Reise.",
    "G√ºnstige Handelsbedingungen in der Stadt.",
    "Piratenangriff! Einige Waren gehen verloren.",
    "Markt ist √ºberf√ºllt, Preise sinken.",
    "Gute Ernte, Preise f√ºr Getreide fallen.",
    "Seuchenwarnung! Handel eingeschr√§nkt.",
    "Neue Handelsroute er√∂ffnet.",
    "Preise f√ºr Gew√ºrze steigen.",
    "Zoll erh√∂ht, Handel wird teurer.",
    "Lagerfeuer am Hafen bringt Gl√ºck.",
]
while len(MELDUNGEN) < 50:
    MELDUNGEN.append(f"Zuf√§lliges Ereignis Nummer {len(MELDUNGEN) + 1}")

AUFTR√ÑGE = [
    {"ware": 0, "menge": 50, "stadt": 1, "belohnung": 500},
    {"ware": 4, "menge": 30, "stadt": 3, "belohnung": 700},
    {"ware": 2, "menge": 20, "stadt": 5, "belohnung": 600},
    {"ware": 9, "menge": 10, "stadt": 0, "belohnung": 1000},
    {"ware": 1, "menge": 40, "stadt": 7, "belohnung": 450},
]
while len(AUFTR√ÑGE) < 50:
    AUFTR√ÑGE.append({
        "ware": random.randint(0, 9),
        "menge": random.randint(10, 60),
        "stadt": random.randint(0, 9),
        "belohnung": random.randint(100, 1200)
    })

SCHWIERIGKEITSGRADE = {1: "Einfach", 2: "Mittel", 3: "Schwer"}

def get_startkapital(schwierigkeit):
    return {1: 5000, 2: 3000, 3: 1500}.get(schwierigkeit, 3000)

def get_preisschwankung(schwierigkeit):
    return {1: 0.1, 2: 0.25, 3: 0.5}.get(schwierigkeit, 0.25)

basis_preise = {
    stadt: {ware: random.randint(10, 100) for ware in WAREN}
    for stadt in ST√ÑDTE
}

# --- Klasse SchiffhandelSpiel ---

class SchiffhandelSpiel:
    def __init__(self, schwierigkeit, max_runden):
        self.schwierigkeit = schwierigkeit
        self.max_runden = max_runden
        self.runde = 0
        self.geld = get_startkapital(schwierigkeit)
        self.max_lager = 100
        self.lager = {ware: 0 for ware in WAREN}
        self.position = 0
        self.auftr√§ge = random.sample(AUFTR√ÑGE, 5)
        self.meldungen = MELDUNGEN
        self.preisverlauf = {
            stadt: {ware: [] for ware in WAREN}
            for stadt in ST√ÑDTE
        }
        print(f"Spiel gestartet ‚Äì {SCHWIERIGKEITSGRADE[schwierigkeit]} ‚Äì Startkapital: {self.geld} Gold.")
        print(f"Startort: {ST√ÑDTE[self.position]}")

    def get_aktueller_preis(self, stadt, ware):
        basis = basis_preise[stadt][ware]
        schwankung = get_preisschwankung(self.schwierigkeit)
        faktor = 1 + random.uniform(-schwankung, schwankung)
        preis = max(int(basis * faktor), 1)
        verlauf = self.preisverlauf[stadt][ware]
        verlauf.append(preis)
        if len(verlauf) > 5:
            verlauf.pop(0)
        return preis

    def aktueller_lagerplatz(self):
        return sum(self.lager.values())

    def zeige_status(self):
        print(f"\nüì¶ Runde {self.runde}/{self.max_runden if self.max_runden else '‚àû'}")
        print(f"üèôÔ∏è  Stadt: {ST√ÑDTE[self.position]}")
        print(f"üí∞ Geld: {self.geld} Gold")
        print(f"üì¶ Lagerplatz: {self.aktueller_lagerplatz()}/{self.max_lager}")
        print("üì¶ Lagerbestand:")
        for ware, menge in self.lager.items():
            if menge > 0:
                print(f"  - {WAREN[ware]}: {menge}")
        print("\nüìú Auftr√§ge:")
        for i, auftrag in enumerate(self.auftr√§ge):
            print(f" {i}: {auftrag['menge']} {WAREN[auftrag['ware']]} nach {ST√ÑDTE[auftrag['stadt']]} (Belohnung: {auftrag['belohnung']} Gold)")
        print(f"\nüîß Lager-Upgrades verf√ºgbar: {self.max_lager//50 - 2} (je +50 Platz f√ºr 1000 Gold)")

    def zeige_karte(self):
        print("\nüó∫Ô∏è Minikarte:")
        for stadt_id, name in ST√ÑDTE.items():
            marker = "üõ≥Ô∏è" if stadt_id == self.position else "   "
            print(f"{marker} {stadt_id}: {name}")

    def zeige_handels√ºbersicht(self):
        print("\nüìä Handels√ºbersicht:")
        for ware, name in WAREN.items():
            verlauf = self.preisverlauf[self.position][ware]
            if verlauf:
                verlauf_str = " ‚Üí ".join(str(p) for p in verlauf)
                print(f"{name}: {verlauf_str}")

    def reise(self):
        self.zeige_karte()
        try:
            ziel = int(input("Wohin m√∂chtest du reisen? (ID): "))
            if ziel in ST√ÑDTE and ziel != self.position:
                self.position = ziel
                self.runde += 1
                print(f"Angekommen in {ST√ÑDTE[self.position]}.")
                self.ereignis_ausl√∂sen()
            else:
                print("Ung√ºltiges Ziel.")
        except ValueError:
            print("Bitte g√ºltige Zahl eingeben.")

    def kaufen(self):
        print("\nüõí Waren zum Kauf:")
        for ware in WAREN:
            preis = self.get_aktueller_preis(self.position, ware)
            print(f" {ware}: {WAREN[ware]} ‚Äì {preis} Gold")
        print(" 99: Lager-Upgrades kaufen (+50 Platz, 1000 Gold)")
        try:
            ware_id = int(input("Welche Ware kaufen? (ID): "))
            if ware_id == 99:
                if self.geld >= 1000:
                    self.max_lager += 50
                    self.geld -= 1000
                    print(f"Lagerplatz erh√∂ht! Neuer Platz: {self.max_lager}")
                else:
                    print("Nicht genug Gold f√ºr Lager-Upgrade.")
                return
            menge = int(input("Wie viel kaufen?: "))
            preis = self.get_aktueller_preis(self.position, ware_id)
            kosten = preis * menge
            if menge > 0 and self.geld >= kosten:
                if self.aktueller_lagerplatz() + menge > self.max_lager:
                    print("‚ùå Nicht genug Platz im Lager!")
                    return
                self.geld -= kosten
                self.lager[ware_id] += menge
                print(f"{menge} {WAREN[ware_id]} gekauft f√ºr {kosten} Gold.")
            else:
                print("Nicht genug Geld oder ung√ºltige Menge.")
        except:
            print("Ung√ºltige Eingabe.")

    def verkaufen(self):
        print("\nüí∏ Waren zum Verkauf:")
        for ware in WAREN:
            if self.lager[ware] > 0:
                preis = self.get_aktueller_preis(self.position, ware)
                print(f" {ware}: {WAREN[ware]} ‚Äì {preis} Gold, Lager: {self.lager[ware]}")
        try:
            ware_id = int(input("Welche Ware verkaufen? (ID): "))
            menge = int(input("Wie viel verkaufen?: "))
            if 0 < menge <= self.lager[ware_id]:
                rest = menge
                erf√ºllte = []
                for auftrag in self.auftr√§ge:
                    if auftrag['ware'] == ware_id and auftrag['stadt'] == self.position and rest >= auftrag['menge']:
                        print(f"‚úÖ Auftrag erf√ºllt! +{auftrag['belohnung']} Gold.")
                        self.geld += auftrag['belohnung']
                        self.lager[ware_id] -= auftrag['menge']
                        rest -= auftrag['menge']
                        erf√ºllte.append(auftrag)
                for a in erf√ºllte:
                    self.auftr√§ge.remove(a)
                    self.auftr√§ge.append(random.choice(AUFTR√ÑGE))
                if rest > 0:
                    preis = self.get_aktueller_preis(self.position, ware_id)
                    # Stadt-spezifischer Bonus
                    bonus = 0
                    if self.position in STADT_BONI and ware_id in STADT_BONI[self.position]:
                        bonus = STADT_BONI[self.position][ware_id]
                    einnahmen = int(preis * rest * (1 + bonus))
                    self.geld += einnahmen
                    self.lager[ware_id] -= rest
                    print(f"{rest} {WAREN[ware_id]} verkauft f√ºr {einnahmen} Gold (inkl. Bonus {int(bonus*100)}%).")
            else:
                print("Ung√ºltige Menge.")
        except:
            print("Ung√ºltige Eingabe.")

    def ereignis_ausl√∂sen(self):
        meldung = random.choice(self.meldungen)
        print(f"üì£ Ereignis: {meldung}")

        # Einfluss auf Warenpreise aller Waren der Stadt
        if "Sturm" in meldung:
            self.runde += 1
            print("üå™Ô∏è Der Sturm hat deine Reise verz√∂gert.")
            # Preise aller Waren fallen um 20%
            for ware in WAREN:
                basis_preise[self.position][ware] = max(1, int(basis_preise[self.position][ware] * 0.8))

        elif "Piratenangriff" in meldung:
            ware = random.choice(list(WAREN))
            menge = min(self.lager[ware], random.randint(1, 5))
            self.lager[ware] -= menge
            print(f"‚ö†Ô∏è {menge} {WAREN[ware]} durch Piraten verloren.")

        elif "Gew√ºrze steigen" in meldung:
            basis_preise[self.position][2] = int(basis_preise[self.position][2] * 1.5)

        elif "G√ºnstige Handelsbedingungen" in meldung:
            # Preise aller Waren steigen um 15%
            for ware in WAREN:
                basis_preise[self.position][ware] = int(basis_preise[self.position][ware] * 1.15)

        # Mini-Quest/Ereignis mit Entscheidung
        if random.random() < 0.1:
            print("\nüßô‚Äç‚ôÇÔ∏è Ein H√§ndler bittet dich um Hilfe. M√∂chtest du helfen? (ja/nein)")
            entscheidung = input("> ").lower()
            if entscheidung == "ja":
                kosten = random.randint(100, 300)
                gewinn = kosten * 2
                if self.geld >= kosten:
                    self.geld -= kosten
                    print(f"Du gibst {kosten} Gold aus, aber erh√§ltst sp√§ter {gewinn} Gold zur√ºck.")
                    self.geld += gewinn
                else:
                    print("Du hast nicht genug Gold, um zu helfen.")
            else:
                print("Du hast abgelehnt zu helfen.")

    def spielzug(self):
        self.zeige_status()
        self.zeige_handels√ºbersicht()
        print("\nüéÆ Aktionen:")
        print(" 1: Reisen")
        print(" 2: Kaufen")
        print(" 3: Verkaufen")
        print(" 4: Spielstand speichern")
        print(" 5: Beenden")
        wahl = input("Aktion w√§hlen: ")
        if wahl == "1": self.reise()
        elif wahl == "2": self.kaufen()
        elif wahl == "3": self.verkaufen()
        elif wahl == "4": self.speichern()
        elif wahl == "5": self.runde = self.max_runden
        else: print("Ung√ºltige Eingabe.")

    def speichern(self):
        save_data = {
            "schwierigkeit": self.schwierigkeit,
            "max_runden": self.max_runden,
            "runde": self.runde,
            "geld": self.geld,
            "lager": self.lager,
            "position": self.position,
            "auftr√§ge": self.auftr√§ge,
            "max_lager": self.max_lager
        }
        with open("spielstand.json", "w") as f:
            json.dump(save_data, f)
        print("üíæ Spielstand gespeichert.")

    @staticmethod
    def laden():
        if not os.path.exists("spielstand.json"):
            print("‚ö†Ô∏è Kein gespeicherter Spielstand gefunden.")
            return None
        with open("spielstand.json", "r") as f:
            data = json.load(f)
        spiel = SchiffhandelSpiel(data["schwierigkeit"], data["max_runden"])
        spiel.runde = data["runde"]
        spiel.geld = data["geld"]
        spiel.lager = data["lager"]
        spiel.position = data["position"]
        spiel.auftr√§ge = data["auftr√§ge"]
        spiel.max_lager = data.get("max_lager", 100)
        print("üíæ Spielstand geladen.")
        return spiel

    def spiel_l√§uft(self):
        return self.max_runden == 0 or self.runde < self.max_runden

    def update_highscores(self):
        highscores = []
        if os.path.exists("highscores.json"):
            with open("highscores.json", "r") as f:
                highscores = json.load(f)
        name = input("Name f√ºr Highscore eintragen: ").strip() or "Spieler"
        highscores.append({"name": name, "geld": self.geld})
        highscores.sort(key=lambda x: x["geld"], reverse=True)
        highscores = highscores[:10]
        with open("highscores.json", "w") as f:
            json.dump(highscores, f, indent=2)
        print("\nüèÜ Highscores:")
        for i, entry in enumerate(highscores, 1):
            print(f"{i}. {entry['name']} ‚Äì {entry['geld']} Gold")

# --- Spielstart-Funktion ---

def spiel_starten():
    print("‚öì Willkommen zum Schiffhandelsspiel!")
    print("1: Neues Spiel starten")
    print("2: Spielstand laden")
    auswahl = input("Auswahl: ")
    if auswahl == "2":
        spiel = SchiffhandelSpiel.laden()
        if not spiel:
            return
    else:
        print("Schwierigkeitsgrade:")
        for key, val in SCHWIERIGKEITSGRADE.items():
            print(f" {key}: {val}")
        schwierigkeit = 0
        while schwierigkeit not in SCHWIERIGKEITSGRADE:
            try:
                schwierigkeit = int(input("W√§hle Schwierigkeitsgrad (1‚Äì3): "))
            except: pass
        print("Maximale Runden (0 f√ºr unendlich):")
        max_runden = -1
        while max_runden < 0:
            try:
                max_runden = int(input("Maximale Runden: "))
            except: pass
        spiel = SchiffhandelSpiel(schwierigkeit, max_runden)

    while spiel.spiel_l√§uft():
        spiel.spielzug()

    print("\nüèÅ Spiel beendet!")
    print(f"üí∞ Endkapital: {spiel.geld} Gold")
    spiel.update_highscores()

if __name__ == "__main__":
    spiel_starten()
