import pyautogui
import time
import tkinter as tk
from tkinter import messagebox, END
import threading
import winsound  # –î–ª—è –∑–≤—É–∫–∞ (—Ç–æ–ª—å–∫–æ Windows), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ playsound –∏–ª–∏ –¥—Ä.

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
IMAGE_PATHS = {
    'whisk': 'whisk.png',          # –í–µ–Ω—á–∏–∫
    'water': 'water.png',          # –í–æ–¥–∞
    'vegetable_bowl': 'bowl.png',  # –¢–∞—Ä–µ–ª–∫–∞ –æ–≤–æ—â–µ–π
    'start_button': 'start_button.png'
}

CONFIDENCE = 0.8  # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç 0 –¥–æ 1)

# === –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ===
class AutoCooker:
    def __init__(self):
        self.running = False
        self.paused = False
        self.repeats = 1
        self.cycle_logs = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —Ü–∏–∫–ª—É

    def click_image(self, image_path, button='left'):
        location = pyautogui.locateCenterOnScreen(image_path, confidence=CONFIDENCE)
        if location:
            pyautogui.click(location, button=button)
            return True
        return False

    def cook_cycle(self):
        total_start_time = time.time()
        self.cycle_logs.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        for i in range(self.repeats):
            if not self.running:
                break
            while self.paused:
                time.sleep(0.1)
                if not self.running:
                    break

            cycle_start_time = time.time()

            print(f"\n[–¶–∏–∫–ª {i + 1} –∏–∑ {self.repeats}]")
            status_label.config(text=f"–¶–∏–∫–ª {i + 1} –∏–∑ {self.repeats}")

            # –ü–ö–ú –Ω–∞ –≤–µ–Ω—á–∏–∫
            if self.click_image(IMAGE_PATHS['whisk'], button='right'):
                print("–ù–∞–∂–∞–ª–∏ –ü–ö–ú –Ω–∞ –≤–µ–Ω—á–∏–∫")
                time.sleep(0.7)
            else:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω –≤–µ–Ω—á–∏–∫!")
                continue

            # –ü–ö–ú –Ω–∞ –≤–æ–¥—É
            if self.click_image(IMAGE_PATHS['water'], button='right'):
                print("–ù–∞–∂–∞–ª–∏ –ü–ö–ú –Ω–∞ –≤–æ–¥—É")
                time.sleep(0.7)
            else:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ–¥–∞!")
                continue

            # –ü–ö–ú –Ω–∞ —Ç–∞—Ä–µ–ª–∫—É –æ–≤–æ—â–µ–π
            if self.click_image(IMAGE_PATHS['vegetable_bowl'], button='right'):
                print("–ù–∞–∂–∞–ª–∏ –ü–ö–ú –Ω–∞ —Ç–∞—Ä–µ–ª–∫—É –æ–≤–æ—â–µ–π")
                time.sleep(0.7)
            else:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞—Ä–µ–ª–∫–∞ –æ–≤–æ—â–µ–π!")
                continue

            # –õ–ö–ú –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É"
            if self.click_image(IMAGE_PATHS['start_button'], button='left'):
                print("–ù–∞–∂–∞–ª–∏ –õ–ö–ú –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É'")
                time.sleep(0.3)
            else:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É'!")
                continue

            # –ñ–¥—ë–º 6 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≥–æ—Ç–æ–≤–∫—É
            print("–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∫–∏...")
            status_label.config(text="–ì–æ—Ç–æ–≤–∫–∞... –û–∂–∏–¥–∞–Ω–∏–µ 6 —Å–µ–∫.")
            for _ in range(6):
                if not self.running or self.paused:
                    break
                time.sleep(1)
            print("–ì–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            cycle_duration = time.time() - cycle_start_time
            cycle_timer_label.config(text=f"‚è± –¶–∏–∫–ª: {cycle_duration:.1f} —Å–µ–∫")

            log_entry = {
                'number': i + 1,
                'start_time': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(cycle_start_time)),
                'duration': round(cycle_duration, 1)
            }
            self.cycle_logs.append(log_entry)

            print(f"[–¶–∏–∫–ª {i + 1}] –ó–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {cycle_duration:.1f} —Å–µ–∫")
            update_log_display(log_entry)

        total_duration = time.time() - total_start_time
        print("\n‚úÖ –í—Å–µ —Ü–∏–∫–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        status_label.config(text="‚úÖ –í—Å–µ —Ü–∏–∫–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        total_timer_label.config(text=f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
        self.save_logs_to_file(total_duration)

        # –ì—Ä–æ–º–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.finish_notification()

    def save_logs_to_file(self, total_duration):
        with open("cooking_log.txt", "a", encoding="utf-8") as f:
            f.write(f"\n=== –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            for log in self.cycle_logs:
                f.write(f"[–¶–∏–∫–ª {log['number']}] "
                        f"–°—Ç–∞—Ä—Ç: {log['start_time']} | "
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {log['duration']} —Å–µ–∫\n")
            f.write(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫\n")
            f.write("-" * 50 + "\n")

    def finish_notification(self):
       
        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", "–í—Å–µ —Ü–∏–∫–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    def start(self):
        self.running = True
        self.paused = False
        self.repeats = int(repeat_entry.get())
        thread = threading.Thread(target=self.cook_cycle)
        thread.start()

    def pause(self):
        self.paused = not self.paused
        status_label.config(text="‚è∏ –ü–∞—É–∑–∞" if self.paused else "‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    def stop(self):
        self.running = False
        self.paused = False
        status_label.config(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# === –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
def create_gui():
    global repeat_entry, status_label, cycle_timer_label, total_timer_label, log_text

    root = tk.Tk()
    root.title("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∫–∏")
    root.geometry("600x500")
    root.resizable(False, False)

    tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:", font=("Arial", 12)).pack(pady=10)

    repeat_entry = tk.Entry(root, font=("Arial", 14), justify='center')
    repeat_entry.insert(0, "5")
    repeat_entry.pack(pady=5)

    frame = tk.Frame(root)
    frame.pack(pady=10)

    start_btn = tk.Button(frame, text="‚ñ∂ –°—Ç–∞—Ä—Ç", width=10, command=lambda: cooker.start())
    pause_btn = tk.Button(frame, text="‚è∏ –ü–∞—É–∑–∞", width=10, command=lambda: cooker.pause())
    stop_btn = tk.Button(frame, text="‚èπ –°—Ç–æ–ø", width=10, command=lambda: cooker.stop())

    start_btn.grid(row=0, column=0, padx=5)
    pause_btn.grid(row=0, column=1, padx=5)
    stop_btn.grid(row=0, column=2, padx=5)

    status_label = tk.Label(root, text="üí§ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞", font=("Arial", 12), fg="gray")
    status_label.pack(pady=10)

    cycle_timer_label = tk.Label(root, text="‚è± –¶–∏–∫–ª: 0.0 —Å–µ–∫", font=("Arial", 10), fg="blue")
    cycle_timer_label.pack(pady=5)

    total_timer_label = tk.Label(root, text="‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: 0.0 —Å–µ–∫", font=("Arial", 10), fg="green")
    total_timer_label.pack(pady=5)

    tk.Label(root, text="–ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤:", font=("Arial", 12)).pack(pady=5)
    log_text = tk.Text(root, height=10, width=70, font=("Courier", 10), state='disabled')
    log_text.pack(pady=5)

    footer = tk.Label(root, text="by @assistant", font=("Arial", 8), fg="gray")
    footer.pack(side="bottom", pady=5)

    root.mainloop()

def update_log_display(log_entry):
    log_text.config(state='normal')
    log_text.insert(END, f"[–¶–∏–∫–ª {log_entry['number']}] "
                         f"–°—Ç–∞—Ä—Ç: {log_entry['start_time']} | "
                         f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {log_entry['duration']} —Å–µ–∫\n")
    log_text.config(state='disabled')
    log_text.see(END)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
if __name__ == "__main__":
    cooker = AutoCooker()
    create_gui()