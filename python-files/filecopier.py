{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f7eaf136-02ef-47a6-be73-c1337bcd19a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog\n",
    "\n",
    "def copy_files():\n",
    "    source_folder = source_var.get().strip()\n",
    "    dest_folder = dest_var.get().strip()\n",
    "\n",
    "    if not os.path.isdir(source_folder):\n",
    "        messagebox.showerror(\"Error\", \"Invalid Source Folder Path\")\n",
    "        return\n",
    "    if not os.path.isdir(dest_folder):\n",
    "        messagebox.showerror(\"Error\", \"Invalid Destination Folder Path\")\n",
    "        return\n",
    "\n",
    "    src_sub = os.path.join(dest_folder, \"_src\")\n",
    "    doc_sub = os.path.join(dest_folder, \"_doc\")\n",
    "    mod_sub = os.path.join(dest_folder, \"_mod\")\n",
    "\n",
    "    copied = 0\n",
    "\n",
    "    for filename in os.listdir(source_folder):\n",
    "        full_path = os.path.join(source_folder, filename)\n",
    "        if os.path.isfile(full_path):\n",
    "            if os.path.exists(os.path.join(src_sub, filename)):\n",
    "                shutil.copy2(full_path, src_sub)\n",
    "                copied += 1\n",
    "            elif os.path.exists(os.path.join(doc_sub, filename)):\n",
    "                shutil.copy2(full_path, doc_sub)\n",
    "                copied += 1\n",
    "            elif os.path.exists(os.path.join(mod_sub, filename)):\n",
    "                shutil.copy2(full_path, mod_sub)\n",
    "                copied += 1\n",
    "\n",
    "    messagebox.showinfo(\"Done\", f\"Copying completed.\\nTotal files copied: {copied}\")\n",
    "\n",
    "def browse_source():\n",
    "    folder = filedialog.askdirectory()\n",
    "    if folder:\n",
    "        source_var.set(folder)\n",
    "\n",
    "def browse_dest():\n",
    "    folder = filedialog.askdirectory()\n",
    "    if folder:\n",
    "        dest_var.set(folder)\n",
    "\n",
    "# GUI\n",
    "root = tk.Tk()\n",
    "root.title(\"ASCET File Copier\")\n",
    "root.geometry(\"600x200\")  # Set default window size\n",
    "root.resizable(False, False)  # Fixed size window\n",
    "\n",
    "main_frame = tk.Frame(root, padx=15, pady=15)\n",
    "main_frame.pack(fill=\"both\", expand=True)\n",
    "\n",
    "source_var = tk.StringVar()\n",
    "dest_var = tk.StringVar()\n",
    "\n",
    "# Row 1: Source folder\n",
    "tk.Label(main_frame, text=\"ASCET Generated Folder:\", font=(\"Segoe UI\", 10)).grid(row=0, column=0, sticky=\"e\", padx=5, pady=10)\n",
    "tk.Entry(main_frame, textvariable=source_var, width=45, font=(\"Segoe UI\", 10)).grid(row=0, column=1, padx=5, pady=10)\n",
    "tk.Button(main_frame, text=\"Browse\", command=browse_source, font=(\"Segoe UI\", 9), width=10).grid(row=0, column=2, padx=5, pady=10)\n",
    "\n",
    "# Row 2: Destination folder\n",
    "tk.Label(main_frame, text=\"Target FC Folder:\", font=(\"Segoe UI\", 10)).grid(row=1, column=0, sticky=\"e\", padx=5, pady=10)\n",
    "tk.Entry(main_frame, textvariable=dest_var, width=45, font=(\"Segoe UI\", 10)).grid(row=1, column=1, padx=5, pady=10)\n",
    "tk.Button(main_frame, text=\"Browse\", command=browse_dest, font=(\"Segoe UI\", 9), width=10).grid(row=1, column=2, padx=5, pady=10)\n",
    "\n",
    "# Row 3: Action button\n",
    "tk.Button(main_frame, text=\"Copy Files\", command=copy_files, bg=\"#4da6ff\", fg=\"white\",\n",
    "          font=(\"Segoe UI\", 11, \"bold\"), width=20, height=2).grid(row=2, column=0, columnspan=3, pady=20)\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f968803-337c-4bbd-af1f-f218095c3c46",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8deba4bc-077b-4945-85a3-cb4c5a3aa2e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
