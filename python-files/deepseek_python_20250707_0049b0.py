import os
import sys
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import time
import schedule
import pytz
import configparser
import logging
from win10toast import ToastNotifier
import threading

# Configuration de base
VERSION = "1.0"
APP_NAME = "Turfoo Quinte Automatique"
CONFIG_FILE = "quinte_config.ini"
LOG_FILE = "quinte_system.log"
ICON_FILE = "quinte_icon.ico"

# Configuration des op√©rateurs SMS
CARRIER_DOMAINS = {
    'airtelgabon': 'sms.airtelgabon.com',
    'orange': 'orange.fr',
    'sfr': 'sfr.fr',
    'free': 'free.fr',
    'bouygues': 'bouyguestelecom.fr'
}

# Configuration des points
POINTS_PAR_POSITION = {
    1: 50, 2: 25, 3: 13, 4: 6, 
    5: 3, 6: 1, 7: 1, 8: 1
}

# Sources de pronostics
SOURCES = [
    "Le Parisien",
    "Le Progr√®s de Lyon",
    "WeekEnd",
    "Midi Libre",
    "Le Quotidien de la R√©union"
]

class QuinteSystem:
    def __init__(self):
        self.tz_gabon = pytz.timezone('Africa/Libreville')
        self.toaster = ToastNotifier()
        self.config = self.load_config()
        self.running = True
        self.logger = self.setup_logger()
        
        # Afficher notification de d√©marrage
        self.show_notification(f"{APP_NAME} d√©marr√©", "Le syst√®me fonctionne en arri√®re-plan")
        
    def setup_logger(self):
        """Configure le syst√®me de journalisation"""
        logger = logging.getLogger('QuinteSystem')
        logger.setLevel(logging.INFO)
        
        # Format des logs
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        
        # Handler pour fichier log
        file_handler = logging.FileHandler(LOG_FILE)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        # Handler pour console
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        return logger
    
    def load_config(self):
        """Charge ou cr√©e la configuration"""
        config = configparser.ConfigParser()
        
        # Cr√©er la configuration par d√©faut si elle n'existe pas
        if not os.path.exists(CONFIG_FILE):
            config['EMAIL'] = {
                'sender': 'dkprods777@gmail.com',
                'password': '',
                'receiver': 'dkprods777@gmail.com'
            }
            config['SMS'] = {
                'phone': '+24174599459',
                'carrier': 'airtelgabon'
            }
            config['SETTINGS'] = {
                'first_run': '1'
            }
            
            with open(CONFIG_FILE, 'w') as configfile:
                config.write(configfile)
        
        # Lire la configuration
        config.read(CONFIG_FILE)
        return config
    
    def show_notification(self, title, message):
        """Affiche une notification Windows"""
        try:
            self.toaster.show_toast(
                title,
                message,
                icon_path=ICON_FILE if os.path.exists(ICON_FILE) else None,
                duration=5,
                threaded=True
            )
        except Exception as e:
            self.logger.error(f"Erreur notification: {str(e)}")
    
    def get_quinte_pronos(self):
        """R√©cup√®re les pronostics depuis Turfoo"""
        try:
            url = "https://www.turfoo.fr/pronostics-pmu/tierce/presse/"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept-Language': 'fr-FR,fr;q=0.9'
            }
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            course_title = soup.find('h1', class_='entry-title').text.strip()
            self.logger.info(f"Course identifi√©e: {course_title}")
            
            # V√©rification du type de course
            if "trot attel√©" not in course_title.lower():
                return None, course_title, "Pas de course de trot attel√© aujourd'hui", None
            
            # Extraction de l'heure de la course
            course_time = None
            time_tag = soup.find('span', class_='heure-course')
            if time_tag:
                course_time = time_tag.text.strip()
                self.logger.info(f"Heure de la course: {course_time}")
            
            table = soup.find('table', class_='tablepress')
            if not table:
                raise Exception("Tableau des pronostics introuvable")
            
            pronos = {}
            for row in table.find_all('tr')[1:]:
                cells = row.find_all('td')
                if len(cells) < 6:
                    continue
                    
                site_name = cells[0].text.strip()
                if site_name in SOURCES:
                    chevaux = []
                    for i in range(1, 9):
                        if i < len(cells):
                            cheval = cells[i].text.strip()
                            if cheval:
                                chevaux.append(cheval)
                    pronos[site_name] = chevaux
            
            return pronos, course_title, None, course_time
            
        except Exception as e:
            self.logger.error(f"Erreur scraping: {str(e)}")
            return None, None, str(e), None
    
    def apply_special_trick(self, pronos):
        """Applique la m√©thode de calcul sp√©ciale"""
        points_par_cheval = {}
        for site, chevaux in pronos.items():
            for position, cheval in enumerate(chevaux, start=1):
                pts = POINTS_PAR_POSITION.get(position, 0)
                points_par_cheval[cheval] = points_par_cheval.get(cheval, 0) + pts
        
        # Tri par points d√©croissants
        sorted_chevaux = sorted(points_par_cheval.items(), key=lambda x: x[1], reverse=True)
        return sorted_chevaux
    
    def send_email(self, subject, body, is_html=False):
        """Envoie un email"""
        try:
            sender = self.config['EMAIL']['sender']
            password = self.config['EMAIL']['password']
            receiver = self.config['EMAIL']['receiver']
            
            msg = MIMEMultipart()
            msg['From'] = sender
            msg['To'] = receiver
            msg['Subject'] = subject
            
            if is_html:
                msg.attach(MIMEText(body, 'html'))
            else:
                msg.attach(MIMEText(body, 'plain'))
            
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, receiver, msg.as_string())
            server.quit()
            
            self.logger.info("Email envoy√© avec succ√®s")
            return True
        except Exception as e:
            self.logger.error(f"Erreur envoi email: {str(e)}")
            return False
    
    def send_sms(self, message):
        """Envoie un SMS"""
        try:
            phone = self.config['SMS']['phone']
            carrier = self.config['SMS']['carrier'].lower()
            
            if carrier not in CARRIER_DOMAINS:
                self.logger.error(f"Op√©rateur non pris en charge: {carrier}")
                return False
                
            sender = self.config['EMAIL']['sender']
            password = self.config['EMAIL']['password']
            sms_gateway = f"{phone}@{CARRIER_DOMAINS[carrier]}"
            
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, sms_gateway, message)
            server.quit()
            
            self.logger.info("SMS envoy√© avec succ√®s")
            return True
        except Exception as e:
            self.logger.error(f"Erreur envoi SMS: {str(e)}")
            return False
    
    def generate_report(self, pronos, course_title, resultats, course_time=None, is_update=False):
        """G√©n√®re le rapport de pronostics"""
        now_gabon = datetime.now(self.tz_gabon).strftime('%d/%m/%Y %H:%M')
        
        if is_update:
            subject = f"üîÑ Mise √† jour Pronostics Quinte - {datetime.now(self.tz_gabon).strftime('%d/%m/%Y')}"
            header = "MISE √Ä JOUR DES PRONOSTICS (1h avant la course)"
        else:
            subject = f"üèá Pronostics Quinte du Jour - {datetime.now(self.tz_gabon).strftime('%d/%m/%Y')}"
            header = "PRONOSTICS INITIAUX"
        
        # Version texte pour SMS et notification
        text_content = f"{header}\n\n"
        text_content += f"Course: {course_title}\n"
        if course_time:
            text_content += f"Heure: {course_time}\n"
        text_content += f"Date: {now_gabon}\n\n"
        
        text_content += "Votre s√©lection :\n"
        for i, (cheval, points) in enumerate(resultats[:5], 1):
            text_content += f"{i}. {cheval} ({points} points)\n"
        
        text_content += "\nBonne chance pour vos paris!"
        
        return subject, text_content
    
    def daily_task(self, is_update=False):
        """T√¢che principale ex√©cut√©e aux heures programm√©es"""
        self.logger.info(f"D√©but de la t√¢che {'de mise √† jour' if is_update else 'quotidienne'}")
        
        try:
            # R√©cup√©ration des pronostics
            pronos, course_title, error, course_time = self.get_quinte_pronos()
            
            if error:
                # Gestion des erreurs
                if "trot attel√©" in error:
                    msg = "Pas de course de trot attel√© aujourd'hui"
                    self.show_notification("Pas de course", msg)
                else:
                    msg = f"Erreur: {error}"
                    self.show_notification("Erreur syst√®me", msg)
                
                # Envoi notification
                email_subject = "Turfoo Quinte - Notification"
                self.send_email(email_subject, msg)
                self.send_sms(msg)
                return
            
            # Application de la m√©thode de calcul
            resultats = self.apply_special_trick(pronos)
            
            # G√©n√©ration du rapport
            subject, text_report = self.generate_report(
                pronos, course_title, resultats, course_time, is_update
            )
            
            # Envoi des notifications
            email_sent = self.send_email(subject, text_report)
            sms_sent = self.send_sms(text_report)
            
            # Notification Windows
            if email_sent and sms_sent:
                notif_msg = "Pronostics envoy√©s par email et SMS"
            elif email_sent:
                notif_msg = "Pronostics envoy√©s par email"
            elif sms_sent:
                notif_msg = "Pronostics envoy√©s par SMS"
            else:
                notif_msg = "√âchec de l'envoi des notifications"
            
            self.show_notification("Pronostics Quinte", notif_msg)
            self.logger.info("T√¢che termin√©e avec succ√®s")
            
        except Exception as e:
            self.logger.error(f"Erreur dans la t√¢che: {str(e)}")
            self.show_notification("Erreur syst√®me", f"Une erreur s'est produite: {str(e)}")
    
    def schedule_tasks(self):
        """Planifie les t√¢ches quotidiennes"""
        # Premier envoi √† 10h30 (heure du Gabon)
        schedule.every().day.at("10:30").do(lambda: self.daily_task()).tag("daily")
        self.logger.info("T√¢che programm√©e: Envoi quotidien √† 10h30")
        
        # V√©rification pour le deuxi√®me envoi (1h avant la course)
        def check_second_send():
            now = datetime.now(self.tz_gabon)
            if now.hour >= 12:
                # En pratique, on utiliserait l'heure r√©elle de la course
                # Pour cet exemple, supposons une course √† 15h30
                course_time = now.replace(hour=15, minute=30, second=0, microsecond=0)
                if now >= (course_time - timedelta(hours=1)) and now < course_time:
                    self.daily_task(is_update=True)
        
        schedule.every(10).minutes.do(check_second_send)
        self.logger.info("V√©rification programm√©e pour l'envoi 1h avant la course")
    
    def run(self):
        """Point d'entr√©e principal de l'application"""
        self.logger.info(f"=== {APP_NAME} v{VERSION} ===")
        self.logger.info("Chargement de la configuration...")
        
        # V√©rifier la configuration email
        if not self.config['EMAIL']['password']:
            self.logger.error("Mot de passe email non configur√©!")
            self.show_notification(
                "Configuration requise", 
                "Veuillez configurer votre mot de passe email dans quinte_config.ini"
            )
            return
        
        # Planifier les t√¢ches
        self.schedule_tasks()
        
        # Boucle principale
        self.logger.info("D√©marrage de la boucle principale...")
        try:
            while self.running:
                schedule.run_pending()
                time.sleep(30)
        except KeyboardInterrupt:
            self.logger.info("Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            self.logger.error(f"Erreur critique: {str(e)}")
        finally:
            self.logger.info("Arr√™t du syst√®me")

def create_shortcut():
    """Cr√©e un raccourci dans le dossier D√©marrage"""
    if getattr(sys, 'frozen', False):
        app_path = sys.executable
    else:
        app_path = os.path.abspath(__file__)
    
    startup_dir = os.path.join(
        os.getenv('APPDATA'), 
        'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup'
    )
    shortcut_path = os.path.join(startup_dir, "QuinteSystem.lnk")
    
    if not os.path.exists(shortcut_path):
        try:
            import winshell
            from win32com.client import Dispatch
            
            shell = Dispatch('WScript.Shell')
            shortcut = shell.CreateShortCut(shortcut_path)
            shortcut.Targetpath = app_path
            shortcut.WorkingDirectory = os.path.dirname(app_path)
            shortcut.IconLocation = os.path.join(os.path.dirname(app_path), ICON_FILE)
            shortcut.save()
            return True
        except Exception as e:
            print(f"Erreur cr√©ation raccourci: {str(e)}")
            return False
    return True

if __name__ == "__main__":
    # Cr√©er le raccourci de d√©marrage
    create_shortcut()
    
    # D√©marrer le syst√®me
    system = QuinteSystem()
    system.run()