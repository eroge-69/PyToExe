import csv
import requests
import time
from tqdm import tqdm
from datetime import datetime

# —á–∏—Ç–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏
with open("web.txt", "r") as f:
    WEBHOOK = f.read().strip().rstrip('/')

# –±–∞–∑–æ–≤—ã–µ URL
CATALOG_LIST_URL = f"{WEBHOOK}/catalog.catalog.list"
PRODUCT_LIST_URL = f"{WEBHOOK}/catalog.product.list"
OFFER_UPDATE_URL = f"{WEBHOOK}/catalog.product.offer.update"

# –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
log_filename = f"log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

def log(message):
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(message + "\n")
    print(message)

def make_api_request(url, payload, method_name):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        log(f"üì° {method_name} –∑–∞–ø—Ä–æ—Å: {payload}")
        r = requests.post(url, json=payload, timeout=30)
        log(f"üì° {method_name} —Å—Ç–∞—Ç—É—Å: {r.status_code}")
        
        r.raise_for_status()
        data = r.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Bitrix24
        if isinstance(data, dict) and "error" in data:
            error_msg = data.get("error_description", str(data))
            raise Exception(f"API –æ—à–∏–±–∫–∞: {error_msg}")
            
        return data
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
        raise

def get_catalog_iblock():
    """–ü–æ–ª—É—á–∞–µ–º iblockId –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π"""
    try:
        data = make_api_request(CATALOG_LIST_URL, {}, "catalog.list")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        catalogs = data.get("result", {}).get("catalogs", [])
        if not catalogs:
            catalogs = data.get("result", [])
        
        if not catalogs:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
            
        # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥ (–∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
        if len(catalogs) >= 2:
            catalog_for_offers = catalogs[1]
        else:
            catalog_for_offers = catalogs[0]
            
        iblock_id = catalog_for_offers.get("iblockId") or catalog_for_offers.get("ID")
        
        if not iblock_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å iblockId –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
        log(f"‚úÖ –ù–∞–π–¥–µ–Ω iblockId = {iblock_id} (–∫–∞—Ç–∞–ª–æ–≥: {catalog_for_offers.get('name')})")
        return iblock_id
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ iblockId: {e}")
        raise

def get_product_variations(product_id, iblock_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –ø–æ parentId"""
    payload = {
        "select": ["id", "xmlId", "name", "parentId", "iblockId"],
        "filter": {
            "parentId": int(product_id),
            "iblockId": int(iblock_id)
        }
    }
    
    try:
        data = make_api_request(PRODUCT_LIST_URL, payload, "product.list")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        products = data.get("result", {}).get("products", [])
        if not isinstance(products, list):
            products = []
            
        log(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {len(products)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º xmlId –≤–∞—Ä–∏–∞—Ü–∏–π
        xml_ids = []
        for product in products:
            if isinstance(product, dict):
                xml_id = product.get("xmlId")
                if xml_id:
                    xml_ids.append(xml_id)
                    log(f"  - –í–∞—Ä–∏–∞—Ü–∏—è XML_ID: {xml_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('name')}")
        
        return xml_ids
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–π: {e}")
        return []

def update_offer_purchasing_price(xml_id, new_price):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –≤–∞—Ä–∏–∞—Ü–∏–∏"""
    payload = {
        "id": xml_id,
        "fields": {"purchasingPrice": float(new_price)}
    }
    
    try:
        data = make_api_request(OFFER_UPDATE_URL, payload, "offer.update")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = data.get("result", {})
        if result:
            log(f"‚úÖ –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ {xml_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É")
            
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def process_product(product_id, new_price, iblock_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        xml_ids = get_product_variations(product_id, iblock_id)
        
        if not xml_ids:
            log(f"‚ö†Ô∏è –£ —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–π")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
        success_count = 0
        for xml_id in xml_ids:
            try:
                update_offer_purchasing_price(xml_id, new_price)
                log(f"‚úÖ –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ {xml_id} —Ç–æ–≤–∞—Ä–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞")
                success_count += 1
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ {xml_id}: {e}")
            
            time.sleep(0.3)
        
        log(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π: {success_count}/{len(xml_ids)}")
        return success_count > 0
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ---
try:
    log("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ iblockId...")
    IBLOCK_ID = get_catalog_iblock()
except Exception as e:
    log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    exit(1)

# –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
try:
    with open("products.csv", newline="", encoding="utf-8") as csvfile:
        reader = list(csv.DictReader(csvfile))
        log(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(reader)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        total_items = len(reader)
        success_count = 0
        error_count = 0
        
        for i, row in enumerate(tqdm(reader, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", unit="—Ç–æ–≤–∞—Ä")):
            product_id = row.get("id", "").strip()
            new_price = row.get("price", "").strip()
            
            if not product_id or not new_price:
                log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–ª–∏ —Ü–µ–Ω–∞")
                error_count += 1
                continue
            
            log(f"\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {product_id} ‚Üí —Ü–µ–Ω–∞ {new_price}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
            if process_product(product_id, new_price, IBLOCK_ID):
                success_count += 1
            else:
                error_count += 1
            
            time.sleep(0.5)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        log(f"\nüìä –ò–¢–û–ì:")
        log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        log(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {error_count}")
        log(f"üìã –í—Å–µ–≥–æ: {total_items}")
            
except FileNotFoundError:
    log("‚ùå –§–∞–π–ª products.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")

log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –ª–æ–≥–∞–º–∏ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—Ö–æ–≤
try:
    with open(log_filename, "r", encoding="utf-8") as f:
        all_logs = f.readlines()
    
    # –õ–æ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    error_logs = [line for line in all_logs if "‚ùå" in line or "‚ö†Ô∏è" in line or "–û—à–∏–±–∫–∞" in line]
    if error_logs:
        with open(f"error_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", "w", encoding="utf-8") as f:
            f.writelines(error_logs)
    
    # –õ–æ–≥–∏ —É—Å–ø–µ—Ö–æ–≤
    success_logs = [line for line in all_logs if "‚úÖ" in line and "‚ùå" not in line and "–û—à–∏–±–∫–∞" not in line]
    if success_logs:
        with open(f"success_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", "w", encoding="utf-8") as f:
            f.writelines(success_logs)

except Exception as e:
    log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {e}")
