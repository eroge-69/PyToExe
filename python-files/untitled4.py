# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lay2YY2QpKMnozSIWm-VkhHwu_CeOmZa
"""

# üìå Importa√ß√µes de bibliotecas necess√°rias
import pandas as pd
import os
from datetime import datetime   # Para obter a data e hora atuais
import pytz                     # Para lidar com fusos hor√°rios
import tkinter as tk
from tkinter import filedialog, messagebox

# --- Passo 1: Selecionar os arquivos para processar ---
root = tk.Tk()
root.withdraw()  # Esconde a janela principal do Tkinter

messagebox.showinfo("Sele√ß√£o de arquivos", "Selecione os arquivos que deseja processar.")
caminhos_arquivos = filedialog.askopenfilenames(
    title="Selecione os arquivos",
    filetypes=[
        ("Arquivos Excel", "*.xlsx *.xls"),
        ("Arquivos CSV", "*.csv"),
        ("Arquivos INF", "*.inf"),
        ("Todos os arquivos", "*.*"),
    ]
)

if not caminhos_arquivos:
    messagebox.showerror("Erro", "Nenhum arquivo foi selecionado!")
    raise SystemExit

# O arquivo de sa√≠da ser√° salvo na mesma pasta do primeiro arquivo selecionado
diretorio_saida = os.path.dirname(caminhos_arquivos[0])

# --- Passo 2: Ler e concatenar os dados de todos os arquivos selecionados ---
lista_dataframes = []
for caminho_arquivo in caminhos_arquivos:
    extensao = os.path.splitext(caminho_arquivo)[1].lower()

    try:
        if extensao in [".xlsx", ".xls"]:
            df_temp = pd.read_excel(caminho_arquivo)
        elif extensao in [".csv", ".inf"]:
            try:
                df_temp = pd.read_csv(caminho_arquivo, sep=";")
            except Exception:
                try:
                    df_temp = pd.read_csv(caminho_arquivo, sep=",")
                except Exception:
                    df_temp = pd.read_csv(caminho_arquivo, sep="\t")
        else:
            print(f"Formato n√£o suportado: {caminho_arquivo}")
            continue

        lista_dataframes.append(df_temp)
    except Exception as e:
        print(f"Erro ao ler {caminho_arquivo}: {e}")

if not lista_dataframes:
    messagebox.showerror("Erro", "Nenhum arquivo v√°lido foi lido!")
    raise SystemExit

df_consolidado = pd.concat(lista_dataframes, ignore_index=True)

# --- Passo 3: Filtrar pela coluna 'Fase' ---
# Remove espa√ßos extras
if "Fase" not in df_consolidado.columns:
    messagebox.showerror("Erro", "A coluna 'Fase' n√£o foi encontrada nos arquivos.")
    raise SystemExit

df_consolidado["Fase"] = df_consolidado["Fase"].astype(str).str.strip()
valores_validos_fase = ["Entrada Cdd/Fab", "Saida Cdd/Fab"]
df_filtrado = df_consolidado[df_consolidado["Fase"].isin(valores_validos_fase)]

# --- Passo 4: Exportar o resultado ---
fuso_horario_sp = pytz.timezone("America/Sao_Paulo")
agora_sp = datetime.now(fuso_horario_sp)
timestamp = agora_sp.strftime("%Y%m%d_%H%M%S")

nome_arquivo_saida_xlsx = os.path.join(diretorio_saida, f"resultado_unico_{timestamp}.xlsx")
df_filtrado.to_excel(nome_arquivo_saida_xlsx, index=False)

messagebox.showinfo("Sucesso", f"Arquivo salvo em:\n{nome_arquivo_saida_xlsx}")