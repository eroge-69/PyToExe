# -*- coding: utf-8 -*-
"""SALARYBUDGETCALCULATOR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqUzdA8q0ugu_dmv9YL0V3EAH8YjIaSI
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math
from textwrap import dedent

GOAL = 1_000_000  # millionaire target

BUDGET_METHODS = {
    "50/30/20 (All Your Worth)": {
        "percents": {
            "Needs": 50,
            "Wants": 30,
            "Savings/Debt": 20,
        },
        "summary": "A simple rule from Elizabeth Warren‚Äôs book: 50% on needs, 30% on wants, 20% on savings/debt. Great for balanced beginners.",
    },
    "Barefoot Buckets": {
        "percents": {
            "Everyday (needs)": 60,
            "Splurge (fun)": 10,
            "Fire Extinguisher (emergency/debt)": 10,
            "Smile (savings/goals)": 20,
        },
        "summary": "From Scott Pape‚Äôs *The Barefoot Investor*: split money into buckets for living, fun, emergencies, and future goals.",
    },
    "Ramsey-Inspired (Debt First)": {
        "percents": {
            "Essentials": 70,
            "Wants": 0,
            "Debt/Savings": 30,
        },
        "summary": "Dave Ramsey‚Äôs approach: cut out wants, attack debt hard, then save. Very strict but effective for debt elimination.",
    },
    "Pay Yourself First 30%": {
        "percents": {
            "Savings/Investments": 30,
            "Needs": 60,
            "Wants": 10,
        },
        "summary": "Pay yourself first: prioritize savings (30%) before spending on anything else. Then cover needs and leave a little for wants.",
    },
    "Custom (you set %s)": {
        "percents": {
            "Needs": 50,
            "Wants": 20,
            "Savings/Investments": 30,
        },
        "summary": "A flexible template where you can set your own percentages. Make sure the total adds up to 100%.",
    },
}

def thousands(n):
    return f"{n:,.2f}".rstrip('0').rstrip('.')  # pretty formatting

def sum_perc(d):
    return sum(d.values())

def prompt_float(msg, min_val=None, max_val=None):
    while True:
        raw = input(msg).strip()
        try:
            val = float(raw)
            if min_val is not None and val < min_val:
                print(f"Please enter a value ‚â• {min_val}.")
                continue
            if max_val is not None and val > max_val:
                print(f"Please enter a value ‚â§ {max_val}.")
                continue
            return val
        except ValueError:
            print("Please enter a numeric value.")

def choose_method():
    print("\nChoose a budgeting method:\n")
    names = list(BUDGET_METHODS.keys())
    for i, name in enumerate(names, 1):
        print(f"  {i}. {name}")
    while True:
        choice = input("\nEnter choice number: ").strip()
        if not choice.isdigit():
            print("Please enter a valid number.")
            continue
        idx = int(choice)
        if 1 <= idx <= len(names):
            return names[idx - 1]
        print("Out of range. Try again.")

def maybe_customize_percents(pcts):
    print("\nCurrent percentages:")
    for k, v in pcts.items():
        print(f"  - {k}: {v}%")
    ans = input("\nDo you want to edit these percentages? (y/N): ").strip().lower()
    if ans != "y":
        return pcts

    edited = {}
    for k, v in pcts.items():
        new_v = prompt_float(f"Enter % for '{k}' (current {v}%): ", min_val=0, max_val=100)
        edited[k] = new_v

    total = sum_perc(edited)
    if abs(total - 100) > 1e-6:
        print(f"\n‚ö†Ô∏è Percentages must sum to 100%. You entered {total:.2f}%.")
        print("Reverting to previous values.")
        return pcts
    return edited

def compute_breakdown(monthly_salary, percents):
    breakdown = {}
    for cat, pct in percents.items():
        breakdown[cat] = monthly_salary * (pct / 100.0)
    return breakdown

def pick_savings_stream(breakdown):
    keywords = ("saving", "invest", "debt", "smile", "fire extinguisher")
    total = 0.0
    for cat, amt in breakdown.items():
        if any(key in cat.lower() for key in keywords):
            total += amt
    if total == 0:
        for cat, amt in breakdown.items():
            if not any(k in cat.lower() for k in ("need", "essential", "everyday", "want", "splurge")):
                total += amt
    return total

def millionaire_suggestions():
    tips = [
        "üîπ Increase your savings rate (reduce wants, boost savings).",
        "üîπ Find ways to increase income (side hustle, promotion, new skills).",
        "üîπ Avoid unnecessary debt ‚Äî interest works against you.",
        "üîπ Automate savings so you never forget to invest in your future.",
        "üîπ Track expenses regularly to identify leaks in your budget.",
        "üîπ Revisit your budget yearly as your income grows.",
    ]
    print("\n--- Suggestions to Achieve Millionaire Status Sooner ---")
    for t in tips:
        print(t)

def main():
    print(dedent("""
    ==========================================
               Budget & Millionaire
    ==========================================
    """).strip())

    monthly_salary = prompt_float("Enter your MONTHLY salary: ", min_val=0.01)

    method_name = choose_method()
    method = BUDGET_METHODS[method_name]
    percents = method["percents"].copy()

    print(f"\n=== {method_name} ===")
    print(f"Summary: {method['summary']}")

    percents = maybe_customize_percents(percents)

    total_pct = sum_perc(percents)
    if abs(total_pct - 100) > 1e-6:
        print(f"\n‚ö†Ô∏è The chosen percentages add up to {total_pct:.2f}%, not 100%.")
        print("Please rerun and fix percentages.")
        return

    breakdown = compute_breakdown(monthly_salary, percents)

    print(f"\n--- {method_name} ‚Äî Monthly Breakdown ---")
    for cat, amt in breakdown.items():
        print(f"  {cat:25s} : {thousands(amt)}")

    monthly_savings = pick_savings_stream(breakdown)
    print(f"\nEstimated monthly savings used for millionaire goal: {thousands(monthly_savings)}")

    print("\n--- Millionaire Projection ---")
    if monthly_savings <= 0:
        print("Not reachable (monthly savings must be greater than 0).")
    else:
        years = GOAL / (monthly_savings * 12)
        print(f"You will reach 1,000,000 in ~{years:.2f} years (no investment growth).")

    # Show tips at the end
    millionaire_suggestions()

if __name__ == "__main__":
    main()