{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPwhYzftEHr4ZFRMkw8agfu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b2fxd7jXqMgR","executionInfo":{"status":"ok","timestamp":1758046500881,"user_tz":-180,"elapsed":13,"user":{"displayName":"Fresh Meat","userId":"01757100079121677924"}},"outputId":"84a6293e-9d60-4801-dad2-29e2a6a1f4f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["ЗАДАНИЕ 1\n","Вероятность ошибки одного бита p0 = 0.001\n","\n","а) Контроль по паритету для 8-битовых блоков:\n","Вероятность обнаружения ошибки: 0.99997217\n","Вероятность необнаружения ошибки: 0.000027832489\n","\n","б) Контроль по вертикальному и горизонтальному паритету для 64-битовых блоков:\n","Вероятность обнаружения ошибки: 0.069234070186\n","Вероятность необнаружения ошибки: 0.9307659298144084\n","\n","в) Циклический избыточный контроль для 1024-битовых блоков:\n","Вероятность обнаружения ошибки: 0.999984741211\n","Вероятность необнаружения ошибки: 0.0000152587890625\n","\n","Сравнительная таблица:\n","Метод контроля\t\tВероятность обнаружения\n","--------------------------------------------------\n","Паритет (8 бит)\t\t0.9999721675\n","Двойной паритет (64 бит)\t0.0692340702\n","CRC-16 (1024 бит)\t0.9999847412\n"]}],"source":["import math\n","print(\"ЗАДАНИЕ 1\")\n","def main():\n","    # Исходные данные\n","    p0 = 10**-3  # вероятность ошибки одного бита\n","\n","    print(\"Вероятность ошибки одного бита p0 =\", p0)\n","    print()\n","\n","    # a) Контроль по паритету для 8-битовых блоков\n","    print(\"а) Контроль по паритету для 8-битовых блоков:\")\n","    n_a = 9  # 7 бит данных + 1 бит паритета\n","\n","\n","    P_und_a = (math.comb(8, 2) * (p0**2) * ((1-p0)**6) +\n","                     math.comb(8, 4) * (p0**4) * ((1-p0)**4) +\n","                     math.comb(8, 6) * (p0**6) * ((1-p0)**2) +\n","                     math.comb(8, 8) * (p0**8))\n","\n","    P_det_a = 1 - P_und_a\n","    print(f\"Вероятность обнаружения ошибки: {P_det_a:.8f}\")\n","    print(f\"Вероятность необнаружения ошибки: {P_und_a:.12f}\")\n","    print()\n","\n","    # б) Контроль по вертикальному и горизонтальному паритету для 64-битовых блоков\n","    print(\"б) Контроль по вертикальному и горизонтальному паритету для 64-битовых блоков:\")\n","\n","    n__total_b = 64 + 8 + 8 + 1 # всего бит в блоке\n","\n","    rows = 8\n","    columns = 8\n","\n","    # Вероятность четного числа ошибок в одной строке (9 бит: 8 данных + 1 паритет)\n","    P_all_rows = 0\n","    for k in range(0, 10, 2):  # четные числа ошибок\n","        P_all_rows += math.comb(9, k) * (p0**k) * ((1-p0)**(9-k))\n","\n","    # Вероятность необнаружения ошибки\n","    P_und_b = P_all_rows**8  # для всех 8 строк\n","\n","    P_det_b = 1 - P_und_b\n","    print(f\"Вероятность обнаружения ошибки: {P_det_b:.12f}\")\n","    print(f\"Вероятность необнаружения ошибки: {P_und_b:.16f}\")\n","    print()\n","\n","    # в) Циклический избыточный контроль для 1024-битовых блоков\n","    print(\"в) Циклический избыточный контроль для 1024-битовых блоков:\")\n","    n_c_data = 1024  # бит данных\n","    n_c_crc = 16     # бит CRC\n","    n_c_total = n_c_data + n_c_crc\n","\n","    P_und_c = 2**(-n_c_crc)  # приближенная оценка\n","\n","    P_det_c = 1 - P_und_c\n","    print(f\"Вероятность обнаружения ошибки: {P_det_c:.12f}\")\n","    print(f\"Вероятность необнаружения ошибки: {P_und_c:.16f}\")\n","    print()\n","\n","    # Сравнительная таблица\n","    print(\"Сравнительная таблица:\")\n","    print(\"Метод контроля\\t\\tВероятность обнаружения\")\n","    print(\"-\" * 50)\n","    print(f\"Паритет (8 бит)\\t\\t{P_det_a:.10f}\")\n","    print(f\"Двойной паритет (64 бит)\\t{P_det_b:.10f}\")\n","    print(f\"CRC-16 (1024 бит)\\t{P_det_c:.10f}\")\n","\n","if __name__ == \"__main__\":\n","    main()"]}]}