import tkinter as tk
from tkinter import messagebox, ttk

questions =  [
    {
        "question": "–©–æ —Å–ª—ñ–¥ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–º—ñ–Ω–æ—é –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞?",
        "options": ["–¢–∏–ø –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∏", "–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ —Å–æ–∫–µ—Ç–æ–º –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ—ó –ø–ª–∞—Ç–∏", "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", "–¢–∏–ø –º–æ–Ω—ñ—Ç–æ—Ä–∞"],
        "correct": 1
    },
    {
        "question": "–Ø–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–±—ñ–ª—å—à–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –≤—ñ–¥–µ–æ—ñ–≥—Ä–∞—Ö?",
        "options": ["–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–º‚Äô—è—Ç—å", "–ü—Ä–æ—Ü–µ—Å–æ—Ä", "–ñ–æ—Ä—Å—Ç–∫–∏–π –¥–∏—Å–∫", "–í—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞"],
        "correct": 3
    },
    {
        "question": "–©–æ –æ–∑–Ω–∞—á–∞—î —Ç–µ—Ä–º—ñ–Ω 'Plug and Play'?",
        "options": ["–†—É—á–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è BIOS", "–ü–æ—Ç—Ä—ñ–±–Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"],
        "correct": 1
    },
    {
        "question": "–Ø–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞?",
        "options": ["CPU-Z", "FurMark", "Prime95", "CrystalDiskInfo"],
        "correct": 2
    },
    {
        "question": "–©–æ —Å–ª—ñ–¥ –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –û–ó–ü?",
        "options": ["–û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ–¥—Ä–∞–π–≤–µ—Ä", "–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –¥–∏—Å–∫", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É BIOS", "–ó–º—ñ–Ω–∏—Ç–∏ –±–ª–æ–∫ –∂–∏–≤–ª–µ–Ω–Ω—è"],
        "correct": 2
    },
    {
        "question": "–©–æ —Ç–∞–∫–µ BIOS?",
        "options": ["–ì—Ä–∞—Ñ—ñ—á–Ω–∞ –æ–±–æ–ª–æ–Ω–∫–∞", "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", "–ë–∞–∑–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É", "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—ñ–≤"],
        "correct": 2
    },
    {
        "question": "–Ø–∫–∏–π –∑ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–π–Ω–æ?",
        "options": ["–û–ó–ü", "–ü—Ä–æ—Ü–µ—Å–æ—Ä", "–ñ–æ—Ä—Å—Ç–∫–∏–π –¥–∏—Å–∫", "–í—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞"],
        "correct": 2
    },
    {
        "question": "–©–æ –æ–∑–Ω–∞—á–∞—î –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä–∞ GPU?",
        "options": ["–ì–æ–ª–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä", "–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä", "–ó–∞–≥–∞–ª—å–Ω–∞ –ø–∞–º‚Äô—è—Ç—å", "–Ü–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä"],
        "correct": 1
    },
    {
        "question": "–©–æ —Å–ª—ñ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–¥ –∫—É–ø—ñ–≤–ª–µ—é –Ω–æ–≤–æ—ó –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∏?",
        "options": ["–¢–∏–ø –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å USB –ø–æ—Ä—Ç—ñ–≤", "–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ—é –ø–ª–∞—Ç–æ—é —Ç–∞ –ë–ñ", "–¢–∏–ø BIOS"],
        "correct": 2
    },
    {
        "question": "–Ø–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–ª–æ–∫—É –∂–∏–≤–ª–µ–Ω–Ω—è?",
        "options": ["–û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏", "–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö", "–ü–æ–¥–∞—á–∞ –∂–∏–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º", "–ó–∞–ø—É—Å–∫ Windows"],
        "correct": 2
    },
    {
        "question": "–î–ª—è —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–µ—Ä–º–æ–ø–∞—Å—Ç–æ–≤–∏–π —à–∞—Ä –º—ñ–∂ CPU —ñ –∫—É–ª–µ—Ä–æ–º?",
        "options": ["–Ü–∑–æ–ª—è—Ü—ñ—è", "–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á—ñ", "–ï—Å—Ç–µ—Ç–∏–∫–∞", "–ó–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É"],
        "correct": 1
    },
    {
        "question": "–Ø–∫–∏–π —Ç–∏–ø –ø–∞–º‚Äô—è—Ç—ñ —à–≤–∏–¥—à–∏–π?",
        "options": ["HDD", "DDR4", "SSD", "DVD"],
        "correct": 2
    },
    {
        "question": "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —Ä–æ–∑‚Äô—î–º –∂–∏–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–∏?",
        "options": ["24-pin", "SATA", "PCIe", "HDMI"],
        "correct": 2
    },
    {
        "question": "–©–æ —Ä–æ–±–∏—Ç—å —É—Ç–∏–ª—ñ—Ç–∞ MemTest86?",
        "options": ["–¢–µ—Å—Ç—É—î –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç—É", "–ü–µ—Ä–µ–≤—ñ—Ä—è—î –û–ó–ü –Ω–∞ –ø–æ–º–∏–ª–∫–∏", "–û–Ω–æ–≤–ª—é—î –¥—Ä–∞–π–≤–µ—Ä–∏", "–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É"],
        "correct": 1
    },
    {
        "question": "–Ø–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–æ–±–ª—è—î –±—ñ–ª—å—à—ñ—Å—Ç—å –æ–±—á–∏—Å–ª–µ–Ω—å —É –ü–ö?",
        "options": ["–û–ó–ü", "–ü—Ä–æ—Ü–µ—Å–æ—Ä", "–ú–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–∞ –ø–ª–∞—Ç–∞", "–ë–ª–æ–∫ –∂–∏–≤–ª–µ–Ω–Ω—è"],
        "correct": 1
    },
    {
        "question": "–©–æ —Ç–∞–∫–µ —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ—ó –ø–ª–∞—Ç–∏?",
        "options": ["–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏", "–†–æ–∑–º—ñ—Ä —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤", "–¢–∏–ø —Å–æ–∫–µ—Ç–∞", "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"],
        "correct": 1
    },
    {
        "question": "–Ø–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –ü–ö?",
        "options": ["–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—Ä–ø—É—Å", "–°–ª—É—Ö–∞—Ç–∏ —à—É–º", "–ß–µ—Ä–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –µ–∫—Ä–∞–Ω"],
        "correct": 2
    },
    {
        "question": "–Ø–∫–∏–π –ø–æ—Ä—Ç –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∞?",
        "options": ["HDMI", "SATA", "USB", "RJ-45"],
        "correct": 0
    },
    {
        "question": "–©–æ —Å–ª—ñ–¥ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ –∂–æ—Ä—Å—Ç–∫–æ–≥–æ –¥–∏—Å–∫–∞?",
        "options": ["–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", "–û–Ω–æ–≤–∏—Ç–∏ BIOS", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ –∂–∏–≤–ª–µ–Ω–Ω—è", "–ó–∞–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ä"],
        "correct": 2
    },
    {
        "question": "–î–ª—è —á–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è UEFI?",
        "options": ["–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏", "–ú–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥—Ä–∞–π–≤–µ—Ä—ñ–≤", "–ó–∞–ø—É—Å–∫ –∞–Ω—Ç–∏–≤—ñ—Ä—É—Å–∞"],
        "correct": 0
    }
]

class QuizApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üñ•Ô∏è –¢–µ—Å—Ç: –ú–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è –ü–ö")
        self.root.geometry("700x650")
        
        self.BG_COLOR = "#2a0a0a"
        self.FRAME_BG_COLOR = "#1a0000"
        self.TEXT_COLOR = "#f5f5f5"
        self.TITLE_COLOR = "#ff4d4d"
        self.BUTTON_BG = "#990000"
        self.BUTTON_ACTIVE_BG = "#cc0000"
        self.OPTION_BG = "#4d0f0f"
        self.OPTION_HOVER_BG = "#660000"
        self.CORRECT_BG = "#006400"
        self.INCORRECT_BG = "#b71c1c"
        self.CORRECT_FG = "#90ee90"
        self.INCORRECT_FG = "#ff8080"
        
        self.root.configure(bg=self.BG_COLOR)

        self.q_index = 0
        self.score = 0
        self.var = tk.IntVar()
        self.answered = False
        self.time_left = 30

        self.setup_ui()

    def setup_ui(self):
        title = tk.Label(self.root, text="üí° –¢–µ—Å—Ç –Ω–∞ —Ç–µ–º—É: –ú–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è –ü–ö", font=("Segoe UI", 20, "bold"),
                         bg=self.BG_COLOR, fg=self.TITLE_COLOR)
        title.pack(pady=20)

        self.progress_label = tk.Label(self.root, text="", font=("Segoe UI", 12),
                                       bg=self.BG_COLOR, fg=self.TEXT_COLOR)
        self.progress_label.pack()

        self.progressbar = ttk.Progressbar(self.root, orient="horizontal", length=500, mode="determinate")
        self.progressbar.pack(pady=5)

        self.timer_label = tk.Label(self.root, text="", font=("Segoe UI", 12, "italic"),
                                    bg=self.BG_COLOR, fg="#ff6666")
        self.timer_label.pack()

        self.frame = tk.Frame(self.root, bg=self.FRAME_BG_COLOR, bd=2, relief="groove")
        self.frame.pack(padx=20, pady=20, fill="both", expand=True)

        self.question_label = tk.Label(self.frame, text="", wraplength=600, font=("Segoe UI", 14, "bold"),
                                       bg=self.FRAME_BG_COLOR, fg=self.TEXT_COLOR, justify="center")
        self.question_label.pack(pady=20, padx=10)

        self.options = []
        for i in range(4):
            rb = tk.Radiobutton(self.frame, text="", variable=self.var, value=i,
                                font=("Segoe UI", 12), bg=self.OPTION_BG, fg=self.TEXT_COLOR,
                                activebackground=self.OPTION_HOVER_BG, activeforeground=self.TEXT_COLOR,
                                anchor="w", justify="left", selectcolor=self.BUTTON_BG,
                                indicatoron=0, width=60, padx=10, pady=5, bd=3, relief="raised")
            rb.pack(pady=5, padx=20, ipady=5)
            self.options.append(rb)

        self.feedback_label = tk.Label(self.root, text="", font=("Segoe UI", 12, "italic"),
                                       bg=self.BG_COLOR, fg=self.TEXT_COLOR)
        self.feedback_label.pack(pady=10)

        self.next_button = tk.Button(self.root, text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", command=self.check_answer,
                                     font=("Segoe UI", 12, "bold"), bg=self.BUTTON_BG, fg="white",
                                     activebackground=self.BUTTON_ACTIVE_BG, activeforeground="white", 
                                     relief="raised", bd=3, padx=10, pady=5)
        self.next_button.pack(pady=10)

        self.load_question()
        self.update_timer()

    def load_question(self):
        self.var.set(-1)
        self.feedback_label.config(text="")
        self.answered = False
        self.time_left = 30
        self.next_button.config(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", bg=self.BUTTON_BG, state="normal")

        q = questions[self.q_index]
        self.question_label.config(text=f"{self.q_index + 1}. {q['question']}")
        self.progress_label.config(text=f"–ü–∏—Ç–∞–Ω–Ω—è {self.q_index + 1} –∑ {len(questions)}")
        self.progressbar["value"] = (self.q_index + 1) * (100 / len(questions))

        for i, option in enumerate(q["options"]):
            self.options[i].config(text=option, state="normal", bg=self.OPTION_BG, fg=self.TEXT_COLOR,
                                   activebackground=self.OPTION_HOVER_BG)

    def update_timer(self):
        if not self.answered:
            self.timer_label.config(text=f"‚è≥ –ß–∞—Å: {self.time_left} —Å")
            if self.time_left > 0:
                self.time_left -= 1
                self.root.after(1000, self.update_timer)
            else:
                self.feedback_label.config(text="‚ùå –ß–∞—Å –≤–∏–π—à–æ–≤!", fg=self.INCORRECT_FG)
                self.disable_options()
                self.next_button.config(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚ûî", bg=self.BUTTON_ACTIVE_BG)
                self.answered = True

    def check_answer(self):
        if self.answered:
            self.next_question()
            return

        selected = self.var.get()
        if selected == -1:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
            return
        
        self.answered = True
        self.disable_options()
        self.next_button.config(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚ûî", bg=self.BUTTON_ACTIVE_BG)
        
        correct_index = questions[self.q_index]["correct"]

        if selected == correct_index:
            self.score += 1
            self.feedback_label.config(text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", fg=self.CORRECT_FG)
            self.options[selected].config(bg=self.CORRECT_BG, activebackground=self.CORRECT_BG)
        else:
            correct_text = questions[self.q_index]['options'][correct_index]
            self.feedback_label.config(text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_text}", fg=self.INCORRECT_FG)
            self.options[selected].config(bg=self.INCORRECT_BG, activebackground=self.INCORRECT_BG)
            self.options[correct_index].config(bg=self.CORRECT_BG, activebackground=self.CORRECT_BG)

    def disable_options(self):
        for rb in self.options:
            rb.config(state="disabled")

    def next_question(self):
        self.q_index += 1
        if self.q_index < len(questions):
            self.load_question()
            self.update_timer()
        else:
            messagebox.showinfo("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.score} –∑ {len(questions)} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
            self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style()
    style.theme_use('default')
    style.configure("TProgressbar", thickness=10, troughcolor='#4d1a1a', background='#ff4444')
    app = QuizApp(root)
    root.mainloop()