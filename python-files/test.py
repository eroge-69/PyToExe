import os
import subprocess
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "7742035954:AAE2EnOW_NXcCkmz7LCIgqx5MqI6ouAir4A"

# ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
ADMIN_USER_ID = 7476936312  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å
ALLOWED_COMMANDS = {
    'status': '–ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
    'screenshot': '—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç',
    'shutdown': '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫',
    'cancel_shutdown': '–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ',
    'restart': '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫',
    'ip': '–ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å',
    'processes': '–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
    'disk': '–ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    commands_list = "\n".join([f"/{cmd} - {desc}" for cmd, desc in ALLOWED_COMMANDS.items()])
    await update.message.reply_text(
        f"ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{commands_list}"
    )

async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    command = update.message.text.split()[0][1:]  # –£–±–∏—Ä–∞–µ–º / –∏–∑ –∫–æ–º–∞–Ω–¥—ã

    try:
        if command == 'status':
            await system_status(update, context)
        elif command == 'screenshot':
            await take_screenshot(update, context)
        elif command == 'shutdown':
            await shutdown_computer(update, context)
        elif command == 'cancel_shutdown':
            await cancel_shutdown(update, context)
        elif command == 'restart':
            await restart_computer(update, context)
        elif command == 'ip':
            await get_ip_address(update, context)
        elif command == 'processes':
            await get_processes(update, context)
        elif command == 'disk':
            await get_disk_usage(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def system_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –î–ª—è Windows
        if os.name == 'nt':
            uptime = subprocess.check_output('powershell "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property LastBootUpTime"', shell=True)
            memory = subprocess.check_output('systeminfo | find "Available Physical Memory"', shell=True)
            await update.message.reply_text(f"üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.decode()}\n–ü–∞–º—è—Ç—å: {memory.decode()}")
        # –î–ª—è Linux/Mac
        else:
            uptime = subprocess.check_output(['uptime']).decode()
            memory = subprocess.check_output(['free', '-h']).decode()
            await update.message.reply_text(f"üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n{uptime}\n–ü–∞–º—è—Ç—å:\n{memory}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def take_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: pip install pyautogui pillow
        import pyautogui
        screenshot = pyautogui.screenshot()
        screenshot.save('screenshot.png')
        
        with open('screenshot.png', 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")
        
        os.remove('screenshot.png')
    except ImportError:
        await update.message.reply_text("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pyautogui –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")

async def shutdown_computer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
    try:
        if os.name == 'nt':  # Windows
            os.system("shutdown /s /t 60")
            await update.message.reply_text("üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")
        else:  # Linux/Mac
            os.system("shutdown -h +1")
            await update.message.reply_text("üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

async def cancel_shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"""
    try:
        if os.name == 'nt':  # Windows
            os.system("shutdown /a")
            await update.message.reply_text("‚úÖ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:  # Linux/Mac
            os.system("shutdown -c")
            await update.message.reply_text("‚úÖ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

async def restart_computer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
    try:
        if os.name == 'nt':  # Windows
            os.system("shutdown /r /t 60")
            await update.message.reply_text("üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")
        else:  # Linux/Mac
            os.system("shutdown -r +1")
            await update.message.reply_text("üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

async def get_ip_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å"""
    try:
        import socket
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
        import requests
        external_ip = requests.get('https://api.ipify.org').text
        
        await update.message.reply_text(f"üåê IP –∞–¥—Ä–µ—Å–∞:\n–õ–æ–∫–∞–ª—å–Ω—ã–π: {local_ip}\n–í–Ω–µ—à–Ω–∏–π: {external_ip}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {str(e)}")

async def get_processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    try:
        if os.name == 'nt':  # Windows
            processes = subprocess.check_output(['tasklist']).decode()[:4000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        else:  # Linux/Mac
            processes = subprocess.check_output(['ps', 'aux']).decode()[:4000]
        
        await update.message.reply_text(f"üìä –ü—Ä–æ—Ü–µ—Å—Å—ã:\n```\n{processes}\n```", parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}")

async def get_disk_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö"""
    try:
        if os.name == 'nt':  # Windows
            disk_info = subprocess.check_output(['wmic', 'logicaldisk', 'get', 'size,freespace,caption']).decode()
        else:  # Linux/Mac
            disk_info = subprocess.check_output(['df', '-h']).decode()
        
        await update.message.reply_text(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:\n```\n{disk_info}\n```", parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/'), handle_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()