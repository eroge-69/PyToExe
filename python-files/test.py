import os
import sys
import time
import tempfile
import base64
import traceback

from PyQt5 import QtCore, QtGui, QtWidgets
import mss
import mss.tools

# OpenAI –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å–∫–∞—Ç—å GUI –±–µ–∑ –∫–ª—é—á–∞,
# –Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–∞–∫–µ—Ç openai –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
try:
    import openai
except Exception:
    openai = None

# ---------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ---------------------------------------------------------
MODEL_NAME = "gpt-5-vision-preview"
# ---------------------------------------------------------


def take_screenshot_to_file(filename: str):
    """–°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ filename (PNG)."""
    with mss.mss() as sct:
        monitor = sct.monitors[1]  # –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä (–≤–µ—Å—å —ç–∫—Ä–∞–Ω)
        sct_img = sct.grab(monitor)
        mss.tools.to_png(sct_img.rgb, sct_img.size, output=filename)


class APICallThread(QtCore.QThread):
    """–í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ –∏ –≤—ã–∑—ã–≤–∞–µ–º OpenAI API."""
    result_ready = QtCore.pyqtSignal(str)
    error = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)

    def run(self):
        try:
            if openai is None:
                raise RuntimeError("–ü–∞–∫–µ—Ç openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ —á–µ—Ä–µ–∑: pip install openai")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –µ—Å—Ç—å
            if not getattr(openai, "api_key", None):
                raise RuntimeError("OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏ –∫–ª—é—á –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.")

            # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            tmp_dir = tempfile.gettempdir()
            fname = os.path.join(tmp_dir, f"mts_screenshot_{int(time.time())}.png")

            take_screenshot_to_file(fname)

            # —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–¥–∏—Ä—É–µ–º
            with open(fname, "rb") as f:
                b = f.read()
            b64 = base64.b64encode(b).decode()

            messages = [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ù–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–∞... ‚Üí –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'."},
                {"role": "user", "content": [
                    {"type": "text", "text": "–ù–∞–π–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–∏–∂–µ:"},
                    {"type": "image_url", "image_url": {"url": "data:image/png;base64," + b64}}
                ]}
            ]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = openai.chat.completions.create(
                model=MODEL_NAME,
                messages=messages
            )

            text = ""
            try:
                text = response.choices[0].message.content
            except Exception:
                try:
                    text = response.choices[0].text
                except Exception:
                    text = str(response)

            self.result_ready.emit(text)

            try:
                os.remove(fname)
            except Exception:
                pass

        except Exception as e:
            tb = traceback.format_exc()
            self.error.emit(f"{str(e)}\n\n{tb}")


class MiniPanel(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.expanded = False
        self.worker = None
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Mini Test Solver")
        flags = QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.Tool
        self.setWindowFlags(flags)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.min_width = 80
        self.min_height = 200
        self.max_width = 400
        self.height = 200

        self.resize(self.min_width, self.min_height)

        self.bg = QtWidgets.QFrame(self)
        self.bg.setGeometry(0, 0, self.min_width, self.min_height)
        self.bg.setStyleSheet("""
            QFrame {
                background-color: rgba(20, 20, 20, 220);
                border-radius: 10px;
            }
        """)

        self.btn_capture = QtWidgets.QPushButton("üì∏", self.bg)
        self.btn_capture.setGeometry(10, 10, 60, 40)
        self.btn_capture.setStyleSheet(self._btn_style())
        self.


btn_capture.clicked.connect(self.on_capture_clicked)

        self.btn_close = QtWidgets.QPushButton("‚úñ", self.bg)
        self.btn_close.setGeometry(10, 150, 60, 40)
        self.btn_close.setStyleSheet(self._btn_style())
        self.btn_close.clicked.connect(self.close)

        self.text_area = QtWidgets.QTextEdit(self.bg)
        self.text_area.setGeometry(90, 10, self.max_width - 100, self.height - 20)
        self.text_area.setReadOnly(True)
        self.text_area.setStyleSheet("""
            QTextEdit {
                background: transparent;
                color: #ff6b6b;
                border: none;
                font-family: Consolas, monospace;
                font-size: 12px;
            }
        """)
        self.text_area.hide()

        screen_geo = QtWidgets.QApplication.primaryScreen().availableGeometry()
        x = screen_geo.width() - (self.min_width + 20)
        y = 120
        self.move(x, y)

        self.old_pos = None

        self.loading = QtWidgets.QLabel(self.bg)
        self.loading.setGeometry(10, 60, 60, 20)
        self.loading.setText("")
        self.loading.setStyleSheet("color: #cccccc;")

        self.show()

    def _btn_style(self):
        return """
        QPushButton {
            background: #222;
            color: #ff6b6b;
            border: none;
            font-size: 16px;
            border-radius: 6px;
        }
        QPushButton:hover {
            background: #2b2b2b;
            color: #ffffff;
        }
        """

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.old_pos = event.globalPos()

    def mouseMoveEvent(self, event):
        if not self.old_pos:
            return
        delta = event.globalPos() - self.old_pos
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.old_pos = event.globalPos()

    def mouseReleaseEvent(self, event):
        self.old_pos = None

    def toggle_expand(self):
        if self.expanded:
            self.resize(self.min_width, self.min_height)
            self.bg.resize(self.min_width, self.min_height)
            self.text_area.hide()
        else:
            self.resize(self.max_width, self.height)
            self.bg.resize(self.max_width, self.height)
            self.text_area.show()
        self.expanded = not self.expanded

    def on_capture_clicked(self):
        if self.worker and self.worker.isRunning():
            return

        self.loading.setText("‚è≥")
        self.btn_capture.setEnabled(False)
        self.worker = APICallThread()
        self.worker.result_ready.connect(self.on_result)
        self.worker.error.connect(self.on_error)
        self.worker.finished.connect(self.on_finished)
        self.worker.start()

    @QtCore.pyqtSlot(str)
    def on_result(self, text: str):
        if not self.expanded:
            self.toggle_expand()
        self.text_area.append(text + "\n")
        self.loading.setText("")

    @QtCore.pyqtSlot(str)
    def on_error(self, err: str):
        if not self.expanded:
            self.toggle_expand()
        self.text_area.append("‚ö† –û—à–∏–±–∫–∞:\n" + err + "\n")
        self.loading.setText("")

    def on_finished(self):
        self.btn_capture.setEnabled(True)


def request_api_key_dialog(app) -> str | None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞ (–ø–∞—Ä–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–ª—é—á–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª.
    """
    # QInputDialog —Ç—Ä–µ–±—É–µ—Ç QApplication —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
    dlg = QtWidgets.QInputDialog()
    dlg.setWindowTitle("OpenAI API Key")
    dlg.setLabelText("–í–≤–µ–¥–∏ OpenAI API-–∫–ª—é—á (–∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫):")
    dlg.setTextEchoMode(QtWidgets.QLineEdit.Password)
    ok = dlg.exec_()
    if ok:
        key = dlg.textValue().strip()
        if key:
            return key
    return None


def main():
    app = QtWidgets.QApplication(sys.argv)
    app.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    key = request_api_key_dialog(app)
    if not key:
        QtWidgets.QMessageBox.

warning(None, "No key", "API-–∫–ª—é—á –Ω–µ –≤–≤–µ–¥—ë–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è.")
        sys.exit(0)

    if openai is None:
        QtWidgets.QMessageBox.critical(None, "Missing package", "–ü–∞–∫–µ—Ç openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ —á–µ—Ä–µ–∑: pip install openai")
        sys.exit(1)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è openai
    openai.api_key = key

    panel = MiniPanel()
    sys.exit(app.exec_())


if name == "__main__":
    main()