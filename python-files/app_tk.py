import tkinter as tk
from tkinter import messagebox, ttk
import os
import re
import requests
import textract
from bs4 import BeautifulSoup
from docx import Document
from datetime import datetime

HISTORY_FILE = "history.txt"

def download_application_file(ts_id):
    url = f"https://connection.oe.if.ua/ts/{ts_id}/files/active"
    headers = {"User-Agent": "Mozilla/5.0"}

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return None, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É"

    soup = BeautifulSoup(response.text, 'lxml')
    links = soup.find_all('a', href=True)

    for link in links:
        text = link.text.strip().lower()
        if "–∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è" in text and (".docx" in link['href'] or ".doc" in link['href']):
            file_url = "https://connection.oe.if.ua" + link['href']
            file_name = file_url.split("/")[-1]

            r = requests.get(file_url)
            with open(file_name, 'wb') as f:
                f.write(r.content)
            return file_name, None

    return None, "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

def extract_text_from_file(file_path):
    if file_path.endswith(".docx"):
        doc = Document(file_path)
        text = "\n".join([p.text for p in doc.paragraphs])
    elif file_path.endswith(".doc"):
        text = textract.process(file_path).decode("utf-8")
    else:
        return None
    return text

def extract_info(text):
    info = {
        "–ü–Ü–ë –∑–∞–º–æ–≤–Ω–∏–∫–∞": re.search(r"(–ó–∞–º–æ–≤–Ω–∏–∫|–ü–Ü–ë)[^\n:]*[:\s]+([^\n]+)", text, re.IGNORECASE),
        "–ê–¥—Ä–µ—Å–∞ –æ–±'—î–∫—Ç–∞": re.search(r"–ê–¥—Ä–µ—Å–∞ (–æ–±'—î–∫—Ç–∞|–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)[^\n:]*[:\s]+([^\n]+)", text, re.IGNORECASE),
        "–û—á—ñ–∫—É–≤–∞–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è": re.search(r"(–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è|–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å)[^\n:]*[:\s]+([^\n]+)", text, re.IGNORECASE),
        "–¢–∏–ø –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è": re.search(r"–¢–∏–ø –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è[^\n:]*[:\s]+([^\n]+)", text, re.IGNORECASE),
    }

    result = {}
    for key, match in info.items():
        result[key] = match.group(2).strip() if match else "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    return result

def save_to_history(ts_id, result):
    with open(HISTORY_FILE, "a", encoding="utf-8") as f:
        f.write(f"\nüïí {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}, ID: {ts_id}\n")
        for key, value in result.items():
            f.write(f"{key}: {value}\n")
        f.write("-" * 40 + "\n")

def show_history():
    if not os.path.exists(HISTORY_FILE):
        messagebox.showinfo("–Ü—Å—Ç–æ—Ä—ñ—è", "–Ü—Å—Ç–æ—Ä—ñ—è —â–µ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        content = f.read()

    history_window = tk.Toplevel(root)
    history_window.title("–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤")
    history_window.geometry("600x400")

    history_text = tk.Text(history_window, wrap=tk.WORD)
    history_text.insert(tk.END, content)
    history_text.pack(fill=tk.BOTH, expand=True)

def handle_search():
    ts_id = entry.get()
    if not ts_id.isdigit():
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID —Ç–µ—Ö—É–º–æ–≤!")
        return

    text_area.delete(1.0, tk.END)

    file_path, error = download_application_file(ts_id)
    if error:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error)
        return

    try:
        text = extract_text_from_file(file_path)
        result = extract_info(text)
        os.remove(file_path)

        for key, value in result.items():
            text_area.insert(tk.END, f"{key}: {value}\n")

        save_to_history(ts_id, result)

    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

# GUI
root = tk.Tk()
root.title("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è ‚Äì –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å—ñ—è")
root.geometry("520x430")
root.resizable(False, False)

frame = ttk.Frame(root, padding=20)
frame.pack(fill=tk.BOTH, expand=True)

label = ttk.Label(frame, text="–í–≤–µ–¥—ñ—Ç—å ID —Ç–µ—Ö—É–º–æ–≤:")
label.pack(pady=(0, 10))

entry = ttk.Entry(frame, font=("Arial", 12))
entry.pack(fill=tk.X, padx=10)

btn = ttk.Button(frame, text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏", command=handle_search)
btn.pack(pady=10)

history_btn = ttk.Button(frame, text="üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", command=show_history)
history_btn.pack(pady=(0, 10))

text_area = tk.Text(frame, wrap=tk.WORD, height=15, font=("Arial", 10))
text_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=(10, 0))

root.mainloop()
