import requests
import os
import sys
import time
import random
import string
from colorama import init
import pyfiglet
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest, InviteToChannelRequest
from telethon.tl.types import ChannelParticipantsSearch
import urllib.request

import hashlib, subprocess, re

def _wmic(cls, prop):
    out = subprocess.run(['wmic', cls, 'get', prop], capture_output=True, text=True).stdout.splitlines()
    return [l.strip() for l in out[1:] if l.strip()]

def _linux_file(path):
    try:
        return open(path).read().strip()
    except:
        return ''

def _collect():
    ids = []
    if os.name == 'nt':
        ids += _wmic('memorychip', 'serialnumber')
        ids += _wmic('baseboard',  'serialnumber')
        ids += _wmic('diskdrive',  'serialnumber')
    else:
        ids.append(_linux_file('/sys/class/dmi/id/board_serial'))
        ids.append(_linux_file('/sys/class/dmi/id/product_uuid'))
        try:
            ram = subprocess.check_output(['sudo', 'dmidecode', '-t', '17'], text=True)
            ids += re.findall(r'Serial Number:\s*([^\s]+)', ram)
        except: pass
        try:
            lsblk = subprocess.check_output(['lsblk', '-o', 'UUID'], text=True)
            ids += re.findall(r'[0-9a-fA-F-]{36}', lsblk)
        except: pass
    return ''.join(ids).encode()

def generate_hwid():
    return hashlib.sha256(_collect()).hexdigest().lower()

def fetch_allowed(url):
    with urllib.request.urlopen(url, timeout=10) as r:
        txt = r.read().decode('utf-8', errors='ignore')
    return {line.strip().lower() for line in txt.splitlines() if line.strip()}

def copy_clip(text):
    try:
        import pyperclip; pyperclip.copy(text); return True
    except: pass
    if os.name == 'nt':
        p = subprocess.Popen(['clip'], stdin=subprocess.PIPE); p.communicate(text.encode()); return p.returncode==0
    from shutil import which
    if which('pbcopy'):
        p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE); p.communicate(text.encode()); return p.returncode==0
    if which('xclip'):
        p = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE); p.communicate(text.encode()); return p.returncode==0
    return False

try:
    import pyperclip
except ImportError:
    print("–ú–æ–¥—É–ª—å pyperclip –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
    os.system(f"{sys.executable} -m pip install pyperclip")
    import pyperclip

init()

banner_text = "PRCX TOOLS"

# –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π -> –±–µ–ª—ã–π (ANSI 256-color)
# –í—ã–±—Ä–∞–Ω—ã —Ü–≤–µ—Ç–∞ —Å –∫–æ–¥–∞–º–∏ 93 (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π) –¥–æ 231 (–±–µ–ª—ã–π)
# –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–ª–∏ —Å–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ –∂–µ–ª–∞–Ω–∏—é
red_vertical_gradient = [
    52, 88, 124, 160, 196  # —Ç–µ–º–Ω–µ–µ ‚Üí —è—Ä—á–µ
]

def ansi_color_256(code):
    return f'\033[38;5;{code}m'

def print_gradient_line(line):
    length = len(line)
    gradient_len = len(red_vertical_gradient)
    result = ''
    for i, ch in enumerate(line):
        # –∏–Ω–¥–µ–∫—Å —Ü–≤–µ—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –ø–æ–∑–∏—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞
        color_index = int(i / max(length - 1, 1) * (gradient_len - 1))
        color_code = red_vertical_gradient[color_index]
        result += f"{ansi_color_256(color_code)}{ch}"
    result += '\033[0m'
    print(result)

def print_gradient_text(text):
    for line in text.splitlines():
        print_gradient_line(line)

def print_gradient_banner():
    figlet = pyfiglet.Figlet(font="slant")
    ascii_art = figlet.renderText(banner_text)
    for line in ascii_art.splitlines():
        print_gradient_line(line)

# --- –ö–ª—é—á–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è ---

URL = 'https://pastebin.com/raw/K0Kd4QtV' 

def check_hwid() -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ HWID –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ. –ò–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ–ø–∏—Ä—É–µ—Ç HWID –≤ –±—É—Ñ–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False."""
    hwid = generate_hwid()

    try:
        allowed = fetch_allowed(URL)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')
        return False            # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É sys.exit(1)

    if hwid in allowed:
        print('‚úÖ HWID –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.')
        return True

    # --- HWID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ---
    if copy_clip(hwid):
        print('–û—Ç–ø—Ä–∞–≤—å—Ç–µ HWID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. HWID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä.')
    else:
        print(f'‚ùå HWID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.\n–í–∞—à HWID: {hwid}')

    input('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...')
    return False                # –≤—ã—Ö–æ–¥–∏–º

def main_menu():
    if not check_hwid():
        sys.exit(0)             # –≤—ã—Ö–æ–¥, –º–µ–Ω—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

    # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1 - –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print("2 - –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("0 - –í—ã—Ö–æ–¥")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

        if choice == '1':
            run_parser()
        elif choice == '2':
            run_inviter()
        elif choice == '0':
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def run_parser():
    try:
        api_id = int(input('API ID: '))
        api_hash = input('API Hash: ')
        group_link = input('–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –∏–ª–∏ @username: ')

        premium_only_input = input('–ü–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram Premium? (–¥–∞/–Ω–µ—Ç): ').strip().lower()
        premium_only = premium_only_input == '–¥–∞'

        client = TelegramClient('parser_session', api_id, api_hash)
        client.start()

        chat = client.get_entity(group_link)
        all_participants = []
        offset = 0
        limit = 100

        print("\n‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

        while True:
            participants = client(GetParticipantsRequest(
                chat,
                ChannelParticipantsSearch(''),
                offset,
                limit,
                hash=0
            ))
            if not participants.users:
                break
            all_participants.extend(participants.users)
            offset += len(participants.users)
            time.sleep(1)

        with open('users.txt', 'w', encoding='utf-8') as f:
            count_saved = 0
            for user in all_participants:
                is_premium = getattr(user, 'premium', False)
                if premium_only and not is_premium:
                    continue
                username = user.username or 'None'
                name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                f.write(f'{name} | @{username} | ID: {user.id}\n')
                count_saved += 1

        print(f'\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {count_saved} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {"—Å Telegram Premium " if premium_only else ""}—Å–ø–∞—Ä—Å–µ–Ω–æ.')
        print("üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ users.txt")

    except Exception as e:
        print(f'\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

def run_inviter():
    try:
        api_id = int(input('API ID: '))
        api_hash = input('API Hash: ')
        source_group = input('–ò—Å—Ç–æ—á–Ω–∏–∫ (—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏): ')
        target_group = input('–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞: ')

        delay = int(input('–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–≤–∞–π—Ç–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): '))
        invites_per_account = int(input('–ú–∞–∫—Å–∏–º—É–º –∏–Ω–≤–∞–π—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç: '))

        client = TelegramClient('inviter_session', api_id, api_hash)
        client.start()

        source = client.get_entity(source_group)
        target = client.get_entity(target_group)

        offset = 0
        limit = 100
        invited_users = set()
        errors = 0

        if os.path.exists("invited.txt"):
            with open("invited.txt", "r") as f:
                invited_users = set(line.strip() for line in f.readlines())

        users_to_invite = []

        while True:
            participants = client(GetParticipantsRequest(
                source,
                ChannelParticipantsSearch(''),
                offset,
                limit,
                hash=0
            ))
            if not participants.users:
                break
            users_to_invite.extend(participants.users)
            offset += len(participants.users)
            time.sleep(1)

        invited_count = 0
        skipped = 0

        for user in users_to_invite:
            if not user.username or str(user.id) in invited_users:
                skipped += 1
                continue
            try:
                client(InviteToChannelRequest(target, [user.id]))
                print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à—ë–Ω: @{user.username or user.id}")
                invited_users.add(str(user.id))
                invited_count += 1
                with open("invited.txt", "a") as f:
                    f.write(str(user.id) + "\n")
                time.sleep(delay)
                if invited_count >= invites_per_account:
                    print("üîÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–π—Ç–µ {user.id}: {e}")
                errors += 1
                continue

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:")
        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞: {len(users_to_invite)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_count}")
        print(f"   ‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏): {skipped}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")

    except Exception as e:
        print(f'\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–µ: {e}')

if __name__ == '__main__':
    print_gradient_banner()
    main_menu()
