# -*- coding: utf-8 -*-
"""Certificate Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1co4hSsXEDNBUZ1tl6UWHKd9AcpbHrl-J
"""

# üõ†Ô∏è Install necessary packages
!pip install python-pptx pandas openpyxl --quiet

# üìÇ Step 1: Upload PPTX file
from google.colab import files
print("üìÑ Please upload your PPTX template file.")
pptx_upload = files.upload()

pptx_filename = next(iter(pptx_upload.keys()))
print(f"‚úÖ Uploaded template: {pptx_filename}")

# üìÇ Step 2: Upload Excel file
print("\nüìÑ Now upload your Excel file (xlsx format).")
excel_upload = files.upload()

excel_filename = next(iter(excel_upload.keys()))
print(f"‚úÖ Uploaded Excel file: {excel_filename}")

# üìä Step 3: Read Excel and memorize specific columns
import pandas as pd

df = pd.read_excel(excel_filename, engine='openpyxl')
df = df.reset_index(drop=True)

# Remove any fully blank rows in column E ("Participant's Full Name")
df = df[df.iloc[:, 4].notna()]

names = df.iloc[1:, 4].astype(str).tolist()    # Column E
campuses = df.iloc[1:, 7].astype(str).tolist() # Column H
titles = df.iloc[1:, 3].astype(str).tolist()   # Column D
dates_raw = df.iloc[1:, 6]                     # Column G

# Format dates
from datetime import datetime

def format_date(d):
    try:
        return pd.to_datetime(d).strftime('%d %b %Y')
    except:
        return str(d)

dates = [format_date(d) for d in dates_raw]

# Capitalize name/campus/title properly
def title_case(text):
    return ' '.join(word.capitalize() for word in str(text).split())

names = [title_case(name) for name in names]
campuses = [title_case(campus) for campus in campuses]
titles = [title_case(title) for title in titles]

# Show memorized data
print("\nüë• Participant Names:")
print(names)

print("\nüè´ Campus Names:")
print(campuses)

print("\nüìò Training Module Titles:")
print(titles)

print("\nüìÖ Dates of Training:")
print(dates)

# üßæ Step 4: Copy and edit PPTX for each entry
import os
import shutil
from pptx import Presentation
from pptx.util import Pt
from pptx.dml.color import RGBColor

output_dir = "/content/content"
os.makedirs(output_dir, exist_ok=True)

def update_slide_text(slide, old_text, new_text, font_name="Calibri", font_size=Pt(14), bold=False):
    for shape in slide.shapes:
        if not shape.has_text_frame:
            continue
        for paragraph in shape.text_frame.paragraphs:
            for run in paragraph.runs:
                if old_text in run.text:
                    run.text = run.text.replace(old_text, new_text)
                    run.font.name = font_name
                    run.font.size = font_size
                    run.font.bold = bold

# Process each row
for idx, (name, campus, title, date) in enumerate(zip(names, campuses, titles, dates)):
    cert_number = str(idx + 1).zfill(2)
    new_filename = f"Certificate {cert_number}.pptx"
    updated_filename = f"Certificate {cert_number} updated.pptx"

    # Copy template
    shutil.copy(pptx_filename, os.path.join(output_dir, new_filename))

    # Load and edit copy
    prs = Presentation(os.path.join(output_dir, new_filename))
    for slide in prs.slides:
        update_slide_text(slide, "Syeda Samia Ali", name, font_name="Calibri", font_size=Pt(14), bold=True)
        update_slide_text(slide, "North Nazimabad-II", campus, font_name="Calibri", font_size=Pt(14), bold=False)
        update_slide_text(slide, "Induction Course for Pre-School Teachers-Online", title, font_name="Calibri", font_size=Pt(14), bold=True)
        update_slide_text(slide, "02 May 2025", date, font_name="Calibri", font_size=Pt(14), bold=False)

    prs.save(os.path.join(output_dir, updated_filename))

print(f"\n‚úÖ All certificates generated in: {output_dir}")

# üì• Install LibreOffice silently (if not already installed)
!apt-get -qq update && apt-get -qq install -y libreoffice > /dev/null

import os
import subprocess
import zipfile
from google.colab import files

# ‚úÖ Ensure output directory for PDFs exists
pdf_output_dir = os.path.join(output_dir, "pdfs")
os.makedirs(pdf_output_dir, exist_ok=True)

# üì§ Convert updated PPTX files to PDF using LibreOffice
converted_pdfs = []
pptx_files = [f for f in os.listdir(output_dir) if f.endswith("updated.pptx")]

for filename in pptx_files:
    pptx_path = os.path.join(output_dir, filename)
    pdf_name = filename.replace(".pptx", ".pdf")
    pdf_path = os.path.join(pdf_output_dir, pdf_name)

    if not os.path.exists(pdf_path):  # ‚ö†Ô∏è Skip if already converted (optional)
        subprocess.run([
            'libreoffice',
            '--headless', '--invisible', '--nocrashreport',
            '--nodefault', '--nofirststartwizard',
            '--nologo', '--norestore',
            '--convert-to', 'pdf',
            '--outdir', pdf_output_dir,
            pptx_path
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    converted_pdfs.append(pdf_name)

print("\n‚úÖ PDF files saved to:", pdf_output_dir)
print("üóÇÔ∏è Total PDFs:", len(converted_pdfs))

# üßæ Create ZIP file of all PDFs
pdf_zip_path = "/content/Certificates_PDFs.zip"
with zipfile.ZipFile(pdf_zip_path, 'w', compression=zipfile.ZIP_DEFLATED) as zipf:
    for pdf_file in converted_pdfs:
        zipf.write(os.path.join(pdf_output_dir, pdf_file), arcname=pdf_file)

print(f"\n‚úÖ Zipped PDF file ready: {pdf_zip_path}")

# ‚¨áÔ∏è Trigger browser download
files.download(pdf_zip_path)

# üßæ Create ZIP file for all updated PPTX files
pptx_zip_path = "/content/Certificates_PPTX.zip"
with zipfile.ZipFile(pptx_zip_path, 'w', compression=zipfile.ZIP_DEFLATED) as zipf:
    for filename in pptx_files:  # Reuses previously filtered .pptx list
        pptx_path = os.path.join(output_dir, filename)
        zipf.write(pptx_path, arcname=filename)

print(f"\n‚úÖ Zipped PPTX file ready: {pptx_zip_path}")

# ‚¨áÔ∏è Trigger browser download for PPTX ZIP
files.download(pptx_zip_path)

"""The script contains syntax errors because of the shell commands (`!`). I will now remove them so the script can be compiled."""