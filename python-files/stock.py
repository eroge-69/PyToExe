import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8168734235:AAFEdGgxGzmOZFTPl72JDAZIopbRU0SMWIQ"
FRUITYBLOX_URL = "https://fruityblox.com/stock"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
CHANNEL_ID = "@bloxfruits_stock1"  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bloxfruits_bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_stock = None
subscribed_users = set()
monitor_task = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromeDriver"""
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1280,720")
    options.add_argument("--ignore-certificate-errors")
    options.page_load_strategy = 'eager'
    
    try:
        driver = webdriver.Chrome(options=options)
        return driver
    except WebDriverException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromeDriver: {str(e)}")
        return None

def fetch_stock():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ —Å —Å–∞–π—Ç–∞"""
    driver = setup_driver()
    if not driver:
        return None
        
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        driver.get(FRUITYBLOX_URL)
        
        try:
            WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".border-secondary"))
            )
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except TimeoutException:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–æ–∫–∞")
            return None
            
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            timer_text = driver.find_element(By.XPATH, 
                "//div[contains(text(), 'Normal Stock')]/following-sibling::div").text
            logger.info(f"–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timer_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")
            timer_text = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–æ–∫–∞
        items = driver.find_elements(By.CSS_SELECTOR, ".border-secondary")[:25]
        stock = []
        
        for item in items:
            try:
                name = item.find_element(By.CSS_SELECTOR, "h3").text
                stock_type = item.find_element(By.CSS_SELECTOR, ".text-gray-400").text
                money_price = item.find_element(By.CSS_SELECTOR, ".text-\\[\\#21C55D\\]").text
                robux_price = item.find_element(By.CSS_SELECTOR, ".text-\\[\\#FACC14\\]").text
                
                stock.append(f"üçâ {name} ({stock_type})\nüíµ {money_price} | ü™ô {robux_price}\n\n")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {str(e)}")
                continue
                
        return {
            'stock': stock if stock else ["‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—Ä—É–∫—Ç–∞—Ö"],
            'timer': timer_text
        }
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {str(e)}")
        return None
    finally:
        driver.quit()

async def get_stock():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞"""
    try:
        return await asyncio.wait_for(asyncio.to_thread(fetch_stock), timeout=60)
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

def normalize_stock(stock_data):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not stock_data or not stock_data.get('stock'):
        return None
    return "".join(stock_data['stock']).strip().lower()

async def send_updates(user_id, data, is_update=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –õ–° –∏ –∫–∞–Ω–∞–ª"""
    if not data:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
        return
    
    try:
        message = ("üîî –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–û–ö–ê!\n\n" if is_update else "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫:\n\n") + \
                  "".join(data['stock']) + f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data['timer']}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–°
        logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await bot.send_message(user_id, message)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
        if is_update:
            logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
            await bot.send_message(CHANNEL_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

async def monitor_stock():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–æ–∫–∞"""
    global last_stock
    
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–æ–∫–∞...")
    
    while True:
        try:
            data = await get_stock()
            
            if data:
                current_stock = normalize_stock(data)
                
                if last_stock is None:
                    last_stock = current_stock
                    # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    for user_id in subscribed_users.copy():
                        try:
                            await send_updates(user_id, data)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                            subscribed_users.discard(user_id)
                
                elif current_stock != last_stock:
                    last_stock = current_stock
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞! –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
                    try:
                        await bot.send_message(
                            CHANNEL_ID,
                            "üîî –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–û–ö–ê!\n\n" + "".join(data['stock']) + \
                            f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data['timer']}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)}")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    for user_id in subscribed_users.copy():
                        try:
                            await send_updates(user_id, data, is_update=True)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                            subscribed_users.discard(user_id)
            
            await asyncio.sleep(CHECK_INTERVAL)
            
        except asyncio.CancelledError:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}")
            await asyncio.sleep(60)

async def start_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global monitor_task
    if monitor_task is None or monitor_task.done():
        monitor_task = asyncio.create_task(monitor_stock())
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–æ–∫–∞ –∑–∞–ø—É—â–µ–Ω!")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        subscribed_users.add(user_id)
        
        await message.answer(
            "ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–æ–∫–∞ Blox Fruits\n\n"
            "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å—Ç–æ–∫–∞ –∑–¥–µ—Å—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stock –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )
        
        await start_monitoring()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")

@dp.message(Command("stop"))
async def stop_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop"""
    try:
        user_id = message.from_user.id
        if user_id in subscribed_users:
            subscribed_users.remove(user_id)
            await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ÑπÔ∏è –í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stop: {str(e)}")

@dp.message(Command("stock"))
async def stock_command(message: types.Message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞"""
    try:
        await bot.send_chat_action(message.chat.id, "typing")
        msg = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ...")
        
        data = await get_stock()
        
        if data:
            await bot.edit_message_text(
                "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫:\n\n" + "".join(data['stock']) + \
                f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data['timer']}",
                chat_id=message.chat.id,
                message_id=msg.message_id
            )
        else:
            await bot.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=message.chat.id,
                message_id=msg.message_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stock: {str(e)}")

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    try:
        chat = await bot.get_chat(CHANNEL_ID)
        logger.info(f"–ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {chat.title}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}")
        raise  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    
    await start_monitoring()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        dp.startup.register(on_startup)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        if monitor_task and not monitor_task.done():
            monitor_task.cancel()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")