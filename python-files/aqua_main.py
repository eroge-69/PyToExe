import sys
import time
import json
import os
import socket
from scapy.all import IP, ICMP, sr1
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLineEdit,
    QPushButton, QTextEdit, QLabel, QComboBox, QHBoxLayout,
    QListWidget, QListWidgetItem, QMessageBox, QSplitter
)
from PyQt6.QtGui import QFont, QColor, QTextCursor
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtMultimedia import QSoundEffect
from PyQt6.QtCore import QUrl


class Aqua(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Aqua")
        self.setGeometry(300, 200, 900, 600)
        self.contacts = []  # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ {name: "", ip: "", is_dynamic: False}
        self.current_contact = None
        self.message_counter = 0
        self.load_contacts()

        # --- –ê–∫–≤–∞–º–∞—Ä–∏–Ω–æ–≤–∞ —Ç–µ–º–∞ –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è ---
        self.setStyleSheet("""
            QWidget {
                background-color: #e0f7fa;
                color: #006064;
                font-family: 'Segoe UI', 'Arial';
                font-size: 14px;
            }
            QLineEdit, QTextEdit {
                background-color: #ffffff;
                border: 2px solid #4db6ac;
                border-radius: 8px;
                padding: 6px;
                color: #006064;
            }
            QPushButton {
                background-color: #26a69a;
                border-radius: 10px;
                padding: 8px;
                font-weight: bold;
                color: white;
            }
            QPushButton:hover {
                background-color: #4db6ac;
            }
            QPushButton:disabled {
                background-color: #b2dfdb;
                color: #80cbc4;
            }
            QComboBox {
                background-color: #ffffff;
                border: 2px solid #4db6ac;
                border-radius: 8px;
                padding: 4px;
                color: #006064;
            }
            QLabel {
                color: #00796b;
                font-weight: bold;
            }
            QListWidget {
                background-color: #ffffff;
                border: 2px solid #4db6ac;
                border-radius: 8px;
                color: #006064;
            }
            QListWidget::item:selected {
                background-color: #b2ebf2;
                color: #006064;
            }
            QSplitter::handle {
                background-color: #4db6ac;
            }
        """)

        main_layout = QHBoxLayout()

        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –∫–æ–Ω—Ç–∞–∫—Ç–∏
        left_panel = QVBoxLayout()
        left_panel.setContentsMargins(0, 0, 10, 0)
        
        contacts_label = QLabel("–ö–æ–Ω—Ç–∞–∫—Ç–∏:")
        contacts_label.setFont(QFont("Segoe UI", 12, QFont.Weight.Bold))
        left_panel.addWidget(contacts_label)
        
        self.contacts_list = QListWidget()
        self.contacts_list.itemClicked.connect(self.select_contact)
        self.update_contacts_list()
        left_panel.addWidget(self.contacts_list)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
        add_layout = QVBoxLayout()
        
        name_layout = QHBoxLayout()
        name_label = QLabel("–Ü–º'—è:")
        name_label.setFixedWidth(50)
        name_layout.addWidget(name_label)
        self.contact_name_input = QLineEdit()
        self.contact_name_input.setPlaceholderText("–Ü–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É")
        name_layout.addWidget(self.contact_name_input)
        add_layout.addLayout(name_layout)
        
        ip_layout = QHBoxLayout()
        ip_label = QLabel("IP:")
        ip_label.setFixedWidth(50)
        ip_layout.addWidget(ip_label)
        self.contact_ip_input = QLineEdit()
        self.contact_ip_input.setPlaceholderText("IP –∞–±–æ –¥–æ–º–µ–Ω")
        ip_layout.addWidget(self.contact_ip_input)
        add_layout.addLayout(ip_layout)
        
        dynamic_layout = QHBoxLayout()
        self.dynamic_ip_checkbox = QCheckBox("–î–∏–Ω–∞–º—ñ—á–Ω–∞ IP")
        dynamic_layout.addWidget(self.dynamic_ip_checkbox)
        add_layout.addLayout(dynamic_layout)
        
        add_btn = QPushButton("–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        add_btn.clicked.connect(self.add_contact)
        add_layout.addWidget(add_btn)
        
        left_panel.addLayout(add_layout)

        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - —á–∞—Ç
        right_panel = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç—É
        self.chat_title = QLabel("–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
        title_font = QFont("Segoe UI", 14, QFont.Weight.Bold)
        self.chat_title.setFont(title_font)
        self.chat_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.chat_title.setStyleSheet("color: #00897b; padding: 10px;")
        right_panel.addWidget(self.chat_title)

        # –í—ñ–∫–Ω–æ —á–∞—Ç—É
        self.chat_display = QTextEdit()
        self.chat_display.setFont(QFont("Consolas", 11))
        self.chat_display.setReadOnly(True)
        right_panel.addWidget(self.chat_display)

        # –ü–∞–Ω–µ–ª—å –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_layout = QHBoxLayout()
        
        self.message_input = QLineEdit()
        self.message_input.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        self.message_input.returnPressed.connect(self.send_message)
        message_layout.addWidget(self.message_input)
        
        self.send_btn = QPushButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")
        self.send_btn.clicked.connect(self.send_message)
        self.send_btn.setEnabled(False)
        message_layout.addWidget(self.send_btn)
        
        right_panel.addLayout(message_layout)

        # –°—Ç–∞—Ç—É—Å–Ω–∏–π —Ä—è–¥–æ–∫
        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
        font = QFont("Segoe UI", 9)
        font.setItalic(True)
        self.status_label.setFont(font)
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        self.status_label.setStyleSheet("padding: 5px; background-color: #b2ebf2; border-radius: 5px;")
        right_panel.addWidget(self.status_label)

        # –î–æ–¥–∞—î–º–æ –ø–∞–Ω–µ–ª—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ layout
        main_layout.addLayout(left_panel, 1)
        main_layout.addLayout(right_panel, 2)
        
        self.setLayout(main_layout)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.message_timer = QTimer()
        self.message_timer.timeout.connect(self.check_incoming_messages)
        self.message_timer.start(3000)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö IP
        self.dynamic_ip_timer = QTimer()
        self.dynamic_ip_timer.timeout.connect(self.update_dynamic_ips)
        self.dynamic_ip_timer.start(60000)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

    def load_contacts(self):
        try:
            if os.path.exists('aqua_contacts.json'):
                with open('aqua_contacts.json', 'r') as f:
                    self.contacts = json.load(f)
        except:
            self.contacts = []

    def save_contacts(self):
        try:
            with open('aqua_contacts.json', 'w') as f:
                json.dump(self.contacts, f)
        except:
            pass

    def update_contacts_list(self):
        self.contacts_list.clear()
        for contact in self.contacts:
            display_name = contact['name']
            if contact.get('is_dynamic', False):
                display_name += " üåê"
            item = QListWidgetItem(display_name)
            item.setData(Qt.ItemDataRole.UserRole, contact)
            self.contacts_list.addItem(item)

    def add_contact(self):
        name = self.contact_name_input.text().strip()
        ip = self.contact_ip_input.text().strip()
        is_dynamic = self.dynamic_ip_checkbox.isChecked()
        
        if not name or not ip:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ IP –∞–¥—Ä–µ—Å—É")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ IP/–¥–æ–º–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
        try:
            # –°–ø—Ä–æ–±–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥—É –¥–æ–º–µ–Ω–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
            if not ip.replace('.', '').isdigit():  # –Ø–∫—â–æ –Ω–µ IP, –∞ –¥–æ–º–µ–Ω
                resolved_ip = socket.gethostbyname(ip)
                self.chat_display.append(f"‚ÑπÔ∏è –î–æ–º–µ–Ω {ip} —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –≤ {resolved_ip}")
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É IP
                socket.inet_aton(ip)  # –í–∏–∫–∏–Ω–µ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ IP
        except Exception as e:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ IP –∞–¥—Ä–µ—Å–∞ –∞–±–æ –¥–æ–º–µ–Ω: {str(e)}")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î
        for contact in self.contacts:
            if contact['name'] == name:
                QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –≤–∂–µ —ñ—Å–Ω—É—î")
                return
                
        self.contacts.append({
            'name': name,
            'ip': ip,
            'is_dynamic': is_dynamic,
            'last_known_ip': ip  # –î–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö IP
        })
        
        self.update_contacts_list()
        self.save_contacts()
        self.contact_name_input.clear()
        self.contact_ip_input.clear()
        self.dynamic_ip_checkbox.setChecked(False)

    def select_contact(self, item):
        contact_data = item.data(Qt.ItemDataRole.UserRole)
        self.current_contact = contact_data
        self.chat_title.setText(f"–ß–∞—Ç –∑ {contact_data['name']}")
        self.send_btn.setEnabled(True)
        self.display_chat_history()

    def display_chat_history(self):
        self.chat_display.clear()
        self.chat_display.append("üöÄ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Aqua!")
        
        if self.current_contact.get('is_dynamic', False):
            self.chat_display.append("üåê –¶–µ–π –∫–æ–Ω—Ç–∞–∫—Ç –º–∞—î –¥–∏–Ω–∞–º—ñ—á–Ω—É IP –∞–¥—Ä–µ—Å—É")
            self.chat_display.append("üì° Aqua –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î IP –ø—Ä–∏ –∑–º—ñ–Ω–∞—Ö")
        
        self.chat_display.append("üí¨ –ü–æ—á–∏–Ω–∞–π—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
        self.chat_display.append("----------------------------------------")

    def resolve_dynamic_ip(self, contact):
        """–°–ø—Ä–æ–±–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥—É IP –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é"""
        try:
            if contact.get('is_dynamic', False):
                # –Ø–∫—â–æ —Ü–µ –¥–æ–º–µ–Ω–Ω–µ —ñ–º'—è, —Ä–µ–∑–æ–ª–≤–∏–º–æ –π–æ–≥–æ
                if not contact['ip'].replace('.', '').isdigit():
                    new_ip = socket.gethostbyname(contact['ip'])
                    if new_ip != contact.get('last_known_ip', ''):
                        contact['last_known_ip'] = new_ip
                        self.chat_display.append(f"üåê –û–Ω–æ–≤–ª–µ–Ω–æ IP –¥–ª—è {contact['name']}: {new_ip}")
                        self.save_contacts()
                    return new_ip
                # –Ø–∫—â–æ —Ü–µ –≤–∂–µ IP, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
                return contact['ip']
            else:
                # –î–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö IP –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                return contact['ip']
        except Exception as e:
            self.chat_display.append(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥—É IP –¥–ª—è {contact['name']}: {str(e)}")
            return None

    def send_message(self):
        if not self.current_contact or not self.message_input.text().strip():
            return
            
        message = self.message_input.text().strip()
        self.message_counter += 1
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É IP –∞–¥—Ä–µ—Å—É (–æ—Å–æ–±–ª–∏–≤–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö IP)
        target_ip = self.resolve_dynamic_ip(self.current_contact)
        if not target_ip:
            self.chat_display.append(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ IP –∞–¥—Ä–µ—Å—É –¥–ª—è {self.current_contact['name']}")
            return
            
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            custom_id = self.message_counter % 65535
            packet = IP(dst=target_ip)/ICMP(id=custom_id, seq=1)
            
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            reply = sr1(packet, verbose=0, timeout=3)
            
            if reply:
                self.chat_display.append(f"üë§ –í–∏ –¥–ª—è {self.current_contact['name']}: {message}")
                self.chat_display.append(f"   ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ {target_ip}")
                self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                
                cursor = self.chat_display.textCursor()
                cursor.movePosition(QTextCursor.MoveOperation.End)
                self.chat_display.setTextCursor(cursor)
            else:
                self.chat_display.append(f"üë§ –í–∏ –¥–ª—è {self.current_contact['name']}: {message}")
                self.chat_display.append(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ {target_ip}")
                self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
                
        except Exception as e:
            self.chat_display.append(f"üë§ –í–∏ –¥–ª—è {self.current_contact['name']}: {message}")
            self.chat_display.append(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
        
        self.message_input.clear()

    def check_incoming_messages(self):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        for contact in self.contacts:
            try:
                target_ip = self.resolve_dynamic_ip(contact)
                if not target_ip:
                    continue
                    
                packet = IP(dst=target_ip)/ICMP(id=9999, seq=1)
                reply = sr1(packet, verbose=0, timeout=1)
                
                if reply and reply.src == target_ip:
                    if self.current_contact and self.current_contact['name'] == contact['name']:
                        self.chat_display.append(f"üì® {contact['name']} –æ–Ω–ª–∞–π–Ω ({target_ip})")
                        self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–ª–∞–π–Ω")
                        
                        cursor = self.chat_display.textCursor()
                        cursor.movePosition(QTextCursor.MoveOperation.End)
                        self.chat_display.setTextCursor(cursor)
                        
            except:
                pass

    def update_dynamic_ips(self):
        """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î IP –∞–¥—Ä–µ—Å–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ IP"""
        for contact in self.contacts:
            if contact.get('is_dynamic', False):
                self.resolve_dynamic_ip(contact)

    def closeEvent(self, event):
        self.save_contacts()
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Aqua()
    window.show()
    sys.exit(app.exec())