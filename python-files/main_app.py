import subprocess
import sys
import os
import threading
import streamlit as st
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtCore import Qt
import pandas as pd

# Flag para verificar se o Streamlit j√° foi iniciado
streamlit_running = False

# Fun√ß√£o para carregar e limpar os dados
@st.cache_data
def load_data(path):
    df = pd.read_excel(
        path,
        sheet_name="Controle",
        header=5  # Cabe√ßalho real est√° na linha 6
    )
    
    # Remover colunas "Unnamed"
    df = df.loc[:, ~df.columns.str.contains("^Unnamed")]

    # Garantir que 'Status' seja num√©rico
    df['Status'] = pd.to_numeric(df['Status'], errors='coerce')

    # Mapear status num√©rico para texto + emoji
    status_map = {
        3: "‚úÖ Finalizado",
        2: "‚ö†Ô∏è Pendente Implementa√ß√£o",
        1: "‚ùå Aguardando Disposi√ß√£o"
    }
    df['Status'] = df['Status'].map(status_map)

    # Converter coluna de data
    df['Data da Emiss√£o'] = pd.to_datetime(df['Data da Emiss√£o'], errors='coerce')

    # Criar colunas auxiliares para m√™s
    df['M√™s_Num'] = df['Data da Emiss√£o'].dt.month

    # Mapear o n√∫mero do m√™s para o nome do m√™s (abreviado)
    meses = {
        1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
        7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
    }
    df['M√™s'] = df['M√™s_Num'].map(meses)

    return df

# Fun√ß√£o para iniciar o Streamlit no subprocesso
def run_streamlit():
    global streamlit_running
    if not streamlit_running:
        # Caminho para o execut√°vel do Streamlit
        # Assumindo que o execut√°vel est√° na mesma pasta "dist" do mainapp.exe
        executable_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "dashboard_rnc.exe")
        
        # Inicia o execut√°vel do dashboard como um subprocesso
        subprocess.Popen([executable_path])
        
        # Definir a flag como True para impedir a reinicializa√ß√£o
        streamlit_running = True

# Criando a interface gr√°fica com PyQt5
class MyApp(QWidget):
    def __init__(self):
        super().__init__()

        # Janela principal
        self.setWindowTitle("Dashboard RNC 2025")
        self.setGeometry(100, 100, 800, 600)
        self.setWindowIcon(QIcon("your_icon_path.png"))  # Substitua pelo caminho do √≠cone

        # Layout principal
        layout = QVBoxLayout()

        # Estilo da fonte
        title_font = QFont("Arial", 24, QFont.Bold)

        # T√≠tulo
        self.title_label = QLabel("üìä Controle de RNC's - Dashboard 2025", self)
        self.title_label.setFont(title_font)
        self.title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.title_label)

        # Espa√ßamento
        layout.addStretch()

        # Bot√£o para iniciar o Streamlit
        self.start_button = QPushButton("Iniciar Dashboard", self)
        self.start_button.setFont(QFont("Arial", 14))
        self.start_button.setStyleSheet("background-color: #4CAF50; color: white; border-radius: 10px; padding: 10px;")
        self.start_button.setFixedHeight(50)
        self.start_button.clicked.connect(self.run_streamlit_action)
        layout.addWidget(self.start_button)

        # Espa√ßamento inferior
        layout.addStretch()

        # Configura√ß√£o do layout
        self.setLayout(layout)

    def run_streamlit_action(self):
        threading.Thread(target=run_streamlit, daemon=True).start()

# Fun√ß√£o principal
def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    window = MyApp()
    window.show()

    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
