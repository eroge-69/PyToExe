# -*- coding: utf-8 -*-
"""LifiaAnasywa_2317051022

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BudaVc9Bv2N2I4TIlio3ILLlH2j0BVId
"""

#1. Gambar sebuah jaringan semantik (semantic net) untuk komputer menggunakan hubungan AKO (A Kind Of / semacam) dan IS-A (adalah). Pertimbangkan kelas-kelas: microcomputer, mainframe, supercomputer, computing system, dedicated, general purpose, board-level, computer-on-a-chip, single processor, dan multiprocessor. Sertakan contoh-contoh spesifiknya!

import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Membuat graph
G = nx.DiGraph()

# Menambahkan nodes
nodes = [
    "computer",           # Root node
    "microcomputer", "mainframe", "supercomputer",  # Level 1
    "single processor", "multiprocessor",            # Level 2
    "general purpose", "dedicated",                  # Level 2
    "board-level", "computer-on-a-chip",            # Level 3
    "IBM PC", "Apple Mac", "IBM z15", "Fugaku"     # Examples
]

G.add_nodes_from(nodes)

# Menambahkan edges dengan hubungan
edges = [
    # AKO relationships (A Kind Of)
    ("microcomputer", "computer", "AKO"),
    ("mainframe", "computer", "AKO"),
    ("supercomputer", "computer", "AKO"),
    ("single processor", "computer", "AKO"),
    ("multiprocessor", "computer", "AKO"),
    ("general purpose", "computer", "AKO"),
    ("dedicated", "computer", "AKO"),
    ("board-level", "microcomputer", "AKO"),
    ("computer-on-a-chip", "microcomputer", "AKO"),

    # IS-A relationships (instances)
    ("IBM PC", "microcomputer", "IS-A"),
    ("Apple Mac", "microcomputer", "IS-A"),
    ("IBM z15", "mainframe", "IS-A"),
    ("Fugaku", "supercomputer", "IS-A")
]

for source, target, relation in edges:
    G.add_edge(source, target, relation=relation)

# Mengatur posisi manual seperti di gambar
pos = {
    # Root
    "computer": (0, 4),

    # Level 1 - Main categories
    "microcomputer": (-2, 3),
    "mainframe": (0, 3),
    "supercomputer": (2, 3),

    # Level 2 - Architecture & Purpose
    "single processor": (-3, 2),
    "multiprocessor": (3, 2),
    "general purpose": (-1, 2),
    "dedicated": (1, 2),

    # Level 3 - Implementation
    "board-level": (-3, 1),
    "computer-on-a-chip": (-1, 1),

    # Examples
    "IBM PC": (-2.5, 0),
    "Apple Mac": (-1.5, 0),
    "IBM z15": (0, 0),
    "Fugaku": (2, 0)
}

# Membuat visualisasi
plt.figure(figsize=(14, 10))

# Menggambar edges dengan warna berbeda
ako_edges = [(u, v) for u, v, d in G.edges(data=True) if d['relation'] == 'AKO']
isa_edges = [(u, v) for u, v, d in G.edges(data=True) if d['relation'] == 'IS-A']

# Draw AKO edges (biru)
nx.draw_networkx_edges(G, pos, edgelist=ako_edges, edge_color='blue',
                      arrows=True, arrowsize=15, arrowstyle='->', alpha=0.7, width=2)

# Draw IS-A edges (merah)
nx.draw_networkx_edges(G, pos, edgelist=isa_edges, edge_color='red',
                      arrows=True, arrowsize=15, arrowstyle='->', alpha=0.7, width=2)

# Menggambar nodes
nx.draw_networkx_nodes(G, pos, node_color='lightblue', node_size=2000,
                      alpha=0.9, edgecolors='black', linewidths=2)

# Menambahkan labels
nx.draw_networkx_labels(G, pos, font_size=9, font_weight='bold')

# Menambahkan edge labels
edge_labels = {}
for u, v, d in G.edges(data=True):
    edge_labels[(u, v)] = d['relation']

nx.draw_networkx_edge_labels(G, pos, edge_labels, font_size=8,
                            bbox=dict(boxstyle='round,pad=0.2', facecolor='white', alpha=0.8))

# Legend
legend_elements = [
    mpatches.Patch(color='blue', label='AKO (A Kind Of)'),
    mpatches.Patch(color='red', label='IS-A (Instance of)')
]

plt.legend(handles=legend_elements, loc='upper right')
plt.title("Jaringan Semantik Komputer\nDengan Hubungan AKO dan IS-A",
          fontsize=14, fontweight='bold', pad=20)
plt.axis('off')
plt.tight_layout()
plt.show()

# Menampilkan informasi hubungan
print("HUBUNGAN AKO (A Kind Of):")
print("-" * 30)
for u, v, d in G.edges(data=True):
    if d['relation'] == 'AKO':
        print(f"{u} AKO {v}")

print("\nHUBUNGAN IS-A (Instance of):")
print("-" * 30)
for u, v, d in G.edges(data=True):
    if d['relation'] == 'IS-A':
        print(f"{u} IS-A {v}")

print(f"\nJumlah nodes: {G.number_of_nodes()}")
print(f"Jumlah edges: {G.number_of_edges()}")

#2.Gambar sebuah jaringan semantik untuk komunikasi komputer menggunakan hubungan AKO dan IS-A. Pertimbangkan kelas-kelas: local area net, wide area net, token ring, star, centralized, decentralized, distributed, modems, telecommunications, newsgroups, dan electronic mail.  Sertakan contoh-contoh spesifiknya!

# Jaringan Semantik Komunikasi Komputer - Format Sederhana
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Membuat graph
G = nx.DiGraph()

# Menambahkan nodes sesuai kelas yang diminta
nodes = [
    # Root
    "communication",

    # Kelas utama yang diminta
    "local area net", "wide area net", "token ring", "star",
    "centralized", "decentralized", "distributed", "modems",
    "telecommunications", "newsgroups", "electronic mail",

    # Contoh spesifik
    "Ethernet", "WiFi", "Internet", "ARPANET",
    "IBM Token Ring", "Ethernet Hub", "Client-Server",
    "BitTorrent", "Grid Computing", "DSL Modem",
    "Cable Modem", "Usenet", "Reddit", "Gmail", "Outlook"
]

G.add_nodes_from(nodes)

# Menambahkan edges dengan hubungan yang jelas
edges = [
    # Network types AKO communication
    ("local area net", "communication", "AKO"),
    ("wide area net", "communication", "AKO"),
    ("telecommunications", "communication", "AKO"),

    # Network topologies AKO communication
    ("token ring", "communication", "AKO"),
    ("star", "communication", "AKO"),

    # Network architectures AKO communication
    ("centralized", "communication", "AKO"),
    ("decentralized", "communication", "AKO"),
    ("distributed", "communication", "AKO"),

    # Communication services AKO telecommunications
    ("modems", "telecommunications", "AKO"),
    ("newsgroups", "telecommunications", "AKO"),
    ("electronic mail", "telecommunications", "AKO"),

    # Specific examples IS-A relationships
    ("Ethernet", "local area net", "IS-A"),
    ("WiFi", "local area net", "IS-A"),
    ("Internet", "wide area net", "IS-A"),
    ("ARPANET", "wide area net", "IS-A"),

    ("IBM Token Ring", "token ring", "IS-A"),
    ("Ethernet Hub", "star", "IS-A"),

    ("Client-Server", "centralized", "IS-A"),
    ("BitTorrent", "decentralized", "IS-A"),
    ("Grid Computing", "distributed", "IS-A"),

    ("DSL Modem", "modems", "IS-A"),
    ("Cable Modem", "modems", "IS-A"),

    ("Usenet", "newsgroups", "IS-A"),
    ("Reddit", "newsgroups", "IS-A"),

    ("Gmail", "electronic mail", "IS-A"),
    ("Outlook", "electronic mail", "IS-A")
]

for source, target, relation in edges:
    G.add_edge(source, target, relation=relation)

# Mengatur posisi manual seperti format gambar referensi
pos = {
    # Root di tengah atas
    "communication": (0, 4),

    # Level 1 - Kelas utama tersebar horizontal
    "local area net": (-3, 3),
    "wide area net": (-1, 3),
    "telecommunications": (1, 3),
    "token ring": (3, 3),

    # Level 2 - Kelas lainnya
    "star": (-4, 2),
    "centralized": (-2, 2),
    "decentralized": (0, 2),
    "distributed": (2, 2),
    "modems": (4, 2),

    # Level 2 - Services
    "newsgroups": (0.5, 2.5),
    "electronic mail": (2.5, 2.5),

    # Level 3 - Contoh spesifik tersebar di bawah
    "Ethernet": (-3.5, 1),
    "WiFi": (-2.5, 1),
    "Internet": (-1, 1),
    "ARPANET": (-0.5, 1),
    "IBM Token Ring": (3, 1),
    "Ethernet Hub": (-4, 1),
    "Client-Server": (-2, 1),
    "BitTorrent": (0, 1),
    "Grid Computing": (2, 1),
    "DSL Modem": (3.5, 1),
    "Cable Modem": (4.5, 1),
    "Usenet": (0.5, 1),
    "Reddit": (1, 1),
    "Gmail": (2.5, 1),
    "Outlook": (3, 1)
}

# Membuat visualisasi
plt.figure(figsize=(16, 10))

# Menggambar edges dengan warna berbeda
ako_edges = [(u, v) for u, v, d in G.edges(data=True) if d['relation'] == 'AKO']
isa_edges = [(u, v) for u, v, d in G.edges(data=True) if d['relation'] == 'IS-A']

# Draw AKO edges (biru)
nx.draw_networkx_edges(G, pos, edgelist=ako_edges, edge_color='blue',
                      arrows=True, arrowsize=12, arrowstyle='->', alpha=0.6, width=1.5)

# Draw IS-A edges (merah)
nx.draw_networkx_edges(G, pos, edgelist=isa_edges, edge_color='red',
                      arrows=True, arrowsize=12, arrowstyle='->', alpha=0.6, width=1.5)

# Menggambar semua nodes dengan warna yang sama (putih dengan border hitam)
nx.draw_networkx_nodes(G, pos, node_color='white', node_size=1800,
                      alpha=0.9, edgecolors='black', linewidths=2)

# Menambahkan labels
nx.draw_networkx_labels(G, pos, font_size=8, font_weight='bold')

# Menambahkan edge labels untuk beberapa hubungan penting saja
important_edges = [
    ("local area net", "communication"),
    ("wide area net", "communication"),
    ("telecommunications", "communication"),
    ("Ethernet", "local area net"),
    ("Internet", "wide area net"),
    ("Gmail", "electronic mail")
]

edge_labels_filtered = {}
for u, v in important_edges:
    if G.has_edge(u, v):
        edge_labels_filtered[(u, v)] = G[u][v]['relation']

nx.draw_networkx_edge_labels(G, pos, edge_labels_filtered, font_size=7,
                            bbox=dict(boxstyle='round,pad=0.1', facecolor='yellow', alpha=0.7))

# Legend
legend_elements = [
    mpatches.Patch(color='blue', label='AKO (A Kind Of)'),
    mpatches.Patch(color='red', label='IS-A (Instance of)')
]

plt.legend(handles=legend_elements, loc='upper right')
plt.title("A Semantic Net for Computer Communication\nwith AKO and IS-A Links",
          fontsize=14, fontweight='bold', pad=20)
plt.axis('off')
plt.tight_layout()
plt.show()

# Menampilkan daftar hubungan
print("COMPUTER COMMUNICATION SEMANTIC NETWORK")
print("=" * 50)

print("\nKELAS-KELAS UTAMA:")
main_classes = ["local area net", "wide area net", "token ring", "star",
                "centralized", "decentralized", "distributed", "modems",
                "telecommunications", "newsgroups", "electronic mail"]
for cls in main_classes:
    print(f"• {cls}")

print(f"\nHUBUNGAN AKO:")
print("-" * 30)
for u, v, d in G.edges(data=True):
    if d['relation'] == 'AKO':
        print(f"{u} AKO {v}")

print(f"\nHUBUNGAN IS-A:")
print("-" * 30)
for u, v, d in G.edges(data=True):
    if d['relation'] == 'IS-A':
        print(f"{u} IS-A {v}")

print(f"\nJumlah total nodes: {G.number_of_nodes()}")
print(f"Jumlah total edges: {G.number_of_edges()}")

#3. Gambar sebuah sistem frame untuk gedung tempat Anda mengikuti perkuliahan. Pertimbangkan: kantor, ruang kelas, laboratorium, dan sebagainya.  Sertakan contoh-contoh spesifiknya dengan slot yang diisi (filled slots) untuk masing-masing jenis frame, misalnya kantor dan ruang kelas!

# Sistem Frame Gedung Ilmu Komputer - Format Tabel
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Rectangle
import numpy as np

def create_frame_table(frame_name, slots_data, x_pos, y_pos, width=4, height=None):
    """Membuat tabel frame dengan format Slots | Fillers"""

    if height is None:
        height = len(slots_data) + 1.5

    fig_width = width
    fig_height = height

    # Membuat figure
    fig, ax = plt.subplots(figsize=(fig_width, fig_height))

    # Border utama
    main_rect = Rectangle((0.1, 0.1), fig_width-0.2, fig_height-0.2,
                         linewidth=2, edgecolor='black', facecolor='white')
    ax.add_patch(main_rect)

    # Header frame name
    ax.text(fig_width/2, fig_height-0.4, frame_name,
           ha='center', va='center', fontsize=14, fontweight='bold')

    # Header tabel
    header_y = fig_height - 0.8

    # Garis horizontal untuk header
    ax.plot([0.3, fig_width-0.3], [header_y, header_y], 'k-', linewidth=1)
    ax.plot([0.3, fig_width-0.3], [header_y-0.4, header_y-0.4], 'k-', linewidth=1)

    # Garis vertikal pembagi kolom
    col_divider = fig_width/2
    ax.plot([col_divider, col_divider], [0.3, fig_height-0.3], 'k-', linewidth=1)

    # Header kolom
    ax.text(col_divider/2 + 0.15, header_y-0.2, 'Slots',
           ha='center', va='center', fontsize=12, fontweight='bold')
    ax.text(col_divider + (fig_width-col_divider)/2 - 0.15, header_y-0.2, 'Fillers',
           ha='center', va='center', fontsize=12, fontweight='bold')

    # Data rows
    row_height = 0.35
    start_y = header_y - 0.6

    for i, (slot, filler) in enumerate(slots_data):
        current_y = start_y - (i * row_height)

        # Garis horizontal untuk setiap row
        if i > 0:
            ax.plot([0.3, fig_width-0.3], [current_y + row_height/2, current_y + row_height/2],
                   'k-', linewidth=0.5)

        # Slot name
        ax.text(0.5, current_y, slot,
               ha='left', va='center', fontsize=10)

        # Filler value
        ax.text(col_divider + 0.2, current_y, filler,
               ha='left', va='center', fontsize=10)

    # Border bawah tabel
    bottom_y = start_y - (len(slots_data) * row_height) + row_height/2
    ax.plot([0.3, fig_width-0.3], [bottom_y, bottom_y], 'k-', linewidth=1)

    ax.set_xlim(0, fig_width)
    ax.set_ylim(0, fig_height)
    ax.set_aspect('equal')
    ax.axis('off')

    plt.tight_layout()
    return fig

# Data untuk setiap frame
def create_all_frames():

    # 1. Frame GIK L1A
    print("Membuat Frame: GIK L1A")
    gik_l1a_data = [
        ("nomor_ruang", "GIK L1A"),
        ("kode_kelas", "GIK-L1A"),
        ("lantai", "1"),
        ("luas", "60 m²"),
        ("kapasitas", "40"),
        ("jumlah_kursi", "40"),
        ("proyektor", "LCD"),
        ("papan_tulis", "whiteboard"),
        ("ac", "2 unit"),
        ("sound_system", "ada"),
        ("lokasi_relatif", "lantai 1, sisi kiri")
    ]

    fig1 = create_frame_table("GIK L1A", gik_l1a_data, 0, 0, width=6, height=7)
    plt.show()

    # 2. Frame GIK L1B
    print("\nMembuat Frame: GIK L1B")
    gik_l1b_data = [
        ("nomor_ruang", "GIK L1B"),
        ("kode_kelas", "GIK-L1B"),
        ("lantai", "1"),
        ("luas", "60 m²"),
        ("kapasitas", "40"),
        ("jumlah_kursi", "40"),
        ("proyektor", "LCD"),
        ("papan_tulis", "whiteboard"),
        ("ac", "2 unit"),
        ("sound_system", "ada"),
        ("lokasi_relatif", "lantai 1, sisi tengah")
    ]

    fig2 = create_frame_table("GIK L1B", gik_l1b_data, 0, 0, width=6, height=7)
    plt.show()

    # 3. Frame GIK L1C
    print("\nMembuat Frame: GIK L1C")
    gik_l1c_data = [
        ("nomor_ruang", "GIK L1C"),
        ("kode_kelas", "GIK-L1C"),
        ("lantai", "1"),
        ("luas", "60 m²"),
        ("kapasitas", "40"),
        ("jumlah_kursi", "40"),
        ("proyektor", "LCD"),
        ("papan_tulis", "whiteboard"),
        ("ac", "2 unit"),
        ("sound_system", "ada"),
        ("lokasi_relatif", "lantai 1, dekat ruang dosen")
    ]

    fig3 = create_frame_table("GIK L1C", gik_l1c_data, 0, 0, width=6, height=7)
    plt.show()

    # 4. Frame GIK L2
    print("\nMembuat Frame: GIK L2")
    gik_l2_data = [
        ("nomor_ruang", "GIK L2"),
        ("kode_kelas", "GIK-L2"),
        ("lantai", "2"),
        ("luas", "80 m²"),
        ("kapasitas", "60"),
        ("jumlah_kursi", "60"),
        ("proyektor", "LCD"),
        ("papan_tulis", "smart board"),
        ("ac", "3 unit"),
        ("sound_system", "wireless mic"),
        ("lokasi_relatif", "lantai 2, ruang utama")
    ]

    fig4 = create_frame_table("GIK L2", gik_l2_data, 0, 0, width=6, height=7)
    plt.show()

    # 5. Frame Ruang Dosen
    print("\nMembuat Frame: Ruang Dosen")
    ruang_dosen_data = [
        ("nomor_ruang", "RD-L2"),
        ("tipe_ruang", "ruang dosen"),
        ("lantai", "2"),
        ("luas", "45 m²"),
        ("kapasitas", "8"),
        ("jumlah_meja", "4"),
        ("komputer", "ada"),
        ("telepon", "ada"),
        ("ac", "2 unit"),
        ("printer", "1 unit bersama"),
        ("posisi", "di depan GIK L1C")
    ]

    fig5 = create_frame_table("Ruang Dosen Informatika", ruang_dosen_data, 0, 0, width=6, height=7)
    plt.show()

    # 6. Frame Toilet Mahasiswa L1
    print("\nMembuat Frame: Toilet Mahasiswa L1")
    toilet_mhs_l1_data = [
        ("nomor_ruang", "TM-L1"),
        ("tipe_pengguna", "mahasiswa"),
        ("lantai", "1"),
        ("luas", "15 m²"),
        ("jumlah_toilet", "4"),
        ("wastafel", "2 unit"),
        ("hand_dryer", "ada"),
        ("sabun", "otomatis"),
        ("gender", "unisex"),
        ("lokasi_relatif", "ujung koridor")
    ]

    fig6 = create_frame_table("Toilet Mahasiswa L1", toilet_mhs_l1_data, 0, 0, width=6, height=6.5)
    plt.show()

    # 7. Frame Toilet Dosen L1
    print("\nMembuat Frame: Toilet Dosen L1")
    toilet_dsn_l1_data = [
        ("nomor_ruang", "TD-L1"),
        ("tipe_pengguna", "dosen"),
        ("lantai", "1"),
        ("luas", "8 m²"),
        ("jumlah_toilet", "2"),
        ("wastafel", "premium"),
        ("hand_dryer", "ada"),
        ("sabun", "premium"),
        ("gender", "unisex"),
        ("lokasi_relatif", "dekat tangga")
    ]

    fig7 = create_frame_table("Toilet Dosen L1", toilet_dsn_l1_data, 0, 0, width=6, height=6.5)
    plt.show()

    # 8. Frame Toilet Mahasiswa L2
    print("\nMembuat Frame: Toilet Mahasiswa L2")
    toilet_mhs_l2_data = [
        ("nomor_ruang", "TM-L2"),
        ("tipe_pengguna", "mahasiswa"),
        ("lantai", "2"),
        ("luas", "15 m²"),
        ("jumlah_toilet", "4"),
        ("wastafel", "2 unit"),
        ("hand_dryer", "ada"),
        ("sabun", "otomatis"),
        ("gender", "unisex"),
        ("lokasi_relatif", "ujung koridor")
    ]

    fig8 = create_frame_table("Toilet Mahasiswa L2", toilet_mhs_l2_data, 0, 0, width=6, height=6.5)
    plt.show()

    # 9. Frame Toilet Dosen L2
    print("\nMembuat Frame: Toilet Dosen L2")
    toilet_dsn_l2_data = [
        ("nomor_ruang", "TD-L2"),
        ("tipe_pengguna", "dosen"),
        ("lantai", "2"),
        ("luas", "8 m²"),
        ("jumlah_toilet", "2"),
        ("wastafel", "premium"),
        ("hand_dryer", "ada"),
        ("sabun", "premium"),
        ("gender", "unisex"),
        ("lokasi_relatif", "dekat ruang dosen")
    ]

    fig9 = create_frame_table("Toilet Dosen L2", toilet_dsn_l2_data, 0, 0, width=6, height=6.5)
    plt.show()

# Menampilkan ringkasan
def show_summary():
    print("\n" + "="*80)
    print("RINGKASAN SISTEM FRAME GEDUNG ILMU KOMPUTER")
    print("="*80)
    print("\nTotal 9 Frame dengan Filled Slots:")
    print("├─ 4 Ruang Kelas: GIK L1A, GIK L1B, GIK L1C, GIK L2")
    print("├─ 1 Ruang Dosen: Ruang Dosen Informatika (Lantai 2)")
    print("└─ 4 Toilet: 2 Toilet Mahasiswa + 2 Toilet Dosen (masing-masing 1 per lantai)")

    print("\nLayout Gedung:")
    print("LANTAI 2: GIK L2, Ruang Dosen, Toilet Mahasiswa L2, Toilet Dosen L2")
    print("LANTAI 1: GIK L1A, GIK L1B, GIK L1C, Toilet Mahasiswa L1, Toilet Dosen L1")

    print("\nSetiap frame menunjukkan:")
    print("• Slots: Atribut/properti ruangan")
    print("• Fillers: Nilai spesifik untuk setiap atribut")

# MAIN EXECUTION
print("="*80)
print("SISTEM FRAME GEDUNG ILMU KOMPUTER")
print("Format Tabel: Slots | Fillers")
print("="*80)

create_all_frames()
show_summary()

# 4. Gambar sebuah sistem frame aksi (action frame system) yang menjelaskan apa yang harus dilakukan jika terjadi kegagalan perangkat keras pada sistem komputer Anda. Pertimbangkan: disk crash, power supply, CPU, dan masalah memori.

# Sistem Frame Aksi untuk Kegagalan Perangkat Keras Komputer
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Rectangle
import numpy as np

def create_action_frame_table(frame_name, slots_data, x_pos, y_pos, width=8, height=None):
    """Membuat tabel frame aksi dengan format Slots | Actions"""

    if height is None:
        height = len(slots_data) + 1.5

    fig_width = width
    fig_height = height

    # Membuat figure
    fig, ax = plt.subplots(figsize=(fig_width, fig_height))

    # Border utama
    main_rect = Rectangle((0.1, 0.1), fig_width-0.2, fig_height-0.2,
                         linewidth=2, edgecolor='black', facecolor='white')
    ax.add_patch(main_rect)

    # Header frame name
    ax.text(fig_width/2, fig_height-0.4, frame_name,
           ha='center', va='center', fontsize=14, fontweight='bold')

    # Header tabel
    header_y = fig_height - 0.8

    # Garis horizontal untuk header
    ax.plot([0.3, fig_width-0.3], [header_y, header_y], 'k-', linewidth=1)
    ax.plot([0.3, fig_width-0.3], [header_y-0.4, header_y-0.4], 'k-', linewidth=1)

    # Garis vertikal pembagi kolom (30% untuk slots, 70% untuk actions)
    col_divider = fig_width * 0.35
    ax.plot([col_divider, col_divider], [0.3, fig_height-0.3], 'k-', linewidth=1)

    # Header kolom
    ax.text(col_divider/2, header_y-0.2, 'Slots',
           ha='center', va='center', fontsize=12, fontweight='bold')
    ax.text(col_divider + (fig_width-col_divider)/2 - 0.15, header_y-0.2, 'Actions',
           ha='center', va='center', fontsize=12, fontweight='bold')

    # Data rows
    row_height = 0.4
    start_y = header_y - 0.6

    for i, (slot, action) in enumerate(slots_data):
        current_y = start_y - (i * row_height)

        # Garis horizontal untuk setiap row
        if i > 0:
            ax.plot([0.3, fig_width-0.3], [current_y + row_height/2, current_y + row_height/2],
                   'k-', linewidth=0.5)

        # Slot name
        ax.text(0.4, current_y, slot,
               ha='left', va='center', fontsize=9, fontweight='bold')

        # Action description (support multi-line)
        if isinstance(action, list):
            for j, line in enumerate(action):
                ax.text(col_divider + 0.2, current_y - (j * 0.15), line,
                       ha='left', va='center', fontsize=8)
        else:
            ax.text(col_divider + 0.2, current_y, action,
                   ha='left', va='center', fontsize=8)

    # Border bawah tabel
    bottom_y = start_y - (len(slots_data) * row_height) + row_height/2
    ax.plot([0.3, fig_width-0.3], [bottom_y, bottom_y], 'k-', linewidth=1)

    ax.set_xlim(0, fig_width)
    ax.set_ylim(0, fig_height)
    ax.set_aspect('equal')
    ax.axis('off')

    plt.tight_layout()
    return fig

# Data untuk setiap frame aksi
def create_action_frames():

    # 1. Frame Aksi - Disk Crash
    print("Membuat Action Frame: DISK CRASH")
    disk_crash_data = [
        ("problem", "Hard disk tidak terbaca atau corrupt"),
        ("symptoms", "Blue screen, file tidak bisa dibuka, bunyi aneh"),
        ("immediate_action", "1. Matikan komputer segera"),
        ("", "2. Jangan restart berkali-kali"),
        ("diagnosis", "1. Cek kabel SATA/IDE"),
        ("", "2. Test disk di komputer lain"),
        ("", "3. Gunakan software disk checker"),
        ("recovery", "1. Boot dari USB/CD recovery"),
        ("", "2. Backup data yang masih bisa diselamatkan"),
        ("", "3. Gunakan software recovery seperti Recuva"),
        ("replacement", "1. Beli hard disk baru"),
        ("", "2. Install OS dan aplikasi dari awal"),
        ("", "3. Restore data dari backup"),
        ("prevention", "1. Backup rutin ke cloud/external drive"),
        ("", "2. Monitor kesehatan disk dengan CrystalDiskInfo"),
        ("", "3. Hindari shutdown paksa")
    ]

    fig1 = create_action_frame_table("ACTION FRAME: DISK CRASH", disk_crash_data, 0, 0, width=10, height=9)
    plt.show()

    # 2. Frame Aksi - Power Supply Failure
    print("\nMembuat Action Frame: POWER SUPPLY FAILURE")
    psu_failure_data = [
        ("problem", "Power supply rusak atau tidak stabil"),
        ("symptoms", "Komputer mati mendadak, tidak bisa nyala, restart"),
        ("immediate_action", "1. Cabut kabel power dari listrik"),
        ("", "2. Biarkan 30 detik sebelum cek"),
        ("diagnosis", "1. Cek LED indicator pada PSU"),
        ("", "2. Test dengan PSU tester atau multimeter"),
        ("", "3. Coba kabel power yang berbeda"),
        ("safety_check", "1. Pastikan voltase listrik stabil (220V)"),
        ("", "2. Cek apakah ada komponen yang gosong"),
        ("", "3. Periksa kipas PSU berputar atau tidak"),
        ("replacement", "1. Beli PSU baru sesuai wattage"),
        ("", "2. Pastikan konektor cocok (24pin, 8pin, SATA)"),
        ("", "3. Install dengan hati-hati"),
        ("prevention", "1. Gunakan UPS untuk stabilisasi listrik"),
        ("", "2. Bersihkan kipas PSU secara rutin"),
        ("", "3. Jangan overload PSU dengan komponen berlebih")
    ]

    fig2 = create_action_frame_table("ACTION FRAME: POWER SUPPLY FAILURE", psu_failure_data, 0, 0, width=10, height=9)
    plt.show()

    # 3. Frame Aksi - CPU Failure
    print("\nMembuat Action Frame: CPU FAILURE")
    cpu_failure_data = [
        ("problem", "Processor mengalami kerusakan atau overheating"),
        ("symptoms", "BSOD, freeze, komputer lambat, panas berlebih"),
        ("immediate_action", "1. Matikan komputer dan cabut power"),
        ("", "2. Biarkan dingin minimal 1 jam"),
        ("diagnosis", "1. Cek suhu CPU dengan software monitoring"),
        ("", "2. Periksa thermal paste sudah kering?"),
        ("", "3. Test dengan CPU lain jika memungkinkan"),
        ("cooling_check", "1. Bersihkan debu pada heatsink dan fan"),
        ("", "2. Ganti thermal paste yang sudah mengeras"),
        ("", "3. Pastikan fan CPU berputar normal"),
        ("bios_check", "1. Reset BIOS ke default settings"),
        ("", "2. Disable overclocking jika ada"),
        ("", "3. Update BIOS ke versi terbaru"),
        ("replacement", "1. Beli CPU baru yang kompatibel"),
        ("", "2. Install dengan hati-hati (jangan paksa)"),
        ("", "3. Gunakan thermal paste berkualitas"),
        ("prevention", "1. Monitor suhu CPU secara rutin (<70°C)"),
        ("", "2. Bersihkan debu setiap 3-6 bulan"),
        ("", "3. Jangan overclock berlebihan")
    ]

    fig3 = create_action_frame_table("ACTION FRAME: CPU FAILURE", cpu_failure_data, 0, 0, width=10, height=10)
    plt.show()

    # 4. Frame Aksi - Memory Problems
    print("\nMembuat Action Frame: MEMORY PROBLEMS")
    memory_problems_data = [
        ("problem", "RAM bermasalah atau tidak kompatibel"),
        ("symptoms", "BSOD, aplikasi crash, sistem tidak stabil"),
        ("immediate_action", "1. Restart komputer"),
        ("", "2. Masuk ke safe mode jika perlu"),
        ("diagnosis", "1. Jalankan Windows Memory Diagnostic"),
        ("", "2. Test dengan MemTest86"),
        ("", "3. Coba boot dengan 1 RAM saja"),
        ("physical_check", "1. Cabut dan pasang ulang RAM"),
        ("", "2. Bersihkan konektor dengan penghapus"),
        ("", "3. Coba slot RAM yang berbeda"),
        ("compatibility", "1. Cek apakah RAM kompatibel dengan mobo"),
        ("", "2. Pastikan speed dan voltage sesuai"),
        ("", "3. Update BIOS jika diperlukan"),
        ("replacement", "1. Ganti RAM yang rusak"),
        ("", "2. Beli RAM dengan spesifikasi yang sama"),
        ("", "3. Install secara berpasangan jika dual channel"),
        ("prevention", "1. Jangan sentuh konektor RAM"),
        ("", "2. Gunakan antistatic wristband saat install"),
        ("", "3. Pastikan voltase listrik stabil")
    ]

    fig4 = create_action_frame_table("ACTION FRAME: MEMORY PROBLEMS", memory_problems_data, 0, 0, width=10, height=10)
    plt.show()

    # 5. Frame Aksi - General Hardware Troubleshooting
    print("\nMembuat Action Frame: GENERAL TROUBLESHOOTING")
    general_troubleshooting_data = [
        ("preparation", "Siapkan tools: obeng, multimeter, thermal paste"),
        ("safety_first", "1. Matikan komputer dan cabut power"),
        ("", "2. Discharge static dengan menyentuh casing"),
        ("", "3. Kerja di area yang terang dan bersih"),
        ("systematic_check", "1. Cek satu komponen pada satu waktu"),
        ("", "2. Catat setiap perubahan yang dilakukan"),
        ("", "3. Test setelah setiap perbaikan"),
        ("documentation", "1. Foto posisi kabel sebelum dibongkar"),
        ("", "2. Simpan sekrup dalam wadah berlabel"),
        ("", "3. Buat log troubleshooting"),
        ("backup_strategy", "1. Selalu backup data sebelum repair"),
        ("", "2. Buat recovery USB/CD"),
        ("", "3. Catat serial number komponen"),
        ("when_to_call_expert", "1. Jika masalah menyangkut motherboard"),
        ("", "2. Komponen masih dalam garansi"),
        ("", "3. Tidak ada tools yang memadai"),
        ("maintenance", "1. Bersihkan debu setiap 3-6 bulan"),
        ("", "2. Monitor suhu dan voltase"),
        ("", "3. Update driver dan firmware rutin")
    ]

    fig5 = create_action_frame_table("ACTION FRAME: GENERAL TROUBLESHOOTING", general_troubleshooting_data, 0, 0, width=10, height=10)
    plt.show()

# Menampilkan ringkasan sistem
def show_action_frame_summary():
    print("\n" + "="*80)
    print("RINGKASAN SISTEM FRAME AKSI - KEGAGALAN PERANGKAT KERAS")
    print("="*80)
    print("\n5 Action Frame telah dibuat untuk menangani:")
    print("├─ DISK CRASH: Langkah mengatasi kerusakan hard disk")
    print("├─ POWER SUPPLY FAILURE: Troubleshooting PSU bermasalah")
    print("├─ CPU FAILURE: Menangani processor rusak/overheat")
    print("├─ MEMORY PROBLEMS: Solusi masalah RAM")
    print("└─ GENERAL TROUBLESHOOTING: Panduan umum perbaikan")

    print("\nSetiap Action Frame berisi:")
    print("• Problem: Deskripsi masalah")
    print("• Symptoms: Gejala yang muncul")
    print("• Immediate Action: Tindakan darurat")
    print("• Diagnosis: Cara mendiagnosis masalah")
    print("• Recovery/Replacement: Langkah perbaikan")
    print("• Prevention: Cara mencegah masalah serupa")

    print("\nPrinsip Troubleshooting:")
    print("1. SAFETY FIRST - Matikan daya sebelum bongkar")
    print("2. SYSTEMATIC - Cek satu komponen per waktu")
    print("3. DOCUMENTATION - Catat setiap perubahan")
    print("4. BACKUP - Selalu backup data terlebih dahulu")

# Fungsi untuk menampilkan flowchart troubleshooting
def show_troubleshooting_flowchart():
    print("\n" + "="*60)
    print("FLOWCHART TROUBLESHOOTING HARDWARE")
    print("="*60)
    print("""
    [Masalah Hardware Detected]
             │
             ▼
    [Matikan Komputer & Cabut Power]
             │
             ▼
    [Identifikasi Gejala & Symptoms]
             │
             ▼
         ┌─────────┐
         │ Disk?   │────YES───► [Jalankan Disk Crash Frame]
         └─────────┘
             │ NO
             ▼
         ┌─────────┐
         │ Power?  │────YES───► [Jalankan PSU Failure Frame]
         └─────────┘
             │ NO
             ▼
         ┌─────────┐
         │ CPU?    │────YES───► [Jalankan CPU Failure Frame]
         └─────────┘
             │ NO
             ▼
         ┌─────────┐
         │ Memory? │────YES───► [Jalankan Memory Problems Frame]
         └─────────┘
             │ NO
             ▼
    [Jalankan General Troubleshooting Frame]
             │
             ▼
         ┌─────────┐
         │ Fixed?  │────NO────► [Call Expert/Service Center]
         └─────────┘
             │ YES
             ▼
      [Test & Document Solution]
             │
             ▼
    [Implement Prevention Measures]
    """)

# MAIN EXECUTION
print("="*80)
print("SISTEM FRAME AKSI: KEGAGALAN PERANGKAT KERAS KOMPUTER")
print("Format: Problem-Symptoms-Actions-Prevention")
print("="*80)

create_action_frames()
show_action_frame_summary()
show_troubleshooting_flowchart()

print("\n" + "="*80)

"""
5. Tuliskan tabel kebenaran dan tentukan mana dari pernyataan berikut yang merupakan tautologi, kontradiksi, atau pernyataan kontingen, dan mana yang bukan keduanya.
Untuk (a) dan (b), pertama-tama nyatakan pernyataan tersebut dengan simbol logika dan konjungsi.

(a) Jika saya lulus mata kuliah ini dan mendapat nilai A, maka saya lulus mata kuliah ini atau saya mendapat nilai A.

(b) Jika saya lulus mata kuliah ini, maka saya mendapat nilai A
dan
Saya lulus mata kuliah ini dan saya tidak mendapat nilai A.

(c) ((A~B→ (C~C))→ (A→B)
(d) (AB) (~BC)^(A~C)
(e) A→B (kontingen)
"""

# Analisis Tabel Kebenaran untuk Pernyataan Logika
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import itertools

def create_truth_table(variables, expression_func, expression_name):
    """Membuat tabel kebenaran untuk ekspresi logika"""
    n_vars = len(variables)
    n_rows = 2**n_vars

    # Generate semua kombinasi nilai kebenaran
    combinations = list(itertools.product([True, False], repeat=n_vars))

    # Buat data untuk tabel
    data = []
    for combo in combinations:
        row = list(combo)
        try:
            result = expression_func(*combo)
            row.append(result)
        except:
            row.append(False)
        data.append(row)

    # Buat DataFrame
    columns = variables + [expression_name]
    df = pd.DataFrame(data, columns=columns)

    # Konversi ke T/F untuk display
    display_df = df.copy()
    for col in display_df.columns:
        display_df[col] = display_df[col].map({True: 'T', False: 'F'})

    return df, display_df

def analyze_statement_type(truth_values):
    """Menganalisis tipe pernyataan"""
    all_true = all(truth_values)
    all_false = not any(truth_values)

    if all_true:
        return "TAUTOLOGI"
    elif all_false:
        return "KONTRADIKSI"
    else:
        return "KONTINGEN"

def create_visual_table(display_df, title):
    """Membuat visualisasi tabel kebenaran"""
    fig, ax = plt.subplots(figsize=(10, 6))

    rows, cols = display_df.shape

    # Header
    for j, col_name in enumerate(display_df.columns):
        rect = Rectangle((j, rows), 1, 1, linewidth=2,
                        edgecolor='black', facecolor='lightblue')
        ax.add_patch(rect)
        ax.text(j + 0.5, rows + 0.5, col_name, ha='center', va='center',
                fontweight='bold', fontsize=10)

    # Data cells
    for i in range(rows):
        for j in range(cols):
            value = display_df.iloc[i, j]

            # Warna berdasarkan nilai dan posisi
            if j == cols - 1:  # Kolom hasil
                if value == 'T':
                    color = 'lightgreen'
                else:
                    color = 'lightcoral'
            else:  # Kolom variabel
                color = 'lightgray'

            rect = Rectangle((j, rows - i - 1), 1, 1, linewidth=1,
                            edgecolor='black', facecolor=color)
            ax.add_patch(rect)
            ax.text(j + 0.5, rows - i - 0.5, value, ha='center', va='center',
                    fontweight='bold')

    ax.set_xlim(0, cols)
    ax.set_ylim(0, rows + 1)
    ax.set_aspect('equal')
    ax.axis('off')
    ax.set_title(title, fontsize=14, fontweight='bold', pad=20)

    plt.tight_layout()
    plt.show()

print("="*80)
print("ANALISIS TABEL KEBENARAN - PERNYATAAN LOGIKA")
print("="*80)

# (a) Jika saya lulus mata kuliah ini dan mendapat nilai A, maka saya lulus mata kuliah ini atau saya mendapat nilai A
print("\n(a) Jika saya lulus mata kuliah ini dan mendapat nilai A, maka saya lulus mata kuliah ini atau saya mendapat nilai A")
print("-"*80)
print("Simbol logika: (L ∧ A) → (L ∨ A)")
print("Dimana: L = lulus mata kuliah, A = mendapat nilai A")

def expr_a(L, A):
    return (L and A) <= (L or A)  # <= adalah implikasi dalam Python (not p or q)

variables_a = ['L', 'A']
df_a, display_a = create_truth_table(variables_a, expr_a, '(L ∧ A) → (L ∨ A)')

print("\nTabel Kebenaran:")
print(display_a.to_string(index=False))

values_a = df_a['(L ∧ A) → (L ∨ A)'].tolist()
analysis_a = analyze_statement_type(values_a)
print(f"\nAnalisis: {analysis_a}")
print("Penjelasan: Jika seseorang lulus DAN mendapat A, maka pasti dia lulus ATAU mendapat A (selalu benar)")

create_visual_table(display_a, "(a) (L ∧ A) → (L ∨ A)")

# (b) Jika saya lulus mata kuliah ini, maka saya mendapat nilai A dan Saya lulus mata kuliah ini dan saya tidak mendapat nilai A
print(f"\n\n(b) Jika saya lulus mata kuliah ini, maka saya mendapat nilai A dan Saya lulus mata kuliah ini dan saya tidak mendapat nilai A")
print("-"*80)
print("Simbol logika: (L → A) ∧ (L ∧ ¬A)")
print("Dimana: L = lulus mata kuliah, A = mendapat nilai A")

def expr_b(L, A):
    return ((not L) or A) and (L and (not A))

variables_b = ['L', 'A']
df_b, display_b = create_truth_table(variables_b, expr_b, '(L → A) ∧ (L ∧ ¬A)')

print("\nTabel Kebenaran:")
print(display_b.to_string(index=False))

values_b = df_b['(L → A) ∧ (L ∧ ¬A)'].tolist()
analysis_b = analyze_statement_type(values_b)
print(f"\nAnalisis: {analysis_b}")
print("Penjelasan: Tidak mungkin lulus dan tidak mendapat A sekaligus jika lulus mengharuskan A")

create_visual_table(display_b, "(b) (L → A) ∧ (L ∧ ¬A)")

# (c) ((A∧¬B)→ (C∧¬C))→ (A→B)
print(f"\n\n(c) ((A∧¬B)→ (C∧¬C))→ (A→B)")
print("-"*80)
print("Simbol logika: ((A ∧ ¬B) → (C ∧ ¬C)) → (A → B)")

def expr_c(A, B, C):
    # (A ∧ ¬B) → (C ∧ ¬C) kemudian → (A → B)
    left_side = (not (A and (not B))) or (C and (not C))  # (A∧¬B)→(C∧¬C)
    right_side = (not A) or B  # A→B
    return (not left_side) or right_side

variables_c = ['A', 'B', 'C']
df_c, display_c = create_truth_table(variables_c, expr_c, '((A∧¬B)→(C∧¬C))→(A→B)')

print("\nTabel Kebenaran:")
print(display_c.to_string(index=False))

values_c = df_c['((A∧¬B)→(C∧¬C))→(A→B)'].tolist()
analysis_c = analyze_statement_type(values_c)
print(f"\nAnalisis: {analysis_c}")
print("Penjelasan: (C∧¬C) selalu salah, sehingga (A∧¬B)→(C∧¬C) benar kecuali jika A∧¬B benar")

create_visual_table(display_c, "(c) ((A∧¬B)→(C∧¬C))→(A→B)")

# (d) (A∨B) ∧ (¬B∨C) ∧ (A∨¬C)
print(f"\n\n(d) (A∨B) ∧ (¬B∨C) ∧ (A∨¬C)")
print("-"*80)
print("Simbol logika: (A ∨ B) ∧ (¬B ∨ C) ∧ (A ∨ ¬C)")

def expr_d(A, B, C):
    return (A or B) and ((not B) or C) and (A or (not C))

variables_d = ['A', 'B', 'C']
df_d, display_d = create_truth_table(variables_d, expr_d, '(A∨B)∧(¬B∨C)∧(A∨¬C)')

print("\nTabel Kebenaran:")
print(display_d.to_string(index=False))

values_d = df_d['(A∨B)∧(¬B∨C)∧(A∨¬C)'].tolist()
analysis_d = analyze_statement_type(values_d)
print(f"\nAnalisis: {analysis_d}")
print("Penjelasan: Kombinasi tiga klausa disjungtif yang menciptakan kondisi khusus")

create_visual_table(display_d, "(d) (A∨B)∧(¬B∨C)∧(A∨¬C)")

# (e) A→B (kontingen)
print(f"\n\n(e) A→B")
print("-"*80)
print("Simbol logika: A → B")
print("(Sudah diketahui sebagai kontingen)")

def expr_e(A, B):
    return (not A) or B

variables_e = ['A', 'B']
df_e, display_e = create_truth_table(variables_e, expr_e, 'A → B')

print("\nTabel Kebenaran:")
print(display_e.to_string(index=False))

values_e = df_e['A → B'].tolist()
analysis_e = analyze_statement_type(values_e)
print(f"\nAnalisis: {analysis_e}")
print("Penjelasan: Implikasi sederhana, bisa benar atau salah tergantung nilai A dan B")

create_visual_table(display_e, "(e) A → B")

# RINGKASAN ANALISIS
print(f"\n\n" + "="*80)
print("RINGKASAN ANALISIS SEMUA PERNYATAAN")
print("="*80)

results = [
    ("(a) (L ∧ A) → (L ∨ A)", analysis_a, "Hukum penyerapan logika"),
    ("(b) (L → A) ∧ (L ∧ ¬A)", analysis_b, "Kontradiksi logis"),
    ("(c) ((A∧¬B)→(C∧¬C))→(A→B)", analysis_c, "Melibatkan kontradiksi (C∧¬C)"),
    ("(d) (A∨B)∧(¬B∨C)∧(A∨¬C)", analysis_d, "Konjungsi tiga klausa"),
    ("(e) A → B", analysis_e, "Implikasi sederhana")
]

for i, (expr, result, explanation) in enumerate(results):
    print(f"{chr(97+i)}) {expr:25} = {result:12} ({explanation})")

print(f"\n" + "="*80)
print("DEFINISI:")
print("="*80)
print("• TAUTOLOGI: Pernyataan yang selalu benar dalam semua kondisi")
print("• KONTRADIKSI: Pernyataan yang selalu salah dalam semua kondisi")
print("• KONTINGEN: Pernyataan yang bisa benar atau salah tergantung kondisi")

print(f"\nCATATAN SIMBOL:")
print("• ∧ = AND (dan)")
print("• ∨ = OR (atau)")
print("• ¬ = NOT (tidak)")
print("• → = IMPLIES (jika...maka)")
print("• ↔ = BICONDITIONAL (jika dan hanya jika)")

"""7. Tuliskan yang berikut dalam bentuk kuantitatif (logika kuantor):
(a) Semua anjing adalah mamalia.
(b) Tidak ada anjing yang menyerupai gajah.
(c) Beberapa program memiliki bug.
(d) Tidak ada program saya yang memiliki bug.
(e) Semua program Anda memiliki bug.

## Langkah 1: Menuliskan dalam Simbol Logika

Mari kita definisikan:
- P = "Anda makan pisang"
- K = "Anda makan kue"

Kedua kalimat tersebut dapat ditulis sebagai:
- Kalimat 1: P → ¬K (Jika makan pisang, maka tidak makan kue)
- Kalimat 2: K → ¬P (Jika makan kue, maka tidak makan pisang)

## Langkah 2: Membuat Tabel Kebenaran

| P | K | ¬P | ¬K | P → ¬K | K → ¬P | (P → ¬K) ↔ (K → ¬P) |
|---|---|----|----|--------|--------|-------------------|
| T | T | F  | F  | F      | F      | T                 |
| T | F | F  | T  | T      | T      | T                 |
| F | T | T  | F  | T      | F      | F                 |
| F | F | T  | T  | T      | T      | T                 |

## Langkah 3: Analisis Hasil

Dari tabel kebenaran di atas, kita dapat melihat bahwa:

1. **Kolom bikondisional** `(P → ¬K) ↔ (K → ¬P)` menghasilkan nilai: T, T, F, T
2. Karena ada nilai **F** pada baris ketiga, bikondisionalnya **bukan tautologi**
3. Oleh karena itu, kedua kalimat tersebut **tidak ekuivalen secara logis**


Kedua kalimat "Jika Anda makan pisang, maka Anda tidak bisa makan kue" dan "Jika Anda makan kue, maka Anda tidak bisa makan pisang" **tidak ekuivalen secara logis**.

Hal ini dapat dilihat dari kasus di mana P = False dan K = True (tidak makan pisang tapi makan kue):
- Kalimat pertama (P → ¬K) bernilai True (karena anteseden false)
- Kalimat kedua (K → ¬P) bernilai False (karena anteseden true tapi konsekuen false)

Karena ada kasus di mana kedua kalimat memiliki nilai kebenaran yang berbeda, maka bikondisionalnya bukan tautologi dan kedua kalimat tidak ekuivalen secara logis.

#8. Tuliskan tabel kebenaran untuk hal berikut:
   Tunjukkan bahwa
   (p∨q)∧ ~(p∧q) ≡ p⊻q
   di mana ⊻ adalah exclusive OR.


## Definisi Predikat dan Domain

**Domain**:
- Untuk (a) dan (b): Semua hewan
- Untuk (c), (d), dan (e): Semua program

**Predikat yang digunakan**:
- A(x) = "x adalah anjing"
- M(x) = "x adalah mamalia"  
- G(x) = "x menyerupai gajah"
- P(x) = "x adalah program"
- B(x) = "x memiliki bug"
- S(x) = "x adalah program saya"
- Y(x) = "x adalah program Anda"


## Translasi Kalimat

### (a) Semua anjing adalah mamalia
**Bentuk kuantitatif**: `∀x (A(x) → M(x))`

**Penjelasan**:
- Menggunakan kuantor universal (∀) karena berbicara tentang "semua"
- Menggunakan implikasi (→) karena "jika x adalah anjing, maka x adalah mamalia"


### (b) Tidak ada anjing yang menyerupai gajah
**Bentuk kuantitatif**: `∀x (A(x) → ¬G(x))`

**Alternatif**: `¬∃x (A(x) ∧ G(x))`

**Penjelasan**:
- Bentuk pertama: "Untuk semua x, jika x anjing, maka x tidak menyerupai gajah"
- Bentuk kedua: "Tidak ada x yang sekaligus anjing dan menyerupai gajah"
- Kedua bentuk ini ekuivalen secara logis


### (c) Beberapa program memiliki bug
**Bentuk kuantitatif**: `∃x (P(x) ∧ B(x))`

**Penjelasan**:
- Menggunakan kuantor eksistensial (∃) karena "beberapa" berarti "ada setidaknya satu"
- Menggunakan konjungsi (∧) karena x harus memenuhi kedua kondisi


### (d) Tidak ada program saya yang memiliki bug
**Bentuk kuantitatif**: `∀x (S(x) → ¬B(x))`

**Alternatif**: `¬∃x (S(x) ∧ B(x))`

**Penjelasan**:
- Bentuk pertama: "Untuk semua x, jika x adalah program saya, maka x tidak memiliki bug"
- Bentuk kedua: "Tidak ada x yang sekaligus program saya dan memiliki bug"


### (e) Semua program Anda memiliki bug
**Bentuk kuantitatif**: `∀x (Y(x) → B(x))`

**Penjelasan**:
- Menggunakan kuantor universal (∀) karena berbicara tentang "semua"
- "Untuk semua x, jika x adalah program Anda, maka x memiliki bug"


## Ringkasan Jawaban

| Kalimat | Bentuk Kuantitatif |
|---------|-------------------|
| (a) Semua anjing adalah mamalia | `∀x (A(x) → M(x))` |
| (b) Tidak ada anjing yang menyerupai gajah | `∀x (A(x) → ¬G(x))` atau `¬∃x (A(x) ∧ G(x))` |
| (c) Beberapa program memiliki bug | `∃x (P(x) ∧ B(x))` |
| (d) Tidak ada program saya yang memiliki bug | `∀x (S(x) → ¬B(x))` atau `¬∃x (S(x) ∧ B(x))` |
| (e) Semua program Anda memiliki bug | `∀x (Y(x) → B(x))` |

9. “Akan berbeda caranya ketika Anda ingin merebus telur hingga matang di Bandar Lampung dengan di Bandung."
Apakah ini masalah logika atau fisika? Jelaskan!

Pernyataan tersebut adalah masalah fisika. Perbedaan cara merebus telur di Bandar Lampung dan Bandung disebabkan oleh perbedaan ketinggian geografis yang mempengaruhi tekanan atmosfer. Bandar Lampung berada di dataran rendah (dekat permukaan laut) sedangkan Bandung berada di dataran tinggi (768 m dpl). Semakin tinggi lokasi, tekanan atmosfer semakin rendah, sehingga air mendidih pada suhu lebih rendah dari 100°C. Di Bandung, air mendidih sekitar 97-98°C, yang berarti telur membutuhkan waktu lebih lama untuk matang karena suhu air lebih rendah. Ini adalah fenomena fisika yang berkaitan dengan hukum termodinamika tentang hubungan tekanan dan titik didih, bukan masalah penalaran logis.

10. Dengan pernyataan PROLOG berikut, buktikan bahwa Budi adalah kakeknya sendiri:

ibu(wati,anna).			: wati adalah ibu dari anna
orangtua(jaka,anna,budi).	: jaka dan anna adalah orang tua dari budi
ibu_tiri(wati,budi).	: wati adalah ibu tiri budi


Saya akan menganalisis pernyataan PROLOG ini untuk membuktikan bahwa Budi adalah kakeknya sendiri.Berdasarkan analisis PROLOG di atas, berikut adalah **pembuktian bahwa Budi adalah kakeknya sendiri**:

## Langkah Pembuktian:

### 1. **Analisis Fakta yang Diberikan:**
- `ibu(wati,anna)` → Wati adalah ibu Anna
- `orangtua(jaka,anna,budi)` → Jaka dan Anna adalah orangtua Budi
- `ibu_tiri(wati,budi)` → Wati adalah ibu tiri Budi

### 2. **Deduksi Hubungan:**
- Dari fakta 2: Jaka adalah ayah Budi, Anna adalah ibu Budi
- Dari fakta 3: Wati menikah dengan ayah Budi (Jaka)
- Dari fakta 1 dan 3: Wati adalah ibu Anna DAN ibu tiri Budi

### 3. **Situasi Paradoks yang Terbentuk:**
- Anna adalah **ibu Budi** sekaligus **anak Wati**
- Wati adalah **ibu tiri Budi** sekaligus **nenek Budi** (melalui Anna)
- Jaka menikah dengan **Anna** (ibu Budi) dan **Wati** (ibu Anna)

### 4. **Pembuktian Kakek:**
Dalam PROLOG, kakek didefinisikan sebagai: `kakek(X,Y) :- ayah(X,Z), ayah(Z,Y).`

**Untuk membuktikan `kakek(budi,budi)`:**
- Budi harus menjadi ayah dari ayahnya sendiri, ATAU
- Budi harus menjadi ayah dari ibunya sendiri

### 5. **Solusi Paradoks:**
Karena Anna adalah ibu Budi dan sekaligus anak Wati (ibu tiri Budi), dan Jaka (ayah Budi) menikah dengan Wati, maka dalam konteks logika PROLOG ini, **Budi secara transitif menjadi kakek dari dirinya sendiri** melalui jalur:
- Budi → Anna (ibunya) → Wati (nenek) → kembali ke Budi (melalui hubungan ibu tiri)

**Kesimpulan:** Fakta-fakta PROLOG tersebut menciptakan **loop genealogis** yang memungkinkan Budi menjadi kakeknya sendiri, yang merupakan contoh klasik dari **paradoks logis dalam sistem keluarga yang tidak konsisten**.
"""

