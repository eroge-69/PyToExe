import socket
import threading
import json
import time
import sys
import os
from typing import Dict, List
import uuid

os.system('cls' if os.name == 'nt' else 'clear')

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class SimpleVPN:
    def __init__(self):
        self.networks: Dict[str, dict] = {}
        self.server_socket = None
        self.running = False
        self.server_ip = self.get_local_ip()
        
    def get_local_ip(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "127.0.0.1"

    def print_banner(self):
        print(f"{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.PURPLE}{'W0nderfulX SVPN':^50}{Colors.END}")
        print(f"{Colors.YELLOW}Simple Play With Friends{Colors.END}")
        print(f"{Colors.GREEN}üì° –í–∞—à IP: {self.server_ip}{Colors.END}")
        print(f"{Colors.CYAN}{'‚ïê'*50}{Colors.END}")

    def start_server(self):
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.server_socket.bind(('0.0.0.0', 4899))
            self.running = True
            
            self.print_banner()
            print(f"{Colors.GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! (–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä—É–≥ –¥—Ä—É–≥—É -> 1){Colors.END}")
            print(f"{Colors.BLUE}üì¢ –í–∞—à IP –°–µ—Ä–≤–µ—Ä–∞: {self.server_ip}{Colors.END}")
            
            threading.Thread(target=self.handle_messages, daemon=True).start()
            self.show_menu()
            
            return True
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}{Colors.END}")
            return False

    def show_menu(self):
        while self.running:
            print(f"\n{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
            print(f"{Colors.BOLD}üéÆ –ú–ï–ù–Æ –°–ï–†–í–ï–†–ê:{Colors.END}")
            print(f"{Colors.GREEN}1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å{Colors.END}")
            print(f"{Colors.BLUE}2. –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π{Colors.END}")
            print(f"{Colors.YELLOW}3. –í—ã—Ö–æ–¥{Colors.END}")
            
            try:
                choice = input(f"\n{Colors.BLUE}–í—ã–±–µ—Ä–∏—Ç–µ: {Colors.END}").strip()
                
                if choice == "1":
                    self.create_network_menu()
                elif choice == "2":
                    self.show_network_list()
                elif choice == "3":
                    break
                else:
                    print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.END}")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")

    def create_network_menu(self):
        print(f"\n{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
        print(f"{Colors.BOLD}üéØ –°–û–ó–î–ê–ù–ò–ï –°–ï–¢–ò:{Colors.END}")
        
        network_name = input(f"{Colors.BLUE}–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: {Colors.END}").strip()
        if not network_name:
            print(f"{Colors.RED}‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!{Colors.END}")
            return
            
        password = input(f"{Colors.BLUE}–ü–∞—Ä–æ–ª—å (Enter - –±–µ–∑ –ø–∞—Ä–æ–ª—è): {Colors.END}").strip()
        
        network_id = str(uuid.uuid4())[:8].upper()
        
        self.networks[network_id] = {
            'name': network_name,
            'password': password,
            'members': [],
            'created_at': time.time()
        }
        
        print(f"\n{Colors.GREEN}‚úÖ –°–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞!{Colors.END}")
        print(f"{Colors.BLUE}üì° –ù–∞–∑–≤–∞–Ω–∏–µ: {network_name}{Colors.END}")
        print(f"{Colors.BLUE}üîë ID —Å–µ—Ç–∏: {network_id}{Colors.END}")
        if password:
            print(f"{Colors.BLUE}üîí –ü–∞—Ä–æ–ª—å: {password}{Colors.END}")
        else:
            print(f"{Colors.BLUE}üîì –ë–µ–∑ –ø–∞—Ä–æ–ª—è{Colors.END}")
        
        print(f"\n{Colors.YELLOW}üì¢ –î–∞–π—Ç–µ ID —Å–µ—Ç–∏ –¥—Ä—É–∑—å—è–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!{Colors.END}")

    def show_network_list(self):
        print(f"\n{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
        print(f"{Colors.BOLD}üåê –ê–ö–¢–ò–í–ù–´–ï –°–ï–¢–ò:{Colors.END}")
        
        if not self.networks:
            print(f"{Colors.YELLOW}   –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π{Colors.END}")
            return
            
        for net_id, network in self.networks.items():
            print(f"\n{Colors.GREEN}üì° {network['name']}{Colors.END}")
            print(f"{Colors.BLUE}   ID: {net_id}{Colors.END}")
            print(f"{Colors.BLUE}   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(network['members'])}{Colors.END}")
            if network['password']:
                print(f"{Colors.BLUE}   üîí –° –ø–∞—Ä–æ–ª–µ–º{Colors.END}")
            else:
                print(f"{Colors.BLUE}   üîì –ë–µ–∑ –ø–∞—Ä–æ–ª—è{Colors.END}")

    def handle_messages(self):
        while self.running:
            try:
                data, addr = self.server_socket.recvfrom(4096)
                message = json.loads(data.decode())
                self.process_message(message, addr)
            except:
                pass

    def process_message(self, message, addr):
        msg_type = message.get('type')
        
        if msg_type == 'join_network':
            self.handle_join_network(message, addr)
        elif msg_type == 'get_networks':
            self.send_network_list(addr)

    def handle_join_network(self, message, addr):
        network_id = message.get('network_id', '').upper()
        password = message.get('password', '')
        client_name = message.get('client_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        if network_id not in self.networks:
            self.send_error("–°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", addr)
            return
            
        network = self.networks[network_id]
        
        if network['password'] != password:
            self.send_error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", addr)
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_info = {
            'name': client_name,
            'ip': addr[0],
            'joined_at': time.time()
        }
        
        if client_info not in network['members']:
            network['members'].append(client_info)
        
        print(f"{Colors.BLUE}üë• {client_name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {network['name']}{Colors.END}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        response = {
            'type': 'join_success',
            'network_name': network['name'],
            'members': network['members']
        }
        self.send_response(response, addr)

    def send_network_list(self, addr):
        networks_list = []
        for net_id, network in self.networks.items():
            networks_list.append({
                'id': net_id,
                'name': network['name'],
                'members_count': len(network['members']),
                'has_password': bool(network['password'])
            })
        
        response = {
            'type': 'networks_list',
            'networks': networks_list
        }
        self.send_response(response, addr)

    def send_response(self, response, addr):
        try:
            self.server_socket.sendto(json.dumps(response).encode(), addr)
        except:
            pass

    def send_error(self, error_msg, addr):
        error_response = {
            'type': 'error',
            'message': error_msg
        }
        self.send_response(error_response, addr)

    def stop_server(self):
        self.running = False
        if self.server_socket:
            self.server_socket.close()
        print(f"\n{Colors.YELLOW}üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")

class SimpleVPNClient:
    def __init__(self):
        self.client_name = ""
        self.server_ip = ""
        self.udp_socket = None
        self.running = False

    def print_banner(self):
        print(f"{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.PURPLE}{'W0nderfulX SVPN - –ö–ª–∏–µ–Ω—Ç':^50}{Colors.END}")
        print(f"{Colors.CYAN}{'‚ïê'*50}{Colors.END}")

    def start_client(self):
        self.print_banner()
        
        self.client_name = input(f"{Colors.BLUE}–í–∞—à–µ –∏–º—è: {Colors.END}").strip() or "–ò–≥—Ä–æ–∫"
        self.server_ip = input(f"{Colors.BLUE}IP —Å–µ—Ä–≤–µ—Ä–∞: {Colors.END}").strip()
        
        if not self.server_ip:
            print(f"{Colors.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞!{Colors.END}")
            return
            
        try:
            self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.udp_socket.bind(('0.0.0.0', 0))  # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—Ç
            self.running = True
            
            print(f"{Colors.GREEN}‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
            
            threading.Thread(target=self.receive_messages, daemon=True).start()
            self.show_menu()
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")

    def show_menu(self):
        while self.running:
            print(f"\n{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
            print(f"{Colors.BOLD}üéÆ –ú–ï–ù–Æ –ö–õ–ò–ï–ù–¢–ê:{Colors.END}")
            print(f"{Colors.GREEN}1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏{Colors.END}")
            print(f"{Colors.BLUE}2. –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π{Colors.END}")
            print(f"{Colors.YELLOW}3. –í—ã—Ö–æ–¥{Colors.END}")
            
            try:
                choice = input(f"\n{Colors.BLUE}–í—ã–±–µ—Ä–∏—Ç–µ: {Colors.END}").strip()
                
                if choice == "1":
                    self.join_network_menu()
                elif choice == "2":
                    self.request_network_list()
                elif choice == "3":
                    break
                else:
                    print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.END}")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")

    def join_network_menu(self):
        print(f"\n{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
        print(f"{Colors.BOLD}üë• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–¢–ò:{Colors.END}")
        
        network_id = input(f"{Colors.BLUE}ID —Å–µ—Ç–∏: {Colors.END}").strip().upper()
        if not network_id:
            print(f"{Colors.RED}‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ç–∏!{Colors.END}")
            return
            
        password = input(f"{Colors.BLUE}–ü–∞—Ä–æ–ª—å (Enter - –µ—Å–ª–∏ –Ω–µ—Ç): {Colors.END}").strip()
        
        message = {
            'type': 'join_network',
            'network_id': network_id,
            'password': password,
            'client_name': self.client_name
        }
        
        self.send_message(message, (self.server_ip, 4899))
        print(f"{Colors.GREEN}‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!{Colors.END}")

    def request_network_list(self):
        message = {'type': 'get_networks'}
        self.send_message(message, (self.server_ip, 4899))
        print(f"{Colors.GREEN}‚úÖ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!{Colors.END}")

    def send_message(self, message, addr):
        try:
            self.udp_socket.sendto(json.dumps(message).encode(), addr)
        except:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏{Colors.END}")

    def receive_messages(self):
        while self.running:
            try:
                data, addr = self.udp_socket.recvfrom(4096)
                message = json.loads(data.decode())
                self.handle_message(message)
            except:
                pass

    def handle_message(self, message):
        msg_type = message.get('type')
        
        if msg_type == 'join_success':
            print(f"\n{Colors.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!{Colors.END}")
            print(f"{Colors.BLUE}üì° –°–µ—Ç—å: {message['network_name']}{Colors.END}")
            
            members = message.get('members', [])
            if members:
                print(f"{Colors.BLUE}üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:{Colors.END}")
                for member in members:
                    print(f"   ‚Ä¢ {member['name']} - {member['ip']}")
            
            print(f"\n{Colors.YELLOW}üéÆ –¢–µ–ø–µ—Ä—å –≤ –∏–≥—Ä–µ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ IP —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!{Colors.END}")
            
        elif msg_type == 'networks_list':
            networks = message.get('networks', [])
            print(f"\n{Colors.BLUE}üåê –î–û–°–¢–£–ü–ù–´–ï –°–ï–¢–ò:{Colors.END}")
            
            if not networks:
                print(f"{Colors.YELLOW}   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π{Colors.END}")
                return
                
            for network in networks:
                status = "üîí" if network['has_password'] else "üîì"
                print(f"\n{status} {network['name']}")
                print(f"   ID: {network['id']}")
                print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {network['members_count']}")
                
        elif msg_type == 'error':
            print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {message.get('message')}{Colors.END}")

    def stop_client(self):
        self.running = False
        if self.udp_socket:
            self.udp_socket.close()
        print(f"\n{Colors.YELLOW}üõë –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")

def main():
    print(f"{Colors.CYAN}{'‚ïê'*50}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.PURPLE}{'W0nderfulX SVPN':^50}{Colors.END}")
    print(f"{Colors.YELLOW}Simple Play With Friends{Colors.END}")
    print()
    
    print(f"{Colors.GREEN}1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å (–°–µ—Ä–≤–µ—Ä){Colors.END}")
    print(f"{Colors.BLUE}2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–ö–ª–∏–µ–Ω—Ç){Colors.END}")
    print(f"{Colors.RED}3. –í—ã—Ö–æ–¥{Colors.END}")
    print()
    
    try:
        choice = input(f"{Colors.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ (1/2/3): {Colors.END}").strip()
        
        if choice == "1":
            vpn = SimpleVPN()
            if vpn.start_server():
                try:
                    input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...{Colors.END}")
                except:
                    pass
                finally:
                    vpn.stop_server()
                    
        elif choice == "2":
            client = SimpleVPNClient()
            client.start_client()
            client.stop_client()
            
        elif choice == "3":
            print(f"{Colors.YELLOW}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
            
        else:
            print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.END}")
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")

if __name__ == "__main__":
    main()