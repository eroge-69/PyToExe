# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1esFEFdpgspRP0PZfjGtfawGJ9pBh1XAb
"""

import pandas as pd
from binance.client import Client
import time
import os
from datetime import datetime

def get_historical_data(symbol, interval, start_str, end_str=None):
    print(f"Получение данных {symbol} для интервала {interval} с {start_str} до {end_str if end_str else 'now'}")

    # Добавляем задержку перед запросом
    time.sleep(0.5)  # 500 мс задержка между запросами

    klines = client.get_historical_klines(
        symbol=symbol,
        interval=interval,
        start_str=start_str,
        end_str=end_str,
        limit=1000
    )

    columns = [
        'Open time', 'Open', 'High', 'Low', 'Close', 'Volume',
        'Close time', 'Quote asset volume', 'Number of trades',
        'Taker buy base asset volume', 'Taker buy quote asset volume', 'Ignore'
    ]
    df = pd.DataFrame(klines, columns=columns)

    df['Open time'] = pd.to_datetime(df['Open time'], unit='ms')
    df['Close time'] = pd.to_datetime(df['Close time'], unit='ms')

    numeric_cols = ['Open', 'High', 'Low', 'Close', 'Volume',
                   'Quote asset volume', 'Taker buy base asset volume',
                   'Taker buy quote asset volume']
    df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, axis=1)

    return df

def save_to_csv(df, folder_path):
    # Создаем папку, если ее нет
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
        print(f"Создана папка: {folder_path}")

    # Генерируем имя файла с текущей датой и временем
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"BTCUSDT_data_{current_time}.csv"
    file_path = os.path.join(folder_path, filename)

    # Сохраняем в CSV
    df.to_csv(file_path, index=False)
    print(f"Данные сохранены в файл: {file_path}")

    return file_path

def main():
    # Настройки Binance API
    api_key = '5mUKPSIFyd9rtpFpOdhlq2RCS0d3pUnqCsUFl3Vi8cIzA2f7sXCuZaxzSoLjD1Ez'
    api_secret = 'Traine25'

    # Путь для сохранения файлов
    save_folder = r"C:\Users\Инесса\Desktop\Автоматизация\ИИ Агент"

    try:
        # Инициализация клиента Binance
        global client
        client = Client(api_key, api_secret)

        # Получение данных
        print("Начинаем загрузку данных BTC/USDT...")
        btc_data = get_historical_data(
            symbol='BTCUSDT',
            interval=Client.KLINE_INTERVAL_1DAY,
            start_str='1000 days ago UTC'
        )

        # Показать первые строки
        print("\nПервые строки полученных данных:")
        print(btc_data.head())

        # Сохранение в CSV
        saved_file = save_to_csv(btc_data, save_folder)

        print("\nГотово! Данные успешно сохранены.")
        print(f"Файл: {saved_file}")

    except Exception as e:
        print(f"\nПроизошла ошибка: {str(e)}")

    input("\nНажмите Enter для выхода...")

if __name__ == "__main__":
    main()