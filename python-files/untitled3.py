import hashlib
import random
import time
from multiprocessing import Pool, cpu_count
from tqdm import tqdm

def md5_cp1251(string):
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Windows-1251 (CP1251)."""
    try:
        s_bytes = string.encode('cp1251')
        return hashlib.md5(s_bytes).hexdigest().lower()
    except UnicodeEncodeError:
        return None

def verify_hash(roulette_num, number, target_hash):
    """–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –¥—Ä–æ–±–Ω–æ–≥–æ –∏–ª–∏ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞."""
    if '.' in str(number):
        integer_part, frac_part = str(number).split('.')
        test_string = f"{roulette_num}.{integer_part}.{frac_part}"
    else:
        test_string = f"{roulette_num}.{number}"
    
    computed_hash = md5_cp1251(test_string)
    if computed_hash == target_hash.lower():
        return f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ß–∏—Å–ª–æ: {number}, –°—Ç—Ä–æ–∫–∞: '{test_string}', –•–µ—à: {computed_hash}"
    else:
        return f"‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {computed_hash}"

def check_integer(args):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ brute)."""
    roulette_num, num, target_hash = args
    test_string = f"{roulette_num}.{num}"
    if md5_cp1251(test_string) == target_hash.lower():
        return num
    return None

def brute_integers(roulette_num, target_hash, min_num=1, max_num=100):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π brute-force —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª."""
    print(f"üöÄ Brute-force —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª {min_num}‚Äì{max_num} –Ω–∞ {cpu_count()} —è–¥—Ä–∞—Ö...")
    start_time = time.time()
    with Pool(cpu_count()) as pool:
        results = list(tqdm(pool.imap(check_integer, [(roulette_num, num, target_hash) for num in range(min_num, max_num + 1)]), total=max_num-min_num+1))
    pool.close()
    pool.join()
    
    found = [r for r in results if r is not None]
    elapsed = time.time() - start_time
    if found:
        return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: {found[0]}, –°—Ç—Ä–æ–∫–∞: '{roulette_num}.{found[0]}', –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫."
    return f"‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ä–µ–¥–∏ —Ü–µ–ª—ã—Ö {min_num}‚Äì{max_num}. –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫."

def check_fractional(args):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (–¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ brute)."""
    roulette_num, integer_part, frac_part, target_hash = args
    test_string = f"{roulette_num}.{integer_part}.{frac_part}"
    if md5_cp1251(test_string) == target_hash.lower():
        return f"{integer_part}.{frac_part}"
    return None

def brute_fractional(roulette_num, target_hash, integer_parts=(1, 100), frac_length=5, max_attempts=1000000):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π brute-force –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)."""
    print(f"‚ö†Ô∏è Brute-force –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª (—Ü–µ–ª–∞—è —á–∞—Å—Ç—å {integer_parts[0]}‚Äì{integer_parts[1]}, –¥–ª–∏–Ω–∞ –¥—Ä–æ–±–Ω–æ–π: {frac_length}, –ø–æ–ø—ã—Ç–æ–∫: {max_attempts})...")
    start_time = time.time()
    attempts = []
    for _ in range(max_attempts):
        integer_part = random.randint(integer_parts[0], integer_parts[1])
        frac_part = ''.join(random.choices('0123456789', k=frac_length))
        attempts.append((roulette_num, integer_part, frac_part, target_hash))
    
    with Pool(cpu_count()) as pool:
        results = list(tqdm(pool.imap(check_fractional, attempts), total=max_attempts))
    pool.close()
    pool.join()
    
    found = [r for r in results if r is not None]
    elapsed = time.time() - start_time
    if found:
        return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ! –ß–∏—Å–ª–æ: {found[0]}, –°—Ç—Ä–æ–∫–∞: '{roulette_num}.{found[0].replace('.', '.')}', –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫."
    return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ (–≤—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫.). –£–≤–µ–ª–∏—á—å –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ —É–º–µ–Ω—å—à–∏ –¥–ª–∏–Ω—É –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏."

if __name__ == "__main__":
    print("=== –†–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ MD5 –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ (CP1251) ===")
    roulette_num = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ä—É–ª–µ—Ç–∫–∏: ").strip()
    target_hash = input("–í–≤–µ–¥–∏ MD5-—Ö–µ—à: ").strip()
    
    choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (1 - –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ, 2 - brute —Ü–µ–ª—ã–µ 1-100, 3 - brute –¥—Ä–æ–±–Ω—ã—Ö): ")
    
    if choice == "1":
        number = input("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ, –Ω–∞–ø—Ä. 90.9193358955592513): ").strip()
        print(verify_hash(roulette_num, number, target_hash))
    
    elif choice == "2":
        min_num = int(input("–ú–∏–Ω. —Ü–µ–ª–∞—è —á–∞—Å—Ç—å (–ø–æ —É–º–æ–ª. 1): ") or 1)
        max_num = int(input("–ú–∞–∫—Å. —Ü–µ–ª–∞—è —á–∞—Å—Ç—å (–ø–æ —É–º–æ–ª. 100): ") or 100)
        print(brute_integers(roulette_num, target_hash, min_num, max_num))
    
    elif choice == "3":
        integer_min = int(input("–ú–∏–Ω. —Ü–µ–ª–∞—è —á–∞—Å—Ç—å (–ø–æ —É–º–æ–ª. 1): ") or 1)
        integer_max = int(input("–ú–∞–∫—Å. —Ü–µ–ª–∞—è —á–∞—Å—Ç—å (–ø–æ —É–º–æ–ª. 100): ") or 100)
        frac_length = int(input("–î–ª–∏–Ω–∞ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª. 5, –º–∞–∫—Å 8 –¥–ª—è –¥–µ–º–æ): ") or 5)
        max_attempts = int(input("–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª. 1000000): ") or 1000000)
        print(brute_fractional(roulette_num, target_hash, (integer_min, integer_max), frac_length, max_attempts))
    
    # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    print("\n--- –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ ‚Ññ1779953163 ---")
    print(verify_hash("1779953163", "90.9193358955592513", "0cf563a517729f5c64c88d01e1f1628c"))