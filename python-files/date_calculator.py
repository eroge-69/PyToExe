import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
import calendar

class DateCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
        self.holidays_rf = [
            {"date": "2025-01-01", "name": "–ù–æ–≤—ã–π –≥–æ–¥", "period": "2025-01-01 to 2025-01-08"},
            {"date": "2025-02-23", "name": "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞"},
            {"date": "2025-03-08", "name": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å"},
            {"date": "2025-05-01", "name": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞"},
            {"date": "2025-05-09", "name": "–î–µ–Ω—å –ü–æ–±–µ–¥—ã"},
            {"date": "2025-06-12", "name": "–î–µ–Ω—å –†–æ—Å—Å–∏–∏"},
            {"date": "2025-11-04", "name": "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞"}
        ]
        
        self.holidays_china = [
            {"date": "2025-01-01", "name": "–ù–æ–≤—ã–π –≥–æ–¥"},
            {"date": "2025-01-28", "name": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã", "period": "2025-01-28 to 2025-02-03"},
            {"date": "2025-04-05", "name": "–î–µ–Ω—å –ø–æ–º–∏–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–µ–¥–∫–æ–≤"},
            {"date": "2025-05-01", "name": "–î–µ–Ω—å —Ç—Ä—É–¥–∞", "period": "2025-05-01 to 2025-05-03"},
            {"date": "2025-05-31", "name": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –ª–æ–¥–æ–∫-–¥—Ä–∞–∫–æ–Ω–æ–≤", "period": "2025-05-31 to 2025-06-02"},
            {"date": "2025-09-06", "name": "–ü—Ä–∞–∑–¥–Ω–∏–∫ —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Å–µ–Ω–∏", "period": "2025-09-06 to 2025-09-08"},
            {"date": "2025-10-01", "name": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –ö–ù–†", "period": "2025-10-01 to 2025-10-07"}
        ]
        
        self.create_widgets()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(pady=10)
        
        title_label = ttk.Label(title_frame, text="üìÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", 
                               font=("Arial", 16, "bold"))
        title_label.pack()
        
        subtitle_label = ttk.Label(title_frame, text="–†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ üá∑üá∫ –†–§ –∏ üá®üá≥ –ö–∏—Ç–∞—è", 
                                  font=("Arial", 10))
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.LabelFrame(self.root, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞", padding=20)
        main_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        mode_frame = ttk.Frame(main_frame)
        mode_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(mode_frame, text="–°–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        self.calc_mode = tk.StringVar(value="dates")
        ttk.Radiobutton(mode_frame, text="–ü–æ –¥–∞—Ç–∞–º (–Ω–∞—á–∞–ª—å–Ω–∞—è ‚Üí –∫–æ–Ω–µ—á–Ω–∞—è)", 
                       variable=self.calc_mode, value="dates", 
                       command=self.toggle_mode).pack(anchor="w", padx=20)
        ttk.Radiobutton(mode_frame, text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π (–Ω–∞—á–∞–ª—å–Ω–∞—è + –¥–Ω–∏)", 
                       variable=self.calc_mode, value="days", 
                       command=self.toggle_mode).pack(anchor="w", padx=20)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.Frame(main_frame)
        input_frame.pack(fill="x", pady=(0, 15))
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        ttk.Label(input_frame, text="üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:").grid(row=0, column=0, sticky="w", padx=(0, 10))
        self.start_date = ttk.Entry(input_frame, width=15, font=("Arial", 10))
        self.start_date.grid(row=0, column=1, sticky="w")
        ttk.Label(input_frame, text="(—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)", 
                 font=("Arial", 8)).grid(row=0, column=2, sticky="w", padx=(5, 0))
        
        # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        self.end_date_label = ttk.Label(input_frame, text="üìÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:")
        self.end_date_label.grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(10, 0))
        self.end_date = ttk.Entry(input_frame, width=15, font=("Arial", 10))
        self.end_date.grid(row=1, column=1, sticky="w", pady=(10, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        self.days_label = ttk.Label(input_frame, text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
        self.days_count = ttk.Entry(input_frame, width=15, font=("Arial", 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calc_frame = ttk.Frame(main_frame)
        calc_frame.pack(pady=15)
        
        self.calc_button = ttk.Button(calc_frame, text="üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", 
                                     command=self.calculate, style="Accent.TButton")
        self.calc_button.pack()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞", padding=15)
        self.results_frame.pack(fill="both", expand=True, pady=(15, 0))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text = tk.Text(self.results_frame, height=15, wrap=tk.WORD, 
                                   font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(self.results_frame, orient="vertical", command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=scrollbar.set)
        
        self.results_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—å –ø–æ–ª—è –¥–ª—è –¥–Ω–µ–π
        self.toggle_mode()
        
    def toggle_mode(self):
        if self.calc_mode.get() == "dates":
            self.end_date_label.grid()
            self.end_date.grid()
            self.days_label.grid_remove()
            self.days_count.grid_remove()
        else:
            self.end_date_label.grid_remove()
            self.end_date.grid_remove()
            self.days_label.grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(10, 0))
            self.days_count.grid(row=1, column=1, sticky="w", pady=(10, 0))
            
    def parse_date(self, date_str):
        try:
            return datetime.strptime(date_str.strip(), "%d.%m.%Y")
        except:
            try:
                return datetime.strptime(date_str.strip(), "%Y-%m-%d")
            except:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                
    def get_week_number(self, date):
        return date.isocalendar()[1]
        
    def check_holidays(self, start_date, end_date):
        rf_holidays = []
        china_holidays = []
        
        for holiday in self.holidays_rf:
            holiday_date = datetime.strptime(holiday["date"], "%Y-%m-%d")
            if start_date <= holiday_date <= end_date:
                rf_holidays.append(holiday)
                
        for holiday in self.holidays_china:
            holiday_date = datetime.strptime(holiday["date"], "%Y-%m-%d")
            if start_date <= holiday_date <= end_date:
                china_holidays.append(holiday)
                
        return rf_holidays, china_holidays
        
    def calculate(self):
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_text.delete(1.0, tk.END)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
            start_date_str = self.start_date.get()
            if not start_date_str:
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É")
                
            start_date = self.parse_date(start_date_str)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            if self.calc_mode.get() == "dates":
                end_date_str = self.end_date.get()
                if not end_date_str:
                    raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É")
                end_date = self.parse_date(end_date_str)
            else:
                days_str = self.days_count.get()
                if not days_str:
                    raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
                days = int(days_str)
                end_date = start_date + timedelta(days=days-1)
                
            # –†–∞—Å—á–µ—Ç—ã
            days_diff = (end_date - start_date).days + 1
            weeks_count = (days_diff + 6) // 7  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            week_number = self.get_week_number(end_date)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
            rf_holidays, china_holidays = self.check_holidays(start_date, end_date)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê\n"
            result += f"{'='*50}\n\n"
            result += f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}\n"
            result += f"üìÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days_diff} –¥–Ω–µ–π\n"
            result += f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –Ω–µ–¥–µ–ª—å: {weeks_count} –Ω–µ–¥–µ–ª—å\n"
            result += f"üóìÔ∏è –ù–æ–º–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –Ω–µ–¥–µ–ª–∏: –Ω–µ–¥–µ–ª—è ‚Ññ{week_number} {end_date.year} –≥–æ–¥–∞\n\n"
            
            # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
            if rf_holidays or china_holidays:
                result += f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n"
                result += f"{'='*50}\n"
                
                if rf_holidays:
                    result += f"üá∑üá∫ –ü–†–ê–ó–î–ù–ò–ö–ò –†–§:\n"
                    for holiday in rf_holidays:
                        date_obj = datetime.strptime(holiday["date"], "%Y-%m-%d")
                        result += f"   ‚Ä¢ {date_obj.strftime('%d.%m.%Y')} ‚Äî {holiday['name']}\n"
                        if "period" in holiday:
                            result += f"     (–ø–µ—Ä–∏–æ–¥: {holiday['period']})\n"
                    result += f"\n"
                    
                if china_holidays:
                    result += f"üá®üá≥ –ü–†–ê–ó–î–ù–ò–ö–ò –ö–ò–¢–ê–Ø:\n"
                    for holiday in china_holidays:
                        date_obj = datetime.strptime(holiday["date"], "%Y-%m-%d")
                        result += f"   ‚Ä¢ {date_obj.strftime('%d.%m.%Y')} ‚Äî {holiday['name']}\n"
                        if "period" in holiday:
                            result += f"     (–ø–µ—Ä–∏–æ–¥: {holiday['period']})\n"
                    result += f"\n"
                    
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                total_holidays = len(rf_holidays) + len(china_holidays)
                additional_days = total_holidays * 1.5  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                
                result += f"‚ö†Ô∏è –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –°–†–û–ö–û–í:\n"
                result += f"{'='*50}\n"
                result += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å +{int(additional_days)} –¥–Ω—è –∫ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π\n"
                result += f"–¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ —Å–≤—è–∑–∏ —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏\n\n"
                result += f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                result += f"‚Ä¢ –£—á–µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤\n"
                result += f"‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö\n"
                result += f"‚Ä¢ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π\n"
                result += f"‚Ä¢ –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n"
            else:
                result += f"‚úÖ –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
                
            self.results_text.insert(tk.END, result)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")

def main():
    root = tk.Tk()
    app = DateCalculatorApp(root)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
    style = ttk.Style()
    if "Accent.TButton" not in style.theme_names():
        style.configure("Accent.TButton", foreground="white", background="blue")
    
    root.mainloop()

if __name__ == "__main__":
    main()
