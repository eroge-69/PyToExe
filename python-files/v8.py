import sys
import time
import threading
import json
import os
import logging
from datetime import datetime
from struct import pack, unpack
import pandas as pd
import telebot
from telebot import types
import requests
from pymodbus.client import ModbusSerialClient
from pymodbus.exceptions import ModbusIOException
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel, 
                             QHBoxLayout, QPushButton, QComboBox, QSpinBox, 
                             QDoubleSpinBox, QGroupBox, QStatusBar, QFileDialog,
                             QTabWidget, QFrame, QGridLayout, QLineEdit, QCheckBox,
                             QTextEdit, QScrollArea)
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QFont, QColor
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.dates as mdates
from openpyxl import load_workbook

class TelegramBot:
    def __init__(self, token, chat_id, parent_app):
        self.bot = telebot.TeleBot(token)
        self.chat_id = chat_id
        self.parent = parent_app
        self.measurement_name = parent_app.telegram_test_name.text()
        self.send_interval = parent_app.telegram_interval.value()
        self.running = False
        self.is_group_chat = str(chat_id).startswith('-')

        @self.bot.message_handler(commands=['start', 'help'])
        def start(message):
            self.bot.send_message(message.chat.id, "üîî –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n"
                               "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                               "/graph - –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏\n"
                               "/status - —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
                               "/test - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                               "/thresholds - —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

        @self.bot.message_handler(commands=['graph'])
        def send_graph(message):
            self.send_current_graphs()

        @self.bot.message_handler(commands=['test'])
        def test(message):
            reply = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            if self.is_group_chat:
                self.bot.reply_to(message, reply)
            else:
                self.bot.send_message(message.chat.id, reply)

        @self.bot.message_handler(commands=['status'])
        def status(message):
            status_text = "üìä –°—Ç–∞—Ç—É—Å:\n"
            status_text += f"–ò–∑–º–µ—Ä–µ–Ω–∏–µ: {self.measurement_name}\n"
            status_text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {self.send_interval} —Å–µ–∫.\n"
            status_text += f"–†–µ–∂–∏–º: {'–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç' if self.is_group_chat else '–õ–°'}"
            
            if self.is_group_chat:
                self.bot.reply_to(message, status_text)
            else:
                self.bot.send_message(message.chat.id, status_text)

        @self.bot.message_handler(commands=['thresholds'])
        def send_thresholds(message):
            thresholds_text = "üìä –¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            for i in range(8):
                enabled = "‚úÖ" if self.parent.threshold_checkboxes[i].isChecked() else "‚ùå"
                thresholds_text += (f"–ö–∞–Ω–∞–ª {i+1}: {enabled} "
                                  f"{self.parent.threshold_spinboxes[i].value()}¬∞C\n")
            
            if self.is_group_chat:
                self.bot.reply_to(message, thresholds_text)
            else:
                self.bot.send_message(message.chat.id, thresholds_text)

    def send_message(self, text):
        if self.chat_id:
            self.bot.send_message(self.chat_id, text)

    def send_current_graphs(self):
        if not self.parent.data_log:
            self.send_message("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤!")
            return
        
        self.parent.figure.savefig("temp_graph.png", dpi=150)
        with open("temp_graph.png", "rb") as graph_file:
            if self.is_group_chat:
                self.bot.send_photo(self.chat_id, graph_file, 
                                 reply_to_message_id=self.parent.last_group_message_id,
                                 caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
            else:
                self.bot.send_photo(self.chat_id, graph_file, 
                                 caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")

    def run(self):
        if not self.running:
            self.running = True
            threading.Thread(target=self.bot.polling, daemon=True).start()

class ModernTemperatureMonitor(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ú–í110-8–ê")
        self.setGeometry(100, 100, 1200, 900)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.port = 'COM3'
        self.baudrate = 9600
        self.parity = 'N'
        self.stopbits = 1
        self.bytesize = 8
        self.timeout = 1.0
        self.slave_id = 16
        self.update_interval = 2000
        
        # –î–∞–Ω–Ω—ã–µ
        self.data_log = []
        self.excel_file = "temperature_data.xlsx"
        self.config_file = "config.json"
        self.last_group_message_id = None
        self.excel_auto_save = False
        self.excel_writer = None
        self.channel_names = [f"–ö–∞–Ω–∞–ª {i+1}" for i in range(8)]
        self.telegram_bot = None
        self.threshold_alerts_sent = [False] * 8
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_temperatures)
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.init_ui()
        self.setup_logging()
        self.load_config()
        
    def setup_logging(self):
        self.log_handler = logging.StreamHandler()
        self.log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        self.logger = logging.getLogger('TemperatureMonitor')
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(self.log_handler)
        
    def log_message(self, message, level=logging.INFO):
        self.logger.log(level, message)
        if hasattr(self, 'log_text_edit'):
            self.log_text_edit.append(f"{datetime.now().strftime('%H:%M:%S.%f')[:-3]} - {message}")
            cursor = self.log_text_edit.textCursor()
            cursor.movePosition(cursor.End)
            self.log_text_edit.setTextCursor(cursor)

    def init_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(15)
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QMainWindow { background-color: #f5f5f5; }
            QGroupBox { border: 1px solid #ddd; border-radius: 5px; margin-top: 10px; padding-top: 15px; font-weight: bold; }
            QPushButton { background-color: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 4px; font-weight: bold; }
            QPushButton:hover { background-color: #45a049; }
            QPushButton:disabled { background-color: #cccccc; }
            QPushButton#stopButton { background-color: #f44336; }
            QPushButton#stopButton:hover { background-color: #d32f2f; }
            QLineEdit, QComboBox, QSpinBox { padding: 5px; border: 1px solid #ddd; border-radius: 3px; }
            QTextEdit { background-color: white; border: 1px solid #ddd; border-radius: 3px; padding: 5px; font-family: monospace; }
        """)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Modbus
        control_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Modbus")
        control_layout = QGridLayout()
        
        control_layout.addWidget(QLabel("COM –ø–æ—Ä—Ç:"), 0, 0)
        self.port_combo = QComboBox()
        self.port_combo.addItems([f"COM{i}" for i in range(1, 21)])
        self.port_combo.setCurrentText(self.port)
        control_layout.addWidget(self.port_combo, 0, 1)
        
        control_layout.addWidget(QLabel("–°–∫–æ—Ä–æ—Å—Ç—å (bps):"), 0, 2)
        self.baudrate_spin = QSpinBox()
        self.baudrate_spin.setRange(1200, 115200)
        self.baudrate_spin.setValue(self.baudrate)
        control_layout.addWidget(self.baudrate_spin, 0, 3)
        
        control_layout.addWidget(QLabel("Slave ID:"), 1, 0)
        self.slave_spin = QSpinBox()
        self.slave_spin.setRange(1, 247)
        self.slave_spin.setValue(self.slave_id)
        control_layout.addWidget(self.slave_spin, 1, 1)
        
        control_layout.addWidget(QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º—Å):"), 1, 2)
        self.interval_spin = QSpinBox()
        self.interval_spin.setRange(500, 10000)
        self.interval_spin.setValue(self.update_interval)
        self.interval_spin.valueChanged.connect(self.set_update_interval)
        control_layout.addWidget(self.interval_spin, 1, 3)
        
        control_group.setLayout(control_layout)
        main_layout.addWidget(control_group)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        self.graph_tab = QWidget()
        self.graph_tab_layout = QVBoxLayout(self.graph_tab)
        self.figure = Figure(figsize=(10, 8), dpi=100)
        self.canvas = FigureCanvas(self.figure)
        self.graph_tab_layout.addWidget(self.canvas)
        
        self.axes = []
        self.lines = []
        for i in range(8):
            ax = self.figure.add_subplot(4, 2, i+1)
            line, = ax.plot([], [], label=f'–ö–∞–Ω–∞–ª {i+1}', linewidth=2)
            ax.set_title(f'–ö–∞–Ω–∞–ª {i+1}', fontsize=10)
            ax.set_ylabel('¬∞C', fontsize=8)
            ax.grid(True, linestyle='--', alpha=0.6)
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
            self.axes.append(ax)
            self.lines.append(line)
            
        self.figure.tight_layout()
        self.tabs.addTab(self.graph_tab, "–ì—Ä–∞—Ñ–∏–∫–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        self.values_tab = QWidget()
        self.values_tab_layout = QGridLayout(self.values_tab)
        self.value_labels = []
        for i in range(8):
            frame = QFrame()
            frame.setFrameShape(QFrame.StyledPanel)
            frame_layout = QVBoxLayout(frame)
            
            title = QLabel(f"–ö–∞–Ω–∞–ª {i+1}")
            title.setFont(QFont('Arial', 10, QFont.Bold))
            title.setAlignment(Qt.AlignCenter)
            frame_layout.addWidget(title)
            
            label = QLabel("-- ¬∞C")
            label.setAlignment(Qt.AlignCenter)
            label.setFont(QFont('Arial', 14, QFont.Bold))
            frame_layout.addWidget(label)
            
            self.value_labels.append(label)
            self.values_tab_layout.addWidget(frame, i//4, i%4)
        
        self.tabs.addTab(self.values_tab, "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
        self.channels_tab = QWidget()
        self.channels_tab_layout = QVBoxLayout(self.channels_tab)
        
        channels_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤")
        channels_grid = QGridLayout()
        
        self.channel_name_edits = []
        for i in range(8):
            channels_grid.addWidget(QLabel(f"–ö–∞–Ω–∞–ª {i+1}:"), i, 0)
            edit = QLineEdit(f"–ö–∞–Ω–∞–ª {i+1}")
            edit.textChanged.connect(lambda text, idx=i: self.update_channel_name(idx, text))
            self.channel_name_edits.append(edit)
            channels_grid.addWidget(edit, i, 1)
        
        channels_group.setLayout(channels_grid)
        self.channels_tab_layout.addWidget(channels_group)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        threshold_group = QGroupBox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")
        threshold_layout = QGridLayout()
        
        self.threshold_checkboxes = []
        self.threshold_spinboxes = []
        
        for i in range(8):
            chk = QCheckBox(f"–ö–∞–Ω–∞–ª {i+1}")
            self.threshold_checkboxes.append(chk)
            threshold_layout.addWidget(chk, i, 0)
            
            spin = QDoubleSpinBox()
            spin.setRange(-50, 150)
            spin.setValue(50)
            spin.setSuffix(" ¬∞C")
            self.threshold_spinboxes.append(spin)
            threshold_layout.addWidget(spin, i, 1)
        
        threshold_group.setLayout(threshold_layout)
        self.channels_tab_layout.addWidget(threshold_group)
        self.channels_tab_layout.addStretch()
        
        self.tabs.addTab(self.channels_tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ Telegram
        self.telegram_tab = QWidget()
        self.telegram_tab_layout = QVBoxLayout(self.telegram_tab)
        
        telegram_settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        telegram_settings_layout = QGridLayout()
        
        self.telegram_enable = QCheckBox("–í–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞")
        self.telegram_token = QLineEdit()
        self.telegram_token.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        self.telegram_token.setText("8101843469:AAETKjUw7hx1mL3KrijQZBDCCB1fX7ser1o")
        self.telegram_chat_id = QLineEdit()
        self.telegram_chat_id.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã")
        
        telegram_settings_layout.addWidget(QLabel("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:"), 0, 0)
        telegram_settings_layout.addWidget(self.telegram_token, 0, 1)
        telegram_settings_layout.addWidget(QLabel("ID —á–∞—Ç–∞:"), 1, 0)
        telegram_settings_layout.addWidget(self.telegram_chat_id, 1, 1)
        
        self.telegram_test_name = QLineEdit()
        self.telegram_test_name.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        self.telegram_test_name.setText("–¢–µ—Å—Ç")
        telegram_settings_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:"), 2, 0)
        telegram_settings_layout.addWidget(self.telegram_test_name, 2, 1)
        
        self.telegram_interval = QSpinBox()
        self.telegram_interval.setRange(10, 3600)
        self.telegram_interval.setValue(60)
        self.telegram_interval.setSuffix(" —Å–µ–∫.")
        telegram_settings_layout.addWidget(QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏:"), 3, 0)
        telegram_settings_layout.addWidget(self.telegram_interval, 3, 1)
        
        telegram_settings_group.setLayout(telegram_settings_layout)
        self.telegram_tab_layout.addWidget(telegram_settings_group)
        
        telegram_buttons_layout = QHBoxLayout()
        self.telegram_test_btn = QPushButton("–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.telegram_test_btn.clicked.connect(self.send_test_telegram_message)
        telegram_buttons_layout.addWidget(self.telegram_test_btn)
        
        self.telegram_detect_btn = QPushButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
        self.telegram_detect_btn.clicked.connect(self.detect_chat_id)
        telegram_buttons_layout.addWidget(self.telegram_detect_btn)
        
        self.telegram_tab_layout.addLayout(telegram_buttons_layout)
        self.telegram_tab_layout.addStretch()
        
        self.tabs.addTab(self.telegram_tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        
        # –í–∫–ª–∞–¥–∫–∞ Excel
        self.excel_tab = QWidget()
        self.excel_tab_layout = QVBoxLayout(self.excel_tab)
        
        excel_settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel")
        excel_settings_layout = QGridLayout()
        
        self.excel_auto_save_check = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel")
        self.excel_auto_save_check.stateChanged.connect(self.toggle_auto_save)
        excel_settings_layout.addWidget(self.excel_auto_save_check, 0, 0, 1, 2)
        
        self.excel_file_edit = QLineEdit()
        self.excel_file_edit.setText(self.excel_file)
        excel_settings_layout.addWidget(QLabel("–§–∞–π–ª Excel:"), 1, 0)
        excel_settings_layout.addWidget(self.excel_file_edit, 1, 1)
        
        self.excel_file_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")
        self.excel_file_btn.clicked.connect(self.select_excel_file)
        excel_settings_layout.addWidget(self.excel_file_btn, 2, 0, 1, 2)
        
        excel_settings_group.setLayout(excel_settings_layout)
        self.excel_tab_layout.addWidget(excel_settings_group)
        self.excel_tab_layout.addStretch()
        
        self.tabs.addTab(self.excel_tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel")
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        self.log_tab = QWidget()
        self.log_tab_layout = QVBoxLayout(self.log_tab)
        
        log_group = QGroupBox("–õ–æ–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        log_layout = QVBoxLayout()
        
        self.log_text_edit = QTextEdit()
        self.log_text_edit.setReadOnly(True)
        self.log_text_edit.setLineWrapMode(QTextEdit.NoWrap)
        
        log_buttons_layout = QHBoxLayout()
        self.clear_log_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        self.clear_log_btn.clicked.connect(self.clear_logs)
        log_buttons_layout.addWidget(self.clear_log_btn)
        
        self.save_log_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏")
        self.save_log_btn.clicked.connect(self.save_logs)
        log_buttons_layout.addWidget(self.save_log_btn)
        
        log_layout.addWidget(self.log_text_edit)
        log_layout.addLayout(log_buttons_layout)
        log_group.setLayout(log_layout)
        self.log_tab_layout.addWidget(log_group)
        
        self.tabs.addTab(self.log_tab, "–õ–æ–≥–∏")
        
        main_layout.addWidget(self.tabs)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        self.connect_btn = QPushButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        self.connect_btn.clicked.connect(self.toggle_connection)
        button_layout.addWidget(self.connect_btn)
        
        self.export_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.export_btn.clicked.connect(self.export_to_excel)
        self.export_btn.setEnabled(False)
        button_layout.addWidget(self.export_btn)
        
        self.clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.clear_btn.clicked.connect(self.clear_data)
        self.clear_btn.setEnabled(False)
        button_layout.addWidget(self.clear_btn)
        
        main_layout.addLayout(button_layout)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")

    def set_update_interval(self, interval):
        self.update_interval = max(500, min(interval, 10000))
        if hasattr(self, 'timer') and self.timer.isActive():
            self.timer.setInterval(self.update_interval)
        self.log_message(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.update_interval} –º—Å")

    def update_channel_name(self, channel_idx, new_name):
        self.channel_names[channel_idx] = new_name
        self.axes[channel_idx].set_title(new_name, fontsize=10)
        self.lines[channel_idx].set_label(new_name)
        
        if self.lines[channel_idx].get_label() and not self.lines[channel_idx].get_label().startswith('_'):
            self.axes[channel_idx].legend()
        
        self.canvas.draw()
        
        if channel_idx < len(self.value_labels):
            frame = self.value_labels[channel_idx].parent().parent()
            if frame and frame.layout():
                title_item = frame.layout().itemAt(0)
                if title_item:
                    title_label = title_item.widget()
                    if isinstance(title_label, QLabel):
                        title_label.setText(new_name)

    def clear_logs(self):
        self.log_text_edit.clear()
        self.log_message("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")

    def save_logs(self):
        file_name, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
            "temperature_monitor_log.txt", 
            "Text Files (*.txt)"
        )
        
        if file_name:
            try:
                with open(file_name, 'w') as f:
                    f.write(self.log_text_edit.toPlainText())
                self.log_message(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_name}")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}", logging.ERROR)

    def toggle_auto_save(self, state):
        self.excel_auto_save = (state == Qt.Checked)
        if self.excel_auto_save:
            self.excel_file = self.excel_file_edit.text()
            try:
                self.excel_writer = pd.ExcelWriter(self.excel_file, engine='openpyxl')
                self.log_message(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –§–∞–π–ª: {self.excel_file}")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ Excel: {str(e)}", logging.ERROR)
                self.excel_auto_save_check.setChecked(False)
        elif not self.excel_auto_save and hasattr(self, 'excel_writer') and self.excel_writer:
            self.save_excel_data()
            self.excel_writer = None
            self.log_message("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

    def select_excel_file(self):
        file_name, _ = QFileDialog.getSaveFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", 
            self.excel_file, 
            "Excel Files (*.xlsx)"
        )
        if file_name:
            self.excel_file_edit.setText(file_name)
            self.excel_file = file_name
            if self.excel_auto_save and hasattr(self, 'excel_writer') and self.excel_writer:
                self.save_excel_data()
                try:
                    self.excel_writer = pd.ExcelWriter(self.excel_file, engine='openpyxl')
                except Exception as e:
                    self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ Excel: {str(e)}", logging.ERROR)
                    self.excel_auto_save_check.setChecked(False)

    def save_excel_data(self):
        if hasattr(self, 'excel_writer') and self.excel_writer and self.data_log:
            try:
                df = pd.DataFrame(self.data_log)
                df.set_index('timestamp', inplace=True)
                df.to_excel(self.excel_writer)
                self.excel_writer.close()
                self.excel_writer = pd.ExcelWriter(self.excel_file, engine='openpyxl')
                self.log_message(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.excel_file}")
            except PermissionError:
                self.log_message("–û—à–∏–±–∫–∞: –§–∞–π–ª Excel –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!", logging.ERROR)
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {str(e)}", logging.ERROR)

    def load_config(self):
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    self.telegram_token.setText(config.get('telegram_token', ''))
                    self.telegram_chat_id.setText(config.get('telegram_chat_id', ''))
                    self.telegram_enable.setChecked(config.get('telegram_enabled', False))
                    self.telegram_test_name.setText(config.get('telegram_test_name', '–¢–µ—Å—Ç B1B7'))
                    self.telegram_interval.setValue(config.get('telegram_interval', 60))
                    self.excel_auto_save_check.setChecked(config.get('excel_auto_save', False))
                    self.excel_file_edit.setText(config.get('excel_file', 'temperature_data.xlsx'))
                    self.excel_file = config.get('excel_file', 'temperature_data.xlsx')
                    
                    channel_names = config.get('channel_names', [])
                    for i, name in enumerate(channel_names):
                        if i < len(self.channel_name_edits):
                            self.channel_name_edits[i].setText(name)
                            self.channel_names[i] = name
                            self.update_channel_name(i, name)
                    
                    threshold_enabled = config.get('threshold_enabled', [False]*8)
                    threshold_values = config.get('threshold_values', [50.0]*8)
                    
                    for i in range(8):
                        if i < len(self.threshold_checkboxes):
                            self.threshold_checkboxes[i].setChecked(threshold_enabled[i])
                        if i < len(self.threshold_spinboxes):
                            self.threshold_spinboxes[i].setValue(threshold_values[i])
                
                self.log_message("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}", logging.ERROR)

    def save_config(self):
        config = {
            'telegram_token': self.telegram_token.text(),
            'telegram_chat_id': self.telegram_chat_id.text(),
            'telegram_enabled': self.telegram_enable.isChecked(),
            'telegram_test_name': self.telegram_test_name.text(),
            'telegram_interval': self.telegram_interval.value(),
            'excel_auto_save': self.excel_auto_save_check.isChecked(),
            'excel_file': self.excel_file_edit.text(),
            'channel_names': self.channel_names,
            'threshold_enabled': [chk.isChecked() for chk in self.threshold_checkboxes],
            'threshold_values': [spin.value() for spin in self.threshold_spinboxes]
        }
        with open(self.config_file, 'w') as f:
            json.dump(config, f)
        self.log_message("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    def detect_chat_id(self):
        token = self.telegram_token.text()
        if not token:
            self.log_message("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!", logging.WARNING)
            return
            
        try:
            url = f"https://api.telegram.org/bot{token}/getUpdates"
            response = requests.get(url).json()
            
            if response.get('ok'):
                if len(response['result']) > 0:
                    last_update = response['result'][-1]
                    chat_id = last_update['message']['chat']['id']
                    self.telegram_chat_id.setText(str(chat_id))
                    self.log_message(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω chat_id: {chat_id}")
                else:
                    self.log_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ!", logging.WARNING)
            else:
                self.log_message("–û—à–∏–±–∫–∞ API Telegram", logging.ERROR)
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞: {str(e)}", logging.ERROR)

    def send_test_telegram_message(self):
        token = self.telegram_token.text()
        chat_id = self.telegram_chat_id.text()
        
        if not token or not chat_id:
            self.log_message("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ chat_id!", logging.WARNING)
            return
            
        try:
            if not self.telegram_bot:
                self.telegram_bot = TelegramBot(token, chat_id, self)
                self.telegram_bot.run()
            
            self.telegram_bot.send_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            self.log_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ Telegram: {str(e)}", logging.ERROR)

    def toggle_connection(self):
        if self.timer.isActive():
            self.stop_monitoring()
        else:
            self.start_monitoring()

    def start_monitoring(self):
        self.port = self.port_combo.currentText()
        self.baudrate = self.baudrate_spin.value()
        self.slave_id = self.slave_spin.value()
        
        self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.port} (Slave ID: {self.slave_id})...")
        
        try:
            self.client = ModbusSerialClient(
                port=self.port,
                baudrate=self.baudrate,
                parity=self.parity,
                stopbits=self.stopbits,
                bytesize=self.bytesize,
                timeout=self.timeout
            )
            
            if not self.client.connect():
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!", logging.ERROR)
                return
                
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
            try:
                test_response = self.client.read_input_registers(address=4, count=2, slave=self.slave_id)
                if test_response.isError():
                    self.log_message(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {test_response}", logging.ERROR)
                else:
                    self.log_message(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: —Ä–µ–≥–∏—Å—Ç—Ä—ã {test_response.registers}", logging.DEBUG)
            except Exception as test_error:
                self.log_message(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(test_error)}", logging.ERROR)
            
            self.log_message(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.port} (Slave ID: {self.slave_id})")
            
            self.connect_btn.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.connect_btn.setStyleSheet("background-color: #f44336;")
            self.export_btn.setEnabled(True)
            self.clear_btn.setEnabled(True)
            
            self.threshold_alerts_sent = [False] * 8
            
            if self.telegram_enable.isChecked():
                token = self.telegram_token.text()
                chat_id = self.telegram_chat_id.text()
                if token and chat_id:
                    try:
                        self.telegram_bot = TelegramBot(token, chat_id, self)
                        self.telegram_bot.run()
                        msg = f"üî¥ –ù–∞—á–∞—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {self.telegram_bot.measurement_name}"
                        self.telegram_bot.send_message(msg)
                        self.log_message("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                        
                        if str(chat_id).startswith('-'):
                            self.last_group_message_id = self.get_last_message_id(token, chat_id)
                    except Exception as e:
                        self.log_message(f"–û—à–∏–±–∫–∞ Telegram: {str(e)}", logging.ERROR)
            
            if self.excel_auto_save_check.isChecked():
                self.toggle_auto_save(Qt.Checked)
            
            self.timer.start(self.update_interval)
            self.log_message(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.update_interval} –º—Å")
            self.save_config()
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}", logging.CRITICAL)
            if hasattr(self, 'client') and self.client:
                self.client.close()

    def get_last_message_id(self, token, chat_id):
        try:
            url = f"https://api.telegram.org/bot{token}/getUpdates?chat_id={chat_id}"
            response = requests.get(url).json()
            if response.get('ok') and response.get('result'):
                return response['result'][-1]['message']['message_id']
        except:
            return None

    def stop_monitoring(self):
        self.timer.stop()
        if hasattr(self, 'client') and self.client and self.client.connected:
            self.client.close()
        
        self.connect_btn.setText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        self.connect_btn.setStyleSheet("background-color: #4CAF50;")
        
        if hasattr(self, 'telegram_bot') and self.telegram_bot:
            self.telegram_bot.send_message(f"üü¢ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.telegram_bot.measurement_name}")
            self.log_message("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if hasattr(self, 'excel_writer') and self.excel_writer and self.excel_auto_save:
            self.save_excel_data()
            self.excel_writer = None
        
        self.log_message("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.save_config()

    def update_temperatures(self):
        if not hasattr(self, 'client') or not self.client or not self.client.connected:
            self.log_message("–û—à–∏–±–∫–∞: Modbus –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", logging.ERROR)
            self.stop_monitoring()
            return
            
        temps = []
        timestamp = datetime.now()
        self.log_message(f"=== –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({timestamp}) ===", logging.DEBUG)
        
        try:
            for channel in range(8):
                try:
                    address = 4 + channel * 6
                    self.log_message(f"–ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel+1} (–∞–¥—Ä–µ—Å: {address}, Slave ID: {self.slave_id})...", logging.DEBUG)
                    
                    response = self.client.read_input_registers(
                        address=address,
                        count=2,
                        slave=self.slave_id
                    )

                    if response.isError():
                        self.log_message(f"–û—à–∏–±–∫–∞ Modbus –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel+1}: {response}", logging.ERROR)
                        temps.append(None)
                        continue
                        
                    self.log_message(f"–ö–∞–Ω–∞–ª {channel+1}: –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä—ã {response.registers}", logging.DEBUG)
                    
                    try:
                        packed = pack('>HH', *response.registers)
                        temperature = unpack('>f', packed)[0]
                        temp = round(temperature, 2)
                        temps.append(temp)
                        self.log_message(f"–ö–∞–Ω–∞–ª {channel+1}: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = {temp}¬∞C", logging.DEBUG)
                        
                        if (self.threshold_checkboxes[channel].isChecked() and 
                            temp > self.threshold_spinboxes[channel].value() and
                            not self.threshold_alerts_sent[channel]):
                            
                            alert_msg = (f"‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï –¢–ï–ú–ü–ï–†–ê–¢–£–†–´!\n"
                                       f"–ö–∞–Ω–∞–ª: {self.channel_names[channel]}\n"
                                       f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C\n"
                                       f"–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.threshold_spinboxes[channel].value()} ¬∞C")
                            
                            if hasattr(self, 'telegram_bot') and self.telegram_bot:
                                self.telegram_bot.send_message(alert_msg)
                            
                            self.threshold_alerts_sent[channel] = True
                            self.log_message(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel+1}: {temp}¬∞C", logging.WARNING)
                        
                        elif (temp <= self.threshold_spinboxes[channel].value() and 
                              self.threshold_alerts_sent[channel]):
                            self.threshold_alerts_sent[channel] = False
                            self.log_message(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel+1} –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –Ω–æ—Ä–º—É: {temp}¬∞C", logging.INFO)
                            
                    except Exception as conv_error:
                        self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ {channel+1}: {str(conv_error)}", logging.ERROR)
                        temps.append(None)
                        
                except ModbusIOException as mb_error:
                    self.log_message(f"–û—à–∏–±–∫–∞ Modbus IO –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel+1}: {str(mb_error)}", logging.ERROR)
                    temps.append(None)
                except Exception as ch_error:
                    self.log_message(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel+1}: {str(ch_error)}", logging.ERROR)
                    temps.append(None)
                    
            self.update_display(temps, timestamp)
            self.log_message("=== –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ===", logging.DEBUG)
            
            if hasattr(self, 'telegram_bot') and self.telegram_bot and len(self.data_log) % 10 == 0:
                self.telegram_bot.send_current_graphs()
                self.log_message("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
                
        except Exception as e:
            self.log_message(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", logging.CRITICAL)
            self.stop_monitoring()
    
    def update_display(self, temps, timestamp):
        for i, temp in enumerate(temps):
            if temp is not None:
                self.value_labels[i].setText(f"{temp} ¬∞C")
                color = QColor(255, 0, 0) if temp > 50 else QColor(0, 128, 0)
                self.value_labels[i].setStyleSheet(f"color: {color.name()};")
            else:
                self.value_labels[i].setText("–û—à–∏–±–∫–∞")
                self.value_labels[i].setStyleSheet("color: gray;")
        
        log_entry = {'timestamp': timestamp}
        for i, temp in enumerate(temps, 1):
            log_entry[f'channel_{i}'] = temp
        self.data_log.append(log_entry)
        
        for i in range(8):
            times = [entry['timestamp'] for entry in self.data_log if entry[f'channel_{i+1}'] is not None]
            values = [entry[f'channel_{i+1}'] for entry in self.data_log if entry[f'channel_{i+1}'] is not None]
            
            if times and values:
                self.lines[i].set_data(mdates.date2num(times), values)
                self.axes[i].relim()
                self.axes[i].autoscale_view()
                
        self.canvas.draw()
        
        if (self.excel_auto_save and hasattr(self, 'excel_writer') and 
            self.excel_writer and len(self.data_log) % 10 == 0):
            self.save_excel_data()
    
    def export_to_excel(self):
        if not self.data_log:
            self.log_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", logging.WARNING)
            return
            
        file_name, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
            self.excel_file, 
            "Excel Files (*.xlsx)"
        )
        
        if file_name:
            self.excel_file = file_name
            df = pd.DataFrame(self.data_log)
            df.set_index('timestamp', inplace=True)
            df.to_excel(file_name)
            self.log_message(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_name}")
    
    def clear_data(self):
        self.data_log = []
        for line in self.lines:
            line.set_data([], [])
        for label in self.value_labels:
            label.setText("-- ¬∞C")
            label.setStyleSheet("color: black;")
        self.canvas.draw()
        self.log_message("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    def closeEvent(self, event):
        self.save_config()
        if hasattr(self, 'telegram_bot') and self.telegram_bot:
            self.telegram_bot.send_message("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            self.log_message("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if hasattr(self, 'client') and self.client and self.client.connected:
            self.client.close()
            self.log_message("Modbus —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        if hasattr(self, 'excel_writer') and self.excel_writer and self.excel_auto_save:
            self.save_excel_data()
            self.excel_writer = None
            self.log_message("Excel –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        self.log_message("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    monitor = ModernTemperatureMonitor()
    monitor.show()
    sys.exit(app.exec_())