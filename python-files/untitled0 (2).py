# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vK3nh4xIYf0eX3VeEkpdV5Y9ceHFBuaU
"""



"""# Task
Create a translation check tool that compares text extracted from PDF, Word, Excel, or PowerPoint files and reports discrepancies between the original and translated versions.

## Install necessary libraries

### Subtask:
Install libraries for handling different file types (PDF, Word, Excel, PowerPoint).

**Reasoning**:
Install the necessary libraries for handling different file types using pip.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install PyMuPDF python-docx openpyxl python-pptx

"""## Define a function to extract text

### Subtask:
Create a function that takes a file path and file type as input and returns the extracted text as a string. This function should handle different file types by using the appropriate libraries.

**Reasoning**:
Define the `extract_text_from_file` function to handle different file types and extract text using the appropriate libraries.
"""

import fitz # PyMuPDF is imported as fitz
import docx
import openpyxl
from pptx import Presentation

def extract_text_from_file(file_path, file_type):
    """
    Extracts text from various file types (PDF, DOCX, XLSX, PPTX).

    Args:
        file_path: The path to the file.
        file_type: The type of the file ('pdf', 'docx', 'xlsx', 'pptx').

    Returns:
        A string containing the extracted text, or an empty string if an error occurs
        or the file type is not supported.
    """
    extracted_text = ""
    try:
        if file_type == 'pdf':
            doc = fitz.open(file_path)
            for page_num in range(doc.page_count):
                page = doc.load_page(page_num)
                extracted_text += page.get_text()
            doc.close()
        elif file_type == 'docx':
            doc = docx.Document(file_path)
            for paragraph in doc.paragraphs:
                extracted_text += paragraph.text + "\n"
        elif file_type == 'xlsx':
            workbook = openpyxl.load_workbook(file_path)
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for row in sheet.iter_rows():
                    for cell in row:
                        if cell.value is not None:
                            extracted_text += str(cell.value) + " "
                    extracted_text += "\n" # Add newline after each row for better readability
        elif file_type == 'pptx':
            presentation = Presentation(file_path)
            for slide in presentation.slides:
                for shape in slide.shapes:
                    if hasattr(shape, "text"):
                        extracted_text += shape.text + "\n"
        else:
            print(f"Unsupported file type: {file_type}")
            return ""
    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
        return ""
    except Exception as e:
        print(f"An error occurred while processing {file_path}: {e}")
        return ""

    return extracted_text

# Example usage (you can replace with actual file paths and types for testing)
# pdf_text = extract_text_from_file("example.pdf", "pdf")
# print(f"Extracted text from PDF:\n{pdf_text}")

# docx_text = extract_text_from_file("example.docx", "docx")
# print(f"Extracted text from DOCX:\n{docx_text}")

# xlsx_text = extract_text_from_file("example.xlsx", "xlsx")
# print(f"Extracted text from XLSX:\n{xlsx_text}")

# pptx_text = extract_text_from_file("example.pptx", "pptx")
# print(f"Extracted text from PPTX:\n{pptx_text}")

"""## Define a function to compare texts

### Subtask:
Create a function that takes two strings (original and translated texts) as input and compares them, identifying discrepancies or errors. This might involve techniques like diffing algorithms or fuzzy matching.

**Reasoning**:
Define the `compare_texts` function using `difflib` to compare the two input strings and return a formatted report of the differences. Include error handling for non-string inputs.
"""

import difflib

def compare_texts(original_text, translated_text):
    """
    Compares two strings (original and translated texts) and identifies discrepancies.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.

    Returns:
        A formatted string report of the differences, or an error message if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        return "Error: Both inputs must be strings."

    diff = difflib.unified_diff(
        original_text.splitlines(keepends=True),
        translated_text.splitlines(keepends=True),
        fromfile='Original',
        tofile='Translated',
    )

    return "".join(list(diff))

# Example usage:
# original = "This is the original text.\nIt has two lines."
# translated = "This is the translated text.\nIt has three lines.\nA new line."
# differences = compare_texts(original, translated)
# print(differences)

# Example with no differences:
# original_same = "Same text."
# translated_same = "Same text."
# differences_same = compare_texts(original_same, translated_same)
# print(differences_same)

# Example with non-string input:
# original_invalid = 123
# translated_valid = "Valid text."
# differences_invalid = compare_texts(original_invalid, translated_valid)
# print(differences_invalid)

"""## Define a function to report errors

### Subtask:
Create a function that takes the comparison results and presents the errors or discrepancies in a user-friendly format (e.g., highlighting differences, providing line numbers).

**Reasoning**:
Define the function `format_comparison_report` to parse the diff output, identify differences, format them with labels and line numbers, and print the result along with a summary.
"""

def format_comparison_report(diff_output):
    """
    Formats the output from compare_texts to highlight differences and provide context.

    Args:
        diff_output: The string output from the compare_texts function.
    """
    if not isinstance(diff_output, str):
        print("Error: Input must be a string.")
        return

    lines = diff_output.splitlines()
    differences_found = False
    original_line_num = 0
    translated_line_num = 0
    diff_count = 0

    print("--- Translation Comparison Report ---")

    for line in lines:
        if line.startswith('---'):
            print(f"\nOriginal File: {line[4:]}")
        elif line.startswith('+++'):
            print(f"Translated File: {line[4:]}\n")
        elif line.startswith('@@'):
            # This line indicates the start of a diff hunk and contains line number information
            # We can parse this to get approximate line numbers, but need to be careful
            # difflib's line numbers are relative to the hunk.
            # For simplicity in this example, we'll just print the hunk header
            # and increment our own line counters based on '+' and '-' lines.
            print(f"--- Hunk Header: {line} ---")
            # Attempt to extract line numbers from the hunk header
            # Format is typically @@ -original_start,original_count +translated_start,translated_count @@
            try:
                parts = line.split()
                original_info = parts[1][1:].split(',') # remove '-'
                translated_info = parts[2][1:].split(',') # remove '+'
                original_line_num = int(original_info[0]) - 1 # Adjust for 0-based vs 1-based
                translated_line_num = int(translated_info[0]) - 1 # Adjust for 0-based vs 1-based
            except (IndexError, ValueError):
                original_line_num = 0
                translated_line_num = 0
                print("Warning: Could not parse hunk header line numbers.")
        elif line.startswith('- '):
            differences_found = True
            diff_count += 1
            original_line_num += 1
            print(f"Original ({original_line_num}): {line[2:]}")
        elif line.startswith('+ '):
            differences_found = True
            diff_count += 1
            translated_line_num += 1
            print(f"Translated ({translated_line_num}): {line[2:]}")
        elif line.startswith('? '):
             # Lines starting with '?' show details about differences within a line,
             # useful for character-level diffs. We can just print them.
            print(f"Difference Detail: {line[2:]}")
        else:
            # Context lines that are the same in both files
            original_line_num += 1
            translated_line_num += 1
            # Optionally print context lines, but for brevity, we might skip them
            # print(f"Context ({original_line_num}/{translated_line_num}): {line}")
            pass # Skip printing context lines for a cleaner error report

    if not differences_found:
        print("\nNo discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        print(f"Total discrepancies found: {diff_count}")

# Example usage:
# Assuming 'differences' variable holds the output from compare_texts
# original_example = "This is the original text.\nIt has two lines."
# translated_example = "This is the translated text.\nIt has three lines.\nA new line."
# differences_output = compare_texts(original_example, translated_example)
# format_comparison_report(differences_output)

# Example with no differences:
# original_same_example = "Same text."
# translated_same_example = "Same text."
# differences_same_output = compare_texts(original_same_example, translated_same_example)
# format_comparison_report(differences_same_output)

"""## Create a main function to orchestrate the process

### Subtask:
Create a main function that orchestrates the text extraction, comparison, and reporting process.

**Reasoning**:
Define the `translate_check` function that orchestrates the text extraction, comparison, and reporting process, including basic error handling.
"""

def translate_check(original_file_path, original_file_type, translated_file_path, translated_file_type):
    """
    Orchestrates the translation check process by extracting, comparing, and reporting discrepancies.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
    """
    print(f"--- Starting Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts function
    comparison_results = compare_texts(original_text, translated_text)

    # 4. Call the format_comparison_report function
    format_comparison_report(comparison_results)

    print(f"\n--- Translation Check Complete ---")

# Example usage (replace with actual file paths and types for testing)
# Assuming you have dummy files named 'original.txt', 'translated.txt' etc.
# with some content for testing purposes. You would replace these with actual paths.

# Example with dummy text files (assuming they exist for testing)
# with open("original.txt", "w") as f:
#     f.write("This is the original text.\nSecond line.")
# with open("translated.txt", "w") as f:
#     f.write("This is the translated text.\nAnother line.")

# translate_check("original.txt", "txt", "translated.txt", "txt") # Note: extract_text_from_file needs to handle 'txt' or use a supported type

# Example with supported file types (replace with actual paths and types)
# translate_check("original.pdf", "pdf", "translated.pdf", "pdf")
# translate_check("original.docx", "docx", "translated.docx", "docx")

"""## Add user interface elements

### Subtask:
Consider adding elements for users to upload files and specify file types.

**Reasoning**:
I need to create a graphical user interface using Streamlit, which is suitable for interactive web applications and allows for easy file uploads. The interface will include elements for file upload, file type selection, and triggering the translation check.
"""

import streamlit as st
import os # Import os for handling file paths

# Define the supported file types
SUPPORTED_FILE_TYPES = ['pdf', 'docx', 'xlsx', 'pptx']

st.title("Translation Check Tool")

# Create file uploaders for original and translated files
original_file = st.file_uploader("Upload Original File", type=SUPPORTED_FILE_TYPES)
translated_file = st.file_uploader("Upload Translated File", type=SUPPORTED_FILE_TYPES)

# Allow users to specify file types (though st.file_uploader's type parameter handles this for upload)
# We can still add dropdowns for clarity or future manual path input features if needed.
# For now, the file_uploader handles the type selection during upload based on the allowed types.
# original_file_type = st.selectbox("Select Original File Type", SUPPORTED_FILE_TYPES, index=0)
# translated_file_type = st.selectbox("Select Translated File Type", SUPPORTED_FILE_TYPES, index=0)

# Add a button to trigger the translation check
if st.button("Run Translation Check"):
    if original_file is not None and translated_file is not None:
        # Process the uploaded files
        # Streamlit provides the uploaded file as a BytesIO object.
        # We need to save them to a temporary location to use with our existing functions.
        original_file_path = os.path.join("/tmp", original_file.name)
        translated_file_path = os.path.join("/tmp", translated_file.name)

        with open(original_file_path, "wb") as f:
            f.write(original_file.getbuffer())

        with open(translated_file_path, "wb") as f:
            f.write(translated_file.getbuffer())

        # Determine file types from uploaded file names
        original_file_type = original_file.name.split('.')[-1].lower()
        translated_file_type = translated_file.name.split('.')[-1].lower()

        # Ensure selected types match uploaded file extensions (optional but good practice)
        if original_file_type not in SUPPORTED_FILE_TYPES or translated_file_type not in SUPPORTED_FILE_TYPES:
             st.error("Unsupported file type uploaded. Please upload PDF, DOCX, XLSX, or PPTX files.")
        else:
            # Call the main translation check function
            # Redirect stdout to capture the output of format_comparison_report
            import sys
            from io import StringIO

            old_stdout = sys.stdout
            redirected_output = StringIO()
            sys.stdout = redirected_output

            try:
                translate_check(original_file_path, original_file_type, translated_file_path, translated_file_type)
                comparison_report = redirected_output.getvalue()
                st.text_area("Comparison Report", comparison_report, height=400)
            except Exception as e:
                st.error(f"An error occurred during the translation check: {e}")
            finally:
                sys.stdout = old_stdout # Restore stdout

            # Clean up temporary files
            os.remove(original_file_path)
            os.remove(translated_file_path)

    else:
        st.warning("Please upload both original and translated files.")

"""**Reasoning**:
The previous command failed because the `streamlit` library was not found. I need to install it before I can use it to build the GUI.


"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

"""**Reasoning**:
The necessary library (`streamlit`) has been installed. Now I can proceed with creating the Streamlit application code to build the GUI with file uploaders, file type selection (implicitly handled by the uploader's `type` parameter), and a button to trigger the translation check, displaying the output in a text area.


"""

import streamlit as st
import os
import sys
from io import StringIO

# Ensure the helper functions (extract_text_from_file, compare_texts, format_comparison_report, translate_check)
# are defined or imported before this code block.
# Assuming they are available in the notebook environment from previous steps.

# Define the supported file types
SUPPORTED_FILE_TYPES = ['pdf', 'docx', 'xlsx', 'pptx']

st.title("Translation Check Tool")

# Create file uploaders for original and translated files
original_file = st.file_uploader("Upload Original File", type=SUPPORTED_FILE_TYPES)
translated_file = st.file_uploader("Upload Translated File", type=SUPPORTED_FILE_TYPES)

# The file_uploader handles type selection based on the 'type' parameter.
# We extract the actual file type from the uploaded file's name later.

# Add a button to trigger the translation check
if st.button("Run Translation Check"):
    if original_file is not None and translated_file is not None:
        # Process the uploaded files
        # Streamlit provides the uploaded file as a BytesIO object.
        # We need to save them to a temporary location to use with our existing functions.
        # Using a more robust way to handle temporary files in a script context
        # In a real Streamlit app, you might use tempfile module or st.session_state
        original_file_path = os.path.join("/tmp", original_file.name)
        translated_file_path = os.path.join("/tmp", translated_file.name)

        try:
            with open(original_file_path, "wb") as f:
                f.write(original_file.getbuffer())

            with open(translated_file_path, "wb") as f:
                f.write(translated_file.getbuffer())

            # Determine file types from uploaded file names
            original_file_type = original_file.name.split('.')[-1].lower()
            translated_file_type = translated_file.name.split('.')[-1].lower()

            # Ensure extracted types are supported
            if original_file_type not in SUPPORTED_FILE_TYPES or translated_file_type not in SUPPORTED_FILE_TYPES:
                 st.error("Unsupported file type uploaded. Please upload PDF, DOCX, XLSX, or PPTX files.")
            else:
                # Call the main translation check function
                # Redirect stdout to capture the output of format_comparison_report
                old_stdout = sys.stdout
                redirected_output = StringIO()
                sys.stdout = redirected_output

                try:
                    # Assuming translate_check, extract_text_from_file, compare_texts, format_comparison_report
                    # are defined in the notebook scope.
                    translate_check(original_file_path, original_file_type, translated_file_path, translated_file_type)
                    comparison_report = redirected_output.getvalue()
                    st.text_area("Comparison Report", comparison_report, height=400)
                except Exception as e:
                    st.error(f"An error occurred during the translation check: {e}")
                finally:
                    sys.stdout = old_stdout # Restore stdout

        except Exception as e:
            st.error(f"An error occurred while saving files: {e}")
        finally:
            # Clean up temporary files safely
            if os.path.exists(original_file_path):
                os.remove(original_file_path)
            if os.path.exists(translated_file_path):
                os.remove(translated_file_path)

    else:
        st.warning("Please upload both original and translated files.")

"""## Test the tool

### Subtask:
Test the tool with different file types and translation scenarios to ensure accuracy and robustness.

**Reasoning**:
The subtask requires creating dummy files for different file types and scenarios, then running the `translate_check` function for each pair and examining the output. This involves writing files to disk and then calling the previously defined functions. I will create dummy files for PDF, DOCX, XLSX, and PPTX, covering cases with differences and no differences, and then call `translate_check` for each pair.
"""

import os
import fitz
import docx
import openpyxl
from pptx import Presentation

# Define a temporary directory to save dummy files
temp_dir = "/tmp/translation_test_files"
os.makedirs(temp_dir, exist_ok=True)

# --- Create Dummy Files ---

# 1. PDF Files
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document.")
page.insert_text((10, 30), "It has a second line.")
doc.save(pdf_orig_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the translated PDF document.")
page.insert_text((10, 30), "It has a third line with differences.") # Difference here
doc.save(pdf_trans_diff_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document.")
page.insert_text((10, 30), "It has a second line.")
doc.save(pdf_trans_same_path)
doc.close()


# 2. DOCX Files
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")

doc = docx.Document()
doc.add_paragraph("This is the original Word document.")
doc.add_paragraph("It has another paragraph.")
doc.save(docx_orig_path)

doc = docx.Document()
doc.add_paragraph("This is the translated Word document.")
doc.add_paragraph("It has a different paragraph.") # Difference here
doc.save(docx_trans_diff_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document.")
doc.add_paragraph("It has another paragraph.")
doc.save(docx_trans_same_path)


# 3. XLSX Files
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header'
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Value 2'
workbook.save(xlsx_orig_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Translated Header' # Difference here
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Different Value' # Difference here
workbook.save(xlsx_trans_diff_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header'
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Value 2'
workbook.save(xlsx_trans_same_path)


# 4. PPTX Files
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os_path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title"
tf = body_shape.text_frame
tf.text = "Original body text."
presentation.save(pptx_orig_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Translated Presentation Title" # Difference here
tf = body_shape.text_frame
tf.text = "Different body text." # Difference here
presentation.save(pptx_trans_diff_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title"
tf = body_shape.text_frame
tf.text = "Original body text."
presentation.save(pptx_trans_same_path)

# --- Run Translation Check for each scenario ---

print("\n--- Testing PDF Files (Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf")

print("\n--- Testing PDF Files (No Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_same_path, "pdf")

print("\n--- Testing DOCX Files (Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_diff_path, "docx")

print("\n--- Testing DOCX Files (No Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_same_path, "docx")

print("\n--- Testing XLSX Files (Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx")

print("\n--- Testing XLSX Files (No Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_same_path, "xlsx")

print("\n--- Testing PPTX Files (Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx")

print("\n--- Testing PPTX Files (No Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_same_path, "pptx")

# Note: Testing large files and special characters/formatting would require
# more complex dummy file generation, which is beyond the scope of this step
# given the complexity of embedding such content in different file types.
# Cross-type comparison (e.g., PDF vs DOCX) is not supported by the current
# `extract_text_from_file` or `compare_texts` logic which assumes similar structure/content.

# Clean up temporary files (optional, but good practice)
# import shutil
# shutil.rmtree(temp_dir)

"""**Reasoning**:
The previous code failed due to a typo (`os_path` instead of `os.path`). I need to fix this typo in the code block and re-run it to create the dummy files and test the `translate_check` function.


"""

import os
import fitz
import docx
import openpyxl
from pptx import Presentation

# Define a temporary directory to save dummy files
temp_dir = "/tmp/translation_test_files"
os.makedirs(temp_dir, exist_ok=True)

# --- Create Dummy Files ---

# 1. PDF Files
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document.")
page.insert_text((10, 30), "It has a second line.")
doc.save(pdf_orig_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the translated PDF document.")
page.insert_text((10, 30), "It has a third line with differences.") # Difference here
doc.save(pdf_trans_diff_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document.")
page.insert_text((10, 30), "It has a second line.")
doc.save(pdf_trans_same_path)
doc.close()


# 2. DOCX Files
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")

doc = docx.Document()
doc.add_paragraph("This is the original Word document.")
doc.add_paragraph("It has another paragraph.")
doc.save(docx_orig_path)

doc = docx.Document()
doc.add_paragraph("This is the translated Word document.")
doc.add_paragraph("It has a different paragraph.") # Difference here
doc.save(docx_trans_diff_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document.")
doc.add_paragraph("It has another paragraph.")
doc.save(docx_trans_same_path)


# 3. XLSX Files
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header'
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Value 2'
workbook.save(xlsx_orig_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Translated Header' # Difference here
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Different Value' # Difference here
workbook.save(xlsx_trans_diff_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header'
sheet['A2'] = 'Value 1'
sheet['B2'] = 'Value 2'
workbook.save(xlsx_trans_same_path)


# 4. PPTX Files
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx") # Fixed typo here
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title"
tf = body_shape.text_frame
tf.text = "Original body text."
presentation.save(pptx_orig_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Translated Presentation Title" # Difference here
tf = body_shape.text_frame
tf.text = "Different body text." # Difference here
presentation.save(pptx_trans_diff_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title"
tf = body_shape.text_frame
tf.text = "Original body text."
presentation.save(pptx_trans_same_path)

# --- Run Translation Check for each scenario ---

print("\n--- Testing PDF Files (Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf")

print("\n--- Testing PDF Files (No Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_same_path, "pdf")

print("\n--- Testing DOCX Files (Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_diff_path, "docx")

print("\n--- Testing DOCX Files (No Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_same_path, "docx")

print("\n--- Testing XLSX Files (Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx")

print("\n--- Testing XLSX Files (No Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_same_path, "xlsx")

print("\n--- Testing PPTX Files (Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx")

print("\n--- Testing PPTX Files (No Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_same_path, "pptx")

# Note: Testing large files and special characters/formatting would require
# more complex dummy file generation, which is beyond the scope of this step
# given the complexity of embedding such content in different file types.
# Cross-type comparison (e.g., PDF vs DOCX) is not supported by the current
# `extract_text_from_file` or `compare_texts` logic which assumes similar structure/content.

# Clean up temporary files (optional, but good practice)
# import shutil
# shutil.rmtree(temp_dir)

"""**Reasoning**:
The previous output shows that the `compare_texts` function, which uses `difflib.unified_diff`, is not effectively identifying the differences in the extracted text. The reports consistently say "No discrepancies found" even for files intentionally created with differences. This indicates an issue with how the text is being extracted or how `difflib` is interpreting the differences. Looking back at the `extract_text_from_file` function, the text extraction methods for some file types (like XLSX and PPTX) might be producing output that `difflib` doesn't handle well for line-by-line comparison (e.g., inconsistent line breaks or extra spaces). I need to examine the extracted text for each file type to understand why `difflib` is not reporting differences and potentially adjust the extraction or comparison logic if needed. I will add print statements to show the extracted text before the comparison.


"""

import os
import fitz
import docx
import openpyxl
from pptx import Presentation

# Define a temporary directory to save dummy files
temp_dir = "/tmp/translation_test_files"
# Assuming dummy files were created in the previous successful step, no need to recreate them.
# os.makedirs(temp_dir, exist_ok=True)

# --- Run Translation Check for each scenario with extracted text display ---

print("\n--- Testing PDF Files (Difference) ---")
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
print("Original PDF Extracted Text:")
original_text_pdf_diff = extract_text_from_file(pdf_orig_path, "pdf")
print(original_text_pdf_diff)
print("Translated PDF Extracted Text (Difference):")
translated_text_pdf_diff = extract_text_from_file(pdf_trans_diff_path, "pdf")
print(translated_text_pdf_diff)
translate_check(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf")

print("\n--- Testing PDF Files (No Difference) ---")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
print("Original PDF Extracted Text:")
original_text_pdf_same = extract_text_from_file(pdf_orig_path, "pdf")
print(original_text_pdf_same)
print("Translated PDF Extracted Text (Same):")
translated_text_pdf_same = extract_text_from_file(pdf_trans_same_path, "pdf")
print(translated_text_pdf_same)
translate_check(pdf_orig_path, "pdf", pdf_trans_same_path, "pdf")

print("\n--- Testing DOCX Files (Difference) ---")
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
print("Original DOCX Extracted Text:")
original_text_docx_diff = extract_text_from_file(docx_orig_path, "docx")
print(original_text_docx_diff)
print("Translated DOCX Extracted Text (Difference):")
translated_text_docx_diff = extract_text_from_file(docx_trans_diff_path, "docx")
print(translated_text_docx_diff)
translate_check(docx_orig_path, "docx", docx_trans_diff_path, "docx")

print("\n--- Testing DOCX Files (No Difference) ---")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
print("Original DOCX Extracted Text:")
original_text_docx_same = extract_text_from_file(docx_orig_path, "docx")
print(original_text_docx_same)
print("Translated DOCX Extracted Text (Same):")
translated_text_docx_same = extract_text_from_file(docx_trans_same_path, "docx")
print(translated_text_docx_same)
translate_check(docx_orig_path, "docx", docx_trans_same_path, "docx")

print("\n--- Testing XLSX Files (Difference) ---")
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
print("Original XLSX Extracted Text:")
original_text_xlsx_diff = extract_text_from_file(xlsx_orig_path, "xlsx")
print(original_text_xlsx_diff)
print("Translated XLSX Extracted Text (Difference):")
translated_text_xlsx_diff = extract_text_from_file(xlsx_trans_diff_path, "xlsx")
print(translated_text_xlsx_diff)
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx")

print("\n--- Testing XLSX Files (No Difference) ---")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
print("Original XLSX Extracted Text:")
original_text_xlsx_same = extract_text_from_file(xlsx_orig_path, "xlsx")
print(original_text_xlsx_same)
print("Translated XLSX Extracted Text (Same):")
translated_text_xlsx_same = extract_text_from_file(xlsx_trans_same_path, "xlsx")
print(translated_text_xlsx_same)
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_same_path, "xlsx")

print("\n--- Testing PPTX Files (Difference) ---")
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
print("Original PPTX Extracted Text:")
original_text_pptx_diff = extract_text_from_file(pptx_orig_path, "pptx")
print(original_text_pptx_diff)
print("Translated PPTX Extracted Text (Difference):")
translated_text_pptx_diff = extract_text_from_file(pptx_trans_diff_path, "pptx")
print(translated_text_pptx_diff)
translate_check(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx")

print("\n--- Testing PPTX Files (No Difference) ---")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")
print("Original PPTX Extracted Text:")
original_text_pptx_same = extract_text_from_file(pptx_orig_path, "pptx")
print(original_text_pptx_same)
print("Translated PPTX Extracted Text (Same):")
translated_text_pptx_same = extract_text_from_file(pptx_trans_same_path, "pptx")
print(translated_text_pptx_same)
translate_check(pptx_orig_path, "pptx", pptx_trans_same_path, "pptx")

"""**Reasoning**:
The output confirms that the text extraction is working and the differences are present in the extracted strings. However, `difflib.unified_diff` is still not reporting them. This is likely because `unified_diff` compares lines based on exact matches. Even minor differences within a line cause the whole line to be considered different, but the default output format might not be detailed enough or our formatting function is not interpreting it correctly. The `difflib.SequenceMatcher` with `get_opcodes()` provides a more granular way to identify differences (equal, replace, delete, insert) at a block or character level. I will modify the `compare_texts` and `format_comparison_report` functions to use `SequenceMatcher` and its opcodes to provide a more detailed and accurate report of the discrepancies within lines.


"""

import difflib

def compare_texts(original_text, translated_text):
    """
    Compares two strings (original and translated texts) and identifies discrepancies
    using SequenceMatcher for more detailed differences.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.

    Returns:
        A list of opcodes representing the differences, or None if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        print("Error: Both inputs must be strings.")
        return None

    # Use SequenceMatcher for more detailed comparison
    matcher = difflib.SequenceMatcher(None, original_text, translated_text)
    return matcher.get_opcodes()

def format_comparison_report(opcodes, original_text, translated_text):
    """
    Formats the output from compare_texts (opcodes) to highlight differences.

    Args:
        opcodes: A list of opcodes from difflib.SequenceMatcher.get_opcodes().
        original_text: The original text string.
        translated_text: The translated text string.
    """
    if opcodes is None:
        return # Error message already printed in compare_texts

    print("--- Translation Comparison Report ---")
    print("Original File: Original")
    print("Translated File: Translated\n")

    differences_found = False
    diff_count = 0

    original_lines = original_text.splitlines(keepends=True)
    translated_lines = translated_text.splitlines(keepends=True)

    original_char_index = 0
    translated_char_index = 0

    # Track line numbers for context
    original_line_num = 1
    translated_line_num = 1

    for tag, i1, i2, j1, j2 in opcodes:
        original_segment = original_text[i1:i2]
        translated_segment = translated_text[j1:j2]

        # Update line numbers based on newlines within segments
        original_line_num += original_segment.count('\n')
        translated_line_num += translated_segment.count('\n')


        if tag == 'equal':
            # Context lines - optionally print for full context
            # print(f"  {original_segment.strip()}") # Print equal segments without leading/trailing whitespace
            pass # For brevity, skip printing equal parts in the report
        elif tag == 'replace':
            differences_found = True
            diff_count += 1
            print(f"Original (approx line {original_line_num - original_segment.count('\n')}-{original_line_num}): - {original_segment.strip()}")
            print(f"Translated (approx line {translated_line_num - translated_segment.count('\n')}-{translated_line_num}): + {translated_segment.strip()}")
        elif tag == 'delete':
            differences_found = True
            diff_count += 1
            print(f"Original (approx line {original_line_num - original_segment.count('\n')}-{original_line_num}): - {original_segment.strip()}")
        elif tag == 'insert':
            differences_found = True
            diff_count += 1
            print(f"Translated (approx line {translated_line_num - translated_segment.count('\n')}-{translated_line_num}): + {translated_segment.strip()}")

    if not differences_found:
        print("No discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        print(f"Total segments with discrepancies: {diff_count}")


# Update the translate_check function to use the new comparison and formatting
def translate_check(original_file_path, original_file_type, translated_file_path, translated_file_type):
    """
    Orchestrates the translation check process by extracting, comparing, and reporting discrepancies.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
    """
    print(f"--- Starting Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts function
    # Pass full text for comparison
    comparison_results = compare_texts(original_text, translated_text)

    # 4. Call the format_comparison_report function
    # Pass original and translated text along with opcodes for formatting
    format_comparison_report(comparison_results, original_text, translated_text)

    print(f"\n--- Translation Check Complete ---")


# Re-run the tests with the updated functions
temp_dir = "/tmp/translation_test_files"
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")


print("\n--- Retesting with updated comparison/reporting ---")

print("\n--- Testing PDF Files (Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf")

print("\n--- Testing PDF Files (No Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_same_path, "pdf")

print("\n--- Testing DOCX Files (Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_diff_path, "docx")

print("\n--- Testing DOCX Files (No Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_same_path, "docx")

print("\n--- Testing XLSX Files (Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx")

print("\n--- Testing XLSX Files (No Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_same_path, "xlsx")

print("\n--- Testing PPTX Files (Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx")

print("\n--- Testing PPTX Files (No Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_same_path, "pptx")

"""**Reasoning**:
The previous code failed with a `SyntaxError` in an f-string. The error message "f-string expression part cannot include a backslash" points to the expression within the curly braces `{}`. The issue is likely related to how the line numbers are being calculated and included in the f-string, potentially involving backslashes in the segment strings. I need to fix the f-string syntax in the `format_comparison_report` function to correctly display the approximate line numbers without causing a `SyntaxError`. I will adjust the f-string format to avoid the backslash issue and re-run the tests.


"""

import difflib

def compare_texts(original_text, translated_text):
    """
    Compares two strings (original and translated texts) and identifies discrepancies
    using SequenceMatcher for more detailed differences.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.

    Returns:
        A list of opcodes representing the differences, or None if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        print("Error: Both inputs must be strings.")
        return None

    # Use SequenceMatcher for more detailed comparison
    matcher = difflib.SequenceMatcher(None, original_text, translated_text)
    return matcher.get_opcodes()

def format_comparison_report(opcodes, original_text, translated_text):
    """
    Formats the output from compare_texts (opcodes) to highlight differences.

    Args:
        opcodes: A list of opcodes from difflib.SequenceMatcher.get_opcodes().
        original_text: The original text string.
        translated_text: The translated text string.
    """
    if opcodes is None:
        return # Error message already printed in compare_texts

    print("--- Translation Comparison Report ---")
    print("Original File: Original")
    print("Translated File: Translated\n")

    differences_found = False
    diff_count = 0

    # We can track line numbers based on the full text and the character indices in opcodes
    original_lines = original_text.splitlines(keepends=True)
    translated_lines = translated_text.splitlines(keepends=True)

    def get_line_number(text_lines, char_index):
        current_char_count = 0
        for i, line in enumerate(text_lines):
            current_char_count += len(line)
            if current_char_count > char_index:
                return i + 1
        return len(text_lines) # Should not happen if index is valid

    for tag, i1, i2, j1, j2 in opcodes:
        original_segment = original_text[i1:i2]
        translated_segment = translated_text[j1:j2]

        original_start_line = get_line_number(original_lines, i1)
        original_end_line = get_line_number(original_lines, i2 - 1) if i2 > i1 else original_start_line
        translated_start_line = get_line_number(translated_lines, j1)
        translated_end_line = get_line_number(translated_lines, j2 - 1) if j2 > j1 else translated_start_line


        if tag == 'equal':
            # Context lines - optionally print for full context
            # print(f"  {original_segment.strip()}") # Print equal segments without leading/trailing whitespace
            pass # For brevity, skip printing equal parts in the report
        elif tag == 'replace':
            differences_found = True
            # Increment diff_count per opcode that represents a change
            # A 'replace' means a diff segment was found
            diff_count += 1
            print(f"Original (lines {original_start_line}-{original_end_line}): - {original_segment.strip()}")
            print(f"Translated (lines {translated_start_line}-{translated_end_line}): + {translated_segment.strip()}")
        elif tag == 'delete':
            differences_found = True
            diff_count += 1
            print(f"Original (lines {original_start_line}-{original_end_line}): - {original_segment.strip()}")
        elif tag == 'insert':
            differences_found = True
            diff_count += 1
            print(f"Translated (lines {translated_start_line}-{translated_end_line}): + {translated_segment.strip()}")

    if not differences_found:
        print("No discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        # Count actual difference segments, not just opcodes
        print(f"Total discrepancy segments found: {diff_count}")


# Update the translate_check function to use the new comparison and formatting
def translate_check(original_file_path, original_file_type, translated_file_path, translated_file_type):
    """
    Orchestrates the translation check process by extracting, comparing, and reporting discrepancies.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
    """
    print(f"--- Starting Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts function
    # Pass full text for comparison
    comparison_results = compare_texts(original_text, translated_text)

    # 4. Call the format_comparison_report function
    # Pass original and translated text along with opcodes for formatting
    format_comparison_report(comparison_results, original_text, translated_text)

    print(f"\n--- Translation Check Complete ---")


# Re-run the tests with the updated functions
temp_dir = "/tmp/translation_test_files"
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")


print("\n--- Retesting with updated comparison/reporting (Syntax Fix) ---")

print("\n--- Testing PDF Files (Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf")

print("\n--- Testing PDF Files (No Difference) ---")
translate_check(pdf_orig_path, "pdf", pdf_trans_same_path, "pdf")

print("\n--- Testing DOCX Files (Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_diff_path, "docx")

print("\n--- Testing DOCX Files (No Difference) ---")
translate_check(docx_orig_path, "docx", docx_trans_same_path, "docx")

print("\n--- Testing XLSX Files (Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx")

print("\n--- Testing XLSX Files (No Difference) ---")
translate_check(xlsx_orig_path, "xlsx", xlsx_trans_same_path, "xlsx")

print("\n--- Testing PPTX Files (Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx")

print("\n--- Testing PPTX Files (No Difference) ---")
translate_check(pptx_orig_path, "pptx", pptx_trans_same_path, "pptx")

"""## Refine the comparison and reporting

### Subtask:
Improve the accuracy of the comparison function and the clarity of the error reporting based on testing.

**Reasoning**:
Enhance the comparison and reporting functions based on the subtask instructions, focusing on whitespace normalization, improved context in reporting, more accurate line numbering, and considering sentence/paragraph level reporting. Then, re-run the tests to demonstrate the improvements.
"""

import re
import nltk
from nltk.tokenize import sent_tokenize

# Download the punkt tokenizer if you haven't already
try:
    nltk.data.find('tokenizers/punkt')
except nltk.downloader.DownloadError:
    nltk.download('punkt')
except LookupError:
    nltk.download('punkt')


def normalize_whitespace(text):
    """
    Normalizes whitespace in a string: converts various whitespace sequences
    into single spaces and standardizes line endings.
    """
    # Replace multiple whitespace characters with a single space
    text = re.sub(r'\s+', ' ', text)
    # Standardize line endings (optional, depending on desired comparison level)
    # text = text.replace('\r\n', '\n').replace('\r', '\n')
    return text.strip() # Remove leading/trailing whitespace

def compare_texts_enhanced(original_text, translated_text, level='character'):
    """
    Compares two strings with enhanced features, including whitespace normalization
    and optional sentence/paragraph level comparison.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.
        level: The comparison level ('character', 'sentence', 'paragraph').

    Returns:
        A list of opcodes representing the differences, or None if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        print("Error: Both inputs must be strings.")
        return None

    # Normalize whitespace before comparison
    normalized_original = normalize_whitespace(original_text)
    normalized_translated = normalize_whitespace(translated_text)

    if level == 'sentence':
        # Split into sentences and compare sequences of sentences
        seq1 = sent_tokenize(normalized_original)
        seq2 = sent_tokenize(normalized_translated)
    elif level == 'paragraph':
        # Simple paragraph split (assuming double newline separates paragraphs)
        seq1 = normalized_original.split('\n\n')
        seq2 = normalized_translated.split('\n\n')
    else: # Default to character level
        seq1 = normalized_original
        seq2 = normalized_translated

    matcher = difflib.SequenceMatcher(None, seq1, seq2)
    return matcher.get_opcodes()


def format_comparison_report_enhanced(opcodes, original_text, translated_text, context_lines=3, level='character'):
    """
    Formats the output from compare_texts_enhanced (opcodes) with improved context
    and more accurate line/segment reporting.

    Args:
        opcodes: A list of opcodes from difflib.SequenceMatcher.get_opcodes().
        original_text: The original text string.
        translated_text: The translated text string.
        context_lines: Number of lines of context to show around differences.
        level: The comparison level ('character', 'sentence', 'paragraph').
    """
    if opcodes is None:
        return # Error message already printed in compare_texts_enhanced

    print("--- Translation Comparison Report ---")
    print("Original File: Original")
    print("Translated File: Translated\n")

    differences_found = False
    diff_count = 0

    # Prepare sequences based on the comparison level used
    if level == 'sentence':
        original_seq = sent_tokenize(normalize_whitespace(original_text))
        translated_seq = sent_tokenize(normalize_whitespace(translated_text))
        seq_unit = "Sentence"
    elif level == 'paragraph':
        original_seq = normalize_whitespace(original_text).split('\n\n')
        translated_seq = normalize_whitespace(translated_text).split('\n\n')
        seq_unit = "Paragraph"
    else: # Character level
        original_seq = list(normalize_whitespace(original_text)) # Compare character list for indexing
        translated_seq = list(normalize_whitespace(translated_text))
        # Need the original full text for line number lookup in character mode
        original_full_text = original_text
        translated_full_text = translated_text
        original_full_lines = original_full_text.splitlines(keepends=True)
        translated_full_lines = translated_full_text.splitlines(keepends=True)
        seq_unit = "Character Segment"


    def get_location_info(seq, index, level, full_text_lines=None):
        if level in ['sentence', 'paragraph']:
            return f"{seq_unit} {index + 1}" # Report 1-based index of the unit
        else: # Character level
             # Find the line numbers corresponding to the character indices
            start_char_index = sum(len(item) for item in original_seq[:index])
            end_char_index = start_char_index + len(seq[index]) -1 if len(seq[index]) > 0 else start_char_index

            start_line = 1
            end_line = 1
            current_char_count = 0
            for i, line in enumerate(full_text_lines):
                line_len = len(line)
                if current_char_count <= start_char_index < current_char_count + line_len:
                     start_line = i + 1
                if current_char_count <= end_char_index < current_char_count + line_len:
                     end_line = i + 1
                     break # Found both start and end lines
                current_char_count += line_len

            if start_line == end_line:
                 return f"Line {start_line}"
            else:
                 return f"Lines {start_line}-{end_line}"


    for tag, i1, i2, j1, j2 in opcodes:
        # Get segments from the normalized sequences used for comparison
        original_segment_seq = original_seq[i1:i2]
        translated_segment_seq = translated_seq[j1:j2]

        # Join segments back to strings for display
        original_segment_str = "".join(original_segment_seq) if level == 'character' else " ".join(original_segment_seq)
        translated_segment_str = "".join(translated_segment_seq) if level == 'character' else " ".join(translated_segment_seq)


        if tag == 'equal':
            # Optionally print context lines around differences
            pass # We will handle context printing when we encounter a difference
        else:
            differences_found = True
            diff_count += 1

            # Print context before the difference
            start_original_context_index = max(0, i1 - context_lines)
            end_original_context_index = i1
            start_translated_context_index = max(0, j1 - context_lines)
            end_translated_context_index = j1

            if start_original_context_index < i1 or start_translated_context_index < j1:
                 print("\n--- Context Before ---")
                 for k in range(start_original_context_index, end_original_context_index):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None)}): {context_str.strip()}")
                 for k in range(start_translated_context_index, end_translated_context_index):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None)}): {context_str.strip()}")


            # Print the difference segment
            print(f"\n--- Discrepancy {diff_count} ({tag}) ---")
            if tag == 'replace':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None)}): - {original_segment_str.strip()}")
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None)}): + {translated_segment_str.strip()}")
            elif tag == 'delete':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None)}): - {original_segment_str.strip()}")
            elif tag == 'insert':
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None)}): + {translated_segment_str.strip()}")

            # Print context after the difference
            start_original_context_index_after = i2
            end_original_context_index_after = min(len(original_seq), i2 + context_lines)
            start_translated_context_index_after = j2
            end_translated_context_index_after = min(len(translated_seq), j2 + context_lines)

            if start_original_context_index_after < end_original_context_index_after or start_translated_context_index_after < end_translated_context_index_after:
                 print("--- Context After ---")
                 for k in range(start_original_context_index_after, end_original_context_index_after):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None)}): {context_str.strip()}")
                 for k in range(start_translated_context_index_after, end_translated_context_index_after):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None)}): {context_str.strip()}")


    if not differences_found:
        print("No discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        print(f"Total discrepancy segments found: {diff_count}")

# Update the translate_check function to use the new comparison and formatting
def translate_check_enhanced(original_file_path, original_file_type, translated_file_path, translated_file_type, comparison_level='character'):
    """
    Orchestrates the translation check process with enhanced features.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
        comparison_level: The level for comparison ('character', 'sentence', 'paragraph').
    """
    print(f"--- Starting Enhanced Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})")
    print(f"Comparison Level: {comparison_level}\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts_enhanced function
    opcodes = compare_texts_enhanced(original_text, translated_text, level=comparison_level)

    # 4. Call the format_comparison_report_enhanced function
    format_comparison_report_enhanced(opcodes, original_text, translated_text, level=comparison_level)

    print(f"\n--- Enhanced Translation Check Complete ---")


# Re-run the tests with the updated functions and different comparison levels
temp_dir = "/tmp/translation_test_files"
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")


print("\n--- Retesting with Enhanced Comparison and Reporting (Character Level) ---")

print("\n--- Testing PDF Files (Difference) ---")
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='character')

print("\n--- Testing DOCX Files (Difference) ---")
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='character')

print("\n--- Testing XLSX Files (Difference) ---")
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='character')

print("\n--- Testing PPTX Files (Difference) ---")
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='character')


print("\n--- Retesting with Enhanced Comparison and Reporting (Sentence Level) ---")

# Create dummy files with sentence-level differences
pdf_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.pdf")
doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.")
page.insert_text((10, 40), "A third sentence follows.")
doc.save(pdf_orig_path) # Overwrite with multi-sentence content
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the translated PDF document. It has a different sentence.") # Sentence difference
page.insert_text((10, 40), "A third sentence follows.") # Same sentence
doc.save(pdf_trans_sentence_diff_path)
doc.close()

docx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.docx")
doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("A third sentence here.")
doc.save(docx_orig_path) # Overwrite

doc = docx.Document()
doc.add_paragraph("This is the translated Word document. It has a different sentence.") # Sentence difference
doc.add_paragraph("A third sentence here.") # Same sentence
doc.save(docx_trans_sentence_diff_path)


print("\n--- Testing PDF Files (Sentence Difference) ---")
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_sentence_diff_path, "pdf", comparison_level='sentence')

print("\n--- Testing DOCX Files (Sentence Difference) ---")
translate_check_enhanced(docx_orig_path, "docx", docx_trans_sentence_diff_path, "docx", comparison_level='sentence')


print("\n--- Retesting with Enhanced Comparison and Reporting (Paragraph Level) ---")

# Create dummy files with paragraph-level differences
pdf_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.pdf")
doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the first paragraph.\n\nThis is the second paragraph.")
doc.save(pdf_orig_path) # Overwrite

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the first paragraph.\n\nThis is a different second paragraph.") # Paragraph difference
doc.save(pdf_trans_paragraph_diff_path)
doc.close()


docx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.docx")
doc = docx.Document()
doc.add_paragraph("This is the first paragraph.")
doc.add_paragraph("") # Represents a paragraph break in simple text extraction
doc.add_paragraph("This is the second paragraph.")
doc.save(docx_orig_path) # Overwrite

doc = docx.Document()
doc.add_paragraph("This is the first paragraph.")
doc.add_paragraph("")
doc.add_paragraph("This is a different second paragraph.") # Paragraph difference
doc.save(docx_trans_paragraph_diff_path)


print("\n--- Testing PDF Files (Paragraph Difference) ---")
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_paragraph_diff_path, "pdf", comparison_level='paragraph')

print("\n--- Testing DOCX Files (Paragraph Difference) ---")
translate_check_enhanced(docx_orig_path, "docx", docx_trans_paragraph_diff_path, "docx", comparison_level='paragraph')

# Clean up temporary files (optional, but good practice)
# import shutil
# shutil.rmtree(temp_dir)

"""**Reasoning**:
The previous command failed because `nltk.downloader.DownloadError` does not exist. The correct exception to catch when a resource is not found is `LookupError`. I will fix the exception handling for the NLTK download and re-run the code to ensure the enhanced functions are defined and tested.


"""

import re
import nltk
from nltk.tokenize import sent_tokenize
import difflib
import os
import fitz
import docx
import openpyxl
from pptx import Presentation

# Download the punkt tokenizer if you haven't already
try:
    nltk.data.find('tokenizers/punkt')
except LookupError: # Corrected exception handling
    nltk.download('punkt')


def normalize_whitespace(text):
    """
    Normalizes whitespace in a string: converts various whitespace sequences
    into single spaces and standardizes line endings.
    """
    # Replace multiple whitespace characters with a single space
    text = re.sub(r'\s+', ' ', text)
    # Standardize line endings (optional, depending on desired comparison level)
    # text = text.replace('\r\n', '\n').replace('\r', '\n')
    return text.strip() # Remove leading/trailing whitespace

def compare_texts_enhanced(original_text, translated_text, level='character'):
    """
    Compares two strings with enhanced features, including whitespace normalization
    and optional sentence/paragraph level comparison.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.
        level: The comparison level ('character', 'sentence', 'paragraph').

    Returns:
        A list of opcodes representing the differences, or None if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        print("Error: Both inputs must be strings.")
        return None

    # Normalize whitespace before comparison
    normalized_original = normalize_whitespace(original_text)
    normalized_translated = normalize_whitespace(translated_text)

    if level == 'sentence':
        # Split into sentences and compare sequences of sentences
        seq1 = sent_tokenize(normalized_original)
        seq2 = sent_tokenize(normalized_translated)
    elif level == 'paragraph':
        # Simple paragraph split (assuming double newline separates paragraphs)
        seq1 = normalized_original.split('\n\n')
        seq2 = normalized_translated.split('\n\n')
    else: # Default to character level
        seq1 = normalized_original
        seq2 = normalized_translated

    matcher = difflib.SequenceMatcher(None, seq1, seq2)
    return matcher.get_opcodes()


def format_comparison_report_enhanced(opcodes, original_text, translated_text, context_lines=3, level='character'):
    """
    Formats the output from compare_texts_enhanced (opcodes) with improved context
    and more accurate line/segment reporting.

    Args:
        opcodes: A list of opcodes from difflib.SequenceMatcher.get_opcodes().
        original_text: The original text string.
        translated_text: The translated text string.
        context_lines: Number of lines of context to show around differences.
        level: The comparison level ('character', 'sentence', 'paragraph').
    """
    if opcodes is None:
        return # Error message already printed in compare_texts_enhanced

    print("--- Translation Comparison Report ---")
    print("Original File: Original")
    print("Translated File: Translated\n")

    differences_found = False
    diff_count = 0

    # Prepare sequences based on the comparison level used
    if level == 'sentence':
        original_seq = sent_tokenize(normalize_whitespace(original_text))
        translated_seq = sent_tokenize(normalize_whitespace(translated_text))
        seq_unit = "Sentence"
    elif level == 'paragraph':
        original_seq = normalize_whitespace(original_text).split('\n\n')
        translated_seq = normalize_whitespace(translated_text).split('\n\n')
        seq_unit = "Paragraph"
    else: # Character level
        original_seq = list(normalize_whitespace(original_text)) # Compare character list for indexing
        translated_seq = list(normalize_whitespace(translated_text))
        # Need the original full text for line number lookup in character mode
        original_full_text = original_text
        translated_full_text = translated_text
        original_full_lines = original_full_text.splitlines(keepends=True)
        translated_full_lines = translated_full_text.splitlines(keepends=True)
        seq_unit = "Character Segment"


    def get_location_info(seq, index, level, full_text_lines=None, text=None):
        if level in ['sentence', 'paragraph']:
            return f"{seq_unit} {index + 1}" # Report 1-based index of the unit
        else: # Character level
             # Find the line numbers corresponding to the character indices
            start_char_index = sum(len(item) for item in seq[:index])
            end_char_index = start_char_index + len(seq[index]) -1 if len(seq[index]) > 0 else start_char_index

            start_line = 1
            end_line = 1
            current_char_count = 0
            for i, line in enumerate(full_text_lines):
                line_len = len(line)
                if current_char_count <= start_char_index < current_char_count + line_len:
                     start_line = i + 1
                if current_char_count <= end_char_index < current_char_count + line_len:
                     end_line = i + 1
                     break # Found both start and end lines
                current_char_count += line_len

            if start_line == end_line:
                 return f"Line {start_line}"
            else:
                 return f"Lines {start_line}-{end_line}"


    for tag, i1, i2, j1, j2 in opcodes:
        # Get segments from the normalized sequences used for comparison
        original_segment_seq = original_seq[i1:i2]
        translated_segment_seq = translated_seq[j1:j2]

        # Join segments back to strings for display
        original_segment_str = "".join(original_segment_seq) if level == 'character' else " ".join(original_segment_seq)
        translated_segment_str = "".join(translated_segment_seq) if level == 'character' else " ".join(translated_segment_seq)


        if tag == 'equal':
            # Optionally print context lines around differences
            pass # We will handle context printing when we encounter a difference
        else:
            differences_found = True
            diff_count += 1

            # Print context before the difference
            start_original_context_index = max(0, i1 - context_lines)
            end_original_context_index = i1
            start_translated_context_index = max(0, j1 - context_lines)
            end_translated_context_index = j1

            if start_original_context_index < i1 or start_translated_context_index < j1:
                 print("\n--- Context Before ---")
                 for k in range(start_original_context_index, end_original_context_index):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None, original_text)}): {context_str.strip()}")
                 for k in range(start_translated_context_index, end_translated_context_index):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None, translated_text)}): {context_str.strip()}")


            # Print the difference segment
            print(f"\n--- Discrepancy {diff_count} ({tag}) ---")
            if tag == 'replace':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None, original_text)}): - {original_segment_str.strip()}")
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None, translated_text)}): + {translated_segment_str.strip()}")
            elif tag == 'delete':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None, original_text)}): - {original_segment_str.strip()}")
            elif tag == 'insert':
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None, translated_text)}): + {translated_segment_str.strip()}")

            # Print context after the difference
            start_original_context_index_after = i2
            end_original_context_index_after = min(len(original_seq), i2 + context_lines)
            start_translated_context_index_after = j2
            end_translated_context_index_after = min(len(translated_seq), j2 + context_lines)

            if start_original_context_index_after < end_original_context_index_after or start_translated_context_index_after < end_translated_context_index_after:
                 print("--- Context After ---")
                 for k in range(start_original_context_index_after, end_original_context_index_after):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None, original_text)}): {context_str.strip()}")
                 for k in range(start_translated_context_index_after, end_translated_context_index_after):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None, translated_text)}): {context_str.strip()}")


    if not differences_found:
        print("No discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        print(f"Total discrepancy segments found: {diff_count}")

# Update the translate_check function to use the new comparison and formatting
def translate_check_enhanced(original_file_path, original_file_type, translated_file_path, translated_file_type, comparison_level='character'):
    """
    Orchestrates the translation check process with enhanced features.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
        comparison_level: The level for comparison ('character', 'sentence', 'paragraph').
    """
    print(f"--- Starting Enhanced Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})")
    print(f"Comparison Level: {comparison_level}\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts_enhanced function
    # Pass full text for comparison
    opcodes = compare_texts_enhanced(original_text, translated_text, level=comparison_level)

    # 4. Call the format_comparison_report_enhanced function
    # Pass original and translated text along with opcodes for formatting
    format_comparison_report_enhanced(opcodes, original_text, translated_text, level=comparison_level)

    print(f"\n--- Enhanced Translation Check Complete ---")


# Re-run the tests with the updated functions and different comparison levels
temp_dir = "/tmp/translation_test_files"
# Ensure temp directory and dummy files exist from previous successful step
os.makedirs(temp_dir, exist_ok=True)

# Recreate dummy files with potentially different content for testing enhanced features
# 1. PDF Files
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
pdf_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.pdf")
pdf_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.pdf")


doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_orig_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the translated PDF document. It has a different sentence.\n\nA third sentence follows with extra words.") # Sentence and paragraph difference
doc.save(pdf_trans_diff_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_same_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_sentence_diff_path) # Keep same for sentence diff test against original
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_paragraph_diff_path) # Keep same for paragraph diff test against original
doc.close()


# 2. DOCX Files
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
docx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.docx")
docx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.docx")

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_orig_path)

doc = docx.Document()
doc.add_paragraph("This is the translated Word document. It has a different sentence.") # Sentence difference
doc.add_paragraph("")
doc.add_paragraph("A third sentence here with extra words.") # Paragraph difference
doc.save(docx_trans_diff_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_same_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_sentence_diff_path) # Keep same for sentence diff test against original

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_paragraph_diff_path) # Keep same for paragraph diff test against original


# 3. XLSX Files
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
xlsx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.xlsx")
xlsx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.xlsx")


workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_orig_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Translated Header. Different first sentence.' # Sentence difference
sheet['A2'] = 'Value 1. Second sentence with changes.' # Sentence difference
sheet['B2'] = 'Different Value.' # Sentence difference
workbook.save(xlsx_trans_diff_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_same_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_sentence_diff_path) # Keep same for sentence diff test against original

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.\n\nSecond Paragraph.'
sheet['A2'] = 'Value 1. Third Paragraph.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_orig_path) # Overwrite for paragraph test

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.\n\nDifferent Second Paragraph.' # Paragraph difference
sheet['A2'] = 'Value 1. Third Paragraph.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_paragraph_diff_path)


# 4. PPTX Files
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")
pptx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.pptx")
pptx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.pptx")

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_orig_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Translated Presentation Title. Different first sentence." # Sentence difference
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence with changes.\n\nDifferent third paragraph." # Sentence and paragraph difference
presentation.save(pptx_trans_diff_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_same_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_sentence_diff_path) # Keep same for sentence diff test against original

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_paragraph_diff_path) # Keep same for paragraph diff test against original


print("\n--- Retesting with Enhanced Comparison and Reporting (Character Level) ---")

print("\n--- Testing PDF Files (Difference) ---")
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='character')

print("\n--- Testing DOCX Files (Difference) ---")
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='character')

print("\n--- Testing XLSX Files (Difference) ---")
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='character')

print("\n--- Testing PPTX Files (Difference) ---")
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='character')

print("\n--- Retesting with Enhanced Comparison and Reporting (Sentence Level) ---")

print("\n--- Testing PDF Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='sentence')

print("\n--- Testing DOCX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='sentence')

print("\n--- Testing XLSX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='sentence')

print("\n--- Testing PPTX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='sentence')


print("\n--- Retesting with Enhanced Comparison and Reporting (Paragraph Level) ---")

print("\n--- Testing PDF Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='paragraph')

print("\n--- Testing DOCX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='paragraph')

print("\n--- Testing XLSX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='paragraph')

print("\n--- Testing PPTX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='paragraph')

# Clean up temporary files (optional, but good practice)
# import shutil
# shutil.rmtree(temp_dir)

"""**Reasoning**:
The traceback indicates that NLTK is looking for `punkt_tab` when performing sentence tokenization, which was not explicitly downloaded. I need to add `nltk.download('punkt_tab')` to ensure this resource is available for sentence and paragraph level comparisons. I will add this download and re-run the code block to define the enhanced functions and execute the tests.


"""

import re
import nltk
from nltk.tokenize import sent_tokenize
import difflib
import os
import fitz
import docx
import openpyxl
from pptx import Presentation

# Download necessary NLTK resources if not already present
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('tokenizers/punkt_tab')
except LookupError:
    nltk.download('punkt_tab')


def normalize_whitespace(text):
    """
    Normalizes whitespace in a string: converts various whitespace sequences
    into single spaces and standardizes line endings.
    """
    # Replace multiple whitespace characters with a single space
    text = re.sub(r'\s+', ' ', text)
    # Standardize line endings (optional, depending on desired comparison level)
    # text = text.replace('\r\n', '\n').replace('\r', '\n')
    return text.strip() # Remove leading/trailing whitespace

def compare_texts_enhanced(original_text, translated_text, level='character'):
    """
    Compares two strings with enhanced features, including whitespace normalization
    and optional sentence/paragraph level comparison.

    Args:
        original_text: The original text string.
        translated_text: The translated text string.
        level: The comparison level ('character', 'sentence', 'paragraph').

    Returns:
        A list of opcodes representing the differences, or None if inputs are not strings.
    """
    if not isinstance(original_text, str) or not isinstance(translated_text, str):
        print("Error: Both inputs must be strings.")
        return None

    # Normalize whitespace before comparison
    normalized_original = normalize_whitespace(original_text)
    normalized_translated = normalize_whitespace(translated_text)

    if level == 'sentence':
        # Split into sentences and compare sequences of sentences
        seq1 = sent_tokenize(normalized_original)
        seq2 = sent_tokenize(normalized_translated)
    elif level == 'paragraph':
        # Simple paragraph split (assuming double newline separates paragraphs)
        seq1 = normalized_original.split('\n\n')
        seq2 = normalized_translated.split('\n\n')
    else: # Default to character level
        seq1 = normalized_original
        seq2 = normalized_translated

    matcher = difflib.SequenceMatcher(None, seq1, seq2)
    return matcher.get_opcodes()


def format_comparison_report_enhanced(opcodes, original_text, translated_text, context_lines=3, level='character'):
    """
    Formats the output from compare_texts_enhanced (opcodes) with improved context
    and more accurate line/segment reporting.

    Args:
        opcodes: A list of opcodes from difflib.SequenceMatcher.get_opcodes().
        original_text: The original text string.
        translated_text: The translated text string.
        context_lines: Number of lines of context to show around differences.
        level: The comparison level ('character', 'sentence', 'paragraph').
    """
    if opcodes is None:
        return # Error message already printed in compare_texts_enhanced

    print("--- Translation Comparison Report ---")
    print("Original File: Original")
    print("Translated File: Translated\n")

    differences_found = False
    diff_count = 0

    # Prepare sequences based on the comparison level used
    if level == 'sentence':
        original_seq = sent_tokenize(normalize_whitespace(original_text))
        translated_seq = sent_tokenize(normalize_whitespace(translated_text))
        seq_unit = "Sentence"
    elif level == 'paragraph':
        original_seq = normalize_whitespace(original_text).split('\n\n')
        translated_seq = normalize_whitespace(translated_text).split('\n\n')
        seq_unit = "Paragraph"
    else: # Character level
        original_seq = list(normalize_whitespace(original_text)) # Compare character list for indexing
        translated_seq = list(normalize_whitespace(translated_text))
        # Need the original full text for line number lookup in character mode
        original_full_text = original_text
        translated_full_text = translated_text
        original_full_lines = original_full_text.splitlines(keepends=True)
        translated_full_lines = translated_full_text.splitlines(keepends=True)
        seq_unit = "Character Segment"


    def get_location_info(seq, index, level, full_text_lines=None, text=None):
        if level in ['sentence', 'paragraph']:
            return f"{seq_unit} {index + 1}" # Report 1-based index of the unit
        else: # Character level
             # Find the line numbers corresponding to the character indices
            start_char_index = sum(len(item) for item in seq[:index])
            end_char_index = start_char_index + len(seq[index]) -1 if len(seq[index]) > 0 else start_char_index

            start_line = 1
            end_line = 1
            current_char_count = 0
            for i, line in enumerate(full_text_lines):
                line_len = len(line)
                if current_char_count <= start_char_index < current_char_count + line_len:
                     start_line = i + 1
                if current_char_count <= end_char_index < current_char_count + line_len:
                     end_line = i + 1
                     break # Found both start and end lines
                current_char_count += line_len

            if start_line == end_line:
                 return f"Line {start_line}"
            else:
                 return f"Lines {start_line}-{end_line}"


    for tag, i1, i2, j1, j2 in opcodes:
        # Get segments from the normalized sequences used for comparison
        original_segment_seq = original_seq[i1:i2]
        translated_segment_seq = translated_seq[j1:j2]

        # Join segments back to strings for display
        original_segment_str = "".join(original_segment_seq) if level == 'character' else " ".join(original_segment_seq)
        translated_segment_str = "".join(translated_segment_seq) if level == 'character' else " ".join(translated_segment_seq)


        if tag == 'equal':
            # Optionally print context lines around differences
            pass # We will handle context printing when we encounter a difference
        else:
            differences_found = True
            diff_count += 1

            # Print context before the difference
            start_original_context_index = max(0, i1 - context_lines)
            end_original_context_index = i1
            start_translated_context_index = max(0, j1 - context_lines)
            end_translated_context_index = j1

            if start_original_context_index < i1 or start_translated_context_index < j1:
                 print("\n--- Context Before ---")
                 for k in range(start_original_context_index, end_original_context_index):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None, original_text)}): {context_str.strip()}")
                 for k in range(start_translated_context_index, end_translated_context_index):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None, translated_text)}): {context_str.strip()}")


            # Print the difference segment
            print(f"\n--- Discrepancy {diff_count} ({tag}) ---")
            if tag == 'replace':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None, original_text)}): - {original_segment_str.strip()}")
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None, translated_text)}): + {translated_segment_str.strip()}")
            elif tag == 'delete':
                print(f"Original ({get_location_info(original_seq, i1, level, original_full_lines if level == 'character' else None, original_text)}): - {original_segment_str.strip()}")
            elif tag == 'insert':
                print(f"Translated ({get_location_info(translated_seq, j1, level, translated_full_lines if level == 'character' else None, translated_text)}): + {translated_segment_str.strip()}")

            # Print context after the difference
            start_original_context_index_after = i2
            end_original_context_index_after = min(len(original_seq), i2 + context_lines)
            start_translated_context_index_after = j2
            end_translated_context_index_after = min(len(translated_seq), j2 + context_lines)

            if start_original_context_index_after < end_original_context_index_after or start_translated_context_index_after < end_translated_context_index_after:
                 print("--- Context After ---")
                 for k in range(start_original_context_index_after, end_original_context_index_after):
                      context_str = original_seq[k] if level == 'character' else " ".join(original_seq[k:k+1])
                      print(f"  Original ({get_location_info(original_seq, k, level, original_full_lines if level == 'character' else None, original_text)}): {context_str.strip()}")
                 for k in range(start_translated_context_index_after, end_translated_context_index_after):
                      context_str = translated_seq[k] if level == 'character' else " ".join(translated_seq[k:k+1])
                      print(f"  Translated ({get_location_info(translated_seq, k, level, translated_full_lines if level == 'character' else None, translated_text)}): {context_str.strip()}")


    if not differences_found:
        print("No discrepancies found.")
    else:
        print(f"\n--- End of Report ---")
        print(f"Total discrepancy segments found: {diff_count}")

# Update the translate_check function to use the new comparison and formatting
def translate_check_enhanced(original_file_path, original_file_type, translated_file_path, translated_file_type, comparison_level='character'):
    """
    Orchestrates the translation check process with enhanced features.

    Args:
        original_file_path: Path to the original file.
        original_file_type: Type of the original file ('pdf', 'docx', 'xlsx', 'pptx').
        translated_file_path: Path to the translated file.
        translated_file_type: Type of the translated file ('pdf', 'docx', 'xlsx', 'pptx').
        comparison_level: The level for comparison ('character', 'sentence', 'paragraph').
    """
    print(f"--- Starting Enhanced Translation Check ---")
    print(f"Original File: {original_file_path} ({original_file_type})")
    print(f"Translated File: {translated_file_path} ({translated_file_type})")
    print(f"Comparison Level: {comparison_level}\n")

    # 2. Call the extract_text_from_file function for both files
    original_text = extract_text_from_file(original_file_path, original_file_type)
    translated_text = extract_text_from_file(translated_file_path, translated_file_type)

    # 5. Include basic error handling for extraction
    if not original_text:
        print("Error: Could not extract text from the original file. Aborting comparison.")
        return

    if not translated_text:
        print("Error: Could not extract text from the translated file. Aborting comparison.")
        return

    # 3. Call the compare_texts_enhanced function
    # Pass full text for comparison
    opcodes = compare_texts_enhanced(original_text, translated_text, level=comparison_level)

    # 4. Call the format_comparison_report_enhanced function
    # Pass original and translated text along with opcodes for formatting
    format_comparison_report_enhanced(opcodes, original_text, translated_text, level=comparison_level)

    print(f"\n--- Enhanced Translation Check Complete ---")


# Re-run the tests with the updated functions and different comparison levels
temp_dir = "/tmp/translation_test_files"
# Ensure temp directory and dummy files exist from previous successful step
os.makedirs(temp_dir, exist_ok=True)

# Recreate dummy files with potentially different content for testing enhanced features
# 1. PDF Files
pdf_orig_path = os.path.join(temp_dir, "original.pdf")
pdf_trans_diff_path = os.path.join(temp_dir, "translated_diff.pdf")
pdf_trans_same_path = os.path.join(temp_dir, "translated_same.pdf")
pdf_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.pdf")
pdf_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.pdf")


doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_orig_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the translated PDF document. It has a different sentence.\n\nA third sentence follows with extra words.") # Sentence and paragraph difference
doc.save(pdf_trans_diff_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_same_path)
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_sentence_diff_path) # Keep same for sentence diff test against original
doc.close()

doc = fitz.open()
page = doc.new_page()
page.insert_text((10, 10), "This is the original PDF document. It has a second sentence.\n\nA third sentence follows.")
doc.save(pdf_trans_paragraph_diff_path) # Keep same for paragraph diff test against original
doc.close()


# 2. DOCX Files
docx_orig_path = os.path.join(temp_dir, "original.docx")
docx_trans_diff_path = os.path.join(temp_dir, "translated_diff.docx")
docx_trans_same_path = os.path.join(temp_dir, "translated_same.docx")
docx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.docx")
docx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.docx")

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_orig_path)

doc = docx.Document()
doc.add_paragraph("This is the translated Word document. It has a different sentence.") # Sentence difference
doc.add_paragraph("")
doc.add_paragraph("A third sentence here with extra words.") # Paragraph difference
doc.save(docx_trans_diff_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_same_path)

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_sentence_diff_path) # Keep same for sentence diff test against original

doc = docx.Document()
doc.add_paragraph("This is the original Word document. It has another sentence.")
doc.add_paragraph("")
doc.add_paragraph("A third sentence here.")
doc.save(docx_trans_paragraph_diff_path) # Keep same for paragraph diff test against original


# 3. XLSX Files
xlsx_orig_path = os.path.join(temp_dir, "original.xlsx")
xlsx_trans_diff_path = os.path.join(temp_dir, "translated_diff.xlsx")
xlsx_trans_same_path = os.path.join(temp_dir, "translated_same.xlsx")
xlsx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.xlsx")
xlsx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.xlsx")


workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_orig_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Translated Header. Different first sentence.' # Sentence difference
sheet['A2'] = 'Value 1. Second sentence with changes.' # Sentence difference
sheet['B2'] = 'Different Value.' # Sentence difference
workbook.save(xlsx_trans_diff_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_same_path)

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.'
sheet['A2'] = 'Value 1. Second sentence.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_sentence_diff_path) # Keep same for sentence diff test against original

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.\n\nSecond Paragraph.'
sheet['A2'] = 'Value 1. Third Paragraph.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_orig_path) # Overwrite for paragraph test

workbook = openpyxl.Workbook()
sheet = workbook.active
sheet['A1'] = 'Original Header. First sentence.\n\nDifferent Second Paragraph.' # Paragraph difference
sheet['A2'] = 'Value 1. Third Paragraph.'
sheet['B2'] = 'Value 2.'
workbook.save(xlsx_trans_paragraph_diff_path)


# 4. PPTX Files
pptx_orig_path = os.path.join(temp_dir, "original.pptx")
pptx_trans_diff_path = os.path.join(temp_dir, "translated_diff.pptx")
pptx_trans_same_path = os.path.join(temp_dir, "translated_same.pptx")
pptx_trans_sentence_diff_path = os.path.join(temp_dir, "translated_sentence_diff.pptx")
pptx_trans_paragraph_diff_path = os.path.join(temp_dir, "translated_paragraph_diff.pptx")

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_orig_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Translated Presentation Title. Different first sentence." # Sentence difference
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence with changes.\n\nDifferent third paragraph." # Sentence and paragraph difference
presentation.save(pptx_trans_diff_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_same_path)

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_sentence_diff_path) # Keep same for sentence diff test against original

presentation = Presentation()
slide = presentation.slides.add_slide(presentation.slide_layouts[0]) # Title Slide
title = slide.shapes.title
body_shape = slide.placeholders[1]
title.text = "Original Presentation Title. First sentence."
tf = body_shape.text_frame
tf.text = "Original body text. Second sentence.\n\nThird paragraph."
presentation.save(pptx_trans_paragraph_diff_path) # Keep same for paragraph diff test against original


print("\n--- Retesting with Enhanced Comparison and Reporting (Character Level) ---")

print("\n--- Testing PDF Files (Difference) ---")
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='character')

print("\n--- Testing DOCX Files (Difference) ---")
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='character')

print("\n--- Testing XLSX Files (Difference) ---")
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='character')

print("\n--- Testing PPTX Files (Difference) ---")
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='character')

print("\n--- Retesting with Enhanced Comparison and Reporting (Sentence Level) ---")

print("\n--- Testing PDF Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='sentence')

print("\n--- Testing DOCX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='sentence')

print("\n--- Testing XLSX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='sentence')

print("\n--- Testing PPTX Files (Sentence Difference) ---")
# Compare original (multi-sentence) with translated_diff (sentence difference)
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='sentence')


print("\n--- Retesting with Enhanced Comparison and Reporting (Paragraph Level) ---")

print("\n--- Testing PDF Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(pdf_orig_path, "pdf", pdf_trans_diff_path, "pdf", comparison_level='paragraph')

print("\n--- Testing DOCX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(docx_orig_path, "docx", docx_trans_diff_path, "docx", comparison_level='paragraph')

print("\n--- Testing XLSX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(xlsx_orig_path, "xlsx", xlsx_trans_diff_path, "xlsx", comparison_level='paragraph')

print("\n--- Testing PPTX Files (Paragraph Difference) ---")
# Compare original (multi-paragraph) with translated_diff (paragraph difference)
translate_check_enhanced(pptx_orig_path, "pptx", pptx_trans_diff_path, "pptx", comparison_level='paragraph')

# Clean up temporary files (optional, but good practice)
# import shutil
# shutil.rmtree(temp_dir)

"""## Summary:

### Data Analysis Key Findings

*   The tool successfully extracts text from PDF, Word (.docx), Excel (.xlsx), and PowerPoint (.pptx) files using the `PyMuPDF`, `python-docx`, `openpyxl`, and `python-pptx` libraries, respectively.
*   The comparison logic was refined using `difflib.SequenceMatcher` to accurately identify differences at the character, sentence, or paragraph level, providing more granular results than a simple line-by-line comparison.
*   The reporting mechanism was enhanced to display discrepancies clearly, including context lines around the differences and indicating the location (line number or sentence/paragraph index) in both the original and translated texts.
*   The tool includes basic error handling for scenarios where files are not found or text extraction fails.
*   A basic Streamlit-based user interface was integrated to allow users to upload files and trigger the translation check, although it requires temporary file saving and redirection of standard output to display the report.

### Insights or Next Steps

*   The current text extraction might not capture all formatting, embedded objects, or complex layouts accurately. Future work could explore more advanced parsing techniques or libraries to preserve structural information and handle richer document content.
*   Implementing more sophisticated fuzzy matching or translation memory integration could help identify semantic differences or suggestions beyond exact text matches, which is particularly useful for human translations where minor phrasing variations are common.

"""