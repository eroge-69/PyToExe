# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
from random import choice

digits = '0123456789'
lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
punctuation = '!#$%&*+-=?@^_.'

chars = ''

words = [
    '–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (—á–∏—Å–ª–æ/—Ü–∏—Ñ—Ä–∞ –±–æ–ª—å—à–µ 0)?',
    '–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (—á–∏—Å–ª–æ/—Ü–∏—Ñ—Ä–∞ –±–æ–ª—å—à–µ 0):',
    '–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã "0123456789" (–î–∞/–ù–µ—Ç)?',
    '–í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (–î–∞/–ù–µ—Ç)?',
    '–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã "abcdefghijklmnopqrstuvwxyz" (–î–∞/–ù–µ—Ç)?',
    '–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª—ã "!#$%&*+-=?@^_" (–î–∞/–ù–µ—Ç)?',
    '–ò—Å–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã "il1Lo0O" (–î–∞/–ù–µ—Ç)?',
    '–£–ø—Å! –û—à–∏–±–∫–∞üîß –í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!',
    '–£–ø—Å! –û—à–∏–±–∫–∞üîß –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ/—Ü–∏—Ñ—Ä—É –±–æ–ª—å—à–µ 0!'
]


def _0_():
    print(words[0])
    ans = input().strip()
    while True:
        if not (ans.isdigit() and ans != '0'):
            print(words[8])
            ans = input().strip()
        else:
            return int(ans)


def _1_():
    print(words[1])
    ans1 = input().strip()
    while True:
        if not (ans1.isdigit() and ans1 != '0'):
            print(words[8])
            ans1 = input().strip()
        else:
            return int(ans1)


def _2_():
    global chars
    print(words[2])
    ans2 = input().strip().lower()
    while True:
        if not ans2 in ('–¥–∞', '–Ω–µ—Ç'):
            print(words[7])
            ans2 = input().strip().lower()
        elif ans2 == '–¥–∞':
            chars += digits
            return chars
        else:
            break


def _3_():
    global chars
    print(words[3])
    ans3 = input().strip().lower()
    while True:
        if not ans3 in ('–¥–∞', '–Ω–µ—Ç'):
            print(words[7])
            ans3 = input().strip().lower()
        elif ans3 == '–¥–∞':
            chars += uppercase_letters
            return chars
        else:
            break


def _4_():
    global chars
    print(words[4])
    ans4 = input().strip().lower()
    while True:
        if not ans4 in ('–¥–∞', '–Ω–µ—Ç'):
            print(words[7])
            ans4 = input().strip().lower()
        elif ans4 == '–¥–∞':
            chars += lowercase_letters
            return chars
        else:
            break


def _5_():
    global chars
    print(words[5])
    ans5 = input().strip().lower()
    while True:
        if not ans5 in ('–¥–∞', '–Ω–µ—Ç'):
            print(words[7])
            ans5 = input().strip().lower()
        elif ans5 == '–¥–∞':
            chars += punctuation
            return chars
        else:
            break


def _6_():
    global chars
    print(words[6])
    ans6 = input().strip().lower()
    while True:
        if not ans6 in ('–¥–∞', '–Ω–µ—Ç'):
            print(words[7])
            ans6 = input().strip().lower()
        elif ans6 == '–¥–∞':
            chars = chars.replace('i', '').replace('l', '').replace('1', '').replace('L', '') \
                         .replace('o', '').replace('0', '').replace('O', '')
            return chars
        else:
            break


result = _0_()
result1 = _1_()
result2 = _2_()
result3 = _3_()
result4 = _4_()
result5 = _5_()
result6 = _6_()


def generate_password():
    global chars
    length = result1

    passwords = []
    for _ in range(result):
        password = ''
        for _ in range(length):
             password += choice(chars)
        passwords.append(password)

    return passwords


print(*generate_password(), sep='\n')


print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–∞—Ä–æ–ª–∏ –≤—ã—à–µ ‚Üë")
input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")