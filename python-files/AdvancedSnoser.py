from customtkinter import *
from PIL import Image
import os
import toml
import asyncio
from telethon import TelegramClient, functions
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import *
from threading import Thread
import time
from tkinter import messagebox
import threading
import logging
from concurrent.futures import ThreadPoolExecutor

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    def __init__(self):
        with open("config.toml") as file:
            self.data = toml.load(file)
        
        self.api_id = self.data["authorization"]["api_id"]
        self.api_hash = self.data["authorization"]["api_hash"]
        self.max_workers = self.data.get("settings", {}).get("max_workers", 5)
        self.default_delay = self.data.get("settings", {}).get("default_delay", 5)
        
config = Config()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('report_log.txt'),
        logging.StreamHandler()
    ]
)

# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± ---
class AdvancedReporter:
    REASON_MAP = {
        1: InputReportReasonSpam(),
        2: InputReportReasonViolence(),
        3: InputReportReasonPornography(),
        4: InputReportReasonChildAbuse(),
        5: InputReportReasonCopyright(),
        6: InputReportReasonGeoIrrelevant(),
        7: InputReportReasonFake(),
        8: InputReportReasonOther()
    }

    def __init__(self):
        self.active_tasks = 0
        self.success_count = 0
        self.fail_count = 0
        self.is_running = False
        self.executor = ThreadPoolExecutor(max_workers=config.max_workers)
        self.valid_sessions = []
        self.session_check_complete = False

    async def validate_sessions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π"""
        self.valid_sessions = []
        session_files = [f for f in os.listdir("tgaccs") if f.endswith('.session')]
        
        if not session_files:
            logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ tgaccs")
            return False

        for session_file in session_files:
            session_path = os.path.join("tgaccs", session_file)
            try:
                async with TelegramClient(session_path, config.api_id, config.api_hash) as client:
                    if await client.is_user_authorized():
                        self.valid_sessions.append(session_file)
                        logging.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_file} –≥–æ—Ç–æ–≤–∞")
                    else:
                        logging.warning(f"‚ùå –°–µ—Å—Å–∏—è {session_file} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ {session_file}: {str(e)}")
        
        logging.info(f"üîç –ò—Ç–æ–≥: {len(self.valid_sessions)} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –∏–∑ {len(session_files)}")
        self.session_check_complete = True
        return len(self.valid_sessions) > 0

    async def send_single_report(self, client, chat_entity, message_id, reason, comment=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∂–∞–ª–æ–±—ã"""
        try:
            await client(ReportRequest(
                peer=chat_entity,
                id=[message_id],
                reason=reason,
                message=comment
            ))
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {client.session.filename}: {str(e)}")
            return False
        finally:
            self.active_tasks -= 1

    async def process_account(self, session_file, chat_entity, message_id, reason, comment, delay):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        session_path = os.path.join("tgaccs", session_file)
        try:
            async with TelegramClient(session_path, config.api_id, config.api_hash) as client:
                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if not await client.is_user_authorized():
                    logging.warning(f"üö´ –°–µ—Å—Å–∏—è {session_file} –ø–æ—Ç–µ—Ä—è–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    return

                result = await self.send_single_report(client, chat_entity, message_id, reason, comment)
                if result:
                    self.success_count += 1
                    logging.info(f"üì® –£—Å–ø–µ—à–Ω–∞—è –∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ {session_file}")
                else:
                    self.fail_count += 1

                if delay > 0:
                    await asyncio.sleep(delay)

        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_file}: {str(e)}")
            self.fail_count += 1

    async def start_mass_report(self, message_link, reason_num, comment="", delay=5):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±"""
        if self.is_running:
            logging.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return

        if not self.session_check_complete:
            if not await self.validate_sessions():
                logging.error("–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

        self.is_running = True
        self.success_count = 0
        self.fail_count = 0
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏
            parts = message_link.strip().split('/')
            if len(parts) < 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")

            chat_username = parts[-2]
            message_id = int(parts[-1])

            # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
            async with TelegramClient(os.path.join("tgaccs", self.valid_sessions[0]), 
                                   config.api_id, config.api_hash) as temp_client:
                chat_entity = await temp_client.get_entity(chat_username)

            reason = self.REASON_MAP.get(reason_num, InputReportReasonOther())
            
            # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π
            tasks = []
            for session_file in self.valid_sessions:
                if not self.is_running:
                    break
                    
                self.active_tasks += 1
                task = asyncio.create_task(
                    self.process_account(session_file, chat_entity, message_id, reason, comment, delay)
                )
                tasks.append(task)

            await asyncio.gather(*tasks)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        finally:
            self.is_running = False
            logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {self.success_count}, –û—à–∏–±–∫–∏: {self.fail_count}")

    def stop_mass_report(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.is_running = False
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏...")

# --- GUI ---
class ReportApp(CTk):
    def __init__(self):
        super().__init__()
        self.reporter = AdvancedReporter()
        self.setup_ui()
        self.check_sessions_on_startup()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.title("Advanced Telegram Reporter v2.0")
        self.geometry("1100x750")
        set_appearance_mode("dark")
        set_default_color_theme("dark-blue")

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        self.main_frame = CTkFrame(self)
        self.main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.control_frame = CTkFrame(self.main_frame, width=650)
        self.control_frame.pack(side=LEFT, fill=BOTH, expand=True, padx=5, pady=5)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_frame = CTkFrame(self.main_frame, width=400)
        self.info_frame.pack(side=RIGHT, fill=BOTH, padx=5, pady=5)

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_controls()
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.setup_info_panel()

    def setup_controls(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        CTkLabel(self.control_frame, text="–ú–∞—Å—Å–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–∏–Ω–≥", font=("Arial", 24, "bold")).pack(pady=15)

        # –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
        self.link_entry = CTkEntry(
            self.control_frame, 
            width=600,
            placeholder_text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: t.me/username/123)"
        )
        self.link_entry.pack(pady=10)

        # –ü—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±
        CTkLabel(self.control_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:", font=("Arial", 14)).pack(pady=5)
        
        self.reason_var = IntVar(value=1)
        reasons_frame = CTkFrame(self.control_frame)
        reasons_frame.pack(pady=5)
        
        reasons = [
            ("1. –°–ø–∞–º", 1),
            ("2. –ù–∞—Å–∏–ª–∏–µ", 2),
            ("3. –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è", 3),
            ("4. –î–µ—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", 4),
            ("5. –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", 5),
            ("6. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–µ–æ", 6),
            ("7. –§–µ–π–∫", 7),
            ("8. –î—Ä—É–≥–æ–µ", 8)
        ]
        
        for i, (text, value) in enumerate(reasons):
            if i % 2 == 0:
                frame = CTkFrame(reasons_frame)
                frame.pack(anchor="w", padx=10, pady=2)
            CTkRadioButton(frame, text=text, variable=self.reason_var, value=value).pack(side=LEFT, padx=5)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        CTkLabel(self.control_frame, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∂–∞–ª–æ–±–µ:", font=("Arial", 14)).pack(pady=5)
        self.comment_entry = CTkTextbox(self.control_frame, width=600, height=120)
        self.comment_entry.pack(pady=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = CTkFrame(self.control_frame)
        settings_frame.pack(pady=10)
        
        CTkLabel(settings_frame, text="–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):").pack(side=LEFT, padx=5)
        self.delay_entry = CTkEntry(settings_frame, width=80)
        self.delay_entry.insert(0, str(config.default_delay))
        self.delay_entry.pack(side=LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = CTkFrame(self.control_frame)
        btn_frame.pack(pady=15)
        
        self.start_btn = CTkButton(
            btn_frame, 
            text="üöÄ –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", 
            font=("Arial", 14, "bold"),
            width=200,
            height=40,
            command=self.start_reporting
        )
        self.start_btn.pack(side=LEFT, padx=10)

        self.stop_btn = CTkButton(
            btn_frame, 
            text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            font=("Arial", 14),
            fg_color="#d9534f", 
            hover_color="#c9302c",
            width=200,
            height=40,
            command=self.stop_reporting
        )
        self.stop_btn.pack(side=LEFT, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π
        self.check_btn = CTkButton(
            self.control_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏–∏",
            command=self.check_sessions_manual
        )
        self.check_btn.pack(pady=5)

    def setup_info_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        CTkLabel(self.info_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", font=("Arial", 18, "bold")).pack(pady=10)
        
        stats_frame = CTkFrame(self.info_frame)
        stats_frame.pack(fill=X, padx=10, pady=5)
        
        self.session_label = CTkLabel(stats_frame, text="–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0", font=("Arial", 12))
        self.session_label.pack(anchor="w", pady=2)
        
        self.valid_session_label = CTkLabel(stats_frame, text="–†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: 0", font=("Arial", 12))
        self.valid_session_label.pack(anchor="w", pady=2)
        
        self.success_label = CTkLabel(stats_frame, text="–£—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: 0", font=("Arial", 12))
        self.success_label.pack(anchor="w", pady=2)
        
        self.fail_label = CTkLabel(stats_frame, text="–ù–µ—É–¥–∞—á–Ω—ã—Ö –∂–∞–ª–æ–±: 0", font=("Arial", 12))
        self.fail_label.pack(anchor="w", pady=2)
        
        self.active_label = CTkLabel(stats_frame, text="–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 0", font=("Arial", 12))
        self.active_label.pack(anchor="w", pady=2)

        # –õ–æ–≥–∏
        CTkLabel(self.info_frame, text="üìù –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", font=("Arial", 16)).pack(pady=10)
        self.log_text = CTkTextbox(self.info_frame, width=380, height=400, font=("Consolas", 10))
        self.log_text.pack(pady=5)
        self.log_text.configure(state="disabled")

        # –•—É–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ GUI
        class GUILogHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
                self.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

            def emit(self, record):
                msg = self.format(record)
                self.text_widget.configure(state="normal")
                self.text_widget.insert("end", msg + "\n")
                self.text_widget.configure(state="disabled")
                self.text_widget.see("end")

        logging.getLogger().addHandler(GUILogHandler(self.log_text))

    def check_sessions_on_startup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        def run_check():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.reporter.validate_sessions())
                self.update_stats()
            finally:
                loop.close()
        
        Thread(target=run_check, daemon=True).start()

    def check_sessions_manual(self):
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π"""
        self.start_btn.configure(state="disabled")
        self.check_btn.configure(state="disabled", text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        
        def run_check():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.reporter.validate_sessions())
                self.update_stats()
                messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                  f"–ù–∞–π–¥–µ–Ω–æ {len(self.reporter.valid_sessions)} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π")
            finally:
                loop.close()
                self.start_btn.configure(state="normal")
                self.check_btn.configure(state="normal", text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏–∏")
        
        Thread(target=run_check, daemon=True).start()

    def start_reporting(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±"""
        message_link = self.link_entry.get()
        reason_num = self.reason_var.get()
        comment = self.comment_entry.get("1.0", "end").strip()
        
        try:
            delay = float(self.delay_entry.get() or config.default_delay)
            if delay < 0:
                raise ValueError("–ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
            return

        if not message_link:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        if not self.reporter.valid_sessions:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        self.start_btn.configure(state="disabled")
        self.stop_btn.configure(state="normal")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Thread(
            target=self.run_async_report, 
            args=(message_link, reason_num, comment, delay),
            daemon=True
        ).start()

    def run_async_report(self, message_link, reason_num, comment, delay):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            loop.run_until_complete(
                self.reporter.start_mass_report(message_link, reason_num, comment, delay)
            )
        finally:
            loop.close()
            self.after(0, lambda: self.start_btn.configure(state="normal"))
            self.after(0, lambda: self.stop_btn.configure(state="disabled"))

    def stop_reporting(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.reporter.stop_mass_report()
        self.stop_btn.configure(state="disabled")

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        session_files = [f for f in os.listdir("tgaccs") if f.endswith('.session')]
        self.session_label.configure(text=f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(session_files)}")
        self.valid_session_label.configure(text=f"–†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {len(self.reporter.valid_sessions)}")
        self.success_label.configure(text=f"–£—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {self.reporter.success_count}")
        self.fail_label.configure(text=f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∂–∞–ª–æ–±: {self.reporter.fail_count}")
        self.active_label.configure(text=f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {self.reporter.active_tasks}")
        self.after(1000, self.update_stats)

if __name__ == "__main__":
    app = ReportApp()
    app.update_stats()
    app.mainloop()