# -*- coding: utf-8 -*-
"""Colab'e hoş geldiniz. adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qIoUY0e9zAeIoDBYJsuUAnvlfL0eHFgE
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRegressor

pip install xgboost

# Aylık harita
ay_map = {'Oca': 1, 'Şub': 2, 'Mar': 3, 'Nis': 4, 'May': 5, 'Haz': 6,
          'Tem': 7, 'Ağu': 8, 'Eyl': 9, 'Eki': 10, 'Kas': 11, 'Ara': 12}

# Ham veri
veri = '''
Oca.13 361
Oca.14 368
Oca.15 376
Oca.16 331
Oca.17 364
Şub.13 373
Şub.14 376
Şub.15 375
Şub.16 337
Şub.17 380
Mar.13 375
Mar.14 380
Mar.15 369
Mar.16 346
Mar.17 396
Nis.13 359
Nis.14 310
Nis.15 361
Nis.16 343
Nis.17 403
May.13 347
May.14 359
May.15 363
May.16 359
May.17 383
Haz.13 323
Haz.14 356
Haz.15 341
Haz.16 338
Haz.17 372
Tem.13 315
Tem.14 355
Tem.15 321
Tem.16 328
Tem.17 349
Ağu.13 315
Ağu.14 363
Ağu.15 306
Ağu.16 316
Ağu.17 287
Eyl.13 326
Eyl.14 347
Eyl.15 286
Eyl.16 314
Eyl.17 284
Eki.13 326
Eki.14 311
Eki.15 291
Eki.16 318
Eki.17 303
Kas.13 339
Kas.14 334
Kas.15 311
Kas.16 317
Kas.17 333
Ara.13 363
Ara.14 363
Ara.15 335
Ara.16 354
Ara.17 331
'''

# Veri işleme
lines = veri.strip().split('\n')
rows = []
for line in lines:
    tarih, deger = line.split()
    ay_kısa, yil = tarih.split('.')
    ay = ay_map[ay_kısa]
    rows.append({'Yıl': 2000 + int(yil), 'Ay': ay, 'İletkenlik': int(deger)})

df = pd.DataFrame(rows)

# Giriş (X) ve hedef (y)
X = df[['Yıl', 'Ay']]
y = df['İletkenlik']

# 2018 verisi oluştur
X_2018 = pd.DataFrame({'Yıl': [2018]*12, 'Ay': list(range(1,13))})

# Modeli tanımla ve eğit
model = XGBRegressor(n_estimators=100, random_state=42)
model.fit(X, y)

# 2018 tahminleri
y_2018_pred = model.predict(X_2018)

# Sonuçları tablo yap
tahminler_2018 = X_2018.copy()
tahminler_2018['Tahmin_İletkenlik'] = y_2018_pred.round(2)

print(tahminler_2018)

# Aylık isimler
ay_isimleri = ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara']

# Grafik
plt.figure(figsize=(10,6))
plt.plot(ay_isimleri, tahminler_2018['Tahmin_İletkenlik'], marker='o', label='2018 XGBoost Tahmin')
plt.xlabel('Aylar')
plt.ylabel('İletkenlik')
plt.title('XGBoost ile 2018 Aylık İletkenlik Tahminleri')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))
plt.plot(ay_isimleri, tahminler_2018['Tahmin_İletkenlik'], marker='o', label='2018 Tahmin (XGBoost)')
plt.xlabel('Aylar')
plt.ylabel('İletkenlik')
plt.title('2018 Aylık İletkenlik Tahmini')
plt.grid(True)
plt.legend()
plt.show()

plt.figure(figsize=(6,6))
plt.scatter(y, model.predict(X), color='purple', s=80)
plt.plot([min(y), max(y)], [min(y), max(y)], 'k--', label='y = x (Mükemmel Tahmin)')
plt.xlabel('Tahmin Edilen')
plt.ylabel('Gerçek')
plt.title('XGBoost Gerçek vs Tahmin')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

from xgboost import plot_tree

plt.figure(figsize=(16, 8))
plot_tree(model, num_trees=0)  # ilk ağacı göster
plt.title('XGBoost Karar Ağacı (İlk Ağaç)')
plt.show()

from xgboost import plot_importance

plot_importance(model, importance_type='gain', height=0.6)
plt.title('XGBoost Feature Importance (Gain)')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,5))
plt.bar(ay_isimleri, tahminler_2018['Tahmin_İletkenlik'], color='orange')
plt.title('2018 Ay Bazında XGBoost Tahmini')
plt.xlabel('Ay')
plt.ylabel('İletkenlik')
plt.grid(True, axis='y')
plt.tight_layout()
plt.show()

# 2013–2017 için kutu grafiği
plt.figure(figsize=(12,6))
df.boxplot(column='İletkenlik', by='Ay', patch_artist=True)
plt.plot(tahminler_2018['Ay'], tahminler_2018['Tahmin_İletkenlik'], 'ro', label='2018 Tahmini')
plt.title('2013–2017 Dağılım ve 2018 XGBoost Tahmini')
plt.suptitle('')
plt.xlabel('Ay')
plt.ylabel('İletkenlik')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

