
import customtkinter as ctk
from tkinter import messagebox, filedialog
from PIL import Image, ImageDraw, ImageTk
import socket
import threading
import json
import datetime
import hashlib
import os
import base64
import io
import time

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class NetworkManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    def __init__(self, app):
        self.app = app
        self.socket = None
        self.connected = False
        self.receive_thread = None

    def connect(self, host, port):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((host, port))
            self.connected = True

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
            self.receive_thread.start()

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        self.connected = False
        if self.socket:
            self.socket.close()

    def send(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if self.connected and self.socket:
            try:
                message = json.dumps(data, ensure_ascii=False).encode('utf-8')
                self.socket.send(message)
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                self.connected = False
                return False
        return False

    def receive_messages(self):
        """–ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        while self.connected:
            try:
                data = self.socket.recv(8192)
                if not data:
                    break

                message = json.loads(data.decode('utf-8'))
                self.handle_message(message)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞: {e}")
                self.connected = False
                break

    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        msg_type = message.get('type')

        if msg_type == 'register_response':
            self.app.handle_register_response(message)

        elif msg_type == 'login_response':
            self.app.handle_login_response(message)

        elif msg_type == 'contacts_response':
            self.app.handle_contacts_response(message)

        elif msg_type == 'search_response':
            self.app.handle_search_response(message)

        elif msg_type == 'add_contact_response':
            self.app.handle_add_contact_response(message)

        elif msg_type == 'incoming_message':
            self.app.handle_incoming_message(message)

        elif msg_type == 'user_status':
            self.app.handle_user_status(message)

        elif msg_type == 'typing_indicator':
            self.app.handle_typing_indicator(message)

        elif msg_type == 'new_contact':
            self.app.handle_new_contact(message)

        elif msg_type == 'user_info_response':
            self.app.handle_user_info_response(message)

        elif msg_type == 'update_profile_response':
            self.app.handle_update_profile_response(message)

class AnimatedButton(ctk.CTkButton):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bind("<Enter>", lambda e: self.configure(cursor="hand2"))
        self.bind("<Leave>", lambda e: self.configure(cursor=""))

class ContactCard(ctk.CTkFrame):
    def __init__(self, parent, username, bio, avatar_data, is_online, on_click):
        super().__init__(parent, fg_color="#17212B", corner_radius=12)

        self.username = username

        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="x", padx=15, pady=12)

        # –ê–≤–∞—Ç–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–Ω–ª–∞–π–Ω
        avatar_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        avatar_container.pack(side="left", padx=(0, 15))

        avatar_frame = ctk.CTkFrame(avatar_container, width=50, height=50,
                                   corner_radius=25, fg_color="#5288C1")
        avatar_frame.pack()
        avatar_frame.pack_propagate(False)

        if avatar_data:
            try:
                img_data = base64.b64decode(avatar_data)
                img = Image.open(io.BytesIO(img_data))
                img = img.resize((50, 50), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                avatar_label = ctk.CTkLabel(avatar_frame, image=photo, text="")
                avatar_label.image = photo
                avatar_label.place(relx=0.5, rely=0.5, anchor="center")
            except:
                ctk.CTkLabel(avatar_frame, text=username[0].upper(),
                           font=("Segoe UI", 22, "bold"), text_color="white").place(
                    relx=0.5, rely=0.5, anchor="center")
        else:
            ctk.CTkLabel(avatar_frame, text=username[0].upper(),
                       font=("Segoe UI", 22, "bold"), text_color="white").place(
                relx=0.5, rely=0.5, anchor="center")

        # –û–Ω–ª–∞–π–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if is_online:
            online_dot = ctk.CTkFrame(avatar_container, width=14, height=14,
                                     corner_radius=7, fg_color="#4FBF67",
                                     border_width=2, border_color="#17212B")
            online_dot.place(x=36, y=36)

        info_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="x", expand=True)

        ctk.CTkLabel(info_frame, text=username, font=("Segoe UI", 14, "bold"),
                    text_color="white", anchor="w").pack(anchor="w")

        status_text = "–æ–Ω–ª–∞–π–Ω" if is_online else bio[:40] + "..." if len(bio) > 40 else bio
        status_color = "#4FBF67" if is_online else "#8B98A5"

        ctk.CTkLabel(info_frame, text=status_text, font=("Segoe UI", 11),
                    text_color=status_color, anchor="w").pack(anchor="w")

        chat_btn = AnimatedButton(main_frame, text="üí¨", width=40, height=40,
                                 corner_radius=20, fg_color="#2B5278",
                                 hover_color="#3A6A9E",
                                 command=lambda: on_click(username))
        chat_btn.pack(side="right")

class MessageBubble(ctk.CTkFrame):
    def __init__(self, parent, username, message, time_str, is_own=False, msg_type="text"):
        super().__init__(parent, fg_color="transparent")

        bubble_color = "#2B5278" if is_own else "#182533"
        text_color = "#FFFFFF"
        align = "e" if is_own else "w"

        bubble_container = ctk.CTkFrame(self, fg_color="transparent")
        bubble_container.pack(fill="x", padx=10, pady=5)

        message_frame = ctk.CTkFrame(bubble_container, fg_color=bubble_color, corner_radius=15)
        message_frame.pack(anchor=align, padx=5)

        if not is_own:
            ctk.CTkLabel(message_frame, text=username, font=("Segoe UI", 12, "bold"),
                        text_color="#6AB7FF", anchor="w").pack(anchor="w", padx=12, pady=(8, 0))

        if msg_type == "voice":
            voice_frame = ctk.CTkFrame(message_frame, fg_color="transparent")
            voice_frame.pack(anchor="w", padx=12, pady=8)

            AnimatedButton(voice_frame, text="‚ñ∂", width=35, height=35,
                          corner_radius=17, fg_color="#4A90E2").pack(side="left", padx=(0, 10))

            ctk.CTkLabel(voice_frame, text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        font=("Segoe UI", 11), text_color=text_color).pack(side="left")
        else:
            ctk.CTkLabel(message_frame, text=message, font=("Segoe UI", 13),
                        text_color=text_color, anchor="w", wraplength=400,
                        justify="left").pack(anchor="w", padx=12, pady=(2, 4))

        ctk.CTkLabel(message_frame, text=time_str, font=("Segoe UI", 9),
                    text_color="#8B98A5", anchor="e").pack(anchor="e", padx=12, pady=(0, 6))

class ComenMessenger(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("Comen Messenger - Online")
        self.geometry("1000x700")
        self.resizable(False, False)
        self.center_window()

        self.network = NetworkManager(self)
        self.current_user = None
        self.current_chat = None
        self.user_data = None
        self.contacts_data = {}
        self.pending_responses = {}

        self.colors = {
            "bg_main": "#0E1621",
            "bg_secondary": "#17212B",
            "bg_chat": "#0E1621",
            "bg_input": "#182533",
            "accent": "#5288C1",
            "accent_hover": "#6BA3D7",
            "text": "#FFFFFF",
            "text_secondary": "#8B98A5",
            "online": "#4FBF67",
            "separator": "#2B3843"
        }

        self.configure(fg_color=self.colors["bg_main"])

        self.show_server_connect_screen()

    def center_window(self):
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def show_server_connect_screen(self):
        """–≠–∫—Ä–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        for widget in self.winfo_children():
            widget.destroy()

        main_frame = ctk.CTkFrame(self, fg_color=self.colors["bg_main"])
        main_frame.pack(fill="both", expand=True)

        center_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        center_frame.place(relx=0.5, rely=0.5, anchor="center")

        logo_frame = ctk.CTkFrame(center_frame, fg_color=self.colors["accent"],
                                 corner_radius=40, width=120, height=120)
        logo_frame.pack(pady=(0, 25))
        logo_frame.pack_propagate(False)

        ctk.CTkLabel(logo_frame, text="C", font=("Segoe UI", 60, "bold"),
                    text_color="white").place(relx=0.5, rely=0.5, anchor="center")

        ctk.CTkLabel(center_frame, text="Comen Messenger",
                    font=("Segoe UI", 46, "bold"),
                    text_color=self.colors["accent"]).pack(pady=(0, 10))

        ctk.CTkLabel(center_frame, text="–û–Ω–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è",
                    font=("Segoe UI", 15),
                    text_color=self.colors["text_secondary"]).pack(pady=(0, 40))

        form_frame = ctk.CTkFrame(center_frame, fg_color=self.colors["bg_secondary"],
                                 corner_radius=20, width=450, height=280)
        form_frame.pack(pady=20, padx=20)
        form_frame.pack_propagate(False)

        ctk.CTkLabel(form_frame, text="üåê –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞",
                    font=("Segoe UI", 13, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(30, 5))

        self.server_entry = ctk.CTkEntry(form_frame,
                                        placeholder_text="IP:PORT (–Ω–∞–ø—Ä–∏–º–µ—Ä 192.168.1.100:5555)",
                                        font=("Segoe UI", 14), height=50, corner_radius=12,
                                        border_width=0, fg_color=self.colors["bg_input"])
        self.server_entry.insert(0, "localhost:5555")
        self.server_entry.pack(fill="x", padx=30, pady=(0, 25))

        def connect():
            server_addr = self.server_entry.get().strip()
            if not server_addr:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!")
                return

            try:
                host, port = server_addr.split(':')
                port = int(port)

                if self.network.connect(host, port):
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!")
                    self.show_welcome_screen()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞\n{e}")

        AnimatedButton(form_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
                      width=390, height=55, corner_radius=12,
                      font=("Segoe UI", 15, "bold"),
                      fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=connect).pack(padx=30, pady=(0, 25))

        ctk.CTkLabel(form_frame, text="üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ localhost:5555",
                    font=("Segoe UI", 10), text_color=self.colors["text_secondary"],
                    wraplength=390).pack(padx=30)

    def show_welcome_screen(self):
        """–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        for widget in self.winfo_children():
            widget.destroy()

        main_frame = ctk.CTkFrame(self, fg_color=self.colors["bg_main"])
        main_frame.pack(fill="both", expand=True)

        center_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        center_frame.place(relx=0.5, rely=0.5, anchor="center")

        logo_frame = ctk.CTkFrame(center_frame, fg_color=self.colors["accent"],
                                 corner_radius=40, width=120, height=120)
        logo_frame.pack(pady=(0, 25))
        logo_frame.pack_propagate(False)

        ctk.CTkLabel(logo_frame, text="C", font=("Segoe UI", 60, "bold"),
                    text_color="white").place(relx=0.5, rely=0.5, anchor="center")

        ctk.CTkLabel(center_frame, text="Comen Messenger",
                    font=("Segoe UI", 46, "bold"),
                    text_color=self.colors["accent"]).pack(pady=(0, 10))

        ctk.CTkLabel(center_frame, text="–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä",
                    font=("Segoe UI", 15),
                    text_color=self.colors["text_secondary"]).pack(pady=(0, 50))

        AnimatedButton(center_frame, text="–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", width=320, height=55,
                      corner_radius=15, font=("Segoe UI", 15, "bold"),
                      fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=self.show_login_screen).pack(pady=(0, 15))

        AnimatedButton(center_frame, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", width=320, height=55,
                      corner_radius=15, font=("Segoe UI", 15),
                      fg_color=self.colors["bg_secondary"],
                      hover_color=self.colors["separator"],
                      command=self.show_register_screen).pack()

    def show_login_screen(self):
        """–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞"""
        for widget in self.winfo_children():
            widget.destroy()

        main_frame = ctk.CTkFrame(self, fg_color=self.colors["bg_main"])
        main_frame.pack(fill="both", expand=True)

        center_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        center_frame.place(relx=0.5, rely=0.5, anchor="center")

        AnimatedButton(main_frame, text="‚Üê –ù–∞–∑–∞–¥", width=100, height=35,
                      corner_radius=10, fg_color="transparent",
                      hover_color=self.colors["bg_secondary"],
                      command=self.show_welcome_screen).place(x=20, y=20)

        ctk.CTkLabel(center_frame, text="–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç",
                    font=("Segoe UI", 32, "bold"),
                    text_color=self.colors["text"]).pack(pady=(0, 30))

        form_frame = ctk.CTkFrame(center_frame, fg_color=self.colors["bg_secondary"],
                                 corner_radius=20, width=450, height=350)
        form_frame.pack(padx=20)
        form_frame.pack_propagate(False)

        ctk.CTkLabel(form_frame, text="üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    font=("Segoe UI", 13, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(30, 5))

        username_entry = ctk.CTkEntry(form_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ username",
                                      font=("Segoe UI", 14), height=50, corner_radius=12,
                                      border_width=0, fg_color=self.colors["bg_input"])
        username_entry.pack(fill="x", padx=30, pady=(0, 20))

        ctk.CTkLabel(form_frame, text="üîí –ü–∞—Ä–æ–ª—å",
                    font=("Segoe UI", 13, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(0, 5))

        password_entry = ctk.CTkEntry(form_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                                     font=("Segoe UI", 14), height=50, corner_radius=12,
                                     border_width=0, fg_color=self.colors["bg_input"], show="‚óè")
        password_entry.pack(fill="x", padx=30, pady=(0, 30))

        def login():
            username = username_entry.get().strip()
            password = password_entry.get().strip()

            if not username or not password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            password_hash = hashlib.sha256(password.encode()).hexdigest()

            self.network.send({
                'type': 'login',
                'username': username,
                'password': password_hash
            })

            self.pending_responses['login'] = username

        AnimatedButton(form_frame, text="–í–æ–π—Ç–∏", width=390, height=55,
                      corner_radius=12, font=("Segoe UI", 15, "bold"),
                      fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=login).pack(padx=30, pady=(0, 30))

    def show_register_screen(self):
        """–≠–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        for widget in self.winfo_children():
            widget.destroy()

        main_frame = ctk.CTkFrame(self, fg_color=self.colors["bg_main"])
        main_frame.pack(fill="both", expand=True)

        center_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        center_frame.place(relx=0.5, rely=0.5, anchor="center")

        AnimatedButton(main_frame, text="‚Üê –ù–∞–∑–∞–¥", width=100, height=35,
                      corner_radius=10, fg_color="transparent",
                      hover_color=self.colors["bg_secondary"],
                      command=self.show_welcome_screen).place(x=20, y=20)

        ctk.CTkLabel(center_frame, text="–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞",
                    font=("Segoe UI", 32, "bold"),
                    text_color=self.colors["text"]).pack(pady=(0, 20))

        form_frame = ctk.CTkFrame(center_frame, fg_color=self.colors["bg_secondary"],
                                 corner_radius=20, width=500, height=550)
        form_frame.pack(padx=20)
        form_frame.pack_propagate(False)

        avatar_frame = ctk.CTkFrame(form_frame, width=100, height=100,
                                   corner_radius=50, fg_color=self.colors["accent"])
        avatar_frame.pack(pady=(25, 10))
        avatar_frame.pack_propagate(False)

        self.avatar_label = ctk.CTkLabel(avatar_frame, text="üì∑",
                                        font=("Segoe UI", 40), text_color="white")
        self.avatar_label.place(relx=0.5, rely=0.5, anchor="center")

        self.selected_avatar = None

        def select_avatar():
            filename = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä",
                filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.gif *.bmp")]
            )
            if filename:
                self.selected_avatar = filename
                try:
                    img = Image.open(filename)
                    img = img.resize((100, 100), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    self.avatar_label.configure(image=photo, text="")
                    self.avatar_label.image = photo
                except:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        AnimatedButton(form_frame, text="–í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", width=200, height=35,
                      corner_radius=10, fg_color=self.colors["bg_input"],
                      hover_color=self.colors["separator"],
                      command=select_avatar).pack(pady=(0, 20))

        ctk.CTkLabel(form_frame, text="üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    font=("Segoe UI", 12, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(0, 5))

        username_entry = ctk.CTkEntry(form_frame, placeholder_text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ username",
                                      font=("Segoe UI", 13), height=45, corner_radius=12,
                                      border_width=0, fg_color=self.colors["bg_input"])
        username_entry.pack(fill="x", padx=30, pady=(0, 15))

        ctk.CTkLabel(form_frame, text="üìß Email",
                    font=("Segoe UI", 12, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(0, 5))

        email_entry = ctk.CTkEntry(form_frame, placeholder_text="your@email.com",
                                   font=("Segoe UI", 13), height=45, corner_radius=12,
                                   border_width=0, fg_color=self.colors["bg_input"])
        email_entry.pack(fill="x", padx=30, pady=(0, 15))

        ctk.CTkLabel(form_frame, text="üîí –ü–∞—Ä–æ–ª—å",
                    font=("Segoe UI", 12, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w", padx=30, pady=(0, 5))

        password_entry = ctk.CTkEntry(form_frame, placeholder_text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å",
                                     font=("Segoe UI", 13), height=45, corner_radius=12,
                                     border_width=0, fg_color=self.colors["bg_input"], show="‚óè")
        password_entry.pack(fill="x", padx=30, pady=(0, 25))

        def register():
            username = username_entry.get().strip()
            email = email_entry.get().strip()
            password = password_entry.get().strip()

            if not username or not email or not password:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            avatar_data = None
            if self.selected_avatar:
                with open(self.selected_avatar, 'rb') as f:
                    avatar_data = base64.b64encode(f.read()).decode()

            password_hash = hashlib.sha256(password.encode()).hexdigest()

            self.network.send({
                'type': 'register',
                'username': username,
                'email': email,
                'password': password_hash,
                'avatar': avatar_data
            })

        AnimatedButton(form_frame, text="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", width=440, height=50,
                      corner_radius=12, font=("Segoe UI", 14, "bold"),
                      fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=register).pack(padx=30, pady=(0, 30))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    def handle_register_response(self, message):
        if message['success']:
            self.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"))
            self.after(100, self.show_login_screen)
        else:
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", message['message']))

    def handle_login_response(self, message):
        if message['success']:
            username = self.pending_responses.get('login')
            self.current_user = username
            self.user_data = message['user_data']
            self.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"))
            self.after(100, self.show_main_app)

            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
            self.network.send({
                'type': 'get_contacts',
                'username': self.current_user
            })
        else:
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", message['message']))

    def handle_contacts_response(self, message):
        self.contacts_data = {c['username']: c for c in message['contacts']}
        self.after(0, self.refresh_contacts_list)

    def handle_search_response(self, message):
        if hasattr(self, 'search_results_frame'):
            self.after(0, lambda: self.display_search_results(message['results']))

    def handle_add_contact_response(self, message):
        if message['success']:
            self.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!"))
            self.network.send({
                'type': 'get_contacts',
                'username': self.current_user
            })

    def handle_incoming_message(self, message):
        sender = message['sender']

        # –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if self.current_chat == sender:
            if message['msg_type'] == 'text':
                self.after(0, lambda: self.display_message(
                    sender, message['text'], message['timestamp'], False, 'text'
                ))
            elif message['msg_type'] == 'voice':
                self.after(0, lambda: self.display_message(
                    sender, "", message['timestamp'], False, 'voice'
                ))

    def handle_user_status(self, message):
        username = message['username']
        status = message['status']

        if username in self.contacts_data:
            self.contacts_data[username]['online'] = (status == 'online')
            self.after(0, self.refresh_contacts_list)

    def handle_typing_indicator(self, message):
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏
        pass

    def handle_new_contact(self, message):
        self.after(0, lambda: messagebox.showinfo("–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç", message['message']))

    def handle_user_info_response(self, message):
        pass

    def handle_update_profile_response(self, message):
        if message['success']:
            self.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!"))

    def show_main_app(self):
        """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        for widget in self.winfo_children():
            widget.destroy()

        main_container = ctk.CTkFrame(self, fg_color=self.colors["bg_main"])
        main_container.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left_panel = ctk.CTkFrame(main_container, width=320, fg_color=self.colors["bg_secondary"])
        left_panel.pack(side="left", fill="y")
        left_panel.pack_propagate(False)

        # –•–µ–¥–µ—Ä
        left_header = ctk.CTkFrame(left_panel, height=70, fg_color=self.colors["bg_main"])
        left_header.pack(fill="x")
        left_header.pack_propagate(False)

        user_avatar_frame = ctk.CTkFrame(left_header, width=45, height=45,
                                        corner_radius=22, fg_color=self.colors["accent"])
        user_avatar_frame.pack(side="left", padx=(15, 10), pady=12)
        user_avatar_frame.pack_propagate(False)

        if self.user_data and self.user_data.get("avatar"):
            try:
                img_data = base64.b64decode(self.user_data["avatar"])
                img = Image.open(io.BytesIO(img_data))
                img = img.resize((45, 45), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                avatar_img = ctk.CTkLabel(user_avatar_frame, image=photo, text="")
                avatar_img.image = photo
                avatar_img.place(relx=0.5, rely=0.5, anchor="center")
            except:
                ctk.CTkLabel(user_avatar_frame, text=self.current_user[0].upper(),
                           font=("Segoe UI", 20, "bold"), text_color="white").place(
                    relx=0.5, rely=0.5, anchor="center")
        else:
            ctk.CTkLabel(user_avatar_frame, text=self.current_user[0].upper(),
                       font=("Segoe UI", 20, "bold"), text_color="white").place(
                relx=0.5, rely=0.5, anchor="center")

        ctk.CTkLabel(left_header, text=self.current_user,
                    font=("Segoe UI", 14, "bold"),
                    text_color=self.colors["text"]).pack(side="left", pady=12)

        AnimatedButton(left_header, text="‚öô", width=35, height=35,
                      corner_radius=17, fg_color="transparent",
                      hover_color=self.colors["separator"],
                      command=self.show_settings).pack(side="right", padx=(0, 10))

        AnimatedButton(left_header, text="+", width=35, height=35,
                      corner_radius=17, fg_color="transparent",
                      hover_color=self.colors["separator"],
                      command=self.show_add_contact).pack(side="right", padx=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel, height=60, fg_color="transparent")
        search_frame.pack(fill="x", padx=15, pady=(10, 5))
        search_frame.pack_propagate(False)

        ctk.CTkEntry(search_frame, placeholder_text="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...",
                    font=("Segoe UI", 13), height=45, corner_radius=22,
                    border_width=0, fg_color=self.colors["bg_input"]).pack(fill="both", expand=True)

        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contacts_frame = ctk.CTkScrollableFrame(left_panel, fg_color="transparent")
        self.contacts_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.refresh_contacts_list()

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.right_panel = ctk.CTkFrame(main_container, fg_color=self.colors["bg_chat"])
        self.right_panel.pack(side="right", fill="both", expand=True)

        ctk.CTkLabel(self.right_panel, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è",
                    font=("Segoe UI", 18),
                    text_color=self.colors["text_secondary"]).place(relx=0.5, rely=0.5, anchor="center")

    def refresh_contacts_list(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        for widget in self.contacts_frame.winfo_children():
            widget.destroy()

        if not self.contacts_data:
            ctk.CTkLabel(self.contacts_frame,
                        text="–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å",
                        font=("Segoe UI", 12),
                        text_color=self.colors["text_secondary"]).pack(pady=50)
            return

        for username, data in self.contacts_data.items():
            card = ContactCard(
                self.contacts_frame,
                username,
                data.get('bio', ''),
                data.get('avatar'),
                data.get('online', False),
                self.open_chat
            )
            card.pack(fill="x", pady=5)

    def show_add_contact(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        dialog.geometry("500x600")
        dialog.resizable(False, False)
        dialog.configure(fg_color=self.colors["bg_main"])

        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 250
        y = (dialog.winfo_screenheight() // 2) - 300
        dialog.geometry(f'500x600+{x}+{y}')

        ctk.CTkLabel(dialog, text="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    font=("Segoe UI", 24, "bold"),
                    text_color=self.colors["text"]).pack(pady=(20, 15))

        search_frame = ctk.CTkFrame(dialog, fg_color=self.colors["bg_secondary"],
                                   corner_radius=15, height=60)
        search_frame.pack(fill="x", padx=20, pady=(0, 15))
        search_frame.pack_propagate(False)

        search_entry = ctk.CTkEntry(search_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ email",
                                   font=("Segoe UI", 14), height=40, corner_radius=10,
                                   border_width=0, fg_color=self.colors["bg_input"])
        search_entry.pack(side="left", fill="both", expand=True, padx=15, pady=10)

        self.search_results_frame = ctk.CTkScrollableFrame(dialog, fg_color="transparent")
        self.search_results_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        def search():
            query = search_entry.get().strip()
            if not query:
                return

            self.network.send({
                'type': 'search_users',
                'query': query
            })

        AnimatedButton(search_frame, text="üîç", width=50, height=40,
                      corner_radius=10, fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=search).pack(side="right", padx=(5, 15), pady=10)

        search_entry.bind("<Return>", lambda e: search())

    def display_search_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        for widget in self.search_results_frame.winfo_children():
            widget.destroy()

        for result in results:
            if result["username"] == self.current_user:
                continue

            result_frame = ctk.CTkFrame(self.search_results_frame,
                                      fg_color=self.colors["bg_secondary"],
                                      corner_radius=12)
            result_frame.pack(fill="x", pady=5)

            info_frame = ctk.CTkFrame(result_frame, fg_color="transparent")
            info_frame.pack(fill="x", padx=15, pady=15)

            ctk.CTkLabel(info_frame, text=result["username"],
                        font=("Segoe UI", 14, "bold"),
                        text_color=self.colors["text"]).pack(anchor="w")

            ctk.CTkLabel(info_frame, text=result["email"],
                        font=("Segoe UI", 11),
                        text_color=self.colors["text_secondary"]).pack(anchor="w")

            status_text = "üü¢ –æ–Ω–ª–∞–π–Ω" if result.get('online') else result["bio"]
            ctk.CTkLabel(info_frame, text=status_text,
                        font=("Segoe UI", 11),
                        text_color=self.colors["text_secondary"]).pack(anchor="w", pady=(5, 0))

            if result["username"] in self.contacts_data:
                ctk.CTkLabel(result_frame, text="‚úì –í –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö",
                            font=("Segoe UI", 11),
                            text_color=self.colors["online"]).pack(pady=(0, 10))
            else:
                def add_contact(username=result["username"]):
                    self.network.send({
                        'type': 'add_contact',
                        'username': self.current_user,
                        'contact': username
                    })

                AnimatedButton(result_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                              width=200, height=35, corner_radius=10,
                              fg_color=self.colors["accent"],
                              hover_color=self.colors["accent_hover"],
                              command=add_contact).pack(pady=(0, 10))

    def show_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        dialog.geometry("500x400")
        dialog.resizable(False, False)
        dialog.configure(fg_color=self.colors["bg_main"])

        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 250
        y = (dialog.winfo_screenheight() // 2) - 200
        dialog.geometry(f'500x400+{x}+{y}')

        ctk.CTkLabel(dialog, text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    font=("Segoe UI", 28, "bold"),
                    text_color=self.colors["text"]).pack(pady=(20, 20))

        info_frame = ctk.CTkFrame(dialog, fg_color=self.colors["bg_secondary"],
                                 corner_radius=12)
        info_frame.pack(fill="x", padx=20, pady=(0, 20))

        if self.user_data:
            ctk.CTkLabel(info_frame, text=f"Username: {self.current_user}",
                        font=("Segoe UI", 13),
                        text_color=self.colors["text"]).pack(anchor="w", padx=20, pady=(15, 5))

            ctk.CTkLabel(info_frame, text=f"Email: {self.user_data.get('email', '')}",
                        font=("Segoe UI", 13),
                        text_color=self.colors["text"]).pack(anchor="w", padx=20, pady=(0, 5))

            ctk.CTkLabel(info_frame, text=f"–°—Ç–∞—Ç—É—Å: {self.user_data.get('bio', '')}",
                        font=("Segoe UI", 13),
                        text_color=self.colors["text"]).pack(anchor="w", padx=20, pady=(0, 15))

        AnimatedButton(dialog, text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
                      width=460, height=50, corner_radius=12,
                      fg_color="#FF4444", hover_color="#CC0000",
                      command=lambda: [dialog.destroy(), self.network.disconnect(), self.show_server_connect_screen()]).pack(padx=20, pady=(0, 20))

    def open_chat(self, contact_username):
        """–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"""
        self.current_chat = contact_username

        for widget in self.right_panel.winfo_children():
            widget.destroy()

        # –•–µ–¥–µ—Ä —á–∞—Ç–∞
        chat_header = ctk.CTkFrame(self.right_panel, height=70,
                                   fg_color=self.colors["bg_secondary"])
        chat_header.pack(fill="x")
        chat_header.pack_propagate(False)

        contact_data = self.contacts_data.get(contact_username, {})

        # –ê–≤–∞—Ç–∞—Ä
        avatar_frame = ctk.CTkFrame(chat_header, width=45, height=45,
                                   corner_radius=22, fg_color=self.colors["accent"])
        avatar_frame.pack(side="left", padx=(20, 12), pady=12)
        avatar_frame.pack_propagate(False)

        if contact_data.get("avatar"):
            try:
                img_data = base64.b64decode(contact_data["avatar"])
                img = Image.open(io.BytesIO(img_data))
                img = img.resize((45, 45), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                avatar_img = ctk.CTkLabel(avatar_frame, image=photo, text="")
                avatar_img.image = photo
                avatar_img.place(relx=0.5, rely=0.5, anchor="center")
            except:
                ctk.CTkLabel(avatar_frame, text=contact_username[0].upper(),
                           font=("Segoe UI", 20, "bold"), text_color="white").place(
                    relx=0.5, rely=0.5, anchor="center")
        else:
            ctk.CTkLabel(avatar_frame, text=contact_username[0].upper(),
                       font=("Segoe UI", 20, "bold"), text_color="white").place(
                relx=0.5, rely=0.5, anchor="center")

        # –ò–º—è
        info_frame = ctk.CTkFrame(chat_header, fg_color="transparent")
        info_frame.pack(side="left", pady=12)

        ctk.CTkLabel(info_frame, text=contact_username,
                    font=("Segoe UI", 16, "bold"),
                    text_color=self.colors["text"]).pack(anchor="w")

        status_text = "‚óè –æ–Ω–ª–∞–π–Ω" if contact_data.get('online') else "–æ—Ñ—Ñ–ª–∞–π–Ω"
        status_color = self.colors["online"] if contact_data.get('online') else self.colors["text_secondary"]

        ctk.CTkLabel(info_frame, text=status_text,
                    font=("Segoe UI", 11),
                    text_color=status_color).pack(anchor="w")

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_scroll = ctk.CTkScrollableFrame(self.right_panel,
                                                  fg_color=self.colors["bg_chat"])
        self.chat_scroll.pack(fill="both", expand=True)

        self.display_system_message(f"–ß–∞—Ç —Å {contact_username}")

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_container = ctk.CTkFrame(self.right_panel, height=90,
                                      fg_color=self.colors["bg_secondary"])
        input_container.pack(fill="x")
        input_container.pack_propagate(False)

        input_frame = ctk.CTkFrame(input_container, fg_color="transparent")
        input_frame.pack(fill="both", expand=True, padx=15, pady=15)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry = ctk.CTkTextbox(input_frame, height=60, corner_radius=15,
                                           fg_color=self.colors["bg_input"],
                                           border_width=0, font=("Segoe UI", 13), wrap="word")
        self.message_entry.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        AnimatedButton(input_frame, text="‚û§", width=60, height=60,
                      corner_radius=30, font=("Segoe UI", 24),
                      fg_color=self.colors["accent"],
                      hover_color=self.colors["accent_hover"],
                      command=self.send_message_to_contact).pack(side="right")

    def send_message_to_contact(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
        message = self.message_entry.get("1.0", "end-1c").strip()

        if not message or not self.current_chat:
            return

        timestamp = datetime.datetime.now().strftime("%H:%M")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        self.network.send({
            'type': 'text_message',
            'sender': self.current_user,
            'recipient': self.current_chat,
            'text': message,
            'timestamp': timestamp
        })

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.display_message(self.current_user, message, timestamp, True, 'text')
        self.message_entry.delete("1.0", "end")

    def display_message(self, username, message, time_str, is_own=False, msg_type="text"):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        bubble = MessageBubble(self.chat_scroll, username, message, time_str, is_own, msg_type)
        self.after(100, lambda: self.chat_scroll._parent_canvas.yview_moveto(1.0))

    def display_system_message(self, message):
        """–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        system_frame = ctk.CTkFrame(self.chat_scroll, fg_color="transparent")
        system_frame.pack(fill="x", pady=8)

        ctk.CTkLabel(system_frame, text=message, font=("Segoe UI", 11, "italic"),
                    text_color=self.colors["text_secondary"]).pack()

        self.after(100, lambda: self.chat_scroll._parent_canvas.yview_moveto(1.0))

if __name__ == "__main__":
    app = ComenMessenger()
    app.mainloop()
