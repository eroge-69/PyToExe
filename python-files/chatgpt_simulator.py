"""
ChatGPT Simulator (V2) ‚Äî Python app v·ªõi giao di·ªán ƒë·∫πp & animation chill
--------------------------------------------------
- tkinter + ttkbootstrap (theme ƒë·∫πp, hi·ªán ƒë·∫°i)
- Animation typing m∆∞·ª£t
- Random bot replies (template, Markov, bi·∫øn ƒë·ªïi ng·∫´u nhi√™n)
- C√≥ l·ªçc text ch·ªëng k√Ω t·ª± r√°c
- T√πy ch·ªânh theme (Dark/Light/Flatly/Cosmo‚Ä¶)
- Persona ch·ªçn ƒë∆∞·ª£c (Friendly, Sassy, Philosopher, Coder, Poet)

Ch·∫°y: pip install ttkbootstrap
       python chatgpt_simulator.py
"""

import tkinter as tk
from tkinter import filedialog, messagebox
import ttkbootstrap as tb
import threading, random, time, json, re

# -----------------------------
# Data corpus
# -----------------------------
SAMPLE_CORPUS = [
    "Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω ·∫£o ‚Äî b·∫°n c·∫ßn g√¨ n√†o?",
    "B·∫°n ƒëang l√†m g√¨ h√¥m nay? M√¨nh th√≠ch h·ªçc ng√¥n ng·ªØ m·ªõi.",
    "N·∫øu b·∫°n c·∫ßn √Ω t∆∞·ªüng, m√¨nh c√≥ th·ªÉ g·ª£i √Ω tr√≤ ch∆°i ho·∫∑c c√¥ng th·ª©c n·∫•u ƒÉn.",
    "C√≥ m·ªôt ch√∫ m√®o bay tr√™n ƒë√°m m√¢y t√¨m th·∫•y chi·∫øc b√°nh pizza.",
    "H√£y chia vi·ªác kh√≥ th√†nh nhi·ªÅu b∆∞·ªõc nh·ªè, s·∫Ω d·ªÖ d√†ng h∆°n.",
    "B·∫°n mu·ªën nghe m·ªôt g·ª£i √Ω s√°ng t·∫°o? K·∫øt h·ª£p hai √Ω t∆∞·ªüng tr√°i ng∆∞·ª£c.",
    "Th·ªùi ti·∫øt trong tr√≠ t∆∞·ªüng t∆∞·ª£ng: tr·ªùi n·∫Øng, m√¢y nh·∫£y m√∫a.",
    "Lu√¥n gi·ªØ tinh th·∫ßn t√≤ m√≤ v√† nh·∫π nh√†ng nh√©!"
]

# -----------------------------
# Clean text
# -----------------------------
def clean_text(txt):
    return re.sub(r"[^0-9a-zA-Z√Ä-·ªπ .,!?-]", "", txt)

# -----------------------------
# Markov Generator
# -----------------------------
class MarkovGenerator:
    def __init__(self, corpus=None, k=1):
        self.k = k
        self.corpus = corpus or SAMPLE_CORPUS
        self.model = {}
        self._build()

    def _build(self):
        self.model.clear()
        for line in self.corpus:
            tokens = line.split()
            if len(tokens) <= self.k:
                continue
            for i in range(len(tokens) - self.k):
                key = tuple(tokens[i:i+self.k])
                nxt = tokens[i+self.k]
                self.model.setdefault(key, []).append(nxt)
        starts = []
        for line in self.corpus:
            t = line.split()
            if len(t) >= self.k:
                starts.append(tuple(t[:self.k]))
        if starts:
            self.model['_starts'] = starts

    def generate(self, max_words=25):
        if not self.model:
            return random.choice(self.corpus)
        starts = self.model.get('_starts') or list(self.model.keys())
        key = random.choice(starts)
        out = list(key)
        for _ in range(max_words - self.k):
            choices = self.model.get(tuple(out[-self.k:]))
            if not choices:
                break
            out.append(random.choice(choices))
        return clean_text(' '.join(out))

# -----------------------------
# Random response
# -----------------------------
PERSONAS = {
    'Friendly': 'üôÇ',
    'Sassy': 'üòè',
    'Philosopher': 'üí≠',
    'Coder': 'üë®‚Äçüíª',
    'Poet': 'üéµ'
}

GREETINGS = ["Ch√†o", "Xin ch√†o", "Hey", "Hiya"]
FOLLOWUPS = ["m√¨nh c√≥ v√†i g·ª£i √Ω.", "c·ª© ti·∫øp t·ª•c ‚Äî m√¨nh l·∫Øng nghe.", "b·∫°n mu·ªën m√¨nh d√≠ d·ªèm hay nghi√™m t√∫c?"]
OPINIONS = ["ƒëi b·ªô bu·ªïi s√°ng t·ªët cho n√£o", "c√† ph√™ ngon h∆°n khi ·∫•m", "AI gi√∫p s√°ng t·∫°o n·∫øu d√πng ƒë√∫ng"]
IDEAS = ["app nh·∫Øc t∆∞·ªõi c√¢y", "tr√≤ ch∆°i puzzle √¢m nh·∫°c", "blog ·∫£nh m·ªói ng√†y"]
SUGGESTIONS = ["Pomodoro 25 ph√∫t", "vi·∫øt 3 √Ω t∆∞·ªüng trong 10 ph√∫t", "d·ªçn h·ªôp mail b·∫±ng zero-inbox"]
ANSWERS = ["C√≥ l·∫Ω", "Kh√¥ng ch·∫Øc", "R·∫•t c√≥ th·ªÉ", "C√≤n tu·ª≥"]

TEMPLATES = [
    "{greeting}! {followup}",
    "M√¨nh nghƒ© r·∫±ng {opinion}.",
    "B·∫°n h·ªèi: '{question}' ‚Äî c√≥ th·ªÉ l√† {answer}.",
    "√ù t∆∞·ªüng ng·∫´u nhi√™n: {idea}.",
    "Th·ª≠ nh√©: {suggestion}."
]

def gen_from_template(user_msg):
    tpl = random.choice(TEMPLATES)
    subs = {
        'greeting': random.choice(GREETINGS),
        'followup': random.choice(FOLLOWUPS),
        'opinion': random.choice(OPINIONS),
        'question': user_msg,
        'answer': random.choice(ANSWERS) + ', ' + random.choice(OPINIONS),
        'idea': random.choice(IDEAS),
        'suggestion': random.choice(SUGGESTIONS)
    }
    return clean_text(tpl.format(**subs))

# -----------------------------
# App
# -----------------------------
class ChatSimulatorApp:
    def __init__(self, root):
        self.root = root
        self.style = tb.Style("flatly")  # default ƒë·∫πp
        root.title("ChatGPT Simulator ‚Äî Local")
        root.geometry("850x600")

        self.markov = MarkovGenerator()
        self.chat_history = []
        self.persona = tk.StringVar(value='Friendly')

        self._build_ui()
        self._append_bot(self._greet())

    def _build_ui(self):
        top = tb.Frame(self.root)
        top.pack(side='top', fill='x', pady=6)
        tb.Button(top, text="V√°n m·ªõi", command=self.new_chat).pack(side='left', padx=4)
        tb.Button(top, text="L∆∞u", command=self.save_chat).pack(side='left', padx=4)
        tb.OptionMenu(top, self.persona, *PERSONAS.keys()).pack(side='left', padx=10)

        self.chat_text = tk.Text(self.root, wrap='word', font=("Segoe UI", 11), bg="white", fg="black")
        self.chat_text.pack(expand=True, fill='both', padx=10, pady=6)
        self.chat_text.config(state='disabled')

        bottom = tb.Frame(self.root)
        bottom.pack(side='bottom', fill='x', pady=8)
        self.entry = tb.Entry(bottom)
        self.entry.pack(side='left', fill='x', expand=True, padx=6)
        self.entry.bind('<Return>', lambda e: self.on_send())
        tb.Button(bottom, text="G·ª≠i", bootstyle="success", command=self.on_send).pack(side='right', padx=6)

    # ----------------
    def _append_text(self, txt, tag=None, delay=0):
        self.chat_text.config(state='normal')
        for ch in txt:
            self.chat_text.insert('end', ch, tag)
            self.chat_text.see('end')
            self.chat_text.update_idletasks()
            time.sleep(delay)
        self.chat_text.insert('end', "\n")
        self.chat_text.config(state='disabled')

    def _append_user(self, text):
        self.chat_history.append({'role': 'user', 'text': text})
        self._append_text("B·∫°n: " + text, delay=0)

    def _append_bot(self, text):
        self.chat_history.append({'role': 'bot', 'text': text})
        self._append_text("Bot: " + text, delay=0.01)

    def _greet(self):
        return random.choice(GREETINGS) + "! " + random.choice(FOLLOWUPS)

    def on_send(self):
        msg = self.entry.get().strip()
        if not msg:
            return
        self.entry.delete(0, 'end')
        self._append_user(msg)
        threading.Thread(target=self._reply, args=(msg,), daemon=True).start()

    def _reply(self, user_msg):
        time.sleep(0.3)
        persona = self.persona.get()
        reply = random.choice([
            gen_from_template(user_msg),
            self.markov.generate(),
            f"M√¨nh nghe b·∫°n n√≥i: '{user_msg}', th√∫ v·ªã ƒë·∫•y!"
        ])
        reply = PERSONAS.get(persona, '') + " " + reply
        self._append_bot(reply)

    def new_chat(self):
        self.chat_text.config(state='normal')
        self.chat_text.delete('1.0', 'end')
        self.chat_text.config(state='disabled')
        self.chat_history.clear()
        self._append_bot(self._greet())

    def save_chat(self):
        if not self.chat_history:
            messagebox.showinfo("L∆∞u", "Kh√¥ng c√≥ g√¨ ƒë·ªÉ l∆∞u.")
            return
        f = filedialog.asksaveasfilename(defaultextension='.json')
        if f:
            with open(f, 'w', encoding='utf-8') as fh:
                json.dump(self.chat_history, fh, ensure_ascii=False, indent=2)
            messagebox.showinfo("L∆∞u", f"ƒê√£ l∆∞u v√†o: {f}")

# -----------------------------
if __name__ == "__main__":
    root = tk.Tk()
    app = ChatSimulatorApp(root)
    root.mainloop()
