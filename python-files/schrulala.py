import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import os
import json
import threading
import time
import zipfile
import rarfile
import py7zr
from pathlib import Path
import re
from datetime import datetime
from PIL import Image, ImageTk
import configparser

class ModernArchiveAnalyzer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Archive Cookie Analyzer Pro")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = configparser.ConfigParser()
        self.config_file = "config.ini"
        self.passwords_file = "passwords.txt"
        self.results_file = "results.txt"
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.current_language = tk.StringVar(value="ru")
        self.current_theme = tk.StringVar(value="dark")
        self.background_image = None
        self.found_cookies = []
        self.stats = {"processed_archives": 0, "found_cookies": 0, "total_files": 0}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        self.translations = {
            "ru": {
                "title": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—Ä—Ö–∏–≤–æ–≤ - Pro –≤–µ—Ä—Å–∏—è",
                "select_file": "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
                "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                "results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "statistics": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "language": "–Ø–∑—ã–∫:",
                "theme": "–¢–µ–º–∞:",
                "background": "–§–æ–Ω:",
                "load_bg": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω",
                "remove_bg": "–£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω",
                "start_analysis": "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
                "stop_analysis": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                "progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å:",
                "status": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞...",
                "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "found": "–ù–∞–π–¥–µ–Ω–æ:",
                "processed": "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:",
                "files": "—Ñ–∞–π–ª–æ–≤",
                "archives": "–∞—Ä—Ö–∏–≤–æ–≤",
                "cookies": "cookies"
            },
            "en": {
                "title": "Archive Analyzer - Pro Version",
                "select_file": "Select File",
                "settings": "Settings",
                "results": "Results",
                "statistics": "Statistics",
                "language": "Language:",
                "theme": "Theme:",
                "background": "Background:",
                "load_bg": "Load Background",
                "remove_bg": "Remove Background",
                "start_analysis": "Start Analysis",
                "stop_analysis": "Stop",
                "progress": "Progress:",
                "status": "Ready",
                "processing": "Processing...",
                "completed": "Completed",
                "found": "Found:",
                "processed": "Processed:",
                "files": "files",
                "archives": "archives",
                "cookies": "cookies"
            }
        }
        
        # –¢–µ–º—ã
        self.themes = {
            "dark": {
                "bg": "#2b2b2b",
                "fg": "#ffffff",
                "select_bg": "#404040",
                "button_bg": "#0078d4",
                "button_fg": "#ffffff",
                "entry_bg": "#404040",
                "frame_bg": "#363636"
            },
            "light": {
                "bg": "#ffffff",
                "fg": "#000000",
                "select_bg": "#e3f2fd",
                "button_bg": "#2196f3",
                "button_fg": "#ffffff",
                "entry_bg": "#f5f5f5",
                "frame_bg": "#f0f0f0"
            },
            "blue": {
                "bg": "#1e3a8a",
                "fg": "#ffffff",
                "select_bg": "#3b82f6",
                "button_bg": "#06b6d4",
                "button_fg": "#ffffff",
                "entry_bg": "#1e40af",
                "frame_bg": "#1d4ed8"
            }
        }
        
        self.setup_ui()
        self.apply_theme()
        self.center_window()
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤", command=self.select_file)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.main_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.main_frame, text="–ê–Ω–∞–ª–∏–∑")
        self.setup_main_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setup_settings_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.results_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.setup_results_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = tk.Frame(self.root, height=30)
        self.status_frame.pack(side="bottom", fill="x")
        self.status_frame.pack_propagate(False)
        
        self.status_label = tk.Label(self.status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", anchor="w")
        self.status_label.pack(side="left", padx=10, pady=5)
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.status_frame, variable=self.progress_var, length=200)
        self.progress_bar.pack(side="right", padx=10, pady=5)
    
    def setup_main_tab(self):
        # –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.bg_label = tk.Label(self.main_frame)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        
        # –ì–ª–∞–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_container = tk.Frame(self.main_frame, bg="#2b2b2b", relief="raised", bd=2)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_container, text="üîç Archive Cookie Analyzer Pro", 
                              font=("Arial", 24, "bold"), fg="#0078d4", bg="#2b2b2b")
        title_label.pack(pady=20)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_frame = tk.Frame(main_container, bg="#363636", relief="groove", bd=2)
        file_frame.pack(fill="x", padx=20, pady=10)
        
        file_label = tk.Label(file_frame, text="üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
                             font=("Arial", 14), fg="#ffffff", bg="#363636")
        file_label.pack(pady=10)
        
        self.file_path_var = tk.StringVar()
        file_entry = tk.Entry(file_frame, textvariable=self.file_path_var, 
                             font=("Arial", 12), width=50, bg="#404040", fg="#ffffff")
        file_entry.pack(pady=5)
        
        file_btn = tk.Button(file_frame, text="üîç –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                            command=self.select_file, font=("Arial", 12, "bold"),
                            bg="#0078d4", fg="#ffffff", relief="flat", padx=20, pady=5)
        file_btn.pack(pady=10)
        
        # –û–±–ª–∞—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(main_container, bg="#363636", relief="groove", bd=2)
        control_frame.pack(fill="x", padx=20, pady=10)
        
        self.start_btn = tk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", 
                                  command=self.start_analysis, font=("Arial", 14, "bold"),
                                  bg="#28a745", fg="#ffffff", relief="flat", padx=30, pady=10)
        self.start_btn.pack(side="left", padx=20, pady=20)
        
        self.stop_btn = tk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                 command=self.stop_analysis, font=("Arial", 14, "bold"),
                                 bg="#dc3545", fg="#ffffff", relief="flat", padx=30, pady=10,
                                 state="disabled")
        self.stop_btn.pack(side="left", padx=10, pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(main_container, bg="#363636", relief="groove", bd=2)
        info_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        info_label = tk.Label(info_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                             font=("Arial", 16, "bold"), fg="#ffffff", bg="#363636")
        info_label.pack(pady=10)
        
        stats_frame = tk.Frame(info_frame, bg="#363636")
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        self.stats_labels = {}
        stats_items = [
            ("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ö–∏–≤–æ–≤:", "processed_archives"),
            ("–ù–∞–π–¥–µ–Ω–æ cookies:", "found_cookies"),
            ("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:", "total_files")
        ]
        
        for i, (text, key) in enumerate(stats_items):
            frame = tk.Frame(stats_frame, bg="#404040", relief="raised", bd=1)
            frame.pack(fill="x", pady=5)
            
            tk.Label(frame, text=text, font=("Arial", 12), 
                    fg="#ffffff", bg="#404040").pack(side="left", padx=10, pady=5)
            
            self.stats_labels[key] = tk.Label(frame, text="0", font=("Arial", 12, "bold"), 
                                             fg="#0078d4", bg="#404040")
            self.stats_labels[key].pack(side="right", padx=10, pady=5)
    
    def setup_settings_tab(self):
        settings_container = tk.Frame(self.settings_frame, bg="#2b2b2b")
        settings_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        title = tk.Label(settings_container, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                        font=("Arial", 20, "bold"), fg="#0078d4", bg="#2b2b2b")
        title.pack(pady=20)
        
        # –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        lang_frame = tk.LabelFrame(settings_container, text="üåê –Ø–∑—ã–∫", 
                                  font=("Arial", 14), fg="#ffffff", bg="#363636")
        lang_frame.pack(fill="x", pady=10)
        
        lang_options = [("–†—É—Å—Å–∫–∏–π", "ru"), ("English", "en")]
        for text, value in lang_options:
            tk.Radiobutton(lang_frame, text=text, variable=self.current_language, 
                          value=value, font=("Arial", 12), fg="#ffffff", bg="#363636",
                          selectcolor="#0078d4", command=self.change_language).pack(side="left", padx=20, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        theme_frame = tk.LabelFrame(settings_container, text="üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", 
                                   font=("Arial", 14), fg="#ffffff", bg="#363636")
        theme_frame.pack(fill="x", pady=10)
        
        theme_options = [("–¢—ë–º–Ω–∞—è", "dark"), ("–°–≤–µ—Ç–ª–∞—è", "light"), ("–°–∏–Ω—è—è", "blue")]
        for text, value in theme_options:
            tk.Radiobutton(theme_frame, text=text, variable=self.current_theme, 
                          value=value, font=("Arial", 12), fg="#ffffff", bg="#363636",
                          selectcolor="#0078d4", command=self.apply_theme).pack(side="left", padx=20, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞
        bg_frame = tk.LabelFrame(settings_container, text="üñºÔ∏è –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                font=("Arial", 14), fg="#ffffff", bg="#363636")
        bg_frame.pack(fill="x", pady=10)
        
        bg_btn_frame = tk.Frame(bg_frame, bg="#363636")
        bg_btn_frame.pack(pady=10)
        
        load_bg_btn = tk.Button(bg_btn_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω", 
                               command=self.load_background, font=("Arial", 12),
                               bg="#0078d4", fg="#ffffff", relief="flat", padx=20, pady=5)
        load_bg_btn.pack(side="left", padx=10)
        
        remove_bg_btn = tk.Button(bg_btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω", 
                                 command=self.remove_background, font=("Arial", 12),
                                 bg="#dc3545", fg="#ffffff", relief="flat", padx=20, pady=5)
        remove_bg_btn.pack(side="left", padx=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª–µ–π
        pwd_frame = tk.LabelFrame(settings_container, text="üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª–µ–π", 
                                 font=("Arial", 14), fg="#ffffff", bg="#363636")
        pwd_frame.pack(fill="x", pady=10)
        
        pwd_btn = tk.Button(pwd_frame, text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π", 
                           command=self.edit_passwords, font=("Arial", 12),
                           bg="#28a745", fg="#ffffff", relief="flat", padx=20, pady=10)
        pwd_btn.pack(pady=10)
    
    def setup_results_tab(self):
        results_container = tk.Frame(self.results_frame, bg="#2b2b2b")
        results_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(results_container, text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", 
                        font=("Arial", 20, "bold"), fg="#0078d4", bg="#2b2b2b")
        title.pack(pady=20)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        text_frame = tk.Frame(results_container, bg="#363636", relief="groove", bd=2)
        text_frame.pack(fill="both", expand=True, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ("–í—Ä–µ–º—è", "–ê—Ä—Ö–∏–≤", "–ü—É—Ç—å", "Cookie")
        self.results_tree = ttk.Treeview(text_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.results_tree.heading("–í—Ä–µ–º—è", text="–í—Ä–µ–º—è")
        self.results_tree.heading("–ê—Ä—Ö–∏–≤", text="–ê—Ä—Ö–∏–≤")
        self.results_tree.heading("–ü—É—Ç—å", text="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        self.results_tree.heading("Cookie", text="–ù–∞–π–¥–µ–Ω–Ω—ã–π Cookie")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.results_tree.column("–í—Ä–µ–º—è", width=150)
        self.results_tree.column("–ê—Ä—Ö–∏–≤", width=200)
        self.results_tree.column("–ü—É—Ç—å", width=300)
        self.results_tree.column("Cookie", width=400)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        scrollbar_y = ttk.Scrollbar(text_frame, orient="vertical", command=self.results_tree.yview)
        scrollbar_x = ttk.Scrollbar(text_frame, orient="horizontal", command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
        
        self.results_tree.pack(side="left", fill="both", expand=True)
        scrollbar_y.pack(side="right", fill="y")
        scrollbar_x.pack(side="bottom", fill="x")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        btn_frame = tk.Frame(results_container, bg="#2b2b2b")
        btn_frame.pack(fill="x", pady=10)
        
        clear_btn = tk.Button(btn_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
                             command=self.clear_results, font=("Arial", 12),
                             bg="#dc3545", fg="#ffffff", relief="flat", padx=20, pady=5)
        clear_btn.pack(side="left", padx=10)
        
        export_btn = tk.Button(btn_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª", 
                              command=self.export_results, font=("Arial", 12),
                              bg="#28a745", fg="#ffffff", relief="flat", padx=20, pady=5)
        export_btn.pack(side="left", padx=10)
    
    def select_file(self):
        filetypes = [
            ("–ê—Ä—Ö–∏–≤—ã", "*.zip;*.rar;*.7z"),
            ("ZIP —Ñ–∞–π–ª—ã", "*.zip"),
            ("RAR —Ñ–∞–π–ª—ã", "*.rar"),
            ("7Z —Ñ–∞–π–ª—ã", "*.7z"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            filetypes=filetypes
        )
        
        if filename:
            self.file_path_var.set(filename)
            self.update_status(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(filename)}")
    
    def start_analysis(self):
        if not self.file_path_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        self.analysis_thread = threading.Thread(target=self.analyze_archive)
        self.analysis_thread.daemon = True
        self.analysis_thread.start()
    
    def stop_analysis(self):
        self.stop_btn.config(state="disabled")
        self.start_btn.config(state="normal")
        self.update_status("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def analyze_archive(self):
        try:
            archive_path = self.file_path_var.get()
            self.update_status("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–∞ –∏ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
            archive = self.open_archive(archive_path)
            if not archive:
                return
            
            self.stats["processed_archives"] += 1
            self.update_stats()
            
            # –ü–æ–∏—Å–∫ cookies –≤ –∞—Ä—Ö–∏–≤–µ
            self.search_cookies_in_archive(archive, archive_path)
            
            archive.close()
            self.update_status("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.start_btn.config(state="normal")
            self.stop_btn.config(state="disabled")
    
    def open_archive(self, archive_path):
        file_ext = os.path.splitext(archive_path)[1].lower()
        
        try:
            if file_ext == '.zip':
                return self.open_zip_archive(archive_path)
            elif file_ext == '.rar':
                return self.open_rar_archive(archive_path)
            elif file_ext == '.7z':
                return self.open_7z_archive(archive_path)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞")
                return None
        except Exception as e:
            if "password" in str(e).lower() or "wrong password" in str(e).lower():
                return self.try_passwords(archive_path, file_ext)
            else:
                raise e
    
    def open_zip_archive(self, path, password=None):
        if password:
            return zipfile.ZipFile(path, 'r', pwd=password.encode())
        else:
            return zipfile.ZipFile(path, 'r')
    
    def open_rar_archive(self, path, password=None):
        archive = rarfile.RarFile(path, 'r')
        if password:
            archive.setpassword(password)
        return archive
    
    def open_7z_archive(self, path, password=None):
        if password:
            return py7zr.SevenZipFile(path, mode='r', password=password)
        else:
            return py7zr.SevenZipFile(path, mode='r')
    
    def try_passwords(self, archive_path, file_ext):
        passwords = self.load_passwords()
        
        for password in passwords:
            try:
                self.update_status(f"–ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å: {password}")
                if file_ext == '.zip':
                    archive = self.open_zip_archive(archive_path, password)
                elif file_ext == '.rar':
                    archive = self.open_rar_archive(archive_path, password)
                elif file_ext == '.7z':
                    archive = self.open_7z_archive(archive_path, password)
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª—Å—è
                if file_ext == '.zip':
                    archive.testzip()
                
                self.update_status(f"–ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: {password}")
                return archive
                
            except:
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password = simpledialog.askstring("–ü–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞:", show='*')
        if password:
            try:
                if file_ext == '.zip':
                    archive = self.open_zip_archive(archive_path, password)
                elif file_ext == '.rar':
                    archive = self.open_rar_archive(archive_path, password)
                elif file_ext == '.7z':
                    archive = self.open_7z_archive(archive_path, password)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ —Å–ø–∏—Å–æ–∫
                self.add_password(password)
                return archive
                
            except:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                return None
        
        return None
    
    def search_cookies_in_archive(self, archive, archive_path):
        target_string = "_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_CAEaAhAB"
        
        try:
            if hasattr(archive, 'namelist'):
                file_list = archive.namelist()
            else:
                file_list = archive.getnames()
            
            total_files = len(file_list)
            self.stats["total_files"] += total_files
            
            for i, file_path in enumerate(file_list):
                if self.stop_btn.cget('state') == 'disabled':  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                    break
                
                progress = (i / total_files) * 100
                self.progress_var.set(progress)
                self.update_status(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Cookies
                if 'cookies' in file_path.lower() and not file_path.endswith('/'):
                    try:
                        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        if hasattr(archive, 'read'):
                            file_content = archive.read(file_path)
                        else:
                            file_content = archive.extractall(file_path)
                        
                        if isinstance(file_content, bytes):
                            file_content = file_content.decode('utf-8', errors='ignore')
                        
                        # –ò—â–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É
                        if target_string in file_content:
                            self.found_cookies.append({
                                'time': datetime.now().strftime("%H:%M:%S"),
                                'archive': os.path.basename(archive_path),
                                'path': file_path,
                                'cookie': target_string[:50] + "..."
                            })
                            
                            self.stats["found_cookies"] += 1
                            self.update_results_display()
                            self.save_result_to_file(archive_path, file_path, target_string)
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                        continue
            
            self.progress_var.set(100)
            self.update_stats()
            
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    def load_passwords(self):
        if not os.path.exists(self.passwords_file):
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
            default_passwords = [
                "123456", "password", "123456789", "12345678", "12345",
                "111111", "1234567", "sunshine", "qwerty", "iloveyou",
                "admin", "welcome", "monkey", "login", "abc123",
                "starwars", "123123", "dragon", "passw0rd", "master"
            ]
            with open(self.passwords_file, 'w', encoding='utf-8') as f:
                for pwd in default_passwords:
                    f.write(pwd + '\n')
            return default_passwords
        
        with open(self.passwords_file, 'r', encoding='utf-8') as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    
    def add_password(self, password):
        with open(self.passwords_file, 'a', encoding='utf-8') as f:
            f.write(password + '\n')
    
    def save_result_to_file(self, archive_path, file_path, cookie_data):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.results_file, 'a', encoding='utf-8') as f:
            f.write(f"{timestamp} | {archive_path} | {file_path} | {cookie_data}\n")
    
    def update_results_display(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if self.found_cookies:
            latest_result = self.found_cookies[-1]
            self.results_tree.insert("", "end", values=(
                latest_result['time'],
                latest_result['archive'],
                latest_result['path'],
                latest_result['cookie']
            ))
    
    def update_stats(self):
        for key, label in self.stats_labels.items():
            label.config(text=str(self.stats[key]))
    
    def update_status(self, message):
        self.status_label.config(text=message)
        self.root.update_idletasks()
    
    def clear_results(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"):
            self.results_tree.delete(*self.results_tree.get_children())
            self.found_cookies.clear()
            self.stats = {"processed_archives": 0, "found_cookies": 0, "total_files": 0}
            self.update_stats()
    
    def export_results(self):
        if not self.found_cookies:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("CSV —Ñ–∞–π–ª—ã", "*.csv")]
        )
        
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏–≤–æ–≤\n")
                f.write("=" * 50 + "\n\n")
                for result in self.found_cookies:
                    f.write(f"–í—Ä–µ–º—è: {result['time']}\n")
                    f.write(f"–ê—Ä—Ö–∏–≤: {result['archive']}\n")
                    f.write(f"–ü—É—Ç—å: {result['path']}\n")
                    f.write(f"Cookie: {result['cookie']}\n")
                    f.write("-" * 30 + "\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
    
    def edit_passwords(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        pwd_window = tk.Toplevel(self.root)
        pwd_window.title("–†–µ–¥–∞–∫—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        pwd_window.geometry("500x600")
        pwd_window.grab_set()
        
        tk.Label(pwd_window, text="–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π", font=("Arial", 16, "bold")).pack(pady=10)
        
        text_frame = tk.Frame(pwd_window)
        text_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        password_text = tk.Text(text_frame, font=("Arial", 12))
        scrollbar = tk.Scrollbar(text_frame, orient="vertical", command=password_text.yview)
        password_text.configure(yscrollcommand=scrollbar.set)
        
        password_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–æ–ª–∏
        passwords = self.load_passwords()
        password_text.insert("1.0", "\n".join(passwords))
        
        def save_passwords():
            content = password_text.get("1.0", "end-1c")
            passwords = [line.strip() for line in content.split('\n') if line.strip()]
            
            with open(self.passwords_file, 'w', encoding='utf-8') as f:
                for pwd in passwords:
                    f.write(pwd + '\n')
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–∞—Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            pwd_window.destroy()
        
        btn_frame = tk.Frame(pwd_window)
        btn_frame.pack(fill="x", padx=20, pady=10)
        
        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_passwords,
                 bg="#28a745", fg="white", font=("Arial", 12)).pack(side="right", padx=5)
        tk.Button(btn_window, text="–û—Ç–º–µ–Ω–∞", command=pwd_window.destroy,
                 bg="#dc3545", fg="white", font=("Arial", 12)).pack(side="right", padx=5)
    
    def apply_theme(self):
        theme = self.themes[self.current_theme.get()]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        self.root.configure(bg=theme["bg"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ ttk
        style = ttk.Style()
        style.theme_use('clam')
        
        style.configure('TNotebook', background=theme["bg"])
        style.configure('TNotebook.Tab', background=theme["frame_bg"], 
                       foreground=theme["fg"], padding=[20, 10])
        style.configure('TFrame', background=theme["bg"])
        style.configure('TLabelframe', background=theme["bg"], 
                       foreground=theme["fg"])
        style.configure('TLabelframe.Label', background=theme["bg"], 
                       foreground=theme["fg"])
        
        self.save_config()
    
    def change_language(self):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        self.save_config()
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    def load_background(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        
        if filename:
            try:
                image = Image.open(filename)
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –æ–∫–Ω–æ
                image = image.resize((1200, 800), Image.Resampling.LANCZOS)
                self.background_image = ImageTk.PhotoImage(image)
                self.bg_label.configure(image=self.background_image)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ–Ω—É –≤ –∫–æ–Ω—Ñ–∏–≥
                self.config.set('DEFAULT', 'background_image', filename)
                self.save_config()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    
    def remove_background(self):
        self.background_image = None
        self.bg_label.configure(image="")
        if self.config.has_option('DEFAULT', 'background_image'):
            self.config.remove_option('DEFAULT', 'background_image')
        self.save_config()
    
    def load_config(self):
        if os.path.exists(self.config_file):
            self.config.read(self.config_file)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.config.has_option('DEFAULT', 'language'):
                self.current_language.set(self.config.get('DEFAULT', 'language'))
            
            if self.config.has_option('DEFAULT', 'theme'):
                self.current_theme.set(self.config.get('DEFAULT', 'theme'))
            
            if self.config.has_option('DEFAULT', 'background_image'):
                bg_path = self.config.get('DEFAULT', 'background_image')
                if os.path.exists(bg_path):
                    try:
                        image = Image.open(bg_path)
                        image = image.resize((1200, 800), Image.Resampling.LANCZOS)
                        self.background_image = ImageTk.PhotoImage(image)
                    except:
                        pass
    
    def save_config(self):
        self.config.set('DEFAULT', 'language', self.current_language.get())
        self.config.set('DEFAULT', 'theme', self.current_theme.get())
        
        with open(self.config_file, 'w') as f:
            self.config.write(f)
    
    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def run(self):
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            pass

if __name__ == "__main__":
    app = ModernArchiveAnalyzer()
    app.run()