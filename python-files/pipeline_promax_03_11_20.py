# -*- coding: utf-8 -*-
"""Pipeline Promax 03.11.20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17I8vky0kZLMDQgtjLul4gsurln1wi5I1
"""

# üìå Importa√ß√µes de bibliotecas necess√°rias
import pandas as pd
import os
from google.colab import files  # Para fazer upload de arquivos no Google Colab
from datetime import datetime   # Para obter a data e hora atuais
import pytz # Importa pytz para lidar com fusos hor√°rios

# --- Passo 1: Selecionar os arquivos para processar ---
print("Por favor, selecione os arquivos a serem processados.")
# Usa a fun√ß√£o de upload do Google Colab para permitir que o usu√°rio escolha os arquivos
arquivos_carregados = files.upload()

# Obt√©m os caminhos completos dos arquivos carregados no ambiente do Colab
caminhos_arquivos = [f"/content/{nome}" for nome in arquivos_carregados.keys()]

# O arquivo de sa√≠da ser√° salvo no diret√≥rio padr√£o do Colab (/content/)
diretorio_saida = "/content/"


# --- Passo 2: Ler e concatenar os dados de todos os arquivos selecionados ---
lista_dataframes = []
for caminho_arquivo in caminhos_arquivos:
    # Extrai a extens√£o do arquivo (ex: .csv, .xlsx)
    extensao = os.path.splitext(caminho_arquivo)[1].lower()

    try:
        if extensao in [".xlsx", ".xls"]:
            # L√™ arquivos Excel
            df_temp = pd.read_excel(caminho_arquivo)
        elif extensao in [".csv", ".inf"]:
            # L√™ arquivos CSV ou INF
            # Tenta diferentes separadores caso o padr√£o n√£o funcione
            try:
                # Tentativa 1: usar ponto e v√≠rgula como separador (comum em alguns locais)
                df_temp = pd.read_csv(caminho_arquivo, sep=';')
            except Exception as e_csv:
                 print(f"Erro ao ler CSV/INF {caminho_arquivo}: {e_csv}")
                 # Pode adicionar mais tentativas com outros separadores aqui, se necess√°rio

        else:
            # Informa o usu√°rio se o formato do arquivo n√£o for suportado
            print(f"‚ùå Formato n√£o suportado: {caminho_arquivo}")
            continue # Pula para o pr√≥ximo arquivo

        # Adiciona o DataFrame lido √† lista
        lista_dataframes.append(df_temp)
    except Exception as e:
        # Captura e exibe erros que ocorram durante a leitura de um arquivo
        print(f"Erro ao ler {caminho_arquivo}: {e}")

# Verifica se algum arquivo v√°lido foi carregado e lido
if not lista_dataframes:
    # Se a lista estiver vazia, significa que nenhum arquivo p√¥de ser processado
    raise ValueError("Nenhum arquivo v√°lido foi carregado ou lido com sucesso!")

# Concatena todos os DataFrames da lista em um √∫nico DataFrame grande
df_consolidado = pd.concat(lista_dataframes, ignore_index=True)

# --- Passo 3: Filtrar o DataFrame consolidado pela coluna 'Fase' ---
# Define a lista de valores v√°lidos para a coluna 'Fase'
valores_validos_fase = ["Entrada Cdd/Fab      ", "Saida Cdd/Fab        "]
# Filtra o DataFrame para incluir apenas as linhas onde a coluna 'Fase' cont√©m um dos valores v√°lidos
df_filtrado = df_consolidado[df_consolidado["Fase"].isin(valores_validos_fase)]

# --- Passo 4: Exportar o resultado filtrado para um arquivo Excel ---
# Obt√©m a data e hora atuais com fuso hor√°rio para garantir a hora local correta
# Define o fuso hor√°rio de S√£o Paulo, que √© comum no Brasil
fuso_horario_sp = pytz.timezone('America/Sao_Paulo')
agora_sp = datetime.now(fuso_horario_sp)
timestamp = agora_sp.strftime("%Y%m%d_%H%M%S") # Formata a data e hora como YYYYMMDD_HHMMSS

# Cria o nome do arquivo de sa√≠da no diret√≥rio determinado
nome_arquivo_saida_xlsx = os.path.join(diretorio_saida, f"resultado_unico_{timestamp}.xlsx")

# Exporta o DataFrame filtrado para um arquivo Excel
# index=False impede que o √≠ndice do DataFrame seja escrito como uma coluna no Excel
df_filtrado.to_excel(nome_arquivo_saida_xlsx, index=False)

# Informa o usu√°rio onde o arquivo consolidado foi salvo e como baixar
print(f"Arquivo consolidado salvo no Colab como:\n - {nome_arquivo_saida_xlsx}")
print("\nPara baixar o arquivo para o seu computador:")
print("1. Clique no √≠cone de 'Arquivos' (uma pasta) na barra lateral esquerda.")
print("2. Navegue at√© o diret√≥rio '/content/'.")
print("3. Encontre o arquivo 'resultado_unico_[data_hora].xlsx'.")
print("4. Clique nos tr√™s pontos ao lado do nome do arquivo e selecione 'Download'.")