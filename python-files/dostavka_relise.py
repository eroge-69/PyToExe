import os
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import messagebox

class DeliveryApp:
    def __init__(self):
        self.delivery_prices = {
             "–¢–æ—Ä–±–µ–µ–≤–æ": 500,
              "–î—Ä–∞–∫–∏–Ω–æ": 700,
            "–°–∞–ª–∞–∑–≥–æ—Ä—å": 800,
             "–ñ—É–∫–æ–≤–æ": 900,
              "–ù–∏–∫–æ–ª—å—Å–∫": 900,
              "–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–µ—Ü": 1300,
            "–ö—Ä–∞—Å–Ω–æ–ø–æ–ª—å–µ": 900,
             "–¢–∞—Ç.–Æ–Ω–∫–∏": 1200,
             "–ê—Ç—é—Ä—å–µ–≤–æ": 1800,
              "–ú–∞–ª—å—Ü–µ–≤–æ": 1000,
            "–°—É—Ä–≥–æ–¥—å": 1000,
             "–ö—Ä–∞—Å–∞–µ–≤–∫–∞": 1200,
              "–°–≤–µ—Ç–ª—ã–π –ø—É—Ç—å": 1300,
            "–í–∞—Ä–∂–µ–ª—è–π": 1100,
             "–õ–æ–ø–∞—Ç–∏–Ω–æ": 1200,
              "–•–∏–ª–∫–æ–≤–æ": 1100,
            "–ò–≤–∞–Ω–æ–≤–∫–∞": 1400,
              "–î–º.–£—Å–∞–¥": 1400,
              "–ú–æ—Ä–¥.–Æ–Ω–∫–∏": 1600,
            "–í–∏–Ω–¥—Ä–µ–π": 2000,
             "–ù–æ—Å–∞–∫–∏–Ω–æ": 1500,
              "–£—Å—Ç—å-–†–∞—Ö–º–∞–Ω–æ–≤–∫–∞": 1600,
            "–ö–∞–∂–ª–æ–¥–∫–∞": 1000,
             "–ö—É–ª–∏–∫–æ–≤–æ": 1600,
              "–°—Ç.–ü–∏—á—É—Ä—ã": 1400,
             "–°–∞–≤–≤–∞": 1100,
              "–°–∞–º–±—É—Ä": 1000,
            "–®—É—Å—Ç—Ä—É–π": 1400,
             "–ú–∞–ª—ã—à–µ–≤–æ": 1400,
              "–ö—É—Ä—Ç–∞—à–∫–∏": 1800,
             "–ö–æ–≤—ã–ª–∫–∏–Ω–æ": 3000,
              "–ó—É–±–æ–≤–∞ –ø–æ–ª—è–Ω–∞": 2500,
            "–ö—Ä–∞—Å–Ω–æ—Å–ª–æ–±–æ–¥—Å–∫": 3500,
            "–°–ø–∞—Å—Å–∫": 2000
        }

        self.tech_list = [
            "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
            "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "–ú–æ—Ä–æ–∑–∏–ª—å–Ω—ã–π –ª–∞—Ä—å",
            "–ì–∞–∑–æ–≤–∞—è –ø–ª–∏—Ç–∞",
            "–ú–æ—Ä–æ–∑–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞"
        ]

        self.service_prices = {
            "–ü–æ–º–æ—â—å —Å –∑–∞–Ω–æ—Å–æ–º": 300,
            "–ó–∞–Ω–æ—Å": 600,
            "–ó–∞–Ω–æ—Å –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂": 550,
            "–ó–∞–Ω–æ—Å —Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–∂": 900,
            "–ó–∞–Ω–æ—Å —á–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–∂": 1150,
            "–ó–∞–Ω–æ—Å –ø—è—Ç—ã–π —ç—Ç–∞–∂": 1350
        }

        self.root = tb.Window(themename="minty")
        self.root.title("–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏")
        self.root.geometry("750x900")
        self.root.resizable(False, False)

        self.address_var = tb.StringVar()
        self.phone_var = tb.StringVar(value="+7 ")
        self.additional_phone_var = tb.StringVar(value="+7 ")
        self.service_var = tb.StringVar()
        self.tech_var = tb.StringVar()
        self.time_var = tb.StringVar()
        self.price_var = tb.StringVar()
        self.total_price_var = tb.IntVar(value=0)

        self.create_widgets()
        self.root.mainloop()

    def create_widgets(self):
        main_frame = tb.Frame(self.root, padding=20)
        main_frame.pack(fill="both", expand=True)

        tb.Label(
            main_frame,
            text="üöõ –î–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ RomaExpress",
            font=("Segoe UI", 20, "bold"),
            bootstyle="primary"
        ).pack(pady=(0, 10))

        form_frame = tb.LabelFrame(
            main_frame,
            text=" –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ",
            bootstyle="info",
            padding=15
        )
        form_frame.pack(fill="x", pady=10)

        tb.Label(form_frame, text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *", font=("Segoe UI", 11)).pack(anchor="w")
        address_box = tb.Combobox(
            form_frame,
            textvariable=self.address_var,
            values=list(self.delivery_prices.keys()),
            font=("Segoe UI", 11),
            bootstyle="primary"
        )
        address_box.pack(fill="x", pady=5)
        address_box.bind("<<ComboboxSelected>>", self.update_price)

        tb.Label(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω *", font=("Segoe UI", 11)).pack(anchor="w")
        phone_entry = tb.Entry(
            form_frame,
            textvariable=self.phone_var,
            font=("Segoe UI", 11)
        )
        phone_entry.pack(fill="x", pady=5)
        phone_entry.bind('<KeyRelease>', lambda e: self.format_phone(phone_entry, self.phone_var))

        tb.Label(form_frame, text="–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω", font=("Segoe UI", 11)).pack(anchor="w")
        additional_phone_entry = tb.Entry(
            form_frame,
            textvariable=self.additional_phone_var,
            font=("Segoe UI", 11)
        )
        additional_phone_entry.pack(fill="x", pady=5)
        additional_phone_entry.bind('<KeyRelease>', lambda e: self.format_phone(additional_phone_entry, self.additional_phone_var))

        tb.Label(form_frame, text="–î–æ–ø. —É—Å–ª—É–≥–∞", font=("Segoe UI", 11)).pack(anchor="w")
        service_box = tb.Combobox(
            form_frame,
            textvariable=self.service_var,
            values=list(self.service_prices.keys()),
            font=("Segoe UI", 11),
            bootstyle="primary"
        )
        service_box.pack(fill="x", pady=5)
        service_box.bind("<<ComboboxSelected>>", self.update_price)

        tb.Label(form_frame, text="–í–∏–¥ —Ç–µ—Ö–Ω–∏–∫–∏", font=("Segoe UI", 11)).pack(anchor="w")
        tech_box = tb.Combobox(
            form_frame,
            textvariable=self.tech_var,
            values=self.tech_list,
            font=("Segoe UI", 11),
            bootstyle="primary"
        )
        tech_box.pack(fill="x", pady=5)

        tb.Label(form_frame, text="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", font=("Segoe UI", 11)).pack(anchor="w")
        tb.Entry(
            form_frame,
            textvariable=self.time_var,
            font=("Segoe UI", 11)
        ).pack(fill="x", pady=5)

        price_frame = tb.Frame(main_frame)
        price_frame.pack(fill="x", pady=10)

        tb.Label(
            price_frame,
            text="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            font=("Segoe UI", 11)
        ).pack(side="left", padx=5)

        tb.Entry(
            price_frame,
            textvariable=self.price_var,
            font=("Segoe UI", 12),
            width=10,
            justify="center"
        ).pack(side="left")
        self.price_var.trace_add("write", lambda *args: self.update_total_price())

        tb.Label(
            price_frame,
            text="–ò—Ç–æ–≥–æ:",
            font=("Segoe UI", 11, "bold")
        ).pack(side="left", padx=(20, 5))

        tb.Label(
            price_frame,
            textvariable=self.total_price_var,
            font=("Segoe UI", 14, "bold"),
            foreground="green"
        ).pack(side="left")

        tb.Label(
            price_frame,
            text="—Ä—É–±.",
            font=("Segoe UI", 11)
        ).pack(side="left", padx=5)

        btn_frame = tb.Frame(main_frame)
        btn_frame.pack(fill="x", pady=20)

        tb.Button(
            btn_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_form,
            bootstyle="danger",
            width=12
        ).pack(side="left", padx=5)

        tb.Button(
            btn_frame,
            text="–ü–µ—á–∞—Ç—å –∑–∞—è–≤–∫–∏",
            command=self.print_order,
            bootstyle="success",
            width=15
        ).pack(side="right", padx=5)

        tb.Label(
            main_frame,
            text="* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
            font=("Segoe UI", 9),
            bootstyle="secondary"
        ).pack(side="bottom", pady=10)

    def format_phone(self, entry, var):
        digits = ''.join(filter(str.isdigit, var.get()))

        if digits.startswith("8"):
            digits = "7" + digits[1:]
        elif not digits.startswith("7"):
            digits = "7" + digits

        digits = digits[:11]
        digits = digits[1:]

        formatted = "+7 "
        if len(digits) >= 1:
            formatted += f"({digits[:3]}"
        if len(digits) >= 4:
            formatted += f") {digits[3:6]}"
        if len(digits) >= 6:
            formatted += f"-{digits[6:8]}"
        if len(digits) >= 8:
            formatted += f"-{digits[8:10]}"

        var.set(formatted)
        entry.icursor(len(formatted))

    def update_price(self, event=None):
        address = self.address_var.get()
        service = self.service_var.get()
        base_price = self.delivery_prices.get(address, 0)
        service_price = self.service_prices.get(service, 0)
        total = base_price + service_price
        self.price_var.set(str(total))
        self.total_price_var.set(total)

    def update_total_price(self, *args):
        try:
            price = int(self.price_var.get())
            if price < 0:
                price = 0
            self.total_price_var.set(price)
        except ValueError:
            self.total_price_var.set(0)

    def clear_form(self):
        self.address_var.set("")
        self.phone_var.set("+7 ")
        self.additional_phone_var.set("+7 ")
        self.service_var.set("")
        self.tech_var.set("")
        self.time_var.set("")
        self.price_var.set("")
        self.total_price_var.set(0)

    def print_order(self):
        if not self.address_var.get() or len(self.phone_var.get()) < 18:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
            return

        html_content = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</title>
            <style>
                body {{
                    font-family: 'Segoe UI', sans-serif;
                    font-size: 18px;
                    padding: 40px;
                    line-height: 1.6;
                }}
                h1 {{
                    color: #0d6efd;
                    border-bottom: 2px solid #0d6efd;
                    padding-bottom: 10px;
                }}
                .label {{
                    font-weight: bold;
                }}
                .total {{
                    color: green;
                    font-size: 22px;
                    font-weight: bold;
                    margin-top: 20px;
                }}
            </style>
        </head>
        <body>
            <h1>üöõ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</h1>
            <p><span class="label">–ê–¥—Ä–µ—Å:</span> {self.address_var.get()}</p>
            <p><span class="label">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {self.phone_var.get()}</p>
            <p><span class="label">–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω:</span> {self.additional_phone_var.get()}</p>
            <p><span class="label">–¢–µ—Ö–Ω–∏–∫–∞:</span> {self.tech_var.get()}</p>
            <p><span class="label">–î–æ–ø. —É—Å–ª—É–≥–∞:</span> {self.service_var.get()}</p>
            <p><span class="label">–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</span> {self.time_var.get()}</p>
            <p class="total">–ò–¢–û–ì–û: {self.total_price_var.get()} —Ä—É–±.</p>
        </body>
        </html>
        """

        filename = "–∑–∞—è–≤–∫–∞.html"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(html_content)

        try:
            os.startfile(filename)
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å: {e}")


if __name__ == "__main__":
    app = DeliveryApp()
