import tkinter as tk
from tkinter import ttk, scrolledtext, simpledialog
import hashlib
import os
import threading
import time
from pathlib import Path
import ctypes
from ctypes import wintypes
import requests
import json
from datetime import datetime

# === Firebase –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
FIREBASE_API_KEY = "AIzaSyBqTdueiJcAtaGulmveTiF6REHqCdjtbEY"  # üî• –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô
FIREBASE_PROJECT_ID = "cybershield-av-77194"  # üî• –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô
DATABASE_URL = f"https://{FIREBASE_PROJECT_ID}-default-rtdb.firebaseio.com"

DATABASE_PATH = Path(__file__).parent / "database.txt"
SUSPICIOUS_DIRS = [str(Path.home() / "Downloads"), str(Path.home() / "Desktop"), "C:\\Windows\\Temp"]
QUICK_SCAN_EXTENSIONS = {'.exe', '.bat', '.py', '.vbs'}


class FirebaseAuth:
    def __init__(self):
        self.api_key = FIREBASE_API_KEY
        self.project_id = FIREBASE_PROJECT_ID
        self.db_url = DATABASE_URL

    def register_user(self, login, password, secret_question, secret_answer):
        try:
            response = requests.get(f"{self.db_url}/users/{login}.json")
            if response.json() is not None:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

            user_data = {
                "password": password,
                "secret_question": secret_question,
                "secret_answer": secret_answer,
                "registered_at": int(time.time()),
                "scan_count": 0,
                "last_scan": 0
            }
            response = requests.put(f"{self.db_url}/users/{login}.json", data=json.dumps(user_data))
            if response.status_code == 200:
                return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
            else:
                return False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

    def login_user(self, login, password):
        try:
            response = requests.get(f"{self.db_url}/users/{login}.json")
            data = response.json()
            if data is None:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
            if data.get("password") == password:
                return True, "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", data
            else:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", None
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", None

    def recover_password(self, login, secret_answer):
        try:
            response = requests.get(f"{self.db_url}/users/{login}.json")
            data = response.json()
            if data is None:
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
            if data.get("secret_answer") == secret_answer:
                return True, "–ü–∞—Ä–æ–ª—å: " + data.get("password"), data
            else:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", None
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}", None

    def update_user_data(self, login, data):
        try:
            response = requests.put(f"{self.db_url}/users/{login}.json", data=json.dumps(data))
            return response.status_code == 200
        except:
            return False


class AntivirusApp:
    def __init__(self, root, username, user_data, firebase):
        self.root = root
        self.username = username
        self.user_data = user_data
        self.firebase = firebase
        self.root.title(f"üõ°Ô∏è CyberShield ‚Äî {username}")
        self.root.geometry("950x700")
        self.root.resizable(False, False)
        self.root.configure(bg="#1e1e2e")
        self.root.bind("<F11>", lambda event: "break")

        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TButton", font=("Segoe UI", 11, "bold"), padding=6, background="#3b3b5a", foreground="white")
        style.map("TButton", background=[("active", "#5a5a80")])

        # –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        menu_frame = tk.Frame(root, bg="#1e1e2e")
        menu_frame.pack(fill=tk.X, pady=5)

        self.user_label = tk.Label(menu_frame, text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}", font=("Segoe UI", 12),
                                   bg="#1e1e2e", fg="#00ff9d")
        self.user_label.pack(side=tk.LEFT, padx=20)

        self.btn_profile = ttk.Button(menu_frame, text="üéÅ –ü—Ä–æ—Ñ–∏–ª—å", command=self.show_profile_window, width=12)
        self.btn_profile.pack(side=tk.RIGHT, padx=5)

        self.btn_logout = ttk.Button(menu_frame, text="üé≠ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self.logout, width=20)
        self.btn_logout.pack(side=tk.RIGHT, padx=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(root, bg="#1e1e2e")
        title_frame.pack(fill=tk.X, pady=10)
        title_label = tk.Label(title_frame, text="üõ°Ô∏è CyberShield –ê–Ω—Ç–∏–≤–∏—Ä—É—Å", font=("Segoe UI", 22, "bold"),
                               bg="#1e1e2e", fg="#00ff9d")
        title_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(root, bg="#1e1e2e")
        button_frame.pack(pady=10)

        self.btn_system = ttk.Button(button_frame, text="–û —Å–∏—Å—Ç–µ–º–µ", command=self.show_system_info, width=22)
        self.btn_system.grid(row=0, column=0, padx=5, pady=5)

        self.btn_full_scan = ttk.Button(button_frame, text="–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_full_scan, width=22)
        self.btn_full_scan.grid(row=0, column=1, padx=5, pady=5)

        self.btn_quick_scan = ttk.Button(button_frame, text="–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_quick_scan, width=22)
        self.btn_quick_scan.grid(row=0, column=2, padx=5, pady=5)

        self.realtime_active = False
        self.realtime_thread = None
        self.btn_realtime = ttk.Button(button_frame, text="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É", command=self.toggle_realtime_protection, width=25)
        self.btn_realtime.grid(row=0, column=3, padx=5, pady=5)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_frame = tk.Frame(root, bg="#1e1e2e")
        progress_frame.pack(fill=tk.X, padx=30, pady=5)
        self.progress = ttk.Progressbar(progress_frame, orient="horizontal", length=890, mode="determinate")
        self.progress.pack(fill=tk.X)

        # –õ–æ–≥
        log_label = tk.Label(root, text="üìù –õ–æ–≥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", font=("Segoe UI", 13, "bold"), bg="#1e1e2e", fg="white")
        log_label.pack(anchor="w", padx=30, pady=(10, 5))

        log_frame = tk.Frame(root, bg="#1e1e2e")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=(0, 10))

        self.log_area = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, bg="#2e2e3e", fg="#00ff9d",
                                                  font=("Consolas", 10), insertbackground="#00ff9d",
                                                  relief="flat", borderwidth=0)
        self.log_area.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)

        self.last_infected_file = None
        self.scanned_files_cache = set()
        self.virus_hashes = self.load_database()

    def load_database(self):
        if not DATABASE_PATH.exists():
            with open(DATABASE_PATH, "w", encoding="utf-8") as f:
                pass
            self.log("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª database.txt")
            return set()

        try:
            with open(DATABASE_PATH, "r", encoding="utf-8") as f:
                hashes = {line.strip().lower() for line in f if line.strip()}
            self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(hashes)} —Å–∏–≥–Ω–∞—Ç—É—Ä –≤–∏—Ä—É—Å–æ–≤.")
            return hashes
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            return set()

    def log(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log_area.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}\n")
        self.log_area.see(tk.END)
        self.root.update_idletasks()

    # ============ WinAPI –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ============

    def get_cpu_usage_ctypes(self):
        try:
            class FILETIME(ctypes.Structure):
                _fields_ = [("dwLowDateTime", wintypes.DWORD), ("dwHighDateTime", wintypes.DWORD)]
            idle_time = FILETIME(); kernel_time = FILETIME(); user_time = FILETIME()
            success = ctypes.windll.kernel32.GetSystemTimes(ctypes.byref(idle_time), ctypes.byref(kernel_time), ctypes.byref(user_time))
            if not success: return 0
            def ft2u64(ft): return (ft.dwHighDateTime << 32) + ft.dwLowDateTime
            idle, kernel, user = ft2u64(idle_time), ft2u64(kernel_time), ft2u64(user_time)
            total = kernel + user
            return int(100.0 * (total - idle) / total) if total > 0 else 0
        except: return 0

    def get_ram_usage_ctypes(self):
        try:
            class MEMORYSTATUSEX(ctypes.Structure):
                _fields_ = [('dwLength', wintypes.DWORD), ('dwMemoryLoad', wintypes.DWORD),
                            ('ullTotalPhys', wintypes.c_ulonglong), ('ullAvailPhys', wintypes.c_ulonglong),
                            ('ullTotalPageFile', wintypes.c_ulonglong), ('ullAvailPageFile', wintypes.c_ulonglong),
                            ('ullTotalVirtual', wintypes.c_ulonglong), ('ullAvailVirtual', wintypes.c_ulonglong),
                            ('ullAvailExtendedVirtual', wintypes.c_ulonglong)]
            stat = MEMORYSTATUSEX()
            stat.dwLength = ctypes.sizeof(MEMORYSTATUSEX)
            ctypes.windll.kernel32.GlobalMemoryStatusEx(ctypes.byref(stat))
            return stat.dwMemoryLoad
        except: return 0

    def get_disk_usage_ctypes(self):
        try:
            free_bytes = wintypes.ULARGE_INTEGER()
            total_bytes = wintypes.ULARGE_INTEGER()
            total_free_bytes = wintypes.ULARGE_INTEGER()
            drive = "C:\\"
            success = ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(drive),
                ctypes.byref(free_bytes), ctypes.byref(total_bytes), ctypes.byref(total_free_bytes))
            if not success: return 0
            free, total = free_bytes.value, total_bytes.value
            return int((total - free) / total * 100) if total > 0 else 0
        except: return 0

    def get_gpu_info(self):
        return "NVIDIA / AMD / Intel (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ DirectX)"

    def show_system_info(self):
        self.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ WinAPI...")
        info = f"""
üìä –°–ò–°–¢–ï–ú–ê:
   üñ•Ô∏è  –¶–ü: {self.get_cpu_usage_ctypes()}%
   üß†  –û–ó–£: {self.get_ram_usage_ctypes()}%
   üíæ  –î–∏—Å–∫ C:: {self.get_disk_usage_ctypes()}%
   üéÆ  –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {self.get_gpu_info()}
        """
        self.log(info)

    # ============ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í ============

    def calculate_file_hash(self, filepath):
        try:
            sha1 = hashlib.sha1()
            with open(filepath, "rb") as f:
                while chunk := f.read(8192):
                    sha1.update(chunk)
            return sha1.hexdigest().lower()
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filepath}: {e}")
            return None

    def scan_file(self, filepath):
        if filepath in self.scanned_files_cache: return
        file_hash = self.calculate_file_hash(filepath)
        if not file_hash: return
        if file_hash in self.virus_hashes:
            msg = f"üî¥ –í–ò–†–£–° –û–ë–ù–ê–†–£–ñ–ï–ù: {filepath}"
            self.log(msg)
            self.last_infected_file = filepath
            self.add_delete_button(filepath)
        else:
            self.log(f"‚úÖ –ß–∏—Å—Ç–æ: {filepath}")
        self.scanned_files_cache.add(filepath)

    def add_delete_button(self, filepath):
        if hasattr(self, 'delete_btn') and self.delete_btn.winfo_exists():
            self.delete_btn.destroy()
        self.delete_btn = ttk.Button(self.root, text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—É—Å: {Path(filepath).name}",
                                     command=lambda: self.delete_infected_file(filepath))
        self.delete_btn.pack(pady=5)

    def delete_infected_file(self, filepath):
        try:
            os.remove(filepath)
            self.log(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {filepath}")
            if hasattr(self, 'delete_btn'): self.delete_btn.destroy()
            self.last_infected_file = None
            if filepath in self.scanned_files_cache: self.scanned_files_cache.remove(filepath)
        except Exception as e:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def scan_directory(self, directory, extensions=None):
        if not os.path.exists(directory):
            self.log(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
            return
        files, skipped = [], 0
        try:
            for root, dirs, filenames in os.walk(directory):
                dirs[:] = [d for d in dirs if d not in ("$Recycle.Bin", "System Volume Information", "Recovery")]
                for filename in filenames:
                    filepath = os.path.join(root, filename)
                    if extensions and Path(filepath).suffix.lower() not in extensions: continue
                    if not os.access(filepath, os.R_OK): skipped += 1; continue
                    files.append(filepath)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –ø–∞–ø–∫–∏ {directory}: {e}")
        total = len(files)
        self.progress["maximum"] = total or 1
        scanned = 0  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–´–õ–û scan_out ‚Äî —Ç–µ–ø–µ—Ä—å scanned
        for i, filepath in enumerate(files, 1):
            try:
                self.scan_file(filepath)
                scanned += 1
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
            self.progress["value"] = i
            self.root.update_idletasks()
        self.log(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {scanned}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data["scan_count"] += 1
        self.user_data["last_scan"] = int(time.time())
        self.firebase.update_user_data(self.username, self.user_data)

        if skipped > 0: self.log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞): {skipped}")

    def start_full_scan(self):
        self.log_area.delete(1.0, tk.END)
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ C:\\")
        threading.Thread(target=self._full_scan_worker, daemon=True).start()

    def _full_scan_worker(self):
        try:
            self.scan_directory("C:\\", extensions=None)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        finally:
            self.progress["value"] = 0

    def start_quick_scan(self):
        self.log_area.delete(1.0, tk.END)
        self.log("‚ö° –ó–∞–ø—É—Å–∫ –ë–´–°–¢–†–û–ì–û —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫...")
        threading.Thread(target=self._quick_scan_worker, daemon=True).start()

    def _quick_scan_worker(self):
        try:
            for folder in SUSPICIOUS_DIRS:
                if os.path.exists(folder):
                    self.log(f"üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {folder}")
                    self.scan_directory(folder, extensions=QUICK_SCAN_EXTENSIONS)
                else:
                    self.log(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.progress["value"] = 0

    # ============ –ó–ê–©–ò–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ============

    def toggle_realtime_protection(self):
        if self.realtime_active:
            self.stop_realtime_protection()
        else:
            self.start_realtime_protection()

    def start_realtime_protection(self):
        self.realtime_active = True
        self.btn_realtime.config(text="üõë –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É")
        self.log("‚úÖ –ó–∞—â–∏—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –í–ö–õ–Æ–ß–ï–ù–ê (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)")
        threading.Thread(target=self._monitor_loop, daemon=True).start()

    def _monitor_loop(self):
        while self.realtime_active:
            for folder in SUSPICIOUS_DIRS:
                if not os.path.exists(folder): continue
                try:
                    for filename in os.listdir(folder):
                        filepath = os.path.join(folder, filename)
                        if not os.path.isfile(filepath): continue
                        if Path(filepath).suffix.lower() not in QUICK_SCAN_EXTENSIONS: continue
                        if not os.access(filepath, os.R_OK): continue
                        if filepath not in self.scanned_files_cache:
                            self.log(f"üîç [–†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {filepath}")
                            self.scan_file(filepath)
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ {folder}: {e}")
            time.sleep(5)

    def stop_realtime_protection(self):
        self.realtime_active = False
        self.btn_realtime.config(text="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É")
        self.log("‚èπÔ∏è –ó–∞—â–∏—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –í–´–ö–õ–Æ–ß–ï–ù–ê")

    # ============ –ü–†–û–§–ò–õ–¨ –í –û–¢–î–ï–õ–¨–ù–û–ú –û–ö–ù–ï ============

    def show_profile_window(self):
        profile_win = tk.Toplevel(self.root)
        profile_win.title("üéÅ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        profile_win.geometry("500x400")
        profile_win.resizable(False, False)
        profile_win.configure(bg="#1e1e2e")
        profile_win.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

        tk.Label(profile_win, text=f"–ü—Ä–æ—Ñ–∏–ª—å: {self.username}", font=("Segoe UI", 18, "bold"),
                 bg="#1e1e2e", fg="#00ff9d").pack(pady=20)

        frame = tk.Frame(profile_win, bg="#2e2e3e", padx=20, pady=20)
        frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        registered_at = datetime.fromtimestamp(self.user_data.get("registered_at", 0)).strftime("%Y-%m-%d %H:%M")
        scan_count = self.user_data.get("scan_count", 0)
        last_scan = self.user_data.get("last_scan", 0)
        last_scan_str = datetime.fromtimestamp(last_scan).strftime("%Y-%m-%d %H:%M") if last_scan else "–ù–∏–∫–æ–≥–¥–∞"

        info = f"""
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:   {registered_at}
üîç –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {scan_count}
üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ:          {last_scan_str}

üîê –°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
   {self.user_data.get('secret_question', '–ù–µ –∑–∞–¥–∞–Ω')}
        """

        tk.Label(frame, text=info, font=("Consolas", 11), bg="#2e2e3e", fg="white", justify=tk.LEFT).pack(anchor="w")

        ttk.Button(profile_win, text="–ó–∞–∫—Ä—ã—Ç—å", command=profile_win.destroy, width=20).pack(pady=20)

    def logout(self):
        self.root.destroy()
        root = tk.Tk()
        login_app = LoginWindow(root)
        root.mainloop()


class LoginWindow:
    def __init__(self, root):
        self.root = root
        self.root.title("üõ°Ô∏è CyberShield ‚Äî –í—Ö–æ–¥")
        self.root.geometry("500x500")
        self.root.resizable(False, False)
        self.root.configure(bg="#1e1e2e")

        self.firebase = FirebaseAuth()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(root, text="üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", font=("Segoe UI", 20, "bold"),
                               bg="#1e1e2e", fg="#00ff9d")
        title_label.pack(pady=20)

        # –õ–æ–≥–∏–Ω
        tk.Label(root, text="–õ–æ–≥–∏–Ω:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(10, 0))
        self.login_entry = tk.Entry(root, font=("Segoe UI", 12), width=30)
        self.login_entry.pack(pady=5)

        # –ü–∞—Ä–æ–ª—å
        tk.Label(root, text="–ü–∞—Ä–æ–ª—å:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(10, 0))
        self.password_entry = tk.Entry(root, font=("Segoe UI", 12), width=30, show="*")
        self.password_entry.pack(pady=5)

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫
        self.error_label = tk.Label(root, text="", bg="#1e1e2e", fg="red", font=("Segoe UI", 11))
        self.error_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(root, bg="#1e1e2e")
        button_frame.pack(pady=20)

        self.btn_login = ttk.Button(button_frame, text="–í–æ–π—Ç–∏", command=self.login)
        self.btn_login.grid(row=0, column=0, padx=10, pady=5)

        self.btn_register = ttk.Button(button_frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.open_register_window)
        self.btn_register.grid(row=0, column=1, padx=10, pady=5)

        self.btn_recover = ttk.Button(root, text="üîÑ –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", command=self.recover_password)
        self.btn_recover.pack(pady=10)

    def login(self):
        login = self.login_entry.get().strip()
        password = self.password_entry.get().strip()

        if not login or not password:
            self.error_label.config(text="‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        success, message, user_data = self.firebase.login_user(login, password)
        self.error_label.config(text=message, fg="green" if success else "red")

        if success:
            self.root.destroy()
            self.open_main_app(login, user_data)

    def open_register_window(self):
        reg_window = tk.Toplevel(self.root)
        reg_window.title("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        reg_window.geometry("400x500")
        reg_window.configure(bg="#1e1e2e")
        reg_window.resizable(False, False)

        tk.Label(reg_window, text="–õ–æ–≥–∏–Ω:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(20, 5))
        login_entry = tk.Entry(reg_window, font=("Segoe UI", 12), width=25)
        login_entry.pack()

        tk.Label(reg_window, text="–ü–∞—Ä–æ–ª—å:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(15, 5))
        password_entry = tk.Entry(reg_window, font=("Segoe UI", 12), width=25, show="*")
        password_entry.pack()

        tk.Label(reg_window, text="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(15, 5))
        secret_question_entry = tk.Entry(reg_window, font=("Segoe UI", 12), width=30)
        secret_question_entry.pack()

        tk.Label(reg_window, text="–û—Ç–≤–µ—Ç:", bg="#1e1e2e", fg="white", font=("Segoe UI", 12)).pack(pady=(15, 5))
        secret_answer_entry = tk.Entry(reg_window, font=("Segoe UI", 12), width=30)
        secret_answer_entry.pack()

        # –ú–µ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        error_label_reg = tk.Label(reg_window, text="", bg="#1e1e2e", fg="red", font=("Segoe UI", 11))
        error_label_reg.pack(pady=10)

        def register():
            login = login_entry.get().strip()
            password = password_entry.get().strip()
            question = secret_question_entry.get().strip()
            answer = secret_answer_entry.get().strip()

            if not all([login, password, question, answer]):
                error_label_reg.config(text="‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            success, message = self.firebase.register_user(login, password, question, answer)
            error_label_reg.config(text=message, fg="green" if success else "red")

            if success:
                reg_window.destroy()

        ttk.Button(reg_window, text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=register).pack(pady=30)

    def recover_password(self):
        login = simpledialog.askstring("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        if not login: return

        try:
            response = requests.get(f"{DATABASE_URL}/users/{login}.json")
            data = response.json()
            if data is None:
                self.error_label.config(text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", fg="red")
                return

            question = data.get("secret_question", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω")
            answer = simpledialog.askstring("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", f"–í–æ–ø—Ä–æ—Å: {question}\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
            if not answer: return

            success, message, _ = self.firebase.recover_password(login, answer)
            self.error_label.config(text=message, fg="green" if success else "red")

        except Exception as e:
            self.error_label.config(text=f"‚ùå –û—à–∏–±–∫–∞: {e}", fg="red")

    def open_main_app(self, username, user_data):
        root = tk.Tk()
        app = AntivirusApp(root, username, user_data, self.firebase)
        root.mainloop()


if __name__ == "__main__":
    root = tk.Tk()
    login_app = LoginWindow(root)
    root.mainloop()