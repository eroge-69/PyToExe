import tkinter as tk
from tkinter import messagebox
import os
import ctypes
import subprocess
import winreg
import shutil
import psutil

# === –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ ===
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def log(msg):
    log_box.insert(tk.END, msg + "\n")
    log_box.see(tk.END)

def disable_antivirus_fake():
    messagebox.showinfo("–ê–Ω—Ç–∏–≤–∏—Ä—É—Å", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å–∞ –ù–µ —Ä–æ–±–æ—Ç–∞–µ—Ç.")
    log("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ê–Ω—Ç–∏–í–∏—Ä—É—Å–∞ No Work.")

def enable_task_manager():
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                             r"Software\Microsoft\Windows\CurrentVersion\Policies\System", 0, winreg.KEY_SET_VALUE)
    except FileNotFoundError:
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER,
                               r"Software\Microsoft\Windows\CurrentVersion\Policies\System")

    winreg.SetValueEx(key, "DisableTaskMgr", 0, winreg.REG_DWORD, 0)
    winreg.CloseKey(key)
    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    log("–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def enable_regedit():
    key = winreg.CreateKey(winreg.HKEY_CURRENT_USER,
                           r"Software\Microsoft\Windows\CurrentVersion\Policies\System")
    winreg.SetValueEx(key, "DisableRegistryTools", 0, winreg.REG_DWORD, 0)
    winreg.CloseKey(key)
    log("–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def enable_cmd():
    key = winreg.CreateKey(winreg.HKEY_CURRENT_USER,
                           r"Software\Policies\Microsoft\Windows\System")
    winreg.SetValueEx(key, "DisableCMD", 0, winreg.REG_DWORD, 0)
    winreg.CloseKey(key)
    log("–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")

def enable_powershell():
    subprocess.run("powershell -Command \"Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force\"",
                   shell=True)
    log("PowerShell —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def restart_explorer():
    os.system("taskkill /f /im explorer.exe")
    os.system("start explorer.exe")
    log("–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

def open_tool(tool):
    try:
        os.system(f"start {tool}")
        log(f"{tool} –æ—Ç–∫—Ä—ã—Ç.")
    except:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {tool}.")

def clear_temp():
    try:
        temp_paths = [os.environ["TEMP"], os.environ["TMP"]]
        for path in temp_paths:
            for file in os.listdir(path):
                try:
                    file_path = os.path.join(path, file)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                except:
                    continue
        log("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ ===
def update_monitor():
    cpu = psutil.cpu_percent()
    ram = psutil.virtual_memory()
    disk = psutil.disk_usage('/')

    cpu_label.config(text=f"–ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu}%")
    ram_label.config(text=f"RAM: {ram.percent}% ({round(ram.used / (1024**3), 1)}–ì–ë –∏–∑ {round(ram.total / (1024**3), 1)}–ì–ë)")
    disk_label.config(text=f"–î–∏—Å–∫: {disk.percent}% ({round(disk.used / (1024**3), 1)}–ì–ë –∏–∑ {round(disk.total / (1024**3), 1)}–ì–ë)")

    monitor_frame.after(1000, update_monitor)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
app = tk.Tk()
app.title("RimongHelper ‚Äî System Unblocker Lite")
app.geometry("600x750")
app.configure(bg="white")

BUTTON_STYLE = {"bg": "#0078D7", "fg": "white", "font": ("Arial", 14), "width": 40, "height": 2}

tk.Label(app, text="üõ†Ô∏è RimongHelper", font=("Arial", 24, "bold"), fg="black", bg="white").pack(pady=10)

tk.Button(app, text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å (–Ω–µ work)", command=disable_antivirus_fake, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", command=enable_task_manager, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞", command=enable_regedit, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å CMD", command=enable_cmd, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üîµ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å PowerShell", command=enable_powershell, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ü—Ä–æ–≤–æ–¥–Ω–∏–∫", command=restart_explorer, **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å regedit", command=lambda: open_tool("regedit"), **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å msconfig", command=lambda: open_tool("msconfig"), **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å services.msc", command=lambda: open_tool("services.msc"), **BUTTON_STYLE).pack(pady=3)
tk.Button(app, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", command=clear_temp, **BUTTON_STYLE).pack(pady=3)

# === –ú–æ–Ω–∏—Ç–æ—Ä ===
tk.Label(app, text="üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä", font=("Arial", 18, "bold"), bg="white", fg="black").pack(pady=10)
monitor_frame = tk.Frame(app, bg="white")
monitor_frame.pack(pady=5)

cpu_label = tk.Label(monitor_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞ CPU: --%", font=("Arial", 14), bg="white", fg="black")
cpu_label.pack(pady=2)

ram_label = tk.Label(monitor_frame, text="RAM: --%", font=("Arial", 14), bg="white", fg="black")
ram_label.pack(pady=2)

disk_label = tk.Label(monitor_frame, text="–î–∏—Å–∫: --%", font=("Arial", 14), bg="white", fg="black")
disk_label.pack(pady=2)

update_monitor()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞

# === –ñ—É—Ä–Ω–∞–ª ===
tk.Label(app, text="üìù –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π", font=("Arial", 12), bg="white", fg="black").pack(pady=(10, 5))
log_box = tk.Text(app, height=8, bg="#f0f0f0", fg="black", font=("Consolas", 10))
log_box.pack(fill=tk.BOTH, padx=20, pady=(0, 20))

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if not is_admin():
    messagebox.showwarning("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

app.mainloop()
