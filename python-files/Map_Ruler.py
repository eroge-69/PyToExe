#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('GdkX11', '3.0')
from gi.repository import Gtk, Gdk, GdkX11, GObject, GLib
import math
import cairo
import os
import configparser
import subprocess
import webbrowser  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º

# –ë–∞–∑–æ–≤—ã–π –º–∞—Å—à—Ç–∞–± (–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–∏–∫—Å–µ–ª—å) –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞ 225
BASE_SCALE_225 = 3.722132
BASE_SCALE_VALUE = 225

# –°–ø–∏—Å–æ–∫ –º–∞—Å—à—Ç–∞–±–æ–≤ –∫–∞—Ä—Ç
MAP_SCALES = [150, 170, 180, 190, 200, 225, 250, 275, 300, 325, 400, 450, 500, 550]

class MapRuler(Gtk.Window):
    def __init__(self):
        super().__init__(title="–î–∞–ª—å–Ω–æ–º–µ—Ä –¥–ª—è War Thunder")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞
        self.set_default_size(500, 480)
        self.set_app_paintable(True)
        self.set_skip_taskbar_hint(True)
        self.set_keep_above(True)
        self.set_decorated(False)
        self.set_visual(self.get_screen().get_rgba_visual())
        self.set_position(Gtk.WindowPosition.CENTER)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.selected_scale = BASE_SCALE_VALUE  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.scale_factor = BASE_SCALE_225  # –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        self.start_point = None
        self.end_point = None
        self.temp_point = None
        self.last_focus = None
        self.horizontal_only = False  # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –æ—Å—è–º
        self.calibration_mode = False  # –†–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.calibration_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.config_file = os.path.expanduser("~/.wt_map_ruler.ini")
        self.load_config()

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.recalculate_scale()

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
        self.add(self.box)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.connect("draw", self.on_draw)
        self.connect("button-press-event", self.on_button_press)
        self.connect("motion-notify-event", self.on_mouse_move)
        self.connect("key-press-event", self.on_key_press)
        self.connect("destroy", self.on_destroy)
        self.connect("realize", self.on_realize)

        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        self.set_events(Gdk.EventMask.POINTER_MOTION_MASK)

        # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.set_opacity(0.85)

    def on_realize(self, widget):
        # –†–∞–∑–º–µ—â–∞–µ–º –æ–∫–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞
        screen = self.get_screen()
        monitor = screen.get_display().get_primary_monitor()
        geometry = monitor.get_geometry()

        width, height = self.get_size()
        x = geometry.x + geometry.width - width
        y = geometry.y + geometry.height - height

        self.move(x, y)
        self.set_keep_above(True)
        self.set_accept_focus(False)

    def load_config(self):
        config = configparser.ConfigParser()
        if os.path.exists(self.config_file):
            config.read(self.config_file)
            try:
                self.selected_scale = int(config.get('DEFAULT', 'selected_scale', fallback=str(BASE_SCALE_VALUE)))
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
                if self.selected_scale not in MAP_SCALES:
                    self.selected_scale = BASE_SCALE_VALUE
            except (ValueError, configparser.NoSectionError, configparser.NoOptionError) as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def save_config(self):
        config = configparser.ConfigParser()
        config['DEFAULT'] = {
            'selected_scale': str(self.selected_scale)
        }

        with open(self.config_file, 'w') as configfile:
            config.write(configfile)

    def recalculate_scale(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        self.scale_factor = BASE_SCALE_225 * (self.selected_scale / BASE_SCALE_VALUE)
        if hasattr(self, 'scale_value'):
            self.scale_value.set_text(f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å")
        if hasattr(self, 'distance_value') and self.start_point and self.end_point:
            self.update_distance_display()

    def on_destroy(self, widget):
        self.save_config()
        Gtk.main_quit()

    def create_control_panel(self):
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        self.control_box.set_margin_start(5)
        self.control_box.set_margin_end(5)
        self.control_box.set_margin_top(5)
        self.box.pack_start(self.control_box, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.calibration_btn = Gtk.ToggleButton(label="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞")
        self.calibration_btn.set_tooltip_text("–†–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (–∏–∑–º–µ—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–∏–∫—Å–µ–ª—å)")
        self.calibration_btn.connect("toggled", self.on_calibration_toggled)
        self.control_box.pack_start(self.calibration_btn, False, False, 0)

        # –í—ã–±–æ—Ä –º–∞—Å—à—Ç–∞–±–∞ –∫–∞—Ä—Ç—ã
        self.scale_label = Gtk.Label(label="–ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã:")
        self.control_box.pack_start(self.scale_label, False, False, 0)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –º–∞—Å—à—Ç–∞–±–∞–º–∏
        self.scale_combo = Gtk.ComboBoxText()
        for scale in MAP_SCALES:
            self.scale_combo.append_text(str(scale))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± (225 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.scale_combo.set_active(MAP_SCALES.index(self.selected_scale))
        self.scale_combo.connect("changed", self.on_scale_changed)
        self.control_box.pack_start(self.scale_combo, False, False, 0)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –º–∞—Å—à—Ç–∞–±–µ
        self.scale_label = Gtk.Label(label="–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±:")
        self.control_box.pack_start(self.scale_label, False, False, 0)

        self.scale_value = Gtk.Label(label=f"{self.scale_factor:.6f} –º/–ø–∏–∫—Å")
        self.scale_value.get_style_context().add_class("scale-value")
        self.control_box.pack_start(self.scale_value, False, False, 0)

        # –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        self.distance_label = Gtk.Label(label="–î–∏—Å—Ç–∞–Ω—Ü–∏—è:")
        self.control_box.pack_start(self.distance_label, False, False, 0)

        self.distance_value = Gtk.Label(label="0.00 –º")
        self.distance_value.get_style_context().add_class("distance-value")
        self.control_box.pack_start(self.distance_value, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–æ—á–µ–∫
        self.reset_btn = Gtk.Button(label="‚Ü∫")
        self.reset_btn.get_style_context().add_class("reset-btn")
        self.reset_btn.connect("clicked", self.reset_points)
        self.reset_btn.set_tooltip_text("–°–±—Ä–æ—Å–∏—Ç—å —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (R)")
        self.control_box.pack_end(self.reset_btn, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ YouTube (–≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
        self.youtube_btn = Gtk.Button(label="Y")
        self.youtube_btn.get_style_context().add_class("youtube-btn")
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        self.youtube_btn.connect("clicked", lambda w: webbrowser.open("https://www.youtube.com/@EXTRUD/shorts"))
        self.youtube_btn.set_tooltip_text("YouTube –∫–∞–Ω–∞–ª EXTRUD")
        self.control_box.pack_end(self.youtube_btn, False, False, 0)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä—Ö –æ–∫–æ–Ω
        self.top_btn = Gtk.ToggleButton(label="üîù")
        self.top_btn.set_active(True)
        self.top_btn.connect("toggled", self.on_top_toggled)
        self.top_btn.set_tooltip_text("–í—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω")
        self.control_box.pack_end(self.top_btn, False, False, 0)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        css_provider = Gtk.CssProvider()
        css = b"""
        * {
            font-family: 'Sans';
            font-size: 10pt;
        }
        .close-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #FF6B6B;
            color: white;
            border: none;
        }
        .reset-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #3498DB;
            color: white;
            border: none;
        }
        .youtube-btn {
            font-weight: bold;
            font-size: 14px;
            min-width: 20px;
            min-height: 20px;
            border-radius: 10px;
            background-color: #FF0000;
            color: white;
            border: none;
        }
        .distance-value {
            font-weight: bold;
            color: #27AE60;
            min-width: 80px;
        }
        .scale-value {
            font-weight: bold;
            color: #3498DB;
            min-width: 150px;
        }
        .calibration-active {
            background-color: #FF9800;
            color: white;
        }
        """
        css_provider.load_from_data(css)
        style_context = self.control_box.get_style_context()
        style_context.add_provider(
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

    def on_calibration_toggled(self, button):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.calibration_mode = button.get_active()
        self.calibration_result = None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        if self.calibration_mode:
            button.get_style_context().add_class("calibration-active")
            # –§–∏–∫—Å–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –Ω–∞ 225
            self.scale_combo.set_active(MAP_SCALES.index(225))
            self.scale_combo.set_sensitive(False)
            self.distance_label.set_text("–ú–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–∏–∫—Å–µ–ª—å:")
            self.distance_value.set_text("0.00")
        else:
            button.get_style_context().remove_class("calibration-active")
            self.scale_combo.set_sensitive(True)
            self.distance_label.set_text("–î–∏—Å—Ç–∞–Ω—Ü–∏—è:")
            self.distance_value.set_text("0.00 –º")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
        self.reset_points()
        self.queue_draw()

    def on_top_toggled(self, button):
        self.set_keep_above(button.get_active())
        if self.get_realized():
            self.on_realize(None)

    def on_scale_changed(self, combo):
        scale_str = combo.get_active_text()
        if scale_str:
            try:
                self.selected_scale = int(scale_str)
                self.recalculate_scale()
                self.save_config()
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
                self.queue_draw()
            except ValueError:
                pass

    def draw_cross(self, cr, x, y, color, size=10, width=2):
        """–†–∏—Å—É–µ—Ç –∫—Ä–µ—Å—Ç–∏–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        cr.set_source_rgba(*color)
        cr.set_line_width(width)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        cr.move_to(x - size, y)
        cr.line_to(x + size, y)
        cr.stroke()

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        cr.move_to(x, y - size)
        cr.line_to(x, y + size)
        cr.stroke()

    def calculate_meters_per_pixel(self, pixels):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–∏–∫—Å–µ–ª—å –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        if pixels <= 0:
            return 0
        return BASE_SCALE_VALUE / pixels

    def on_draw(self, widget, cr):
        width = widget.get_allocated_width()
        height = widget.get_allocated_height()

        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        cr.set_source_rgba(0.2, 0.2, 0.2, 0.6)
        cr.rectangle(0, 0, width, height)
        cr.fill()

        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–∫–∏
        if self.start_point:
            # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ - –∑–µ–ª–µ–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫
            self.draw_cross(cr, self.start_point.x, self.start_point.y, (0, 1, 0, 1))

            # –õ–∏–Ω–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é –º—ã—à–∏ –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
            if self.end_point:
                target_point = self.end_point
            elif self.temp_point:
                target_point = self.temp_point
            else:
                return

            # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ - –∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫
            if self.end_point:
                self.draw_cross(cr, target_point.x, target_point.y, (1, 0, 0, 1))

            # –õ–∏–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            cr.set_source_rgba(1, 1, 1, 1)
            cr.set_line_width(2)
            cr.move_to(self.start_point.x, self.start_point.y)
            cr.line_to(target_point.x, target_point.y)

            # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Ä–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä
            if not self.end_point:
                cr.set_dash([5, 3], 0)
                cr.stroke()
                cr.set_dash([], 0)
            else:
                cr.stroke()

            # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ª–∏–Ω–∏—é
            if self.start_point and target_point:
                dx = target_point.x - self.start_point.x
                dy = target_point.y - self.start_point.y
                pixels = math.sqrt(dx**2 + dy**2)

                if self.calibration_mode:
                    # –í —Ä–µ–∂–∏–º–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä—ã –Ω–∞ –ø–∏–∫—Å–µ–ª—å
                    if self.end_point:
                        # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        meters_per_pixel = self.calculate_meters_per_pixel(pixels)
                        self.calibration_result = meters_per_pixel
                        display_text = f"{meters_per_pixel:.6f} –º/–ø–∏–∫—Å"
                    else:
                        # –ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º—ã—à–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏
                        display_text = f"{pixels:.1f} –ø–∏–∫—Å"
                else:
                    # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
                    meters = pixels * self.scale_factor
                    display_text = f"{meters:.1f} –º"

                cr.set_font_size(24)
                cr.set_source_rgba(1, 1, 1, 1)

                # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ - –≤—ã—à–µ –ª–∏–Ω–∏–∏
                text_x = (self.start_point.x + target_point.x) / 2
                text_y = (self.start_point.y + target_point.y) / 2 - 40

                cr.move_to(text_x, text_y)
                cr.show_text(display_text)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        if self.calibration_mode and not self.end_point:
            cr.set_font_size(16)
            cr.set_source_rgba(1, 1, 1, 0.8)
            cr.move_to(10, height - 30)
            cr.show_text("–ò–∑–º–µ—Ä—å—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 225 –º –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏")

    def on_button_press(self, widget, event):
        # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        if event.button == 3:
            self.start_point = Gdk.EventButton()
            self.start_point.x = event.x
            self.start_point.y = event.y
            self.end_point = None
            self.queue_draw()

        # –õ–µ–≤—ã–π –∫–ª–∏–∫ - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
        elif event.button == 1 and self.start_point:
            self.end_point = Gdk.EventButton()
            self.end_point.x = event.x
            self.end_point.y = event.y

            self.update_distance_display()
            self.queue_draw()

    def update_distance_display(self):
        if self.start_point and self.end_point:
            dx = self.end_point.x - self.start_point.x
            dy = self.end_point.y - self.start_point.y
            pixels = math.sqrt(dx**2 + dy**2)

            if self.calibration_mode:
                meters_per_pixel = self.calculate_meters_per_pixel(pixels)
                self.calibration_result = meters_per_pixel
                self.distance_value.set_text(f"{meters_per_pixel:.6f}")
            else:
                meters = pixels * self.scale_factor
                self.distance_value.set_text(f"{meters:.1f} –º")

    def on_mouse_move(self, widget, event):
        if self.start_point and not self.end_point:
            self.temp_point = Gdk.EventButton()
            self.temp_point.x = event.x
            self.temp_point.y = event.y

            self.queue_draw()

    def on_key_press(self, widget, event):
        keyval = event.keyval
        if keyval == Gdk.KEY_Escape:  # –í—ã—Ö–æ–¥ –ø–æ [Esc]
            self.destroy()
        elif keyval == Gdk.KEY_r:  # –°–±—Ä–æ—Å —Ç–æ—á–µ–∫
            self.reset_points()
        elif keyval == Gdk.KEY_t:  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –æ–∫–æ–Ω
            self.top_btn.set_active(not self.top_btn.get_active())
        elif keyval == Gdk.KEY_h:  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            self.horizontal_only = not self.horizontal_only
            self.queue_draw()
        elif keyval == Gdk.KEY_c:  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            self.calibration_btn.set_active(not self.calibration_btn.get_active())
        elif keyval == Gdk.KEY_y:  # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è YouTube
            webbrowser.open("https://www.youtube.com/@EXTRUD/shorts")
        return False

    def reset_points(self):
        self.start_point = None
        self.end_point = None
        self.temp_point = None
        self.calibration_result = None

        if self.calibration_mode:
            self.distance_value.set_text("0.00")
        else:
            self.distance_value.set_text("0.00 –º")

        self.queue_draw()

win = MapRuler()
win.show_all()
Gtk.main()
