# -*- coding: utf-8 -*-
"""Download a bunch of images.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rXJTowB7ur8SCPR0EgpGWfTRrtt3uqvB
"""

# Step 1: Setup and Imports
!pip install ipywidgets --quiet
import os, shutil, requests
import ipywidgets as widgets
from IPython.display import display, HTML, clear_output
from datetime import datetime
import calendar

# Step 2: Style + Branding
display(HTML("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans&display=swap');
* { font-family: 'Noto Sans', sans-serif !important; }
.hb-header { text-align: center; margin-bottom: 20px; }
.hb-header img { width: 180px; }
.hb-header h3 { font-size: 24px; color: #2e7d32; margin: 10px 0 5px; }
.hb-header p { color: #666; font-size: 14px; }
</style>
<div class='hb-header'>
  <img src='https://dam.hollandandbarrettimages.co.uk/search/_raw/6d7373a6-7676-4186-99a3-eafd5d5a8cd4/logo.svg' />
  <h3>H&B Image Downloader</h3>
  <p>Paste or upload SKU codes. Preview, download, or export image URLs. Add a note (e.g. BTA) for tracking.</p>
</div>
"""))

# Step 3: Setup date suffix
now = datetime.now()
month = (now.month % 12) + 1
year = now.year + (1 if month == 1 else 0)
month_str = calendar.month_name[month].lower()

# Step 4: Inputs
note = widgets.Text(placeholder='e.g. BTA / Promo name...', description='Note:', layout=widgets.Layout(width='50%'))
m40_input = widgets.Textarea(placeholder='Paste -40 SKUs here...', layout=widgets.Layout(height='100px'))
m40_upload = widgets.FileUpload(accept='.txt', multiple=False)
one1_input = widgets.Textarea(placeholder='Paste 1+1 SKUs here...', layout=widgets.Layout(height='100px'))
one1_upload = widgets.FileUpload(accept='.txt', multiple=False)

def handle_upload(upload_widget, text_widget):
    if upload_widget.value:
        file = list(upload_widget.value.values())[0]
        content = file['content'].decode('utf-8')
        text_widget.value = content.strip()

m40_upload.observe(lambda c: handle_upload(m40_upload, m40_input), names='value')
one1_upload.observe(lambda c: handle_upload(one1_upload, one1_input), names='value')

# Step 5: Utilities
def test_image(code):
    url = f"https://images.hollandandbarrettimages.co.uk/productimages/HB/750/0{code.strip()}_A.jpg"
    try:
        r = requests.head(url, timeout=5)
        return url if r.status_code == 200 else None
    except:
        return None

def generate_urls(codes):
    return [test_image(code) for code in codes if test_image(code)]

def write_sku_txt(skus, folder):
    with open(os.path.join(folder, 'skus.txt'), 'w') as f:
        f.write('\n'.join(skus))

def download_and_zip(codes, folder, zipname):
    os.makedirs(folder, exist_ok=True)
    urls = generate_urls(codes)
    write_sku_txt(codes, folder)
    for url in urls:
        filename = os.path.join(folder, url.split("/")[-1])
        try:
            r = requests.get(url)
            with open(filename, 'wb') as f: f.write(r.content)
            print("‚úÖ Downloaded:", filename)
        except: print("‚ùå Failed:", url)
    shutil.make_archive(zipname, 'zip', folder)

# Step 6: Buttons
preview_btn = widgets.Button(description='üëÄ Preview', button_style='info')
download_btn = widgets.Button(description='‚¨áÔ∏è Download ZIPs', button_style='success')
copy_links_btn = widgets.Button(description='üîó Copy Image URLs', button_style='primary')
preview_out = widgets.Output()
status_out = widgets.Output()
link_out = widgets.Output()

# Step 7: Preview
def on_preview(b):
    preview_out.clear_output()
    with preview_out:
        def show(title, box):
            skus = box.value.strip().splitlines()
            urls = [test_image(code) for code in skus]
            display(HTML(f"<h4>{title}</h4>"))
            failed = []
            for code, url in zip(skus, urls):
                if url:
                    display(HTML(f"<img src='{url}' width='100' style='margin:3px;border:1px solid #ccc;'>"))
                else:
                    failed.append(code)
            if failed:
                display(HTML(f"<p style='color:red;'>‚ùå Broken SKUs in {title}:<br>{', '.join(failed)}</p>"))
        show("-40%", m40_input)
        show("1+1", one1_input)

# Step 8: Download
def on_download(b):
    status_out.clear_output()
    with status_out:
        suffix = f"_{month_str}_{note.value.strip().replace(' ', '_')}" if note.value else f"_{month_str}"
        m_codes = [code for code in m40_input.value.strip().splitlines() if test_image(code)]
        o_codes = [code for code in one1_input.value.strip().splitlines() if test_image(code)]
        download_and_zip(m_codes, f"-40{suffix}", f"-40{suffix}")
        download_and_zip(o_codes, f"1+1{suffix}", f"1+1{suffix}")
        print("‚úÖ Done. Check the left ‚ÄòFiles‚Äô tab to download ZIPs.")

# Step 9: Export image links
def on_copy_links(b):
    link_out.clear_output()
    with link_out:
        skus = m40_input.value.strip().splitlines() + one1_input.value.strip().splitlines()
        urls = [test_image(code) for code in skus if test_image(code)]
        display(HTML("<h4>Generated URLs</h4>"))
        for u in urls:
            display(HTML(f"<a href='{u}' target='_blank'>{u}</a>"))

preview_btn.on_click(on_preview)
download_btn.on_click(on_download)
copy_links_btn.on_click(on_copy_links)

# Step 10: Layout
display(note)
display(widgets.HTML("<b>-40 SKUs</b>"), m40_input, m40_upload)
display(widgets.HTML("<b>1+1 SKUs</b>"), one1_input, one1_upload)
display(widgets.HBox([preview_btn, download_btn, copy_links_btn]))
display(preview_out, status_out, link_out)