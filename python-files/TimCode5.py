import tkinter as tk
import ctypes
from tkinter import Text, Scrollbar, messagebox, filedialog, font, colorchooser, ttk
import subprocess
import sys
import re
from tkinter import filedialog, messagebox, simpledialog
from tkinter import ttk, Listbox, Scrollbar, Button, colorchooser, font
from functools import partial
from difflib import ndiff
import subprocess
import os
import math
import random
import itertools
import webbrowser
import threading
import queue
import time
import traceback
import tempfile
import traceback

gfont = ("Courier", 14)
venom = 0

# Замены
variables = {}


#Помощь
commands_dict = {
    # Встроенные функции
    'ожидать': 'Приостанавливает выполнение корутины. Пример: ожидать(объект). Аналог: await',
    'модуль': 'Возвращает абсолютное значение числа. Пример: модуль(-5). Аналог: abs',
    'aитер': 'Возвращает асинхронный итератор. Пример: aитер(асинхронный_объект). Аналог: aiter',
    'все': 'Проверяет, все элементы истинны. Пример: все([True, 1, "текст"]). Аналог: all',
    'любой': 'Проверяет, есть ли истинный элемент. Пример: любой([False, 0, "a"]). Аналог: any',
    'аследующий': 'Получает следующий элемент асинхронного итератора. Пример: аследующий(итератор). Аналог: anext',
    'аски': 'Возвращает ASCII-представление строки. Пример: аски("строка"). Аналог: ascii',
    'двоичный': 'Преобразует число в двоичную строку. Пример: двоичный(10). Аналог: bin',
    'логическое': 'Преобразует в булево значение. Пример: логическое(1). Аналог: bool',
    'откладка': 'Запускает отладчик. Пример: откладка(). Аналог: breakpoint',
    'байтмассив': 'Создает массив байтов. Пример: байтмассив(10). Аналог: bytearray',
    'байты': 'Создает неизменяемые байты. Пример: байты([1,2,3]). Аналог: bytes',
    'вызываемый?': 'Проверяет, можно ли вызвать объект. Пример: вызываемый?(функция). Аналог: callable',
    'символ': 'Возвращает символ по Unicode коду. Пример: символ(65). Аналог: chr',
    '@метод_класса': 'Декоратор для методов класса. Пример: @метод_класса\\ndef метод(...). Аналог: @classmethod',
    'компилировать': 'Компилирует код в объект. Пример: компилировать("код", "file.py"). Аналог: compile',
    'комплексное': 'Создает комплексное число. Пример: комплексное(3, 4). Аналог: complex',
    'реальная': 'Возвращает действительную часть комплексного числа. Пример: число.реальная. Аналог: real',
    'мнимая': 'Возвращает мнимую часть комплексного числа. Пример: число.мнимая. Аналог: imag',
    'документация': 'Возвращает документацию объекта. Пример: объект.документация. Аналог: __doc__',
    'удалить_атрибут': 'Удаляет атрибут объекта. Пример: удалить_атрибут(объект, "атрибут"). Аналог: delattr',
    'словарь': 'Создает словарь. Пример: словарь(ключ=значение). Аналог: dict',
    'делост': 'Возвращает частное и остаток от деления. Пример: делост(10, 3). Аналог: divmod',
    'перечислять': 'Создает нумерованный итератор. Пример: перечислять(список). Аналог: enumerate',
    'вычислить': 'Выполняет строку как код. Пример: вычислить("2 + 2"). Аналог: eval',
    'выполнить': 'Выполняет блок кода. Пример: выполнить("a = 5"). Аналог: exec',
    'фильтр': 'Фильтрует элементы. Пример: фильтр(функция, список). Аналог: filter',
    'дробь': 'Преобразует в число с плавающей точкой. Пример: дробь("3.14"). Аналог: float',
    'формат': 'Форматирует строку. Пример: формат(число, ".2f"). Аналог: format',
    'неизменяемое_множество': 'Создает неизменяемое множество. Пример: неизменяемое_множество([1,2,3]). Аналог: frozenset',
    'получить_атрибут': 'Возвращает атрибут объекта. Пример: получить_атрибут(объект, "атрибут"). Аналог: getattr',
    'глобальные': 'Возвращает словарь глобальных переменных. Пример: глобальные(). Аналог: globals',
    'есть_атрибут?': 'Проверяет наличие атрибута. Пример: есть_атрибут?(объект, "атрибут"). Аналог: hasattr',
    'хэш': 'Возвращает хэш объекта. Пример: хэш("текст"). Аналог: hash',
    'шеснадцатиричное': 'Преобразует число в шестнадцатеричную строку. Пример: шеснадцатиричное(255). Аналог: hex',
    'идентификатор': 'Возвращает уникальный ID объекта. Пример: идентификатор(объект). Аналог: id',
    'ввод': 'Считывает ввод пользователя. Пример: ввод("Введите число: "). Аналог: input',
    'число': 'Преобразует в целое число. Пример: число("42"). Аналог: int',
    'является_экземпляром?': 'Проверяет принадлежность к классу. Пример: является_экземпляром?(объект, класс). Аналог: isinstance',
    'является_подклассом?': 'Проверяет наследование. Пример: является_подклассом?(класс, родитель). Аналог: issubclass',
    'итератор': 'Создает итератор. Пример: итератор(список). Аналог: iter',
    'длина': 'Возвращает длину объекта. Пример: длина([1,2,3]). Аналог: len',
    'список': 'Создает список. Пример: список("abc"). Аналог: list',
    'локальные': 'Возвращает словарь локальных переменных. Пример: локальные(). Аналог: locals',
    'отображение': 'Применяет функцию к элементам. Пример: отоброжение(функция, список). Аналог: map',
    'макс': 'Находит максимальный элемент. Пример: макс([1,5,3]). Аналог: max',
    'мин': 'Находит минимальный элемент. Пример: мин([1,5,3]). Аналог: min',
    'вывод': 'Выводит данные на экран. Пример: вывод("Привет!"). Аналог: print',
    'просмотр_памяти': 'Создает представление памяти. Пример: просмотр_памяти(байты). Аналог: memoryview',
    'следующий': 'Получает следующий элемент итератора. Пример: следующий(итератор). Аналог: next',
    'обьект': 'Создает базовый объект. Пример: обьект(). Аналог: object',
    'восьмиричное': 'Преобразует число в восьмеричную строку. Пример: восьмиричное(64). Аналог: oct',
    'открыть': 'Открывает файл. Пример: открыть("файл.txt"). Аналог: open',
    'режим_чтения': 'Указывает режим открытия файла. Пример: режим_чтения="r". Аналог: mode',
    'буферизация': 'Управление буферизацией файла. Пример: буферизация=1. Аналог: buffering',
    'кодировка': 'Задает кодировку файла. Пример: кодировка="utf-8". Аналог: encoding',
    'ошибки': 'Управление обработкой ошибок. Пример: ошибки="ignore". Аналог: errors',
    'новая_строка': 'Контроль символов новой строки. Пример: новая_строка="\\n". Аналог: newline',
    'закрыть_фд': 'Указывает закрывать ли файловый дескриптор. Пример: закрыть_фд=False. Аналог: closefd',
    'обьект_открытия': 'Пользовательский объект для открытия файла. Пример: обьект_открытия=мой_открыватель. Аналог: opener',
    'номер_Unicode': 'Возвращает Unicode код символа. Пример: номер_Unicode("A"). Аналог: ord',
    'возведение': 'Возводит число в степень. Пример: возведение(2, 3). Аналог: pow',
    'свойства_атрибута': 'Создает свойство объекта. Пример: свойство = свойства_атрибута(функция). Аналог: property',
    'фполучить': 'Функция для получения свойства. Пример: свойство.фполучить = функция. Аналог: fget',
    'фзадать': 'Функция для установки свойства. Пример: свойство.фзадать = функция. Аналог: fset',
    'фудалить': 'Функция для удаления свойства. Пример: свойство.фудалить = функция. Аналог: fdel',
    'док': 'Документация свойства. Пример: свойство.док = "описание". Аналог: doc',
    'файл': 'Объект файла для вывода. Пример: вывод("текст", файл=файл). Аналог: file',
    'разделитель': 'Разделитель между элементами. Пример: вывод(1, 2, разделитель="|"). Аналог: sep',
    'промыть': 'Сбрасывает буфер вывода. Пример: вывод("текст", промыть=True). Аналог: flush',
    'диапазон': 'Создает последовательность чисел. Пример: диапазон(5). Аналог: range',
    'голые_данные': 'Возвращает строку для отладки. Пример: голые_данные(объект). Аналог: repr',
    'перевернутый': 'Возвращает обратный итератор. Пример: перевернутый(список). Аналог: reversed',
    'округлить': 'Округляет число. Пример: округлить(3.1415, 2). Аналог: round',
    'множество': 'Создает множество. Пример: множество([1,2,3]). Аналог: set',
    'задать_атрибут': 'Устанавливает атрибут. Пример: задать_атрибут(объект, "атрибут", значение). Аналог: setattr',
    'срез': 'Создает объект среза. Пример: срез(1, 10, 2). Аналог: slice',
    'сортированный': 'Возвращает отсортированный список. Пример: сортированный([3,1,2]). Аналог: sorted',
    '@статический_метод': 'Декоратор для статических методов. Пример: @статический_метод\\ndef метод(...). Аналог: @staticmethod',
    'строка': 'Преобразует объект в строку. Пример: строка(42). Аналог: str',
    'сумма': 'Суммирует элементы. Пример: сумма([1,2,3]). Аналог: sum',
    'супер': 'Возвращает прокси-объект родительского класса. Пример: супер(). Аналог: super',
    'кортеж': 'Создает кортеж. Пример: кортеж([1,2,3]). Аналог: tuple',
    'тип': 'Возвращает тип объекта. Пример: тип(5). Аналог: type',
    'локальные_имена': 'Возвращает атрибуты объекта. Пример: локальные_имена(объект). Аналог: vars',
    'запаковать': 'Объединяет итерируемые объекты. Пример: запаковать(список1, список2). Аналог: zip',
    'помощь': 'Показывает справку. Пример: помощь(объект). Аналог: help',

    # Конструкции языка
    'внутри': 'Проверяет вхождение элемента. Пример: если элемент внутри списка. Аналог: in',
    'это': 'Проверяет идентичность объектов. Пример: если a это None. Аналог: is',
    'не': 'Логическое отрицание. Пример: если не условие. Аналог: not',
    'лямбда': 'Создает анонимную функцию. Пример: лямбда x: x+1. Аналог: lambda',
    'и': 'Логическое И. Пример: если условие1 и условие2. Аналог: and',
    'или': 'Логическое ИЛИ. Пример: если условие1 или условие2. Аналог: or',
    'равно': 'Проверка равенства. Пример: если 5 равно 5. Аналог: ==',
    'неравно': 'Проверка неравенства. Пример: если 5 неравно 3. Аналог: !=',
    'больше': 'Проверка "больше". Пример: если 10 больще 5. Аналог: >',
    'меньше': 'Проверка "меньше". Пример: если 3 меньше 5. Аналог: <',
    'больше_равно': 'Проверка "больше или равно". Пример: если 5 больше_равно 5. Аналог: >=',
    'меньше_равно': 'Проверка "меньше или равно". Пример: если 4 меньше_равно 5. Аналог: <=',
    'если': 'Условный оператор. Пример: если x > 0: ... Аналог: if',
    'иначесли': 'Дополнительное условие. Пример: иначесли x == 0: ... Аналог: elif',
    'иначе': 'Блок "в противном случае". Пример: иначе: ... Аналог: else',
    'для': 'Цикл по элементам. Пример: для элемента в списке: ... Аналог: for',
    'пока': 'Цикл с условием. Пример: пока условие: ... Аналог: while',
    'Правда': 'Логическое значение "истина". Пример: Правда. Аналог: True',
    'Ложь': 'Логическое значение "ложь". Пример: Ложь. Аналог: False',
    'использовать': 'Импортирует модуль. Пример: использовать модуль. Аналог: import',
    'из': 'Импортирует из модуля. Пример: из модуль использовать имя. Аналог: from',
    'как': 'Создает псевдоним. Пример: использовать модуль как псевдоним. Аналог: as',
    'определить': 'Объявляет функцию. Пример: определить функция(): ... Аналог: def',
    'вернуть': 'Возвращает значение. Пример: вернуть 42. Аналог: return',
    'уступить': 'Создает генератор. Пример: уступить значение. Аналог: yield',
    'пропустить': 'Пустая операция. Пример: пропустить. Аналог: pass',
    'глобальная': 'Объявляет глобальную переменную. Пример: глобальная x. Аналог: global',
    'нелокальная': 'Объявляет нелокальную переменную. Пример: нелокальная x. Аналог: nonlocal',
    'локальная': 'Локальная переменная (неявно объявляется). Пример: локальная x = 5. Аналог: (в Python нет прямой аналогии)',
    'попробовать': 'Блок обработки исключений. Пример: попробовать: ... кроме: ... Аналог: try',
    'Исключение': 'Базовый класс исключений. Пример: поднять Исключение("ошибка"). Аналог: Exception',
    'Группа_исключений': 'Группа исключений. Пример: поднять Группа_исключений(...). Аналог: ExceptionGroup',
    'кроме': 'Блок перехвата исключений. Пример: кроме Исключение: ... Аналог: except',
    'вызвать': 'Вызывает исключение. Пример: вызвать Исключение("ошибка"). Аналог: raise',
    'соотнести': 'Сопоставление с образцом. Пример: соотнести значение: ... Аналог: match',
    'случай': 'Вариант в операторе соотнести. Пример: случай паттерн: ... Аналог: case',
    'класс': 'Объявляет класс. Пример: класс МойКласс: ... Аналог: class',

    # Методы строк и коллекций
    'вставить': 'Вставляет элемент в список. Пример: список.вставить(индекс, элемент). Аналог: insert',
    'присоединить': 'Добавляет элемент в конец списка. Пример: список.присоединить(элемент). Аналог: append',
    'перевернуть': 'Разворачивает список. Пример: список.перевернуть(). Аналог: reverse',
    'убрать': 'Удаляет элемент из списка. Пример: список.убрать(элемент). Аналог: remove',
    'вырезать': 'Удаляет элемент по индексу. Пример: список.вырезать(индекс). Аналог: pop',
    'получить': 'Возвращает значение из словаря. Пример: словарь.получить(ключ). Аналог: get',
    'ключи': 'Возвращает ключи словаря. Пример: словарь.ключи(). Аналог: keys',
    'значения': 'Возвращает значения словаря. Пример: словарь.значения(). Аналог: values',
    'пары_словаря': 'Возвращает пары ключ-значение. Пример: словарь.пары_словаря(). Аналог: items',
    'обновить': 'Обновляет словарь. Пример: словарь.обновить(другой_словарь). Аналог: update',
    'прибавить': 'Добавляет элемент в множество. Пример: множество.прибавить(элемент). Аналог: add',
    'обьединение': 'Объединяет множества. Пример: множество.обьединение(другое_множество). Аналог: union',
    'пересечение': 'Возвращает пересечение множеств. Пример: множество.пересечение(другое_множество). Аналог: intersection',
    'отличия': 'Возвращает разность множеств. Пример: множество.отличия(другое_множество). Аналог: difference',
    'нарицательное': 'Первая буква в верхний регистр. Пример: строка.нарицательное(). Аналог: capitalize',
    'собственное': 'Строка в нижний регистр (для сравнений). Пример: строка.собственное(). Аналог: casefold',
    'заглавные': 'Все буквы в верхний регистр. Пример: строка.заглавные(). Аналог: upper',
    'строчные': 'Все буквы в нижний регистр. Пример: строка.строчные(). Аналог: lower',
    'заглавные?': 'Проверяет, все ли символы в верхнем регистре. Пример: строка.заглавные?(). Аналог: isupper',
    'строчные?': 'Проверяет, все ли символы в нижнем регистре. Пример: строка.строчные?(). Аналог: islower',
    'буквенная?': 'Проверяет, все ли символы буквы. Пример: строка.буквенная?(). Аналог: isalpha',
    'циферная?': 'Проверяет, все ли символы цифры. Пример: строка.циферная?(). Аналог: isdigit',
    'буквенноциферная?': 'Проверяет, все ли символы буквы или цифры. Пример: строка.буквенноциферная?(). Аналог: isalnum',
    'посчитать': 'Считает вхождения подстроки. Пример: строка.посчитать("подстрока"). Аналог: count',
    'найти': 'Ищет подстроку (возвращает индекс). Пример: строка.найти("подстрока"). Аналог: find',
    'найти_с_конца': 'Ищет подстроку с конца. Пример: строка.найти_с_конца("подстрока"). Аналог: rfind',
    'заменить': 'Заменяет подстроку. Пример: строка.заменить("старое", "новое"). Аналог: replace',
    'разделить': 'Разделяет строку по разделителю. Пример: строка.разделить(","). Аналог: split',
    'из_пробелов?': 'Проверяет, состоит ли строка из пробелов. Пример: строка.из_пробелов?(). Аналог: isspace',
    'соединить': 'Объединяет элементы через разделитель. Пример: разделитель.соединить(список). Аналог: join',
    'отсечь': 'Удаляет пробелы по краям. Пример: строка.отсечь(). Аналог: strip',
    'центрировать': 'Центрирует строку. Пример: строка.центрировать(20). Аналог: center',
    'добавить': 'Добавляет элемент в список. Пример: список.добавить(элемент). Аналог: append',
    'расширить': 'Расширяет список элементами. Пример: список.расширить(другой_список). Аналог: extend',
    'очистить': 'Очищает коллекцию. Пример: список.очистить(). Аналог: clear',
    'сортировать': 'Сортирует список. Пример: список.сортировать(). Аналог: sort',
    'копировать': 'Создает поверхностную копию. Пример: копия = список.копировать(). Аналог: copy',
    'нет_обшего?': 'Проверяет, нет пересечений между множествами. Пример: множество.нет_обшего?(другое_множество). Аналог: isdisjoint',
    'подмножество?': 'Проверяет, является ли подмножеством. Пример: множество.подмножество?(другое_множество). Аналог: issubset',
    'надмножество?': 'Проверяет, является ли надмножеством. Пример: множество.надмножество?(другое_множество). Аналог: issuperset',
    'симметричные_отличия': 'Возвращает симметричную разность. Пример: множество.симметричные_отличия(другое_множество). Аналог: symmetric_difference',
    'обновить_отличия': 'Обновляет множество разностью. Пример: множество.обновить_отличия(другое_множество). Аналог: difference_update',
}

#Перевод команд
replacements = {
        #Встроенные команды
        'ожидать':'await',
        'модуль':'abs',
        'aитер':'aiter',
        'все':'all',
        'любой':'any',
        'аследующий':'anext',
        'аски':'ascii',
        'двоичный':'bin',
        'логическое':'bool',
        'откладка':'breakpoint',
        'байтмассив':'bytearray',
        'байты':'bytes',
        'вызываемый?':'callable',
        'символ':'chr',
        'метод_класса':'classmethod',
        'компилировать':'compile',
        'комплексное':'complex',
        'реальная':'real',
        'мнимая':'imag',
        'документация':'doc',
        'удалить_атрибут':'delattr',
        'словарь':'dict',
        'делост':'divmod',
        'директ':'dir',
        'перечислять':'enumerate',
        'вычислить':'eval',
        'выполнить':'exec',
        'фильтр':'filter',
        'дробь':'float',
        'формат':'format',
        'неизменяемое_множество':'frozenset',
        'получить_атрибут':'getattr',
        'глобальные':'globals',
        'есть_атрибут?':'hasattr',
        'хэш':'hash',
        'шеснадцатиричное':'hex',
        'идентификатор':'id',
        'ввод': 'input',
        'число':'int',
        'является_экземпляром?':'isinstance',
        'является_подклассом?':'issubclass',
        'итератор':'iter',
        'длина':'len',
        'список':'list',
        'локальные':'locals',
        'отображение':'map',
        'макс':'max',
        'мин':'min',
        'вывод':'print',
        'просмотр_памяти':'memoryview',
        'следующий':'next',
        'обьект':'object',
        'восьмиричное':'oct',
        'открыть':'open',
        'режим_чтения':'mode',
        'буферизация':'buffering',
        'кодировка':'encoding',
        'ошибки':'errors',
        'новая_строка':'newline',
        'закрыть_фд':'closefd',
        'обьект_открытия':'opener',
        'номер_Unicode':'ord',
        'возведение':'pow',
        'вывод':'print',
        'закрыть':'close',
        'свойства_атрибута':'property',
        'фполучить':'fget',
        'фзадать':'fset',
        'фудалить':'fdel',
        'удалить_переменную':'del',
        'док':'doc',
        'файл':'file',
        'разделитель':'sep',
        'промыть':'flush',        
        'диапазон':'range',
        'голые_данные':'repr',
        'перевернутый':'reversed',
        'округлить':'round',
        'множество':'set',
        'задать_атрибут':'setattr',
        'срез':'slice',
        'сортированный':'sorted',
        'статический_метод':'staticmethod',
        'метод_класса':'classmethod',
        'строка':'str',
        'сумма':'sum',
        'супер':'super',
        'кортеж':'tupple',
        'тип':'type',
        'локальные_имена':'vars',
        'запаковать':'zip',
        'помощь':'show_help',
        #Методы конструкций
        'присвоить':'=',
        'при':'with',
        'внутри':'in',
        'в':'in',
        'диапазоне':'range',
        'это':'is',
        'не':'not',
        'лямбда':'lambda',
        'и':'and',
        'или':'or',
        'прервать':'break',
        'продолжить':'continue',
        'равно':'==',
        'неравно':'!=',
        'больше':'>',
        'меньше':'<',
        'больше_равно':'>=',
        'меньше_равно':'<=',
        'если':'if',
        'иначесли':'elif',
        'иначе':'else',
        'для':'for',
        'пока':'while',
        'Правда':'True',
        'Ложь':'False',
        'использовать':'import',
        'импортировать':'import',
        'из':'from',
        'как':'as',
        'определить':'def',
        'вернуть':'return',
        'уступить':'yield',
        'пропустить':'pass',
        'глобальная':'global',
        'нелокальная':'nonlocal',
        'локальная':'local',
        'попробовать':'try',
        'Исключение':'Exception',
        'Группа_исключений':'ExceptionGroup',
        'кроме':'except',
        'вызвать':'raise',
        'соотнести':'match',
        'случай':'case',
        'класс':'class',
        '__анотации__':'__annotations__',
        '__построить_класс__':'__build_class__',
        '__встроенные__':'__builtins__',
        '__кэшированный__':'__cached__',
        '__дебаг__':'__debug__',
        '__документация__':'__doc__',
        '__файл__':'__file__',
        '__использовать__':'__import__',
        '__загрузчик__':'__loader__',
        '__имя__':'__name__',
        '__иниц__':'__init__',
        '__пакет__':'__package__',
        '__спец__':'__spec__',
        '__удалить__':'__del__',
        '__слоты__':'__slots__',
        'сам':'self',
        'сообщение_информация': 'messagebox.showinfo',
        'отсутствует':'None',
        #Ошибки и т.п.
    'Ошибка_синтаксиса': 'SyntaxError',
    'Ошибка_отступа': 'IndentationError',
    'Ошибка_типа': 'TypeError',
    'Ошибка_значения': 'ValueError',
    'Ошибка_имени': 'NameError',
    'Ошибка_индекса': 'IndexError',
    'Ошибка_ключа': 'KeyError',
    'Ошибка_атрибута': 'AttributeError',
    'Файл_не_найден': 'FileNotFoundError',
    'Ошибка_деления_на_ноль': 'ZeroDivisionError',
    'Ошибка_импорта': 'ImportError',
    'Ошибка_выполнения': 'RuntimeError',
    'Ошибка_памяти': 'MemoryError',
    'Ошибка_поиска': 'LookupError',
    'Ошибка_переполнения': 'OverflowError',
    'Ошибка_ссылки': 'ReferenceError',
    'Ошибка_буфера': 'BufferError',
    'Ошибка_блока_ввода_вывода': 'BlockingIOError',
    'Ошибка_разорванного_канала': 'BrokenPipeError',
    'Ошибка_конца файла': 'EOFError',
    'Ошибка_плавающей точки': 'FloatingPointError',
    'Файл_уже_существует': 'FileExistsError',
    'Выход_из_системы': 'SystemExit',
    'Системная_ошибка': 'SystemError',
    'Ошибка_завершения итерации': 'StopIteration',
    'Ошибка_неинициализированной локальной переменной': 'UnboundLocalError',
    'Ошибка_декодирования_Unicode': 'UnicodeDecodeError',
    'Ошибка_кодирования_Unicode': 'UnicodeEncodeError',
    'Ошибка_Unicode': 'UnicodeError',
    'Ошибка_утверждения': 'AssertionError',
    'Выход_генератора': 'GeneratorExit',
    'Ошибка_табуляции': 'TabError',

        #Методы строк и последовательностей.
        'вставить':'insert',
        'присоединить':'append',
        'перевернуть':'reverse',
        'убрать':'remove',
        'индекс':'индекс',
        'вырезать':'pop',
        'получить':'get',
        'ключ':'key',
        'ключи':'keys',
        'значения':'values',
        'пары_словаря':'items',
        'обновить':'update',
        'прибавить':'add',
        'обьединение':'union',
        'пересечение':'intersection',
        'отличия':'difference',
        'нарицательное':'capitalize',
        'собственное':'casefold',
        'заглавные':'upper',
        'строчные':'lower',
        'заглавные?':'isupper',
        'строчные?':'islover',
        'буквенная?':'isalpha',
        'циферная?':'isdigit',
        'буквенноциферная?':'isalnum',
        'посчитать':'count',
        'найти':'find',
        'найти_с_конца':'rfind',
        'заменить':'replace',
        'разделить':'split',
        'из_пробелов?':'isspace',
        'соединить':'join',
        'отсечь':'strip',
        'центрировать':'center',
        'добавить':'append',
        'расширить':'extend',
        'очистить':'clear',
        'сортировать':'sort',
        'копировать':'copy',
        'нет_обшего?':'isdisjoint',
        'подмножество?':'issubset',
        'надмножество?':'issuperset',
        'симметричные_отличия':'symmetric_difference',
        'обновить':'update',
        'обновить_отличия':'difference_update',
        #модуль математика и cmath
        'математика':'math',
        'комплексная_математика':'cmath',
        'фаза':'phase',
        'поляр':'polar',
        'рект':'rect',
        'большее_целое':'ceil',
        'меньшее_целое':'floor',
        'корень':'sqrt',
        'кубический_корень':'cbrt',
        'аркосинус':'acos',
        'гиперболический_аркосинус':'acosh',
        'арксинус':'asin',
        'гиперболический_арксинус':'asinh',
        'арктангенс':'atan',
        'арктангенс2':'atan2',
        'гиперболический_арктангенс':'atanh',
        'гиперболический_синус':'sinh',
        'гиперболический_косинус':'cosh',
        'гиперболический_тангенс':'tanh',
        'экспонента':'exp',
        'экспонента2':'exp2',
        'гамма':'gamma',
        'расстояние':'dist',
        'фма':'fma',
        'близкое?':'isclose',
        'относительная_погрешность':'rel_tol',
        'абсолютная_погрешность':'abs_tol',
        'бесконечность?':'isinf',
        'синус':'sin',
        'косинус':'cos',
        'тангенс':'tan',
        'градусы':'degrees',
        'радианы':'radians',
        'факториал':'factorial',
        'логарифм':'log',
        'фсум':'fsum',
        'фабс':'fabs',
        'фмод':'fmod',
        'копзнак':'copysign',
        'нод':'gcd',
        'нок':'lcm',
        'тау':'tau',
        'пи':'pi',
        'бесконечность':'inf',
        'гипотинуза':'hypot',
        'нечисло':'nan',
#модуль случайность
        'случайность':'random',
        'случисло':'randint',
        'рандробь':'random',
        'случдробь':'uniform',
        'выбор':'choice',
        'выборы':'choices',
        'перемешать':'shuffle',
        'дискретное_распределение':'binomialvariate', #random.expovariate random.gammavariate random.gauss random.getrandbits random.getstate random.lognormvariate random.seed random.sample random.triangular random.vonmisesvariate
        'рандиапазон':'randrange',
        'экспоненциальное_распределение':'expovariate',
        'пример':'sample',
        'нормальное_распределение':'normalvariate',
        'логнормальное_распределение':'lognormalvariate',
        'гамма_распределение':'gammavariate',
        'сид':'seed',
        'гаусс':'gauss',
        '':'',
#комбинаторика
        'комбинаторика':'itertools',
        'перестановки':'permutations',
        'сочетания':'combinations',
        'повсочетания':'combinations_with_replacements',
        'продукт':'product',
        'группировать':'groupby',
        'цепь':'chain',
        'счет':'count',
        'цикл':'cycle',
        'броситьпока':'dropwhile',
        'взятьпока':'takewhile',
        'тройник':'tee',
#Графический интерфейс

        'графический_интерфейс': 'tkinter',
        #Элементы
        'оформление':'ttk',
        'главный_цикл': 'mainloop',
        'Кнопка':'Button',
        'Окно':'Tk',
        'Метка':'Label',
        'Текстовое_поле':'Entry',
        'Текстовая_область':'Text',
        'Строковая_переменная':'StringVar',
        'Целочисленная_переменная':'IntVar',
        'Логическая_переменная':'BoleanVar',
        'Дробная_переменная':'DoubleVar',
        'Переменная':'Variable',
        'Флажок':'Checkbox',
        'Радиокнопка':'Radiobutton',
        'Каркас':'Frame',
        'Листбокс':'Listbox',
        'Скрол':'Scrollbar',
        'Выпадающий_список':'Combobox',
        'до':'to',
        'от_':'from_',
        'Ползунок':'Scale',
        'Спинбокс':'Spinbox',
        'обертка':'wrap',
        'приращение':'increment',
        'Прогрессбар':'Progressbar',
        'конечный':'determinate',
        'бесконечный':'indeterminate',
        'Меню':'Menu',
        'Вкладки':'Notebook',
        'Изображение':'PhotoImage',
        'символ':'char',
        'слово':'word',
        'Дерево':'Treeview',
        'предок':'parent',
        'столбцы_таблицы':'columns',
        'отобразить_столбцы':'displaycolumns',
        'иид':'iid',
        'предмет':'item',
        'получить_ребенка':'get_children()',
        'показать':'show',
        'заголовки':'headings',
        'растяжение':'stretch',
        'заголовок':'heading',
        'выделение':'selection',
        'добавить_выделение':'selection_add',
        'задать_выделение':'selection_set',
        'Выбор_таблицы':'TreeviewSelect',
        'отсутствие':'none',
        'Верхнее_окно':'Toplevel',
        'отпустить_взятие':'grab_release',
        'взять_ввод':'grab_set',
        'сообщение':'message',
        'оповещение':'messagebox',
        'Холст':'Canvas',
        'внедрить_виджет':'window_create',
        'наконец':'finaly',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        #Информация о виджетах
        'инфа_класс':'winfo_class',
        'инфа_дети':'winfo_children:',
        'инфа_родитель':'winfo_parent',
        'инфа_окно_с_виджетом':'winfo_toplevel:',
        'инфа_ширина':'winfo_width',
        'инфа_высота':'winfo_height',
        'инфа_запщирина':'winfo_reqwidth',
        'инфа_запвысота':'winfo_reqheight',
        'инфа_x':'winfo_x ',
        'инфа_y':'winfo_y',
        'инфа_окноx':'winfo_rootx',
        'инфа_окноy':'winfo_rooty',
        'инфа_видимый':'winfo_viewable',
        #Методы
        'опция_окна':'configure',
        'размеры':'geometry',
        'изменяемость':'resizable',
        'минразмер':'minsize',
        'максразмер':'maxsize',
        'заголовок':'title',
        'иконка':'iconbitmap',
        'по_умолчанию':'default',
        'файл':'file',
        'фотоиконка':'iconphoto',
        'протокол':'protocol',
        'ЗАКРЫТИЕ_ОКНА':'WM_DELETE_WINDOW',
        'ПОЛУЧЕН_ФОКУС':'WM_TAKE_FOCUS',
        'СОХРАНЕНИЕ_СЕБЯ':'WM_SAVE_YOURSELF',
        'атрибуты':'attributes',
        'полноэкранный_режим':'-fullscreen',
        'прозрачность':'-alpha',
        'верхняя_панель':'-toolwindow',
        'поверх_других':'-topmost',
        'недоступно':'-disabled',
        'прозрачность_цвета':'-transparentcolor',
        'развернуть_окно':'-zoomed',
        'тип_окна':'-type',
        'путь_к_иконке':'-titlepath',
        'модификация_окна':'-modified',
        'оповещение_окна':'-notify',
        'обычное':'normal',
        'свернуть':'iconic',
        'развернуть':'zoomed',
        'скрыть':'withdraw',
        'отключенное':'disabled',
        'включенное':'!disabled',
        'активное':'active',
        'фокус':'focus',
        'нажатая':'pressed',
        'конфигурация':'config',
        'текст_виджета':'text',
        'цвет_фона':'bg',
        'цвет_текста':'fg',
        'шрифт_текста':'font',
        'команда':'command',
        'соединялка':'compund',
        'курсор':'cursor',
        'изображение':'image',
        'отступы':'pading',
        'состояние':'state',
        'текст':'text',
        'высота':'height',
        'тип_границы':'relief',
        'текстовая_переменная':'textvariable',
        'подчеркивание':'underline',
        'ширина':'width',
        'выравнивание':'justify',
        'длина_упаковки':'wraplength',
        'удалить':'delete',
        'задать':'set',
        'добавить_':'trace_add',
        'чтение':'read',
        'удаление':'unset',
        'изменение':'write',
        'записать':'write',
        'толщина_границы':'borderwidth',
        'диаметр_границы':'bd',
        'цвет_фокуса':'highlightcolor',
        'толщина_фокуса':'highlightthickness',
        'фон_выбранного':'selectbackground',
        'режим_выбора':'selectmode',
        'ОБЗОР':'BROWSE',
        'ОДИНОЧНЫЙ':'SINGLE',
        'МНОГОРАЗОВЫЙ':'MULTIPLE',
        'ДИАПОЗОНАЛЬНЫЙ':'EXTEND',
        'обзор':'browse',
        'одиночный':'single',
        'многоразовый':'multiple',
        'диапозональный':'extended',
        'горизонтальная_прокрутка':'xscrollcommand',
        'вертикальная_прокрутка':'yscrollcommand',
        '':'curselection',
        'количество_элементов':'size',
        'выделение_диапозона':'select_set',
        'выделение_включает':'select_includes',
        'очистить_выделение':'select_clear',
        'отображаемый_символ':'show',#Метод Entry
        'упаковка':'pack',
        'растянуть_на_весь':'expand',
        'расширенный':'expand',
        'растяжение':'fill',
        'якорь':'anchor',
        'сторона':'side',
        'отступ_x':'padx',
        'отступ_y':'pady',
        'отступ_содержимого_x':'ipadx',
        'отступ_содержимого_y':'ipady',
        'центр':'center',#+оригинальные стороны света sw, nw и т.д.
        'СВЕРХУ':'TOP',
        'СЛЕВА':'LEFT',
        'СПРАВА':'RIGHT',
        'СНИЗУ':'BOTTOM',
        'ЦЕНТР':'CENTER',
        'сверху':'top',
        'снизу':'bottom',
        'справа':'right',
        'снизу':'left',
        'поставить':'place',
        'ширина':'width',
        'высота':'height',
        'дробная_ширина':'relwidth',
        'дробная_высота':'relheight',
        'дробный_x':'relx',
        'дробный_y':'rely',
        'режим_границы':'bordermode',
        'сетка':'grid',
        'столбец_сетки':'column',
        'строка_сетки':'row',
        'диапозон_столбцов':'columnspan',
        'диапозон_строк':'rowspan',
        'выравнивание_в_ячейке':'sticky',
        #Bind События
        'привязать':'bind', #запись события элемент.привязать("<Событие>", функция)
        'Кнопка_мыши':'Button', #"<Кнопка_мыши-1>" 1 - левая, 2 - центральная 3 - правая
        'Отпускание_кнопки':'ButtonRelease',
        'Двойное_нажатие':'Double-Button',
        'Тройное_нажатие':'Triple-Button',
        'Движение_мыши':'Motion',
        '<К1-Движение_мыши>':'<B1-Motion>',
        '<К2-Движение_мыши>':'<B2-Motion>',
        '<К3-Движение_мыши>':'<B3-Motion>',
        'Выбор':'Selection',
        'Вошел':'Enter',
        'Вышел':'Leave',
        'Колесико_мыши':'MouseWheel',
        'Клавиша':'Key',
        'Нажатие_клавиши':'KeyPress', #"<Нажатие_клавиши-F>"
        'Отпускание_клавиши':'KeyRelease', #"<Отпускание_клавиши-F>"
        'Возврат':'Return',#Enter
        'Выход':'Escape',#Esc
        'БэкСпейс':'BackSpace',
        'Таб':'Tab',
        'Шифт_Л':'Shift_L',
        'Контрл_Л':'Control_L',
        'Алт_Л':'Alt_L',
        'Шифт_П':'Shift_R',
        'Контрл_П':'Control_R',
        'Алт_П':'Alt_R',
        'Шифт':'Shift',
        'Контрл':'Control',
        'Алт':'Alt',
        'Изменение':'Configure',
        'Отображение':'Map',
        'Скрытие':'Unmap',
        'Фокус_В':'FocusIn',
        'Фокус_Вне':'FocusOut',
        'Выявление':'Expose',
        'Видемость':'Visibility',
        'Актививный':'Activate',
        'Неактивный':'Deactivate',
        'Уничтожен':'Destroy',
        'уничтожить':'destroy',
        'Тройное_нажатие':'Triple',
        'Двойное_нажатие':'Double',
        'Выбор_Комбобокс':'ComboboxSelected',
        'привязать_все':'bind_all',
        'отвязать':'unbind',
        'привязать_классу':'bind_class',
        'отвязать_все':'unbind_all',
        'теги_привязки':'bindtags',
        'имитация_события':'event_generate',
        'выкл_значение':'offvalue',
        'вкл_значение':'onvalue',
        'переменная':'variable',
        'ориентация':'orient',
        'просмотр_x':'xview',
        'просмотр_y':'ywiew',
        'прокрутить_на_x':'xview_scroll',
        'прокрутить_на_y':'yview_scroll',
        'сдвинуть_x':'yview_moveto',
        'сдвинуть_y':'yview_moveto',
        'только_чтение':'readonly',
        'длина_виджета':'lenght',
        'старт':'start',
        'остановить':'stop',
        'шаг':'step',
        'активный_цвет_фона':'activebackground',
        'активная_толщина_границы':'activeborderground',
        'активный_цвет_текста':'activeforeground',
        'цвет_выключенного':'disabledforeground',
        'отсоединение':'tearoff',
        'добавить_команду':'add_command',
        'добавить_каскад':'add_cascade',
        'добавить_разграничитель':'add_separator',
        'добавить_радиокнопку':'add_radiobutton',
        'добавить_флажок':'add_checkbutton',
        'добавить_опцию':'option_add',
        'ребенок':'child',
        'спрятанный':'hidden',
        'спрятать':'hide',
        'удалить_вкладку':'forget',
        'получить_выделение':'selection_get',
        'очистить_выделение':'selection_clear',
        #Сообщения
        'всплывающее_окно':'messagebox',
        'опции':'options',
        'показать_инфо':'showinfo',
        'показать_ошибку':'showerror',
        'показать_предупреждение':'showwarning',
        'сообщение':'message',
        'спросить_да_нет':'askyesno',
        'спросить_ок_отмена':'askokcancel',
        'спросить_снова_отмена':'askretrycancel',
        'спросить_вопрос':'askquestion',
        'спросить_да_нет_отмена':'askyesnocancel',
        'деталь':'detail',
        #Диалоговые окна
        'файловый_диалог':'filedialog',
        'путь_к_файлам':'askopenfilename',
        'пути_к_файлам':'askopenfilenames',
        'путь_к_сохраняемому_файлу':'asksaveasfilename',
        'сохранить_как_файл':'asksaveasfile',
        'выбор_каталога':'askdirectory',
        'выбор_файла':'askopenfile',
        'выбор_файлов':'askopenfiles',
        'КОНЕЦ':'END',
        'предупреждение_перезаписи':'confirmoverwrite',
        'обычное_расширение':'defaultextension',
        'типы_файлов':'filetypes',
        'стартовый_каталог':'initialdir',
        'стартовый_файл':'initialfile',
        'типовая_переменная':'typevariable',
        'гип':'tk',
        'диалог_шрифтов':'fontchooser',
        'метка':'label',
        'регистрировать':'register',
        'вызов':'call',
        'диалог_цветов':'colorchooser',
        'спросить_цвет':'askcolor',
        'стартовый_цвет':'initialcolor',
        'текстовый_цвет':'foreground',
        'задний_цвет':'background',
        'указание':'accelerator',
        'разделитель':'separator',
        #simpledialog простой диалог
        'диалоги':'simpledialog',
        'строковый_диалог':'askstring',
        'численный_диалог':'askinteger',
        'дробный_диалог':'askfloat',
        'посткоманда':'postcommand',
        'после':'after',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
        '':'',
            # Основные элементы Canvas
    'прямоугольник': 'create_rectangle',
    'линия': 'create_line',
    'овал': 'create_oval', 
    'текст_холста': 'create_text',
    'изображение_холста': 'create_image',
    'многоугольник': 'create_polygon',
    'дуга': 'create_arc',
    'создать_прямоугольник': 'create_rectangle',
    'создать_линию': 'create_line',
    'создать_овал': 'create_oval', 
    'текст_холста': 'create_text',
    'создать_изображение': 'create_image',
    'создать_многоугольник': 'create_polygon',
    'создать_дугу': 'create_arc',
    'ОБА':'BOTH',
    'оба':'both',
    '':'',
    '':'',
    '':'',
    '':'',
    
    # Методы управления
    'переместить_элемент': 'move',
    'удалить_элемент': 'delete',
    'настроить_элемент': 'itemconfig',
    'координаты_элемента': 'coords',
    'поднять_элемент': 'tag_raise',
    'опустить_элемент': 'tag_lower',
    
    # Свойства элементов
    'заливка': 'fill',
    'контур': 'outline',
    'ширина_контура': 'width',
    'пунктир': 'dash',
    'текстура': 'stipple',
    'цвет_контура': 'outline',
    
    # Текст
    'шрифт_текста': 'font',
    'выравнивание_текста': 'anchor',
    
    # Теги и группы
    'добавить_тег': 'addtag_withtag',
    'получить_теги': 'gettags',
    'удалить_тег': 'dtag',
    'связать_тег': 'tag_bind',
    
    # Изображения
    'обновить_изображение': 'itemconfig',
    'якорь_изображения': 'anchor',
    
    # Прокрутка
    'прокрутка_x': 'xview',
    'прокрутка_y': 'yview',
    'привязать_скролл': 'configure',
    
    # Дополнительные методы
    'найти_элементы': 'find_all',
    'найти_по_тегу': 'find_withtag',
    'масштабировать': 'scale',
    'повернуть': 'rotate',  # Для пользовательских реализаций
    
    # События Canvas
    'клик_элемента': '<Button-1>',
    'двойной_клик': '<Double-Button-1>',
    'движение_над_элементом': '<Motion>',
    
    # Состояния элементов
    'видимый': 'state=normal',
    'скрытый': 'state=hidden',
    'отключенный': 'state=disabled',
    
    # Специальные возможности
    'тень': 'offset',      # Для пользовательских эффектов

    # Модуль os
    'ос':'os',
    'создать_папку': 'mkdir',
    'удалить_папку': 'rmdir',
    'список_файлов': 'listdir',
    'текущая_папка': 'getcwd',
    'путь_существует?': 'path.exists',
    'это_файл?': 'path.isfile',
    'абсолютный_путь': 'path.abspath',
    'удаление_пустых':'removedirs',
    'стартфайл':'startfile',
    'имя_файла':'path.basename',
    'имя_папки':'path.dirname',
    'получить_размер':'path.getsize',
    'ос.имя':'os.name',
    'окружение':'environ',
    'получить_окр':'gerenv',
    'раб_директория':'chdir',
    'это_каталог?':'path.isdir',
    'создать_папки':'makedirs',
    'удалить_файл':'remove',
    'удалить_папку':'rmdir',
    'удалить_папки':'removedirs',
    'запустить_файл':'startfile',
    'пройтись':'walk',
    'статы':'stat',
    'разъеденить_путь':'path.split',
    'соединить_путь':'path.join',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    
    # Модуль sys
    'система':'sys',
    'аргументы_командной_строки': 'argv',
    'выход': 'exit',
    'версия_питона': 'version',
    'платформа': 'platform',
    'стандартный_вывод': 'stdout',
    'стандартный_ввод': 'stdin',
    'стандартная_ошибка': 'stderr',
    'путь': 'path',
    'базовый_путь': 'base_prefix',
    'получить_размер': 'getsizeof',
    'модули': 'modules',
    'перезагрузить': 'reload',
    'кодировка_файловой_системы': 'getfilesystemencoding',
    'файлы': 'file',
    'добавить_путь': 'path.append',
    'удалить_путь': 'path.remove',
    'проверить_путь': 'path.exists',
    'проверить_папку': 'path.isdir',
    'проверить_файл': 'path.isfile',
    # Модуль datetime
    'датавремя':'datetime',
    'дата':'date',
    'время':'time',
    'время_сейчас':'now',
    'дата_сегодня':'today',
    'подождать':'sleep',
    'спать':'sleep',
    'текущее_время': 'datetime.now',
    'создать_дату': 'date',
    'форматировать_дату': 'strftime',
    'календарь':'calendar',
    'високосный?':'isleap',
    'заголовок_дни_недели':'weekheader',
    'день_недели':'weekday',
    'название_дня':'day_name',
    'месяц':'month',
    'предыдущий_месяц':'prmonth',
    'формат_года':'formatyear',
    'HTMLКалендарь':'HTMLCalendar',
    'ТекстКалендарь':'TextCalendar',
    'таймер':'timeit',
    'число_выполнений':'number',
    'приложить':'setup',
    'Таймер':'Timer',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
#Модуль ТелеграммБот или же telebot
    "телебот": "telebot",
    "Телебот": "TeleBot",
    # Обработчики событий
    "добавить_обработчик_бизнес_соединения": "add_business_connection_handler",
    "добавить_обработчик_бизнес_сообщений": "add_business_message_handler",
    "добавить_обработчик_callback_запросов": "add_callback_query_handler",
    "добавить_обработчик_постов_канала": "add_channel_post_handler",
    "добавить_обработчик_буста_чата": "add_chat_boost_handler",
    "добавить_обработчик_запросов_на_вступление_в_чат": "add_chat_join_request_handler",
    "добавить_обработчик_участников_чата": "add_chat_member_handler",
    "добавить_обработчик_выбранных_inline_запросов": "add_chosen_inline_handler",
    "добавить_пользовательский_фильтр": "add_custom_filter",
    "добавить_данные": "add_data",
    "добавить_обработчик_удаленных_бизнес_сообщений": "add_deleted_business_messages_handler",
    "добавить_обработчик_отредактированных_бизнес_сообщений": "add_edited_business_message_handler",
    "добавить_обработчик_отредактированных_постов_канала": "add_edited_channel_post_handler",
    "добавить_обработчик_отредактированных_сообщений": "add_edited_message_handler",
    "добавить_обработчик_inline_запросов": "add_inline_handler",
    "добавить_обработчик_сообщений": "add_message_handler",
    "добавить_обработчик_количества_реакций_на_сообщение": "add_message_reaction_count_handler",
    "добавить_обработчик_реакций_на_сообщение": "add_message_reaction_handler",
    "добавить_промежуточный_обработчик": "add_middleware_handler",
    "добавить_обработчик_изменений_моего_статуса_в_чате": "add_my_chat_member_handler",
    "добавить_обработчик_ответов_на_опросы": "add_poll_answer_handler",
    "добавить_обработчик_опросов": "add_poll_handler",
    "добавить_обработчик_pre_checkout_запросов": "add_pre_checkout_query_handler",
    "добавить_обработчик_оплаченных_медиа": "add_purchased_paid_media_handler",
    "добавить_обработчик_удаленных_бустов_чата": "add_removed_chat_boost_handler",
    "добавить_обработчик_shipping_запросов": "add_shipping_query_handler",
    "добавить_стикер_в_набор": "add_sticker_to_set",

    # Методы для ответов на запросы
    "ответить_на_callback_запрос": "answer_callback_query",
    "ответить_на_inline_запрос": "answer_inline_query",
    "ответить_на_pre_checkout_запрос": "answer_pre_checkout_query",
    "ответить_на_shipping_запрос": "answer_shipping_query",
    "ответить_на_запрос_веб_приложения": "answer_web_app_query",

    # Методы для управления чатами
    "одобрить_запрос_на_вступление_в_чат": "approve_chat_join_request",
    "забанить_участника_чата": "ban_chat_member",
    "забанить_отправителя_чата": "ban_chat_sender_chat",
    "обработчик_бизнес_соединения": "business_connection_handler",
    "обработчик_бизнес_сообщений": "business_message_handler",
    "обработчик_callback_запросов": "callback_query_handler",
    "обработчик_постов_канала": "channel_post_handler",
    "обработчик_буста_чата": "chat_boost_handler",
    "обработчик_запросов_на_вступление_в_чат": "chat_join_request_handler",
    "обработчик_участников_чата": "chat_member_handler",
    "проверить_ввод_команд": "check_commands_input",
    "проверить_ввод_регулярного_выражения": "check_regexp_input",
    "обработчик_выбранных_inline_запросов": "chosen_inline_handler",
    "очистить_обработчики_ответов": "clear_reply_handlers",
    "очистить_обработчики_ответов_по_id_сообщения": "clear_reply_handlers_by_message_id",
    "очистить_обработчик_шага": "clear_step_handler",
    "очистить_обработчик_шага_по_id_чата": "clear_step_handler_by_chat_id",
    "закрыть": "close",
    "закрыть_тему_форума": "close_forum_topic",
    "закрыть_общую_тему_форума": "close_general_forum_topic",
    "скопировать_сообщение": "copy_message",
    "скопировать_сообщения": "copy_messages",
    "создать_ссылку_приглашение_в_чат": "create_chat_invite_link",
    "создать_ссылку_приглашение_для_подписки_на_чат": "create_chat_subscription_invite_link",
    "создать_тему_форума": "create_forum_topic",
    "создать_ссылку_на_счет": "create_invoice_link",
    "создать_новый_набор_стикеров": "create_new_sticker_set",
    "отклонить_запрос_на_вступление_в_чат": "decline_chat_join_request",
    "удалить_фото_чата": "delete_chat_photo",
    "удалить_набор_стикеров_чата": "delete_chat_sticker_set",
    "удалить_тему_форума": "delete_forum_topic",
    "удалить_сообщение": "delete_message",
    "удалить_сообщения": "delete_messages",
    "удалить_мои_команды": "delete_my_commands",
    "удалить_состояние": "delete_state",
    "удалить_стикер_из_набора": "delete_sticker_from_set",
    "удалить_набор_стикеров": "delete_sticker_set",
    "удалить_вебхук": "delete_webhook",
    "обработчик_удаленных_бизнес_сообщений": "deleted_business_messages_handler",
    "отключить_сохранение_следующих_обработчиков_шага": "disable_save_next_step_handlers",
    "отключить_сохранение_обработчиков_ответов": "disable_save_reply_handlers",
    "скачать_файл": "download_file",
    "редактировать_ссылку_приглашение_в_чат": "edit_chat_invite_link",
    "редактировать_ссылку_приглашение_для_подписки_на_чат": "edit_chat_subscription_invite_link",
    "редактировать_тему_форума": "edit_forum_topic",
    "редактировать_общую_тему_форума": "edit_general_forum_topic",
    "редактировать_подпись_сообщения": "edit_message_caption",
    "редактировать_live_локацию_сообщения": "edit_message_live_location",
    "редактировать_медиа_сообщения": "edit_message_media",
    "редактировать_разметку_ответа_сообщения": "edit_message_reply_markup",
    "редактировать_текст_сообщения": "edit_message_text",
    "редактировать_подписку_на_звезду_пользователя": "edit_user_star_subscription",
    "обработчик_отредактированных_бизнес_сообщений": "edited_business_message_handler",
    "обработчик_отредактированных_постов_канала": "edited_channel_post_handler",
    "обработчик_отредактированных_сообщений": "edited_message_handler",
    "включить_сохранение_следующих_обработчиков_шага": "enable_save_next_step_handlers",
    "включить_сохранение_обработчиков_ответов": "enable_save_reply_handlers",
    "включить_сохранение_состояний": "enable_saving_states",
    "экспортировать_ссылку_приглашение_в_чат": "export_chat_invite_link",
    "переслать_сообщение": "forward_message",
    "переслать_сообщения": "forward_messages",
    "получить_доступные_подарки": "get_available_gifts",
    "получить_бизнес_соединение": "get_business_connection",
    "получить_информацию_о_чате": "get_chat",
    "получить_администраторов_чата": "get_chat_administrators",
    "получить_участника_чата": "get_chat_member",
    "получить_количество_участников_чата": "get_chat_member_count",
    "получить_количество_участников_чата_альтернатива": "get_chat_members_count",
    "получить_кнопку_меню_чата": "get_chat_menu_button",
    "получить_пользовательские_стикеры_с_эмодзи": "get_custom_emoji_stickers",
    "получить_файл": "get_file",
    "получить_url_файла": "get_file_url",
    "получить_стикеры_для_иконки_темы_форума": "get_forum_topic_icon_stickers",
    "получить_рекорды_игры": "get_game_high_scores",
    "получить_информацию_о_боте": "get_me",
    "получить_мои_команды": "get_my_commands",
    "получить_мои_права_администратора_по_умолчанию": "get_my_default_administrator_rights",
    "получить_мое_описание": "get_my_description",
    "получить_мое_имя": "get_my_name",
    "получить_мое_краткое_описание": "get_my_short_description",
    "получить_транзакции_звезд": "get_star_transactions",
    "получить_состояние": "get_state",
    "получить_набор_стикеров": "get_sticker_set",
    "получить_обновления": "get_updates",
    "получить_бусты_чата_пользователя": "get_user_chat_boosts",
    "получить_фото_профиля_пользователя": "get_user_profile_photos",
    "получить_информацию_о_вебхуке": "get_webhook_info",
    "скрыть_общую_тему_форума": "hide_general_forum_topic",
    "бесконечный_опрос": "infinity_polling",
    "обработчик_inline_запросов": "inline_handler",
    "исключить_участника_чата": "kick_chat_member",
    "покинуть_чат": "leave_chat",
    "загрузить_следующие_обработчики_шага": "load_next_step_handlers",
    "загрузить_обработчики_ответов": "load_reply_handlers",
    "выйти_телеграмм": "log_out",
    "обработчик_сообщений": "message_handler",
    "обработчик_количества_реакций_на_сообщение": "message_reaction_count_handler",
    "обработчик_реакций_на_сообщение": "message_reaction_handler",
    "промежуточный_обработчик": "middleware_handler",
    "обработчик_изменений_моего_статуса_в_чате": "my_chat_member_handler",
    "закрепить_сообщение_в_чате": "pin_chat_message",
    "обработчик_ответов_на_опросы": "poll_answer_handler",
    "обработчик_опросов": "poll_handler",
    "опрос": "polling",
    "цикл_бота": "polling",
    "бесконечный_цикл_бота":"infinity_poling",
    "обработчик_pre_checkout_запросов": "pre_checkout_query_handler",
    "обработать_промежуточные_обработчики": "process_middlewares",
    "обработать_новое_бизнес_соединение": "process_new_business_connection",
    "обработать_новое_бизнес_сообщение": "process_new_business_message",
    "обработать_новый_callback_запрос": "process_new_callback_query",
    "обработать_новые_посты_канала": "process_new_channel_posts",
    "обработать_новый_буст_чата": "process_new_chat_boost",
    "обработать_новый_запрос_на_вступление_в_чат": "process_new_chat_join_request",
    "обработать_нового_участника_чата": "process_new_chat_member",
    "обработать_новый_выбранный_inline_запрос": "process_new_chosen_inline_query",
    "обработать_новые_удаленные_бизнес_сообщения": "process_new_deleted_business_messages",
    "обработать_новое_отредактированное_бизнес_сообщение": "process_new_edited_business_message",
    "обработать_новые_отредактированные_посты_канала": "process_new_edited_channel_posts",
    "обработать_новые_отредактированные_сообщения": "process_new_edited_messages",
    "обработать_новый_inline_запрос": "process_new_inline_query",
    "обработать_новую_реакцию_на_сообщение": "process_new_message_reaction",
    "обработать_новое_количество_реакций_на_сообщение": "process_new_message_reaction_count",
    "обработать_новые_сообщения": "process_new_messages",
    "обработать_новое_изменение_моего_статуса_в_чате": "process_new_my_chat_member",
    "обработать_новый_опрос": "process_new_poll",
    "обработать_новый_ответ_на_опрос": "process_new_poll_answer",
    "обработать_новый_pre_checkout_запрос": "process_new_pre_checkout_query",
    "обработать_новое_оплаченное_медиа": "process_new_purchased_paid_media",
    "обработать_новый_удаленный_буст_чата": "process_new_removed_chat_boost",
    "обработать_новый_shipping_запрос": "process_new_shipping_query",
    "обработать_новые_обновления": "process_new_updates",
    "повысить_участника_чата": "promote_chat_member",
    "обработчик_оплаченных_медиа": "purchased_paid_media_handler",
    "вернуть_оплату_звезд": "refund_star_payment",
    "зарегистрировать_обработчик_бизнес_соединения": "register_business_connection_handler",
    "зарегистрировать_обработчик_бизнес_сообщений": "register_business_message_handler",
    "зарегистрировать_обработчик_callback_запросов": "register_callback_query_handler",
    "зарегистрировать_обработчик_постов_канала": "register_channel_post_handler",
    "зарегистрировать_обработчик_буста_чата": "register_chat_boost_handler",
    "зарегистрировать_обработчик_запросов_на_вступление_в_чат": "register_chat_join_request_handler",
    "зарегистрировать_обработчик_участников_чата": "register_chat_member_handler",
    "зарегистрировать_обработчик_выбранных_inline_запросов": "register_chosen_inline_handler",
    "зарегистрировать_обработчик_удаленных_бизнес_сообщений": "register_deleted_business_messages_handler",
    "зарегистрировать_обработчик_отредактированных_бизнес_сообщений": "register_edited_business_message_handler",
    "зарегистрировать_обработчик_отредактированных_постов_канала": "register_edited_channel_post_handler",
    "зарегистрировать_обработчик_отредактированных_сообщений": "register_edited_message_handler",
    "зарегистрировать_для_ответа": "register_for_reply",
    "зарегистрировать_для_ответа_по_id_сообщения": "register_for_reply_by_message_id",
    "зарегистрировать_обработчик_inline_запросов": "register_inline_handler",
    "зарегистрировать_обработчик_сообщений": "register_message_handler",
    "зарегистрировать_обработчик_количества_реакций_на_сообщение": "register_message_reaction_count_handler",
    "зарегистрировать_обработчик_реакций_на_сообщение": "register_message_reaction_handler",
    "зарегистрировать_промежуточный_обработчик": "register_middleware_handler",
    "зарегистрировать_обработчик_изменений_моего_статуса_в_чате": "register_my_chat_member_handler",
    "зарегистрировать_следующий_обработчик_шага": "register_next_step_handler",
    "зарегистрировать_следующий_обработчик_шага_по_id_чата": "register_next_step_handler_by_chat_id",
    "зарегистрировать_обработчик_ответов_на_опросы": "register_poll_answer_handler",
    "зарегистрировать_обработчик_опросов": "register_poll_handler",
    "зарегистрировать_обработчик_pre_checkout_запросов": "register_pre_checkout_query_handler",
    "зарегистрировать_обработчик_оплаченных_медиа": "register_purchased_paid_media_handler",
    "зарегистрировать_обработчик_удаленных_бустов_чата": "register_removed_chat_boost_handler",
    "зарегистрировать_обработчик_shipping_запросов": "register_shipping_query_handler",
    "удалить_проверку_чата": "remove_chat_verification",
    "удалить_проверку_пользователя": "remove_user_verification",
    "удалить_вебхук": "remove_webhook",
    "обработчик_удаленных_бустов_чата": "removed_chat_boost_handler",
    "переоткрыть_тему_форума": "reopen_forum_topic",
    "переоткрыть_общую_тему_форума": "reopen_general_forum_topic",
    "заменить_стикер_в_наборе": "replace_sticker_in_set",
    "ответить_на": "reply_to",
    "сбросить_данные": "reset_data",
    "ограничить_участника_чата": "restrict_chat_member",
    "получить_данные": "retrieve_data",
    "отозвать_ссылку_приглашение_в_чат": "revoke_chat_invite_link",
    "запустить_вебхуки": "run_webhooks",
    "сохранить_подготовленное_inline_сообщение": "save_prepared_inline_message",
    "отправить_анимацию": "send_animation",
    "отправить_аудио": "send_audio",
    "отправить_действие_в_чате": "send_chat_action",
    "отправить_контакт": "send_contact",
    "отправить_кубик": "send_dice",
    "отправить_документ": "send_document",
    "отправить_игру": "send_game",
    "отправить_подарок": "send_gift",
    "отправить_счет": "send_invoice",
    "отправить_локацию": "send_location",
    "отправить_медиагруппу": "send_media_group",
    "отправить_сообщение": "send_message",
    "отправить_оплаченное_медиа": "send_paid_media",
    "отправить_фото": "send_photo",
    "отправить_опрос": "send_poll",
    "отправить_стикер": "send_sticker",
    "отправить_место": "send_venue",
    "отправить_видео": "send_video",
    "отправить_видео_заметку": "send_video_note",
    "отправить_голосовое_сообщение": "send_voice",
    "установить_кастомный_заголовок_администратора_чата": "set_chat_administrator_custom_title",
    "установить_описание_чата": "set_chat_description",
    "установить_кнопку_меню_чата": "set_chat_menu_button",
    "установить_права_чата": "set_chat_permissions",
    "установить_фото_чата": "set_chat_photo",
    "установить_набор_стикеров_чата": "set_chat_sticker_set",
    "установить_название_чата": "set_chat_title",
    "установить_миниатюру_набора_стикеров_с_эмодзи": "set_custom_emoji_sticker_set_thumbnail",
    "установить_счет_в_игре": "set_game_score",
    "установить_реакцию_на_сообщение": "set_message_reaction",
    "установить_мои_команды": "set_my_commands",
    "установить_мои_права_администратора_по_умолчанию": "set_my_default_administrator_rights",
    "установить_мое_описание": "set_my_description",
    "установить_мое_имя": "set_my_name",
    "установить_мое_краткое_описание": "set_my_short_description",
    "установить_состояние": "set_state",
    "установить_список_эмодзи_для_стикера": "set_sticker_emoji_list",
    "установить_ключевые_слова_для_стикера": "set_sticker_keywords",
    "установить_позицию_маски_для_стикера": "set_sticker_mask_position",
    "установить_позицию_стикера_в_наборе": "set_sticker_position_in_set",
    "установить_миниатюру_набора_стикеров": "set_sticker_set_thumb",
    "установить_миниатюру_набора_стикеров_альтернатива": "set_sticker_set_thumbnail",
    "установить_название_набора_стикеров": "set_sticker_set_title",
    "установить_слушатель_обновлений": "set_update_listener",
    "установить_статус_эмодзи_пользователя": "set_user_emoji_status",
    "установить_вебхук": "set_webhook",
    "настроить_промежуточный_обработчик": "setup_middleware",
    "обработчик_shipping_запросов": "shipping_query_handler",
    "остановить_бота": "stop_bot",
    "остановить_live_локацию_сообщения": "stop_message_live_location",
    "остановить_опрос": "stop_poll",
    "остановить_опрос": "stop_polling",
    "разбанить_участника_чата": "unban_chat_member",
    "разбанить_отправителя_чата": "unban_chat_sender_chat",
    "показать_общую_тему_форума": "unhide_general_forum_topic",
    "открепить_все_сообщения_в_чате": "unpin_all_chat_messages",
    "открепить_все_сообщения_в_теме_форума": "unpin_all_forum_topic_messages",
    "открепить_все_сообщения_в_общей_теме_форума": "unpin_all_general_forum_topic_messages",
    "открепить_сообщение_в_чате": "unpin_chat_message",
    "загрузить_файл_стикера": "upload_sticker_file",
    "пользователь": "user",
    "проверить_чат": "verify_chat",
    "проверить_пользователя": "verify_user",
    # Создание клавиатур
    "РеплиКлавиатура":"ReplyKeyboardMarkup",
    "КнопкаКлавиатуры":"KeyboardButton",
    "создать_клавиатуру": "create_keyboard",
    "создать_inline_клавиатуру": "create_inline_keyboard",
    "добавить_кнопку_в_клавиатуру": "add_button_to_keyboard",
    "добавить_кнопку_в_inline_клавиатуру": "add_button_to_inline_keyboard",
    "удалить_клавиатуру": "remove_keyboard",
    "скрыть_клавиатуру": "hide_keyboard",
    "установить_параметры_клавиатуры": "set_keyboard_parameters",
    "получить_параметры_клавиатуры": "get_keyboard_parameters",
    #Жесть
    'ширина_строки':'row_width',
    "разметка_ответа":"reply_markup",
    "чат":"chat",
    "команда": "command",
    "команды": "commands",
    "типы":"types",
    "callback_данные": "callback_data",
    "регулярное_выражение": "regexp",
    "типы_контента": "content_types",
    "типы_чатов": "chat_types",
    "функция_тг": "func",
    "передать_бота": "pass_bot",
    "передать_очередь_обновлений": "pass_update_queue",
    "передать_очередь_задач": "pass_job_queue",
    "передать_данные_пользователя": "pass_user_data",
    "передать_данные_чата": "pass_chat_data",
    "асинхронный_режим": "run_async",
    "состояние": "state",
    "состояния": "states",
    "пользовательские_фильтры": "custom_filters",
    "промежуточный_слой": "middleware",
    "промежуточные_слои": "middlewares",
    "обработчик": "handler",
    "обработчики": "handlers",
    "обновление": "update",
    "сообщение": "message",
    "callback_запрос": "callback_query",
    "inline_запрос": "inline_query",
    "выбранный_inline_результат": "chosen_inline_result",
    "shipping_запрос": "shipping_query",
    "pre_checkout_запрос": "pre_checkout_query",
    "опрос": "poll",
    "ответ_на_опрос": "poll_answer",
    "участник_чата": "chat_member",
    "мой_участник_чата": "my_chat_member",
    "запрос_на_вступление_в_чат": "chat_join_request",
    "пост_канала": "channel_post",
    "отредактированное_сообщение": "edited_message",
    "отредактированный_пост_канала": "edited_channel_post",
    "реакция_на_сообщение": "message_reaction",
    "количество_реакций_на_сообщение": "message_reaction_count",
    "бизнес_соединение": "business_connection",
    "бизнес_сообщение": "business_message",
    "удаленные_бизнес_сообщения": "deleted_business_messages",
    "отредактированное_бизнес_сообщение": "edited_business_message",
    "буст_чата": "chat_boost",
    "удаленный_буст_чата": "removed_chat_boost",
    "оплаченное_медиа": "purchased_paid_media",
    "данные_веб_приложения": "web_app_data",
    "запрос_веб_приложения": "web_app_query",
    "информация_веб_приложения": "web_app_info",
    "url_веб_приложения": "web_app_url",
    "токен_верификации_веб_приложения": "web_app_verify_token",
    "секретный_токен_веб_приложения": "web_app_secret_token",
    "url_перенаправления_веб_приложения": "web_app_redirect_url",
    "принудительный_url_перенаправления_веб_приложения": "web_app_redirect_url_force",
    "принудительный_приватный_url_перенаправления_веб_приложения": "web_app_redirect_url_force_private",
    "принудительный_публичный_url_перенаправления_веб_приложения": "web_app_redirect_url_force_public",
    "принудительный_приватный_url_перенаправления_для_чата": "web_app_redirect_url_force_private_chat",
    "принудительный_публичный_url_перенаправления_для_чата": "web_app_redirect_url_force_public_chat",
    "принудительный_приватный_url_перенаправления_для_сообщения_чата": "web_app_redirect_url_force_private_chat_message",
    "принудительный_публичный_url_перенаправления_для_сообщения_чата": "web_app_redirect_url_force_public_chat_message",
    "принудительный_приватный_url_перенаправления_для_фото_чата": "web_app_redirect_url_force_private_chat_photo",
    "принудительный_публичный_url_перенаправления_для_фото_чата": "web_app_redirect_url_force_public_chat_photo",
    "принудительный_приватный_url_перенаправления_для_видео_чата": "web_app_redirect_url_force_private_chat_video",
    "принудительный_публичный_url_перенаправления_для_видео_чата": "web_app_redirect_url_force_public_chat_video",
    "принудительный_приватный_url_перенаправления_для_аудио_чата": "web_app_redirect_url_force_private_chat_audio",
    "принудительный_публичный_url_перенаправления_для_аудио_чата": "web_app_redirect_url_force_public_chat_audio",
    "принудительный_приватный_url_перенаправления_для_документа_чата": "web_app_redirect_url_force_private_chat_document",
    "принудительный_публичный_url_перенаправления_для_документа_чата": "web_app_redirect_url_force_public_chat_document",
    "принудительный_приватный_url_перенаправления_для_анимации_чата": "web_app_redirect_url_force_private_chat_animation",
    "принудительный_публичный_url_перенаправления_для_анимации_чата": "web_app_redirect_url_force_public_chat_animation",
    "принудительный_приватный_url_перенаправления_для_голосового_сообщения_чата": "web_app_redirect_url_force_private_chat_voice",
    "принудительный_публичный_url_перенаправления_для_голосового_сообщения_чата": "web_app_redirect_url_force_public_chat_voice",
    "принудительный_приватный_url_перенаправления_для_видео_заметки_чата": "web_app_redirect_url_force_private_chat_video_note",
    "принудительный_публичный_url_перенаправления_для_видео_заметки_чата": "web_app_redirect_url_force_public_chat_video_note",
    "принудительный_приватный_url_перенаправления_для_контакта_чата": "web_app_redirect_url_force_private_chat_contact",
    "принудительный_публичный_url_перенаправления_для_контакта_чата": "web_app_redirect_url_force_public_chat_contact",
    "принудительный_приватный_url_перенаправления_для_локации_чата": "web_app_redirect_url_force_private_chat_location",
    "принудительный_публичный_url_перенаправления_для_локации_чата": "web_app_redirect_url_force_public_chat_location",
    "принудительный_приватный_url_перенаправления_для_места_чата": "web_app_redirect_url_force_private_chat_venue",
    "принудительный_публичный_url_перенаправления_для_места_чата": "web_app_redirect_url_force_public_chat_venue",
    "принудительный_приватный_url_перенаправления_для_опроса_чата": "web_app_redirect_url_force_private_chat_poll",
    "принудительный_публичный_url_перенаправления_для_опроса_чата": "web_app_redirect_url_force_public_chat_poll",
    "принудительный_приватный_url_перенаправления_для_кубика_чата": "web_app_redirect_url_force_private_chat_dice",
    "принудительный_публичный_url_перенаправления_для_кубика_чата": "web_app_redirect_url_force_public_chat_dice",
    "принудительный_приватный_url_перенаправления_для_игры_чата": "web_app_redirect_url_force_private_chat_game",
    "принудительный_публичный_url_перенаправления_для_игры_чата": "web_app_redirect_url_force_public_chat_game",
    "принудительный_приватный_url_перенаправления_для_счета_чата": "web_app_redirect_url_force_private_chat_invoice",
    "принудительный_публичный_url_перенаправления_для_счета_чата": "web_app_redirect_url_force_public_chat_invoice",
    "принудительный_приватный_url_перенаправления_для_успешного_платежа_чата": "web_app_redirect_url_force_private_chat_successful_payment",
    "принудительный_публичный_url_перенаправления_для_успешного_платежа_чата": "web_app_redirect_url_force_public_chat_successful_payment",
    "принудительный_приватный_url_перенаправления_для_подключенного_сайта_чата": "web_app_redirect_url_force_private_chat_connected_website",
    "принудительный_публичный_url_перенаправления_для_подключенного_сайта_чата": "web_app_redirect_url_force_public_chat_connected_website",
    "принудительный_приватный_url_перенаправления_для_паспортных_данных_чата": "web_app_redirect_url_force_private_chat_passport_data",
    "принудительный_публичный_url_перенаправления_для_паспортных_данных_чата": "web_app_redirect_url_force_public_chat_passport_data",
    "принудительный_приватный_url_перенаправления_для_сработавшего_оповещения_о_близости_чата": "web_app_redirect_url_force_private_chat_proximity_alert_triggered",
    "принудительный_публичный_url_перенаправления_для_сработавшего_оповещения_о_близости_чата": "web_app_redirect_url_force_public_chat_proximity_alert_triggered",
    "принудительный_приватный_url_перенаправления_для_запланированного_голосового_чата_чата": "web_app_redirect_url_force_private_chat_voice_chat_scheduled",
    "принудительный_публичный_url_перенаправления_для_запланированного_голосового_чата_чата": "web_app_redirect_url_force_public_chat_voice_chat_scheduled",
    "принудительный_приватный_url_перенаправления_для_начатого_голосового_чата_чата": "web_app_redirect_url_force_private_chat_voice_chat_started",
    "принудительный_публичный_url_перенаправления_для_начатого_голосового_чата_чата": "web_app_redirect_url_force_public_chat_voice_chat_started",
    "принудительный_приватный_url_перенаправления_для_завершенного_голосового_чата_чата": "web_app_redirect_url_force_private_chat_voice_chat_ended",
    "принудительный_публичный_url_перенаправления_для_завершенного_голосового_чата_чата": "web_app_redirect_url_force_public_chat_voice_chat_ended",
    "принудительный_приватный_url_перенаправления_для_приглашенных_участников_голосового_чата_чата": "web_app_redirect_url_force_private_chat_voice_chat_participants_invited",
    "принудительный_публичный_url_перенаправления_для_приглашенных_участников_голосового_чата_чата": "web_app_redirect_url_force_public_chat_voice_chat_participants_invited",
    "принудительный_приватный_url_перенаправления_для_изменения_таймера_автоудаления_сообщения_чата": "web_app_redirect_url_force_private_chat_message_auto_delete_timer_changed",
    "принудительный_публичный_url_перенаправления_для_изменения_таймера_автоудаления_сообщения_чата": "web_app_redirect_url_force_public_chat_message_auto_delete_timer_changed",
    "принудительный_приватный_url_перенаправления_для_добавленного_буста_чата": "web_app_redirect_url_force_private_chat_chat_boost_added",
    "принудительный_публичный_url_перенаправления_для_добавленного_буста_чата": "web_app_redirect_url_force_public_chat_chat_boost_added",
    "принудительный_приватный_url_перенаправления_для_удаленного_буста_чата": "web_app_redirect_url_force_private_chat_chat_boost_removed",
    "принудительный_публичный_url_перенаправления_для_удаленного_буста_чата": "web_app_redirect_url_force_public_chat_chat_boost_removed",
    "принудительный_приватный_url_перенаправления_для_общего_чата": "web_app_redirect_url_force_private_chat_chat_shared",
    "принудительный_публичный_url_перенаправления_для_общего_чата": "web_app_redirect_url_force_public_chat_chat_shared",
    "принудительный_приватный_url_перенаправления_для_общего_пользователя": "web_app_redirect_url_force_private_chat_user_shared",
    "принудительный_публичный_url_перенаправления_для_общего_пользователя": "web_app_redirect_url_force_public_chat_user_shared",
    "принудительный_приватный_url_перенаправления_для_разрешенного_доступа_на_запись": "web_app_redirect_url_force_private_chat_write_access_allowed",
    "принудительный_публичный_url_перенаправления_для_разрешенного_доступа_на_запись": "web_app_redirect_url_force_public_chat_write_access_allowed",
    "принудительный_приватный_url_перенаправления_для_созданной_темы_форума": "web_app_redirect_url_force_private_chat_forum_topic_created",
    "принудительный_публичный_url_перенаправления_для_созданной_темы_форума": "web_app_redirect_url_force_public_chat_forum_topic_created",
    "принудительный_приватный_url_перенаправления_для_отредактированной_темы_форума": "web_app_redirect_url_force_private_chat_forum_topic_edited",
    "принудительный_публичный_url_перенаправления_для_отредактированной_темы_форума": "web_app_redirect_url_force_public_chat_forum_topic_edited",
    "принудительный_приватный_url_перенаправления_для_закрытой_темы_форума": "web_app_redirect_url_force_private_chat_forum_topic_closed",
    "принудительный_публичный_url_перенаправления_для_закрытой_темы_форума": "web_app_redirect_url_force_public_chat_forum_topic_closed",
    "принудительный_приватный_url_перенаправления_для_переоткрытой_темы_форума": "web_app_redirect_url_force_private_chat_forum_topic_reopened",
    "принудительный_публичный_url_перенаправления_для_переоткрытой_темы_форума": "web_app_redirect_url_force_public_chat_forum_topic_reopened",
    "принудительный_приватный_url_перенаправления_для_скрытой_общей_темы_форума": "web_app_redirect_url_force_private_chat_general_forum_topic_hidden",
    "принудительный_публичный_url_перенаправления_для_скрытой_общей_темы_форума": "web_app_redirect_url_force_public_chat_general_forum_topic_hidden",
    "принудительный_приватный_url_перенаправления_для_открытой_общей_темы_форума": "web_app_redirect_url_force_private_chat_general_forum_topic_unhidden",
    "принудительный_публичный_url_перенаправления_для_открытой_общей_темы_форума": "web_app_redirect_url_force_public_chat_general_forum_topic_unhidden",


#winsound
"винзвук":"winsound",
"Гудок":"Beep",
"Играть_звук":"PlaySound",
"Сбренчать":"MessageBeep",
"СистемаВыход":"SystemExit",
"СистемаВопрос":"SystemQuestion",
"СистемаОшибка":"SystemHand",
"СистемаВосклицание":"SystemExclamation",
"СистемаАстериск":"SystemAsterisk",
"СистемаПо_умолчанию":"SystemDefault",
"Флаг_Синхронно":"SND_SYNC",
"Флаг_Асинхронно":"SND_ASYNC",
"Флаг_Петля":"SND_LOOP",
"Флаг_НоСаунд":"SND_NODEFAULT",
"Флаг_Память":"SND_MEMORY",
"Флаг_Остановить":"SND_PURGE",
"Флаг_Приложение":"SND_APPLICATION",
"Флаг_Альяс":"SND_ALIAS",
"Флаг_Файл":"SND_FILENAME",
"Флаг_Ресурс":"SND_RESOURCE",
"Флаг_АльясИд":"SND_ALIAS_ID",
"Флаг_АсинхронноИд":"SND_ASYNC|SND_ALIAS",
"Флаг_СинхронноИд":"SND_SYNC|SND_ALIAS",
"Флаг_АсинхронноФайл":"SND_ASYNC|SND_FILENAME",
"Флаг_СинхронноФайл":"SND_SYNC|SND_FILENAME",
"Флаг_АсинхронноРесурс":"SND_ASYNC|SND_RESOURCE",
"Флаг_СинхронноРесурс":"SND_SYNC|SND_RESOURCE",
"МБ_АСТЕРИКС":"MB_ICONASTERISK",
"МБ_ВОСКЛИЦАНИЕ":"MB_ICONEXCLAMATION",
"МБ_ОШИБКА":"MB_ICONHAND",
"МБ_ВОПРОС":"MB_ICONQUESTION",
"МБ_ОК":"MB_OK",

#G4F - ГПТ БЕСПЛАТНО, нейрогпт
    'нейрогпт':'g4f',
    'Провайдер':'Provider',
    'версия':'version',
    'дебаг':'debug',
    'ЧатРаспознование':'ChatCompletion',
    'модель':'model',
    'сообщения':'messages',
    'поток':'stream',
    'роль':'role',
    'пользователь':'user',
    'контент':'content',
    'создать':'create',
    'модели':'models',
    'концовка':'end',
    'параметры':'params',
    'проверить_версию':'check_version',
    'Клиент':'Client',
    'клиент':'client',
    'распознования':'completions',
    'веб_поиск':'web_search',
    'формат_распознования':'response_format',
    'промпт':'prompt',
    'флюкс':'flux',
    '':'gpt',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',
    '':'',        

        
        #Цвета питон
    # Основные цвета
    "красный": "#FF0000",
    "зеленый": "#00FF00",
    "синий": "#0000FF",
    "черный": "#000000",
    "белый": "#FFFFFF",
    "желтый": "#FFFF00",
    "голубой": "#00FFFF",
    "пурпурный": "#FF00FF",

    # Серые оттенки
    "серый": "#808080",
    "темно-серый": "#A9A9A9",
    "светло-серый": "#D3D3D3",

    # Оттенки красного
    "темно-красный": "#8B0000",
    "бордовый": "#800000",
    "розовый": "#FFC0CB",
    "коралловый": "#FF7F50",
    "орихалковый": "#FF47CA",
    "алый": "#FF2400",
    "малиновый": "#DC143C",
    "кармин": "#960018",
    "рубиновый": "#9B111E",
    "лососевый": "#FA8072",
    "кирпичный": "#B22222",
    "вишневый": "#911E42",
    "гранатовый": "#830E0B",
    "терракотовый": "#CC4E5C",
    "багряный": "#6D071A",

    # Оранжево-коричневые
    "оранжевый": "#FFA500",
    "медный": "#B87333",
    "бронзовый": "#CD7F32",
    "коричный": "#D2691E",
    "умбра": "#635147",
    "песочный": "#F4A460",
    "карамельный": "#AF6E4D",
    "кофе": "#6F4E37",
    "какао": "#614B3E",
    "горчичный": "#FFDB58",
    "янтарный": "#FFBF00",

    # Желтые
    "лимонный": "#FFF44F",
    "золотистый": "#DAA520",
    "шафрановый": "#F4C430",
    "пшеничный": "#F5DEB3",
    "кремовый": "#FFFDD0",
    "слоновая кость": "#FFFFF0",
    "солнечный": "#FFD700",
    "медовый": "#EB9605",
    "песчаный": "#EDC9AF",
    "охряный": "#CC7722",

    # Зеленые
    "изумрудный": "#50C878",
    "малахитовый": "#0BDA51",
    "хаки": "#C3B091",
    "фисташковый": "#93C572",
    "шартрез": "#7FFF00",
    "молодой зелени": "#7CFC00",
    "кипарисовый": "#4B5F44",
    "лесная зелень": "#228B22",
    "оливковый": "#808000",
    "нефритовый": "#00A86B",

    # Синие
    "кобальтовый": "#0047AB",
    "ультрамарин": "#3F00FF",
    "сапфировый": "#082567",
    "полуночный": "#191970",
    "стальной": "#4682B4",
    "аквамарин": "#7FFFD4",
    "цвет морской волны": "#008080",
    "лазурь": "#007FFF",
    "голубой": "#42AAFF",
    "берлинская лазурь": "#003153",

    # Фиолетовые
    "фиолетовый": "#800080",
    "аметистовый": "#9966CC",
    "лаванда": "#E6E6FA",
    "сливовый": "#660066",
    "индиго": "#4B0082",
    "орхидея": "#DA70D6",
    "фиалковый": "#8F00FF",
    "ежевичный": "#330033",
    "баклажановый": "#614051",
    "сиреневый": "#C8A2C8",
    "глициния": "#C9A0DC",

    # Серые
    "антрацитовый": "#383E42",
    "асфальтовый": "#4A4A4A",
    "мокрый асфальт": "#505050",
    "платиновый": "#E5E4E2",
    "дымчатый": "#6D6968",
    "цинковый": "#7E7D88",
    "свинцовый": "#2F4F4F",
    "мраморный": "#C0C0C0",
    "пепельный": "#B2BEB5",
    "цементный": "#7D8471",

    # Экзотические
    "фуксия": "#FF00FF",
    "шоколадный": "#D2691E",
    "бирюзовый": "#30D5C8",
    "коралловый": "#FF7F50",
    "лосиный": "#FFDAB9",
    "перламутровый": "#F0EAD6",
    "ржавый": "#B7410E",
    "вермильон": "#E34234",
    "папоротник": "#4F7942",
    "чернильный": "#0F0326",

    # Металлики
    "золотой металлик": "#D4AF37",
    "серебряный металлик": "#A6A6A6",
    "бронзовый металлик": "#CD7F32",
    "медный металлик": "#B87333",
    "титановый": "#878681",

    #Новые цвета
    "персиковый": "#FFE5B4",
    "мятный": "#B2F2BB",
    "лавандовый": "#E6E6FA",
    "бисквитный": "#FFE4C4",
    "морской пены": "#B0E0E6",
    "мандариновый": "#F28500",
    "сливочный": "#FFFDD0",
    "угольный": "#333333",
    "ванильный": "#F3E5AB",
    "магнолия": "#F8F4FF",
    "оливково-зеленый": "#556B2F",
    "кораллово-розовый": "#F88379",
    "дымчато-розовый": "#FF6F61",
    "дымчато-синий": "#708090",
    "дымчато-зеленый": "#8F9779",
    "дымчато-фиолетовый": "#8A7F8E",
    "дымчато-желтый": "#F0E68C",
    "дымчато-оранжевый": "#FFA07A",
    "дымчато-красный": "#CD5C5C",
    "дымчато-коричневый": "#8B4513",

    }




def eval_timcode(code):
    global replacements
    
    def replace_command(match):
        # Если это строка - возвращаем как есть
        if match.group(1) is not None:
            return match.group(1)
        
        # Если match.group(2) пустой, возвращаем пустую строку
        if not match.group(2):
            return ''
        
        # Возвращаем замену из словаря или оригинальное значение, если ключа нет
        return replacements.get(match.group(2), match.group(2))

    command_pattern = re.compile(
        r"('(?:[^'\\]|\\.)*')"
        r"|(\b(" + '|'.join(re.escape(key) for key in replacements.keys()) + r")\b)(?!')",
        flags=re.DOTALL
    )
    
    try:
        exec_globals = {
            'set_variable': set_variable,
            'user_input': user_input,
            'variables': variables,
            'messagebox': messagebox,
            'show_help': show_help
        }
        exec(code, exec_globals)
    except Exception as e:
        messagebox.showerror("Ошибка выполнения", str(e))

def user_input(self, prompt, callback):
    """
    Асинхронный ввод через output_panel.
    :param prompt: Сообщение, которое будет показано пользователю.
    :param callback: Функция, которая будет вызвана после ввода.
    """
    # Вывод prompt в output_text
    self.output_text.config(state="normal")
    self.output_text.insert(tk.END, prompt)
    self.output_text.config(state="disabled")

    # Сохраняем callback для вызова после ввода
    self.input_callback = callback

    # Переводим фокус на поле ввода
    self.input_entry.focus_set()

def show_help(key=None):
    self.output_text.config(state="normal")

    
    if key is None:
        help_text = ""
        for command, description in commands_dict.items():
            help_text += f"{command}: {description}\n"
        self.output_text.insert(tk.END, help_text)  # Вывод в консоль
    else:
        self.output_text.insert(tk.END, commands_dict.get(key, "Команда не найдена."))
    self.output_text.config(state="disabled")


def set_variable(name, value):
    """Создает переменную с заданным именем и значением."""
    variables[name] = value

def get_variable(name):
    """Возвращает значение переменной по имени."""
    return variables.get(name, f"Переменная '{name}' не определена.")

def message(msg):
    """Выводит всплывающее сообщение."""
    messagebox.showinfo("Сообщение", msg)
    
def show_help(self, key=None):
    """Показывает справку по командам."""
    self.output_text.config(state="normal")
    if key is None:
        help_text = ""
        for command, description in commands_dict.items():
            help_text += f"{command}: {description}\n"
        self.output_text.insert(tk.END, help_text)  # Вывод в консоль
    else:
        self.output_text.insert(tk.END, commands_dict.get(key, "Команда не найдена."))
    self.output_text.config(state="disabled")


      
#Основной класс TimCode с дизайном и функциями
class TimCodeEditor(tk.Tk):
    def __init__(self):
        super().__init__()
        self.input_var = tk.StringVar()
        self.title("TimCode Editor 🐻")
        self.geometry("1200x800")
        self.configure(bg='#1e1e1e')
        self._current_error_line = None
        self._current_menu = None
        self.current_file = None
        self.syntax_highlighting_enabled = True
        self.last_action = None
        self.syntax_groups = {
            'keywords': {
                'words': [
                    'если', 'иначесли', 'иначе', 'для', 'пока', 'использовать', 'импортировать', 'внутри','в',
                    'из', 'как', 'определить', 'вернуть', 'уступить', 'пропустить', 'продолжить',
                    'глобальная', 'нелокальная', 'локальная', 'попробовать', 'кроме',
                    'вызвать', 'соотнести', 'случай', 'помощь',
                    'лямбда','гип','наконец',
                ],
                'tag': 'keyword',
                'color': '#ff8352'  # оранжевый
            },
            'types': {
                'words': [
                    'строка', 'число', 'дробь', 'логическое', 'список', 'словарь', 'комплексное', 'байтмассив', 'байты'
                    'кортеж', 'множество', 'None', 'Правда', 'Ложь', 'неизменяемое_множество','отображение',
                ],
                'tag': 'type',
                'color': '#4d9de0'  # синий
            },
                
            'oop': {
                'words': [
                    'класс', 'сам', 'атрибут', 'обьект', 'фполучить', 'фудалить', 'итератор', '__слоты__',
                    'фзадать', '__анотации__', '__построить_класс__', '__встроенные__', '__кэшированный__', '__дебаг__','__документация__','__файл__','__использовать__','__загрузчик__','__иниц__',
                    '__пакет__','__спец__','__удалить__','@статический_метод','док','свойства_атрибута','получить_атрибут','','','','','','','',''
                ],
                'tag': 'oop',
                'color': '#7776bc'  # розовый
            },
            
            'builtins': {
                'words': [
                    'вывод', 'ввод', 'длина', 'тип', 'диапазон', 'округлить', 'не', 'и', 'или', 'делост','перечислять','вычислить','выполнить','фильтр','диапазоне',
                    'сумма', 'макс', 'мин', 'сортированный', 'формат', 'открыть','глобальные','есть_атрибут?','хэш','шеснадцатиричное','идентификатор',
                    'аитер','ожидать','открыть','просмотр_памяти','срез','','', 'просмотр_памяти','следующий','обьект','восьмиричное','открыть', 'возведение',
   
                    'супер','запаковать','двоичный','индекс',
                ],
                'tag': 'builtin',
                'color': '#fecb02'  # грушевый
            },
        
            'gui': {
                'words': [
                    'Окно', 'Кнопка', 'Метка', 'Текстовое_поле', 'Текстовая_область',
                    'Флажок', 'Радиокнопка', 'Листбокс', 'Выпадающий_список', 'Ползунок',
                    'Холст', 'упаковка', 'сетка', 'поставить', 'привязать',    'графический_интерфейс', 'оформление', 'главный_цикл', 'Кнопка', 'Окно', 'Метка', 'Поле_ввода', 'Многострочный_ввод', 
    'Строковая_переменная', 'Целочисленная_переменная', 'Логическая_переменная', 'Дробная_переменная', 'Переменная', 'после','создать_линию','создать_прямоугольник','создать_дугу',
    'Флажок', 'Радиокнопка', 'Каркас', 'Листбокс', 'Скрол', 'Выпадающий_список', 'до', 'от_', 'Ползунок', 'Спинбокс', 'создать_многоугольник','создать_изображение','дуга',''
    'обертка', 'приращение', 'Прогрессбар', 'конечный', 'бесконечный', 'Меню', 'Вкладки', 'Изображение', 'символ', 
    'слово', 'Таблица', 'предок', 'столбцы_таблицы', 'отобразить_столбцы', 'иид', 'предмет', 'получить_ребенка', 
    'показать', 'заголовки', 'растяжение', 'заголовок', 'выделение', 'добавить_выделение', 'задать_выделение', 
    'Выбор_таблицы', 'отсутствие', 'Верхнее_окно', 'отпустить_взятие', 'взять_ввод', 'сообщение', 'оповещение', 
    'Холст', 'внедрить_виджет', 'инфа_класс', 'инфа_дети', 'инфа_родитель', 'инфа_окно_с_виджетом', 'инфа_ширина', 
    'инфа_высота', 'инфа_запщирина', 'инфа_запвысота', 'инфа_x', 'инфа_y', 'инфа_окноx', 'инфа_окноy', 'инфа_видимый', 
    'опция_окна', 'размеры', 'изменяемость', 'минразмер', 'максразмер', 'заголовок', 'иконка', 'по_умолчанию', 'файл', 
    'фотоиконка', 'протокол', 'ЗАКРЫТИЕ_ОКНА', 'ПОЛУЧЕН_ФОКУС', 'СОХРАНЕНИЕ_СЕБЯ', 'атрибуты', 'полноэкранный_режим', 
    'прозрачность', 'верхняя_панель', 'поверх_других', 'недоступно', 'прозрачность_цвета', 'развернуть_окно', 
    'тип_окна', 'путь_к_иконке', 'модификация_окна', 'оповещение_окна', 'обычное', 'свернуть', 'развернуть', 'скрыть', 
    'отключенное', 'включенное', 'активное', 'фокус', 'нажатая', 'конфигурация', 'текст_виджета', 'цвет_фона', 
    'цвет_текста', 'шрифт_текста', 'команда', 'соединялка', 'курсор', 'изображение', 'отступы', 'состояние', 'текст', 
    'высота', 'тип_границы', 'текстовая_переменная', 'подчеркивание', 'ширина', 'выравнивание', 'длина_упаковки', 
    'удалить', 'задать', 'добавить_', 'чтение', 'удаление', 'изменение', 'толщина_границы', 'диаметр_границы', 
    'цвет_фокуса', 'толщина_фокуса', 'фон_выбранного', 'режим_выбора', 'ОБЗОР', 'ОДИНОЧНЫЙ', 'МНОГОРАЗОВЫЙ', 
    'ДИАПОЗОНАЛЬНЫЙ', 'обзор', 'одиночный', 'многоразовый', 'диапозональный', 'горизонтальная_прокрутка', 
    'вертикальная_прокрутка', 'количество_элементов', 'выделение_диапозона', 'выделение_включает', 'очистить_выделение', 
    'отображаемый_символ', 'упаковка', 'растянуть_на_весь', 'растяжение', 'якорь', 'сторона', 'отступ_x', 'отступ_y', 
    'отступ_содержимого_x', 'отступ_содержимого_y', 'центр', 'СВЕРХУ', 'СЛЕВА', 'СПРАВА', 'СНИЗУ', 'ЦЕНТР', 'поставить', 
    'ширина', 'высота', 'дробная_ширина', 'дробная_высота', 'дробный_x', 'дробный_y', 'режим_границы', 'сетка', 
    'столбец_сетки', 'строка_сетки', 'диапозон_столбцов', 'диапозон_строк', 'выравнивание_в_ячейке', 'привязать', 
    'Кнопка_мыши', 'Отпускание_кнопки', 'Двойное_нажатие', 'Тройное_нажатие', 'Движение_мыши', '<К1-Движение_мыши>', 
    '<К2-Движение_мыши>', '<К3-Движение_мыши>', 'Выбор', 'Вошел', 'Вышел', 'Колесико_мыши', 'Клавиша', 'Нажатие_клавиши', 
    'Отпускание_клавиши', 'Возврат', 'Выход', 'БэкСпейс', 'Таб', 'Шифт_Л', 'Контрл_Л', 'Алт_Л', 'Шифт_П', 'Контрл_П', 
    'Алт_П', 'Шифт', 'Контрл', 'Алт', 'Изменение', 'Отображение', 'Скрытие', 'Фокус_В', 'Фокус_Вне', 'Выявление', 
    'Видемость', 'Актививный', 'Неактивный', 'Уничтожен', 'уничтожить', 'Тройное_нажатие', 'Двойное_нажатие', 
    'Выбор_Комбобокс', 'привязать_все', 'отвязать', 'привязать_классу', 'отвязать_все', 'теги_привязки', 
    'имитация_события', 'выкл_значение', 'вкл_значение', 'переменная', 'ориентация', 'просмотр_x', 'просмотр_y', 
    'прокрутить_на_x', 'прокрутить_на_y', 'сдвинуть_x', 'сдвинуть_y', 'только_чтение', 'длина_виджета', 'старт', 
    'остановить', 'шаг', 'активный_цвет_фона', 'активная_толщина_границы', 'активный_цвет_текста', 'цвет_выключенного', 
    'отсоединение', 'добавить_команду', 'добавить_каскад', 'добавить_разграничитель', 'добавить_радиокнопку', 
    'добавить_флажок', 'добавить_опцию', 'ребенок', 'спрятанный', 'спрятать', 'удалить_вкладку', 'получить_выделение', 
    'очистить_выделение', 'всплывающее_окно', 'опции', 'показать_инфо', 'показать_ошибку', 'показать_предупреждение', 
    'сообщение', 'спросить_да_нет', 'спросить_ок_отмена', 'спросить_снова_отмена', 'спросить_вопрос', 
    'спросить_да_нет_отмена', 'деталь', 'файловый_диалог', 'путь_к_файлам', 'пути_к_файлам', 'путь_к_сохраняемому_файлу', 
    'сохранить_как_файл', 'выбор_каталога', 'выбор_файла', 'выбор_файлов', 'КОНЕЦ', 'предупреждение_перезаписи', 
    'обычное_расширение', 'типы_файлов', 'стартовый_каталог', 'стартовый_файл', 'типовая_переменная', 'гип', 
    'диалог_шрифтов', 'метка', 'регистрировать', 'вызов', 'диалог_цветов', 'спросить_цвет', 'стартовый_цвет', 
    'текстовый_цвет', 'задний_цвет', 'указание', 'разделитель', 'диалоги', 'строковый_диалог', 'численный_диалог', 
    'дробный_диалог', 'посткоманда',
                ],
                'tag': 'gui',
                'color': '#9876AA'  # фиолетовый
            },
            'method': {
                'words': [
                    'вставить', 'присоединить', 'перевернуть', 'убрать', 'вырезать', 'получить', 'ключи', 'значения',
                    'пары_словаря', 'обновить', 'прибавить', 'обьединение', 'пересечение', 'отличия', 'нарицательное', 'собственное',
                    'заглавные', 'строчные', 'заглавные?', 'строчные?', 'буквенная?', 'циферная?', 'буквенноциферная?', 'посчитать',
                    'найти', 'найти_с_конца', 'заменить', 'разделить', 'из_пробелов?', 'соединить', 'отсечь', 'центрировать',
                    'добавить', 'расширить', 'очистить', 'сортировать', 'копировать', 'нет_обшего?', 'подмножество?', 'надмножество?',
                    'симметричные_отличия', 'обновить', 'обновить_отличия',
                ],
                'tag': 'method',
                'color': '#52bef2'  # грушевый
            },
                
            'module': {  
                'words': [
                    'модуль','больше','меньше', 'больше_равно', 'меньше_равно', 'равно', 'неравно',
                    'математика', 'корень', 'синус', 'косинус', 'тангенс', 'пи', 'случайность', 'комбинаторика', 'ос', '',
                    'градусы', 'радианы', 'факториал', 'логарифм', 'экспонента',
                ],
                'tag': 'module',
                'color': '#52e3e1'  # голубой
            },
            'func': {  #
                'sub': r'\b(?:определить|класс)\s+(\w+)\s*(?=\()',
                'tag': 'func',
                'color': '#57c78b'  # синий
            },
            'strings': {
                'pattern': r'(\".*?\")|(\'.*?\')',
                'tag': 'string',
                'color': '#a0e426'  # зеленый
            },

            'comments': {
                'pattern': r'#.*$',
                'tag': 'comment',
                'color': '#808080'  # серый
            }
        }


        self.color_translations = {
    "красный": "#FF0000",
    "зеленый": "#00FF00",
    "синий": "#0000FF",
    "черный": "#000000",
    "белый": "#FFFFFF",
    "желтый": "#FFFF00",
    "голубой": "#00FFFF",
    "пурпурный": "#FF00FF",

    # Серые оттенки
    "серый": "#808080",
    "темно-серый": "#A9A9A9",
    "светло-серый": "#D3D3D3",

    # Оттенки красного
    "темно-красный": "#8B0000",
    "бордовый": "#800000",
    "розовый": "#FFC0CB",
    "коралловый": "#FF7F50",
    "орихалковый": "#FF47CA",
    "алый": "#FF2400",
    "малиновый": "#DC143C",
    "кармин": "#960018",
    "рубиновый": "#9B111E",
    "лососевый": "#FA8072",
    "кирпичный": "#B22222",
    "вишневый": "#911E42",
    "гранатовый": "#830E0B",
    "терракотовый": "#CC4E5C",
    "багряный": "#6D071A",

    # Оранжево-коричневые
    "оранжевый": "#FFA500",
    "медный": "#B87333",
    "бронзовый": "#CD7F32",
    "коричный": "#D2691E",
    "умбра": "#635147",
    "песочный": "#F4A460",
    "карамельный": "#AF6E4D",
    "кофе": "#6F4E37",
    "какао": "#614B3E",
    "горчичный": "#FFDB58",
    "янтарный": "#FFBF00",

    # Желтые
    "лимонный": "#FFF44F",
    "золотистый": "#DAA520",
    "шафрановый": "#F4C430",
    "пшеничный": "#F5DEB3",
    "кремовый": "#FFFDD0",
    "слоновая кость": "#FFFFF0",
    "солнечный": "#FFD700",
    "медовый": "#EB9605",
    "песчаный": "#EDC9AF",
    "охряный": "#CC7722",

    # Зеленые
    "изумрудный": "#50C878",
    "малахитовый": "#0BDA51",
    "хаки": "#C3B091",
    "фисташковый": "#93C572",
    "шартрез": "#7FFF00",
    "молодой зелени": "#7CFC00",
    "кипарисовый": "#4B5F44",
    "лесная зелень": "#228B22",
    "оливковый": "#808000",
    "нефритовый": "#00A86B",

    # Синие
    "кобальтовый": "#0047AB",
    "ультрамарин": "#3F00FF",
    "сапфировый": "#082567",
    "полуночный": "#191970",
    "стальной": "#4682B4",
    "аквамарин": "#7FFFD4",
    "цвет морской волны": "#008080",
    "лазурь": "#007FFF",
    "голубой": "#42AAFF",
    "берлинская лазурь": "#003153",

    # Фиолетовые
    "фиолетовый": "#800080",
    "аметистовый": "#9966CC",
    "лаванда": "#E6E6FA",
    "сливовый": "#660066",
    "индиго": "#4B0082",
    "орхидея": "#DA70D6",
    "фиалковый": "#8F00FF",
    "ежевичный": "#330033",
    "баклажановый": "#614051",
    "сиреневый": "#C8A2C8",
    "глициния": "#C9A0DC",

    # Серые
    "антрацитовый": "#383E42",
    "асфальтовый": "#4A4A4A",
    "мокрый асфальт": "#505050",
    "платиновый": "#E5E4E2",
    "дымчатый": "#6D6968",
    "цинковый": "#7E7D88",
    "свинцовый": "#2F4F4F",
    "мраморный": "#C0C0C0",
    "пепельный": "#B2BEB5",
    "цементный": "#7D8471",

    # Экзотические
    "фуксия": "#FF00FF",
    "шоколадный": "#D2691E",
    "бирюзовый": "#30D5C8",
    "коралловый": "#FF7F50",
    "лосиный": "#FFDAB9",
    "перламутровый": "#F0EAD6",
    "ржавый": "#B7410E",
    "вермильон": "#E34234",
    "папоротник": "#4F7942",
    "чернильный": "#0F0326",

    # Металлики
    "золотой металлик": "#D4AF37",
    "серебряный металлик": "#A6A6A6",
    "бронзовый металлик": "#CD7F32",
    "медный металлик": "#B87333",
    "титановый": "#878681",

    #Новые цвета
    "персиковый": "#FFE5B4",
    "мятный": "#B2F2BB",
    "лавандовый": "#E6E6FA",
    "бисквитный": "#FFE4C4",
    "морской пены": "#B0E0E6",
    "мандариновый": "#F28500",
    "сливочный": "#FFFDD0",
    "угольный": "#333333",
    "ванильный": "#F3E5AB",
    "магнолия": "#F8F4FF",
    "оливково-зеленый": "#556B2F",
    "кораллово-розовый": "#F88379",
    "дымчато-розовый": "#FF6F61",
    "дымчато-синий": "#708090",
    "дымчато-зеленый": "#8F9779",
    "дымчато-фиолетовый": "#8A7F8E",
    "дымчато-желтый": "#F0E68C",
    "дымчато-оранжевый": "#FFA07A",
    "дымчато-красный": "#CD5C5C",
    "дымчато-коричневый": "#8B4513",


        }

        
        self._windows_set_titlebar_color("dark")
        self._setup_custom_menu()
        self._create_widgets()
        self._setup_bindings()
        self.set_icon("ТС-иконка.ico", size = 128)  # Добавьте этот вызов
        self.after(1000, self.highlight_syntax)
        self.syntax_highlighting_enabled = True  # Добавить эту строку
        #self.after(100, self.show_welcome_window)

        self.text.bind('<Control-s>', self.save_file_event)
        self.bind('<F5>', self.run_code_event)
        self.bind('<F11>', self.полный_экран)
        self.text.bind('<Escape>', self.exit_app)

           # Привязка событий
        self.text.bind('<Return>', self.on_enter)
        self.text.bind('<Tab>', self.on_tab)
        self.text.bind('<Shift-Tab>', self.on_shift_tab)
        self.text.bind('<BackSpace>', self.on_backspace)
        
        # Добавляем переменные для управления вводом
        self.input_pending = False
        self.input_value = None
        self.input_queue = queue.Queue()
        # Привязка событий
        self.text.bind("<F2>", self.show_completion)
        self.text.bind("<KeyPress>", self.handle_key_press)

        self.context_menu = tk.Menu(self, tearoff=0, bg='#1e1e1e', fg='#FFFFFF')
        self.context_menu.add_command(label="Выделить все \tCtrl+A", command=self.select_all)
        self.context_menu.add_command(label="Копировать \tCtrl+C", command=self.copy)
        self.context_menu.add_command(label="Вставить \tCtrl+V", command=self.paste)
        self.context_menu.add_command(label="Вырезать \tCtrl+D", command=self.cut)

        self.text.bind("<Button-3>", self.show_context_menu)  # ПКМ


        # Окно автодополнения
        self.completion_window = tk.Toplevel(self, bg = '#2e2e2e')
        self.completion_window.withdraw()
        self.completion_window.overrideredirect(1)
        self.completion_listbox = tk.Listbox(self.completion_window, width=50, height=5, bg = '#1e1e1e', fg = "white", font=('Helvetica', 10))
        self.completion_listbox.pack()
        self.completion_listbox.bind("<Double-Button-1>", self.insert_completion)
        self.completion_listbox.bind("<<ListboxSelect>>", self.show_tooltip)

        # Подзказочки
        self.tooltip_label = tk.Label(self.completion_window, text="", bg = "#1e1e1e", fg="white", justify="left", wraplength=300, font=('Helvetica', 10))
        self.tooltip_label.pack()
        # Настройка тегов для подсветки
        for group in self.syntax_groups.values():
            self.text.tag_configure(group['tag'], foreground=group['color'])        
        


    def show_context_menu(self, event):
        self.context_menu.post(event.x_root, event.y_root)

    def show_help(self, key=None):
        """Показывает справку по командам."""
        self.output_text.config(state="normal")
        if key is None:
            help_text = ""
            for command, description in commands_dict.items():
                help_text += f"{command}: {description}\n"
            self.output_text.insert(tk.END, help_text)  # Вывод в консоль
        else:
            self.output_text.insert(tk.END, f"{key}: {commands_dict.get(key, 'Команда не найдена.')}")
        self.output_text.config(state="disabled")

    def open_TimCode_site(url):
        webbrowser.open(url)     

    def show_completion(self, event=None):
        """Показать окно автодополнения."""
        # Получаем текст до курсора
        cursor_index = self.text.index(tk.INSERT)
        line, col = map(int, cursor_index.split("."))
        line_text = self.text.get(f"{line}.0", f"{line}.{col}")
        last_word = line_text.split()[-1] if line_text else ""

        # Фильтруем команды, которые начинаются с введенного текста
        matches = [cmd for cmd in commands_dict if cmd.startswith(last_word)]

        if matches:
            # Показываем окно автодополнения
            self.completion_listbox.delete(0, tk.END)
            for match in matches:
                self.completion_listbox.insert(tk.END, match)
            self.completion_window.geometry(f"+{event.x_root}+{event.y_root}")
            self.completion_window.deiconify()
        else:
            self.completion_window.withdraw()

    def show_tooltip(self, event=None):
        """Показать мини-подсказку для выбранной команды."""
        selected_index = self.completion_listbox.curselection()
        if selected_index:
            selected_command = self.completion_listbox.get(selected_index)
            tooltip = commands_dict.get(selected_command, "Описание отсутствует.")
            self.tooltip_label.config(text=f"Помощь: {tooltip}")

    def insert_completion(self, event=None):
        """Вставить выбранную команду в текстовое поле."""
        selected_index = self.completion_listbox.curselection()
        if selected_index:
            selected_command = self.completion_listbox.get(selected_index)
            # Удаляем часть слова, которое дополняем
            cursor_index = self.text.index(tk.INSERT)
            line, col = map(int, cursor_index.split("."))
            line_text = self.text.get(f"{line}.0", f"{line}.{col}")
            last_word = line_text.split()[-1] if line_text else ""
            self.text.delete(f"{line}.{col - len(last_word)}", cursor_index)
            # Вставляем выбранную команду
            self.text.insert(cursor_index, selected_command)
            self.completion_window.withdraw()


    def handle_key_press(self, event):
        """Обработка нажатия клавиши."""
        if event.keysym == "BackSpace":
            # Удаление второй кавычки или скобки, если она была автоматически добавлена
            cursor_index = self.text.index(tk.INSERT)
            char = self.text.get(cursor_index, f"{cursor_index} + 1c")
            prev_char = self.text.get(f"{cursor_index} - 1c", cursor_index)
            if (prev_char in ('"', "'") and char == prev_char) or (
                prev_char == "(" and char == ")"
            ) or (prev_char == "[" and char == "]") or (prev_char == "{" and char == "}"):
                self.text.delete(cursor_index, f"{cursor_index} + 1c")
                

    def get_current_line_info(self, text_widget):
        current_pos = text_widget.index("insert")
        line = current_pos.split('.')[0]
        line_text = text_widget.get(f"{line}.0", f"{line}.end")
        stripped = line_text.rstrip()
        return line, line_text, stripped
        
    def on_enter(self, event):
        text_widget = event.widget
        line, line_text, stripped = self.get_current_line_info(text_widget)
        
        # Определяем текущий отступ
        leading_spaces = len(line_text) - len(line_text.lstrip())
        current_indent = leading_spaces
        
        # Проверяем наличие двоеточия
        ends_with_colon = stripped.endswith(':')
        
        # Рассчитываем новый отступ
        new_indent = current_indent + 4 if ends_with_colon else current_indent
        
        # Разбиваем строку
        cursor_pos = text_widget.index("insert")
        remaining_text = text_widget.get(cursor_pos, f"{line}.end")
        
        text_widget.delete(cursor_pos, f"{line}.end")
        text_widget.insert(cursor_pos, f"\n{' ' * new_indent}{remaining_text}")
        
        # Устанавливаем курсор
        new_line = int(line) + 1
        text_widget.mark_set("insert", f"{new_line}.{new_indent}")
        return "break"
    
    def on_tab(self, event):
        event.widget.insert("insert", "    ")
        return "break"
    
    def on_shift_tab(self, event):
        text_widget = event.widget
        line, line_text, _ = self.get_current_line_info(text_widget)
        
        # Определяем количество пробелов для удаления
        leading_spaces = len(line_text) - len(line_text.lstrip())
        remove = min(4, leading_spaces)
        
        if remove > 0:
            text_widget.delete(f"{line}.0", f"{line}.{remove}")
        return "break"
    
    def on_backspace(self, event):
        text_widget = event.widget
        pos = text_widget.index("insert")
        line, column = pos.split('.')
        column = int(column)
        
        if column == 0:
            return  # В начале строки - ничего не делаем
        
        # Проверяем пробелы слева от курсора
        line_start = text_widget.get(f"{line}.0", pos)
        
        if line_start.strip() == '':  # Все символы до курсора - пробелы
            spaces = len(line_start)
            remove = 4 if (spaces % 4 == 0) else spaces % 4
            if remove == 0: remove = 4
            
            start_pos = int(column) - remove
            if start_pos < 0: 
                remove = column
                start_pos = 0
                
            text_widget.delete(f"{line}.{start_pos}", pos)
            return "break"
        
        # Стандартное поведение
        
        
        self.bind("<Key>", self.on_key_press)
    def on_key_press(a, event):
        return None

    def toggle_syntax_highlighting(self):
        self.syntax_highlighting_enabled = self.syntax_highlighting_var.get()
        if self.syntax_highlighting_enabled:
            self.highlight_syntax()
        else:
            for group in self.syntax_groups.values():
                self.text.tag_remove(group['tag'], '1.0', 'end')        

    def change_color_for_group(self, group_name):
        current_color = self.syntax_groups[group_name]['color']
        color = colorchooser.askcolor(title="Выберите цвет", initialcolor=current_color)
        if color[1]:
            self.syntax_groups[group_name]['color'] = color[1]
            self.text.tag_config(self.syntax_groups[group_name]['tag'], foreground=color[1])
            self.highlight_syntax()        
        
#Кастомное меню ТимКода
    def _setup_custom_menu(self):
        """Создает кастомное меню с использованием фреймов и кнопок."""
        self.menu_frame = tk.Frame(self, bg='#2e2e2e', height=30)
        self.menu_frame.pack(fill="x", side="top")

        menus = [
            ("Файл", self._show_file_menu),
            ("Документация", self._show_help_menu),
            ("Правка", self._show_edit_menu),
            ("Запуск", self._show_run_menu),
            ("Графический интерфейс", self._show_gui_menu),
            ("Команды TimCode", self._show_command_menu),
            ("Настройки", self._show_settings_menu)
        ]

        for text, command in menus:
            btn = tk.Button(self.menu_frame, text=text, bg='#2e2e2e', fg='white',
                            activebackground='#4a4a4a', activeforeground='white',
                            bd=0, font=('Helvetica',10), relief='flat',
                            command=command)
            btn.pack(side="left", padx=5, pady=2)

    def _show_file_menu(self):
        """Показывает меню 'Файл'."""
        self._hide_all_menus()
        self.file_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                 activebackground='#4a4a4a', activeforeground='white')
        self.file_menu.add_command(label="📝 Новый", command=self.new_file)
        self.file_menu.add_command(label="📁 Открыть", command=self.open_file)
        self.file_menu.add_command(label="💾 Сохранить", command=self.save_file_event)
        self.file_menu.add_command(label="💾 Сохранить как", command=self.save_as) 
        self.file_menu.add_command(label="🐍 Экспорт в Python", command=self.save_as_python)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="🚪 Выход", command=self.exit_app)
        self.file_menu.post(self.winfo_x() + 10, self.winfo_y() + 65)

    def _show_help_menu(self):
        """Показывает меню 'Документация'."""
        self._hide_all_menus()
        self.edit_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                 activebackground='#4a4a4a', activeforeground='white')
        self.edit_menu.add_command(label="Документация TimCode", command=None)
        self.edit_menu.add_command(label="Сайт TimCode", command=self.open_TimCode_site)
        self.edit_menu.add_command(label="Форум TimCode", command=None)
        self.edit_menu.post(self.winfo_x() + 60, self.winfo_y() + 65)

    def _show_command_menu(self):
        """Показывает меню 'Команды'."""
        self._hide_all_menus()
        self.edit_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                 activebackground='#4a4a4a', activeforeground='white')
        self.edit_menu.add_command(label="Список команд F2")
        self.edit_menu.add_command(label="Конструкции программы", command= None)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label="Создание переменной", command=self.создать_переменную)
        self.edit_menu.add_command(label="Ввод и вывод данных", command=self.создать_ввод_вывод)
        self.edit_menu.add_command(label="Особые методы ввода", command=self.создать_особый_ввод)
        self.edit_menu.add_command(label="Базовые операторы", command=self.cut)
        
        self.edit_menu.add_command(label="Условная конструкция", command=self.copy)
        self.edit_menu.add_command(label="Цикл для", command=self.paste)
        self.edit_menu.add_command(label="Цикл пока", command=self.cut)
        self.edit_menu.add_command(label="Определение функции", command=self.copy)
        self.edit_menu.add_command(label="Создание класса", command=self.paste)
        self.edit_menu.add_command(label="Обработка ошибок", command=self.cut)
        self.edit_menu.add_command(label="Работа с файлами", command=self.copy)

        self.edit_menu.post(self.winfo_x() + 450, self.winfo_y() + 65)

    def _show_edit_menu(self):
        """Показывает меню 'Правка'."""
        self._hide_all_menus()
        self.edit_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                 activebackground='#4a4a4a', activeforeground='white')
        self.edit_menu.add_command(label="Вырезать Ctrl+X", command=self.cut)
        self.edit_menu.add_command(label="Копировать Ctrl+C", command=self.copy)
        self.edit_menu.add_command(label="Вставить Ctrl+V", command=self.paste)
        self.edit_menu.post(self.winfo_x() + 160, self.winfo_y() + 65)

    def _show_run_menu(self):
        """Показывает меню 'Запуск'."""
        self._hide_all_menus()
        self.run_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                activebackground='#4a4a4a', activeforeground='white')
        self.run_menu.add_command(label="▶ Запустить F5", command=self.run_code)

        self.run_menu.post(self.winfo_x() + 220, self.winfo_y() + 65)

    def _show_gui_menu(self):
        """Показывает меню 'Графический интерфейс'."""
        self._hide_all_menus()
        self.gui_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                activebackground='#4a4a4a', activeforeground='white')
        
        self.gui_menu.add_command(label="Справка по ГИП", command=self.помощь_ui)
        self.gui_menu.add_command(label="Создать окно", command=self.создать_окно)
        # Подменю "Создать виджет"
        self.create_widget_menu = tk.Menu(self.gui_menu, tearoff=0, bg='#2e2e2e', fg='#FFFFFF')
        self.gui_menu.add_cascade(label="Создать виджет", menu=self.create_widget_menu)
        self.create_widget_menu.add_command(label="Кнопка", command=self.создать_кнопку)
        self.create_widget_menu.add_command(label="Метка", command=self.создать_метку)
        self.create_widget_menu.add_command(label="Поле ввода", command=self.создать_текстовое_поле)
        self.create_widget_menu.add_command(label="Многострочный ввод", command=self.создать_текстовую_область)
        self.create_widget_menu.add_command(label="Флажок", command=self.создать_флажок)
        self.create_widget_menu.add_command(label="Радиокнопка", command=self.создать_радиокнопку)
        self.create_widget_menu.add_command(label="Каркас", command=None)
        self.create_widget_menu.add_command(label="Листбокс", command=self.создать_список)
        self.create_widget_menu.add_command(label="Скрол", command=None)
        self.create_widget_menu.add_command(label="Выпадающий список", command=self.создать_выпадающий_список)
        self.create_widget_menu.add_command(label="Прогрессбар", command=None)
        self.create_widget_menu.add_command(label="Меню", command=None)
        self.create_widget_menu.add_command(label="Вкладки", command=None)
        self.create_widget_menu.add_command(label="Изображение", command=None)
        self.create_widget_menu.add_command(label="Спинбокс", command=None)
        self.create_widget_menu.add_command(label="Ползунок", command=self.создать_ползунок)
        self.create_widget_menu.add_command(label="Таблица", command=None)
        self.create_widget_menu.add_command(label="Верхнее окно", command=None)
        self.create_widget_menu.add_command(label="Холст", command=None)
        self.message_submenu = tk.Menu(self.create_widget_menu, tearoff=0, bg='#2e2e2e', fg='#FFFFFF')
        self.create_widget_menu.add_cascade(label="Сообщение или Диалог", menu=self.message_submenu)
        self.message_submenu.add_command(label="Сообщение Да/Нет", command=None)
        self.message_submenu.add_command(label="Сообщение Задать вопрос", command=None)
        self.message_submenu.add_command(label="Сообщение Ок/отмена", command=None)
        self.message_submenu.add_command(label="Сообщение Повтор/отмена", command=None)
        self.message_submenu.add_command(label="Сообщение Да/Нет/Отмена", command=None)
        self.message_submenu.add_command(label="Сообщение Информация", command=None)
        self.message_submenu.add_command(label="Сообщение Предупреждение", command=None)
        self.message_submenu.add_command(label="Сообщение Ошибка", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
       # self.create_widget_menu.add_command(label="", command=None)
        #self.create_widget_menu.add_command(label="", command=None)
        
        self.gui_menu.add_command(label="Создать переменную ГИП", command=None)
        self.gui_menu.add_command(label="Вставить цвет", command=self.open_colors_list)
        self.gui_menu.add_command(label="Методы и события", command=None)
        self.gui_menu.add_command(label="Все команды ГИП", command=self.open_ui_commands)
        
        self.gui_menu.post(self.winfo_x() + 280, self.winfo_y() + 65)

    def _show_settings_menu(self):
        self._hide_all_menus()
        self.settings_menu = tk.Menu(self, tearoff=0, bg='#2e2e2e', fg='white',
                                    activebackground='#4a4a4a', activeforeground='white')
    
        # Галочка включения подсветки
        self.syntax_highlighting_var = tk.BooleanVar(value=self.syntax_highlighting_enabled)
        self.settings_menu.add_checkbutton(label="Включить подсветку синтаксиса", 
                                          variable=self.syntax_highlighting_var,
                                          command=self.toggle_syntax_highlighting)
        self.settings_menu.add_command(label="Цвет фона", command=self.change_bg_color)
        self.settings_menu.add_command(label="Выбрать шрифт", command=self.select_font)
        self.settings_menu.add_command(label="Цвет основного текста", command=self.change_text_color)
        # Подменю для цветов
        self.color_submenu = tk.Menu(self.settings_menu, tearoff=0)
        self.settings_menu.add_cascade(label="Цвета подсветки", menu=self.color_submenu)
    
        # Добавляем пункты для каждой группы
        for group_name in self.syntax_groups:
            rus_name = self.get_russian_group_name(group_name)
            self.color_submenu.add_command(
                label=rus_name,
                command=lambda gn=group_name: self.change_color_for_group(gn)
            )
    
        self.settings_menu.post(self.winfo_x() + 500, self.winfo_y() + 65)

   # Функция для изменения шрифта
    def font_changed(self,font = None):
        self.text["font"] = font
        self.line_numbers["font"] = font

    # Функция для выбора шрифта
    def select_font(self,font = None):
        self.tk.call("tk", "fontchooser", "configure", "-font", self.text["font"], "-command", self.register(self.font_changed))
        self.tk.call("tk", "fontchooser", "show")

# Функция для изменения цвета текста
    def change_text_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.text.config(fg=color)        

    def change_bg_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.text.config(bg=color)    
        
    def get_russian_group_name(self, group_name):
        translations = {
            'keywords': 'Ключевые слова',
            'types': 'Типы данных',
            'oop': 'Объектно-ориентированное программирование',
            'method': 'Методы',
            'builtins': 'Встроенные функции',
            'gui': 'Графический интерфейс',
            'module': 'Модули',
            'func': 'Пользовательские функции',
            'strings': 'Строки',
            'comments': 'Комментарии'
        }
        return translations.get(group_name, group_name)            

    def _hide_all_menus(self):
        """Скрывает все открытые меню."""
        if hasattr(self, 'file_menu'):
            self.file_menu.destroy()
        if hasattr(self, 'edit_menu'):
            self.edit_menu.destroy()
        if hasattr(self, 'run_menu'):
            self.run_menu.destroy()
        if hasattr(self, 'gui_menu'):
            self.gui_menu.destroy()

    def _create_widgets(self):
        global gfont

        main_container = tk.PanedWindow(self)
        main_container.pack(fill="both", expand=True, padx=10, pady=(10, 10))

        # Боковая панель с кнопками
        side_panel = tk.Frame(main_container, bg='#2e2e2e', width=150)
        main_container.add(side_panel, minsize=150)

        # Кнопки на боковой панели
        #timcodeicon = tk.PhotoImage(file = 'Тim.png')
        #timcodeicon = tk.PhotoImage(file='tim.png')
        self.timcodeicon = tk.PhotoImage(file='tim.png.png')
        self.timcodeicon = self.timcodeicon.subsample(1, 1)
        label1 = tk.Label(side_panel, image=self.timcodeicon, bg = '#2e2e2e')
        label1.pack(pady=5)
        
        label1 = tk.Label(side_panel, text="</>TimCode ", bg='#320180', fg='white', bd=0, font = ('Noto Sans', 14))
        label1.pack(fill="x", pady=5)
        button1 = tk.Button(side_panel, text="Создать проект", bg='#2e2e2e', fg='white', bd=0)
        button1.pack(fill="x", pady=5)
        button2 = tk.Button(side_panel, text="Вставить картинку", bg='#2e2e2e', fg='white', bd=0)
        button2.pack(fill="x", pady=5)
        button3 = tk.Button(side_panel, text="Ошибки", bg='#2e2e2e', fg='white', bd=0)
        button3.pack(fill="x", pady=5)
        button3 = tk.Button(side_panel, text="Команды", bg='#2e2e2e', fg='white', bd=0)
        button3.pack(fill="x", pady=5)
        button2 = tk.Button(side_panel, text="Шаблоны", bg='#2e2e2e', fg='white', bd=0)
        button2.pack(fill="x", pady=5)
        button3 = tk.Button(side_panel, text="Сохранить ", bg='#2e2e2e', fg='white', bd=0)
        button3.pack(fill="x", pady=5)

        # Editor Panel
        editor_panel = tk.Frame(main_container)
        main_container.add(editor_panel, minsize=400)

        # Line Numbers
        self.line_numbers = Text(editor_panel, width=4, bg="#2e2e2e", fg="#858585",
                                state="disabled", relief="flat", wrap="none",
                                font= gfont, borderwidth=0)
        self.line_numbers.pack(side="left", fill="y")

        # Text Editor
        self.text = Text(editor_panel, wrap="none", font= gfont, 
                       bg="#1e1e1e", fg="#d4d4d4", insertbackground="white",
                       borderwidth=0)
        self.text.pack(side="left", fill="both", expand=True)

        # Scrollbar
        self.editor_scroll = Scrollbar(editor_panel)
        self.editor_scroll.pack(side="right", fill="y")

        # Output Panel
        self.output_panel = tk.Frame(main_container, width=400)
        main_container.add(self.output_panel, minsize=300)
        self.output_text = Text(self.output_panel, wrap="word", bg="#1e1e1e", fg="#d4d4d4", insertbackground="white",
                               font=gfont, height=10, state = "disabled")
        self.output_text.pack(fill="both", expand=True)

        # Добавляем начальное сообщение
        self.output_text.config(state="normal")
        self.output_text.insert(tk.END, "</>TimCode консоль\n")
        self.output_text.config(state="disabled")


        # Error Panel
        self.error_panel = tk.Frame(self, height=40, bg="#5E2129")
        self.error_panel.pack(side="bottom", fill="x", padx=10, pady=(0, 5))
        self.error_label = tk.Label(self.error_panel, text="", bg = "#2e1e1e", fg = "white",
                                    font=("Comic Sans MS", 11), wraplength=1000)
        self.error_label.pack(fill="x", expand=True, padx=5)

        self.text.tag_configure("error_line", background ="#5E2129")
        self._setup_scroll_and_numbers()

        self.input_entry = tk.Entry(self.output_panel, text = "Поле для ввода", bg="#1e1e1e", fg="#d4d4d4", insertbackground="white")
        self.input_entry.pack(fill="x", side="bottom", padx=5, pady=5)
        self.input_entry.bind("<Return>", self.execute_input_command)

    def show_welcome_window(self):
        WelcomeWindow(self)

    def execute_input_command(self, event=None):
        command = self.input_entry.get()
        if command:
            if hasattr(self, 'input_var'):
                self.input_var.set(command)
                self.input_var = None  # Очищаем переменную, но не удаляем её
            self.input_entry.delete(0, tk.END)

    def _setup_scroll_and_numbers(self):
        def on_yscrollcommand(*args):
            self.editor_scroll.set(*args)
            self.line_numbers.yview_moveto(args[0])

        self.text.config(yscrollcommand=on_yscrollcommand)

        def scroll_command(*args):
            self.text.yview(*args)
            self.line_numbers.yview(*args)

        self.editor_scroll.config(command=scroll_command)

        self._insert_numbers()
        self.text.bind("<<Modified>>", self._on_edit)

    def _insert_numbers(self):
        count_of_lines = self.text.get(1.0, "end-1c").count('\n') + 1
        
        self.line_numbers.config(state="normal")
        self.line_numbers.delete(1.0, "end")
        self.line_numbers.insert(1.0, '\n'.join(map(str, range(1, count_of_lines + 1))))
        self.line_numbers.config(state="disabled")

    def _on_edit(self, event=None):
        self._insert_numbers()
        self.text.edit_modified(0)
        self.clear_error_highlight()  # Убираем подсветку ошибок при изменении текста

    def _setup_bindings(self):
        self.text.bind("<KeyRelease>", self._on_edit)
        self.text.bind("<Control-s>", self.save_file_event)
        self.text.bind("<Control-r>", self.run_code_event)

    def _handle_error(self, error):
        error_msg = str(error)
        self.error_label.configure(text=error_msg)
        match = re.search(r'line (\d+)', error_msg)
        if match:
            self._highlight_error_line(int(match.group(1)))
        self.output_text.config(state="normal")
        self.output_text.insert(tk.END, f"Ошибка: {error_msg}\n")
        self.output_text.config(state="disabled")

    def highlight_error_line(self, line_number):
        """Подсвечивает строку с ошибкой."""
        start = f"{line_number}.0"
        end = f"{line_number + 1}.0"
        self.text.tag_add("error_line", start, end)
        self.text.see(start)

    def clear_error_highlight(self):
        """Убирает подсветку всех ошибок."""
        self.text.tag_remove("error_line", "1.0", "end")



    def on_backspace(self, event):
        text_widget = event.widget
        pos = text_widget.index("insert")
        line, column = pos.split('.')
        column = int(column)
        
        if column == 0:
            return  # В начале строки - ничего не делаем
        
        # Проверяем пробелы слева от курсора
        line_start = text_widget.get(f"{line}.0", pos)
        
        if line_start.strip() == '':  # Все символы до курсора - пробелы
            spaces = len(line_start)
            remove = 4 if (spaces % 4 == 0) else spaces % 4
            if remove == 0: remove = 4
            
            start_pos = int(column) - remove
            if start_pos < 0: 
                remove = column
                start_pos = 0
                
            text_widget.delete(f"{line}.{start_pos}", pos)
            return "break"
        
        # Стандартное поведение
        
        
        self.text.bind("<Key>", self.on_key_press)


    def highlight_syntax(self, event=None):
        if not self.syntax_highlighting_enabled:
            return

        # Получаем текущий текст
        current_text = self.text.get('1.0', 'end-1c')

        # Проверяем, изменился ли текст
        if hasattr(self, 'last_text') and self.last_text == current_text:
            # Если текст не изменился, просто планируем следующую проверку
            self.after(2000, self.highlight_syntax)
            return

        # Сохраняем текущий текст для следующей проверки
        self.last_text = current_text

        # Удаляем все теги
        for group in self.syntax_groups.values():
            self.text.tag_remove(group['tag'], '1.0', 'end')

        # Обработка каждой группы
        for group_name, group in self.syntax_groups.items():
            if 'words' in group:
                for word in group['words']:
                    self.highlight_words(word, group['tag'])
            elif 'pattern' in group:
                self.highlight_pattern(group['pattern'], group['tag'])
            elif 'sub' in group:
                self.highlight_sub(group['sub'], group['tag'])

        # Планируем следующую проверку
        self.after(2000, self.highlight_syntax)


    def highlight_words(self, word, tag):
        start = '1.0'
        while True:
            start = self.text.search(r'\m{}\M'.format(word), start, stopindex='end', 
                                   regexp=True, nocase=False)
            if not start:
                break
            end = '{} + {}c'.format(start, len(word))
            self.text.tag_add(tag, start, end)
            start = end

    def highlight_pattern(self, pattern, tag):
        text = self.text.get('1.0', 'end-1c')
        for match in re.finditer(pattern, text, re.MULTILINE):
            start = '1.0 + {}c'.format(match.start())
            end = '1.0 + {}c'.format(match.end())
            self.text.tag_add(tag, start, end)

    def highlight_sub(self, pattern, tag):
        text = self.text.get('1.0', 'end-1c')  # Получаем весь текст из виджета
        # Используем re.finditer для поиска всех совпадений
        for match in re.finditer(pattern, text, re.IGNORECASE):
            # Вычисляем начальную и конечную позиции только для имени
            start = '1.0 + {}c'.format(match.start(1))  # Начало захваченной группы (имя)
            end = '1.0 + {}c'.format(match.end(1))      # Конец захваченной группы (имя)
            # Применяем тег к найденному имени
            self.text.tag_add(tag, start, end)


    def highlight_colors(self):
        return None


    def select_all(self, event=None):
        self.text.tag_add(tk.SEL, '1.0', tk.END)
        self.text.mark_set(tk.INSERT, '1.0')
        self.text.see(tk.INSERT)
        return "break"


    def _toggle_menu(self, button, options):
        if self._current_menu and self._current_menu.winfo_exists():
            if self._current_menu._parent_button == button:
                self._current_menu.destroy()
                self._current_menu = None
                return
            self._current_menu.destroy()

        self._current_menu = _DropdownMenu(self, button, options)
        self._current_menu.show()

    # Новые функции из второго скрипта
    def open_colors_list(self):
        """Открывает окно выбора цвета"""
        color_window = tk.Toplevel(self.master, bg='#2E2E2E')
        color_window.title("Выбор цвета")
        color_window.geometry("300x400")
        
        # Listbox с цветами
        lb = tk.Listbox(color_window, bg='#2E2E2E', fg='#FFFFFF', selectbackground='#4A4A4A')
        scroll = tk.Scrollbar(color_window)
        
        # Заполнение Listbox
        for color_name, hex_code in self.color_translations.items():
            lb.insert(tk.END, color_name)
            lb.itemconfig(tk.END, bg=hex_code, 
                         fg='black' if self.is_light(hex_code) else 'white')
        
        # Кнопка вставки
        btn_insert = tk.Button(color_window, text="Вставить", 
                             command=lambda: self.insert_selected_color(lb, color_window))
        
        # Размещение элементов
        lb.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        btn_insert.pack(pady=5)
        
        lb.config(yscrollcommand=scroll.set)
        scroll.config(command=lb.yview)
            
    def is_light(self, hex_code):
        """Определяет яркость цвета для выбора цвета текста"""
        r = int(hex_code[1:3], 16)
        g = int(hex_code[3:5], 16)
        b = int(hex_code[5:7], 16)
        luminance = (0.299*r + 0.587*g + 0.114*b) / 255
        return luminance > 0.5 
        
    def insert_selected_color(self, listbox, window):
        selection = listbox.curselection()
        if selection:
            color_name = listbox.get(selection[0])
            self.text.insert(tk.END, color_name + "\n")
            window.destroy()

    def cut(self):
        self.text.event_generate('<<Cut>>')
    
    def copy(self):
        self.text.event_generate('<<Copy>>')
    
    def paste(self):
        self.text.event_generate('<<Paste>>')

    def open_pig(self):
        pig_path = 'Исполнитель Свинья.py'
        try:
            python_executable = sys.executable
            subprocess.Popen([python_executable, pig_path], shell=True)
        except Exception:
            messagebox.showerror("Ошибка", "Не удается открыть свина.")

    def create_window(self):
        self.text.insert(tk.END, "окно = Окно()\n")

    def create_button(self):
        self.text.insert(tk.END, "кнопка = Кнопка(окно, текст='Кнопка')\n")

    def create_label(self):
        self.text.insert(tk.END, "метка = Метка(окно, текст='Метка')\n")
    
        
    def полный_экран(self, event=None):
        if self.attributes("-fullscreen"):
            self.attributes("-fullscreen", False)
            self._windows_set_titlebar_color("dark")
        else:
            self.attributes("-fullscreen", True)
            self._windows_set_titlebar_color("dark")
    def exit_app(self, event=None):
        if messagebox.askokcancel("Выход", "Вы уверены, что хотите выйти?"):
            self.destroy()

    def _windows_set_titlebar_color(self, color_mode: str):
        """
        Set the titlebar color of the window to light or dark theme on Microsoft Windows.
        """
        if not hasattr(self, '_deactivate_windows_window_header_manipulation'):
            self._deactivate_windows_window_header_manipulation = False

        if self._deactivate_windows_window_header_manipulation:
            return

        if color_mode.lower() == "dark":
            value = 1
        elif color_mode.lower() == "light":
            value = 0
        else:
            return

            # Сохраняем текущее состояние окна
        state_before = self.state()

        # Скрываем окно, чтобы изменения вступили в силу
        self.withdraw()
        self.update()  # Принудительно обновляем окно

        try:
            hwnd = ctypes.windll.user32.GetParent(self.winfo_id())
            DWMWA_USE_IMMERSIVE_DARK_MODE = 20
            DWMWA_USE_IMMERSIVE_DARK_MODE_BEFORE_20H1 = 19

            # Попробуем установить темный режим
            if ctypes.windll.dwmapi.DwmSetWindowAttribute(hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE,
                                                          ctypes.byref(ctypes.c_int(value)),
                                                          ctypes.sizeof(ctypes.c_int(value))) != 0:

                # Если не получилось, попробуем старый метод
                ctypes.windll.dwmapi.DwmSetWindowAttribute(hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE_BEFORE_20H1,
                                                           ctypes.byref(ctypes.c_int(value)),
                                                           ctypes.sizeof(ctypes.c_int(value)))

        except Exception as err:
            print(err)

        # Восстанавливаем окно в исходное состояние
        if state_before == "normal":
            self.deiconify()
        elif state_before == "iconic":
            self.iconify()
        elif state_before == "zoomed":
            self.state("zoomed")
        else:
            self.state(state_before)


    def set_icon(self, icon_path="ТС-иконка.ico", size=64):
        try:
            # Преобразуем строку в UTF-16 (wide characters)
            icon_path_wide = ctypes.c_wchar_p(icon_path)
        
            # Загружаем иконку
            icon = ctypes.windll.user32.LoadImageW(
                0, icon_path_wide, 1, size, size, 0x00000010
            )
            if icon:
                # Получаем дескриптор окна (handle)
                hwnd = ctypes.windll.user32.GetParent(self.winfo_id())
            
                # Устанавливаем иконку
                ICON_SMALL = 0
                ctypes.windll.user32.SendMessageW(hwnd, 0x0080, ICON_SMALL, icon)
            else:
                print(f"Ошибка: Не удалось загрузить иконку из {icon_path}")
        except Exception as e:
            print(f"Ошибка при установке иконки: {e}")
        

    def new_file(self):
        self.text.delete(1.0, tk.END)
        self.current_file = None
        self.update_title()  # Обновляем заголовок окна
        self.update_status()


    def open_file(self):
        file_path = filedialog.askopenfilename(
            defaultextension=".tim",
            filetypes=[
                ("TimCode files", "*.tim"),
                ("Python files", "*.py"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as f:
                self.text.delete(1.0, tk.END)
                self.text.insert(tk.END, f.read())
            self.current_file = file_path
            self.update_title()  # Обновляем заголовок окна

    def update_title(self):
        if self.current_file:
            self.title(f"TimCode Editor 🐻 - {os.path.basename(self.current_file)}")
        else:
            self.title("TimCode Editor 🐻")
        

    def update_status(self):
        pass
        
    def save_file(self):
        if self.current_file:
            with open(self.current_file, 'w', encoding='utf-8') as f:
                f.write(self.text.get(1.0, tk.END).strip())
        else:
            self.save_as()  # Если файл еще не сохранен, вызываем "Сохранить как"
        self.update_status()
        
    def save_file_event(self, event=None):
        """Метод для сохранения файла, вызываемый горячей клавишей."""
        self.save_file()
        return "break"
    
    def save_as(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".tim",
            filetypes=[
                ("TimCode files", "*.tim"),
                ("Python files", "*.py"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(self.text.get(1.0, tk.END).strip())
            self.current_file = file_path
            self.update_title()  # Обновляем заголовок окна
        

    def translate_code(self, code):
        
        """Переводит русские команды TimCode в Python"""
        global replacements
    
        # Добавляем специальный случай для "ввод"
        special_cases = {
            "ввод": "input"
        }
    
        def replace_command(match):
            # Если это строка - возвращаем как есть
            if match.group(1) is not None:
                return match.group(1)
            
            # Получаем найденное ключевое слово
            word = match.group(2)
        
            # Проверяем специальные случаи
            if word in special_cases:
                return special_cases[word]
        
            # Обычная замена из словаря
            return replacements.get(word, word)

        # Паттерн для поиска (строки или ключевые слова)
        command_pattern = (
            r"('(?:[^'\\]|\\.)*')"  # строка в кавычках
            r"|(\b(" + '|'.join(re.escape(key) for key in [*replacements.keys(), *special_cases.keys()]) + r")\b)(?!')"
        )
    
        return re.sub(command_pattern, replace_command, code, flags=re.DOTALL)
    def save_as_python(self):
        """Сохраняет переведенный код как Python файл"""
        code = self.text.get("1.0", tk.END).strip()
        translated_code = self.translate_code(code)
    
        file_path = filedialog.asksaveasfilename(
            defaultextension=".py",
            filetypes=[("Python files", "*.py")]
        )
    
        if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(translated_code)
                messagebox.showinfo("Сохранено", f"Файл скомпилирован и сохранен как:\n{file_path}")

    def run_code_event(self, event=None):
        """Метод для запуска кода, вызываемый горячей клавишей."""
        self.run_code()
        return "break"

    def translate_error(self, error_message: str) -> str:
        """Переводит сообщение об ошибке с английского на русский."""
        error_translations = {
            "invalid syntax": "ОшибкаСинтаксиса: неверный синтаксис",
            "unexpected EOF while parsing": "ОшибкаСинтаксиса: неожиданный конец файла при разборе",
            "IndentationError: unexpected indent": "ОшибкаОтступа: неожиданный отступ",
            "IndentationError: expected an indented block": "ОшибкаОтступа: ожидается отступленный блок",
            "TabError: inconsistent use of tabs and spaces in indentation": "ОшибкаТабуляции: смешанное использование табов и пробелов в отступах",
            "NameError: name '.*' is not defined": "ОшибкаИмени: имя '{}' не определено",
            "UnboundLocalError: local variable '.*' referenced before assignment": "ОшибкаЛокальнойПеременной: локальная переменная '{}' используется до присваивания",
            "TypeError: unsupported operand type\\(s\\) for .*": "ОшибкаТипа: неподдерживаемые типы операндов для {}",
            "TypeError: '.*' object is not callable": "ОшибкаТипа: объект '{}' не является вызываемым",
            "TypeError: '.*' object is not iterable": "ОшибкаТипа: объект '{}' не является итерируемым",
            "ValueError: invalid literal for .*": "ОшибкаЗначения: неверное значение для {}",
            "ValueError: too many values to unpack": "ОшибкаЗначения: слишком много значений для распаковки",
            "ZeroDivisionError: division by zero": "ОшибкаДеленияНаНоль: деление на ноль",
            "OverflowError: math range error": "ОшибкаПереполнения: математическое переполнение",
            "RecursionError: maximum recursion depth exceeded": "ОшибкаРекурсии: превышена максимальная глубина рекурсии",
            "IndexError: list index out of range": "ОшибкаИндекса: индекс списка вне допустимого диапазона",
            "KeyError: '.*'": "ОшибкаКлюча: ключ '{}' не найден",
            "AttributeError: '.*' object has no attribute '.*'": "ОшибкаАтрибута: объект '{}' не имеет атрибута '{}'",
            "FileNotFoundError: \\[Errno 2\\] No such file or directory: '.*'": "ФайлНеНайден: [Ошибка 2] Нет такого файла или каталога: '{}'",
            "PermissionError: \\[Errno 13\\] Permission denied: '.*'": "ОшибкаДоступа: [Ошибка 13] Доступ запрещен: '{}'",
            "IsADirectoryError: \\[Errno 21\\] Is a directory: '.*'": "ОшибкаКаталога: [Ошибка 21] Это каталог: '{}'",
            "FileExistsError: \\[Errno 17\\] File exists: '.*'": "ФайлУжеСуществует: [Ошибка 17] Файл уже существует: '{}'",
            "ImportError: No module named '.*'": "ОшибкаИмпорта: нет модуля с именем '{}'",
            "ModuleNotFoundError: No module named '.*'": "МодульНеНайден: нет модуля с именем '{}'",
            "KeyboardInterrupt": "ПрерываниеСКлавиатуры",
            "MemoryError": "ОшибкаПамяти: недостаточно памяти",
            "EOFError: EOF when reading a line": "ОшибкаКОНЦАФАЙЛА: конец файла при чтении строки",
            "IOError: \\[Errno .*\\] .*": "ОшибкаВводаВывода: [Ошибка {}] {}",
            "RuntimeError: .*": "ОшибкаВыполнения: {}",
            "NotImplementedError": "МетодНеРеализован",
            "StopIteration": "ИтерацияОстановлена",
            "Warning: .*": "Предупреждение: {}",
            "ResourceWarning: unclosed file <_io.TextIOWrapper name='.*' mode='.*' encoding='.*'>": "ПредупреждениеОРесурсе: файл '{}' не был закрыт",
        }

        for pattern, replacement in error_translations.items():
            # Используем re.escape для экранирования специальных символов
            pattern = re.escape(pattern)
            # Заменяем .* на (.*) для захвата групп
            pattern = pattern.replace(r"\\.\\*", "(.*)")
            # Заменяем {} на захваченные группы
            if "{}" in replacement:
                match = re.search(pattern, error_message)
                if match:
                    replacement = replacement.format(*match.groups())
            error_message = re.sub(pattern, replacement, error_message)
        return error_message



    def run_code(self):
        self.error_label.config(text="")  # Очищаем текст ошибки в панели
        try:
            code = self.text.get("1.0", tk.END).strip()
            if code:
                self.output_text.config(state="normal")
                self.output_text.delete("1.0", tk.END)
                self.output_text.config(state="disabled")

                # Перенаправляем stdout и stdin
                sys.stdout = OutputRedirector(self.output_text)
                sys.stdin = self  # Переназначаем stdin на экземпляр редактора

                # Переводим код
                translated_code = self.translate_code(code)

                try:
                    # Создаем глобальные переменные с кастомным input
                    exec_globals = {
                        '__builtins__': __builtins__,
                        'input': self.custom_input,
                        'print': print,
                        'variables': variables,
                        'messagebox': messagebox,
                        'show_help': self.show_help
                    }

                    # Запускаем выполнение в отдельном потоке
                    threading.Thread(
                        target=self.execute_code,
                        args=(translated_code, exec_globals),
                        daemon=True
                    ).start()

                except Exception as e:
                    translated_error = self.translate_error(str(e))
                    self.show_error(translated_error)
        except Exception as e:
            translated_error = self.translate_error(f"Ошибка компиляции: {str(e)}")
            self.show_error(translated_error)

    def execute_code(self, code, exec_globals):
        try:
            exec(code, exec_globals)
        except Exception as e:
            translated_error = self.translate_error(str(e))  # Переводим ошибку
            self.after(0, self.show_error, translated_error)  # Передаем перевод
        
            
    def show_error(self, error_message):
        """Отображает ошибку в панели ошибок и подсвечивает строку с ошибкой."""
        self.error_label.config(text=error_message)

        # Поиск всех строк с ошибками
        error_lines = re.findall(r'line (\d+)', error_message)
        for line_number in error_lines:
            self.highlight_error_line(int(line_number))

        # Вывод ошибки в консоль
        self.output_text.config(state="normal")
        self.output_text.insert(tk.END, f"Ошибка в коде: {error_message}\n")
        self.output_text.config(state="disabled")
            
    def custom_input(self, prompt=""):
        # Помещаем запрос в очередь и ждем ответа
        self.input_queue.put(prompt)
        self.input_value = None
        
        # Активируем поле ввода в GUI
        self.after(0, self.show_input_prompt, prompt)
        
        # Ожидаем ввода
        while self.input_value is None:
            time.sleep(0.1)
            
        return self.input_value
        
    def show_input_prompt(self, prompt):
        # Показываем prompt и активируем поле ввода
        self.output_text.config(state="normal")
        self.output_text.insert(tk.END, prompt)
        self.output_text.config(state="disabled")
        self.input_entry.focus()
        
    def execute_input_command(self, event=None):
        # Получаем текст из Entry и передаем в очередь
        user_text = self.input_entry.get()
        if user_text:
            self.input_value = user_text
            self.input_entry.delete(0, tk.END)
            
            # Скрываем prompt
            self.output_text.config(state="normal")
            self.output_text.insert(tk.END, user_text + "\n")
            self.output_text.config(state="disabled")

    def open_help(self):
        help_path = 'help.pdf'  # Укажите путь к вашему документу с помощью
        try:
            subprocess.Popen(['start', help_path], shell=True)
        except Exception:
            messagebox.showerror("Ошибка", "Не удается открыть файл помощи.")

    def создать_окно(self):
        # Пример многострочного текста
        multiline_text = """использовать графический_интерфейс как гип
окно = гип.Окно()
окно.заголовок('Заголовок окна')
окно.размеры("400x300")
окно.конфигурация(цвет_фона = "серый")#Атрибуты окна или виджета
#Ваш код, ниже дан пример создания кнопки
#кнопка = гип.Кнопка(окно, текст = 'Текст', команда = отсутствует, цвет_фона = "светло-серый", ширина = 10, высота = 5, активный_цвет_фона = "синий" )
#кнопка.упаковка(отступ_y = 10)
окно.главный_цикл()
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
    def создать_кнопку(self):
        # Пример многострочного текста
        multiline_text = """гип.Кнопка(окно, текст = 'Текст', команда = отсутсвует или ваша_функция, цвет_фона = "светло-серый", активный_цвет_фона = "синий" )
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
    def создать_метку(self):
    # Пример многострочного текста для метки
        multiline_text = """гип.Метка(окно, текст = 'Текст метки', цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_текстовое_поле(self):
    # Пример многострочного текста для текстового поля
        multiline_text = """гип.ТекстовоеПоле(окно, ширина = 20, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_выпадающий_список(self):
    # Пример многострочного текста для выпадающего списка
        multiline_text = """гип.ВыпадающийСписок(окно, значения = ["Опция 1", "Опция 2", "Опция 3"], ширина = 15, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_флажок(self):
    # Пример многострочного текста для флажка
        multiline_text = """гип.Флажок(окно, текст = 'Выбрать опцию', переменная = переменная_флажка, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_радиокнопку(self):
    # Пример многострочного текста для радиокнопки
        multiline_text = """гип.Радиокнопка(окно, текст = 'Опция 1', переменная = переменная_радиокнопки, значение = 1, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_текстовую_область(self):
    # Пример многострочного текста для текстовой области
        multiline_text = """гип.ТекстоваяОбласть(окно, ширина = 40, высота = 10, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_ползунок(self):
    # Пример многострочного текста для ползунка
        multiline_text = """гип.Ползунок(окно, от = 0, до = 100, ориентация = "горизонтальная", переменная = переменная_ползунка, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text
    def создать_список(self):
    # Пример многострочного текста для списка
        multiline_text = """гип.Список(окно, элементы = ["Элемент 1", "Элемент 2", "Элемент 3"], ширина = 20, высота = 5, цвет_фона = "белый", цвет_текста = "черный", шрифт = ("Arial", 12))
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text

    def создать_переменную(self):
    # Пример многострочного текста для списка
        multiline_text = """имя переменной = значение
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text

    def создать_ввод_вывод(self):
    # Пример многострочного текста для списка
        multiline_text = """имя переменной = ввод()
вывод(имя переменной)
"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text

    def создать_особый_ввод(self):
    # Пример многострочного текста для списка
        multiline_text = """а, б, в = отображение(тип_данных, ввод().разделить('символ разделения'))
вывод(а, б, в)
числа = [число(значение) пока значение внутри значений]

"""
        # Получение текущей позиции курсора
        cursor_position = self.text.index("insert")

        # Вставка текста в текущую позицию курсора
        self.text.insert(cursor_position, multiline_text)
        return multiline_text


    def open_ui_commands(self):
        lbcommands = [
    'графический_интерфейс', 'оформление', 'главный_цикл', 'Кнопка', 'Окно', 'Метка', 'Поле_ввода', 'Многострочный_ввод', 
    'Строковая_переменная', 'Целочисленная_переменная', 'Логическая_переменная', 'Дробная_переменная', 'Переменная', 
    'Флажок', 'Радиокнопка', 'Каркас', 'Листбокс', 'Скрол', 'Выпадающий_список', 'до', 'от_', 'Ползунок', 'Спинбокс', 
    'обертка', 'приращение', 'Прогрессбар', 'конечный', 'бесконечный', 'Меню', 'Вкладки', 'Изображение', 'символ', 
    'слово', 'Таблица', 'предок', 'столбцы_таблицы', 'отобразить_столбцы', 'иид', 'предмет', 'получить_ребенка', 
    'показать', 'заголовки', 'растяжение', 'заголовок', 'выделение', 'добавить_выделение', 'задать_выделение', 
    'Выбор_таблицы', 'отсутствие', 'Верхнее_окно', 'отпустить_взятие', 'взять_ввод', 'сообщение', 'оповещение', 
    'Холст', 'внедрить_виджет', 'инфа_класс', 'инфа_дети', 'инфа_родитель', 'инфа_окно_с_виджетом', 'инфа_ширина', 
    'инфа_высота', 'инфа_запщирина', 'инфа_запвысота', 'инфа_x', 'инфа_y', 'инфа_окноx', 'инфа_окноy', 'инфа_видимый', 
    'опция_окна', 'размеры', 'изменяемость', 'минразмер', 'максразмер', 'заголовок', 'иконка', 'по_умолчанию', 'файл', 
    'фотоиконка', 'протокол', 'ЗАКРЫТИЕ_ОКНА', 'ПОЛУЧЕН_ФОКУС', 'СОХРАНЕНИЕ_СЕБЯ', 'атрибуты', 'полноэкранный_режим', 
    'прозрачность', 'верхняя_панель', 'поверх_других', 'недоступно', 'прозрачность_цвета', 'развернуть_окно', 
    'тип_окна', 'путь_к_иконке', 'модификация_окна', 'оповещение_окна', 'обычное', 'свернуть', 'развернуть', 'скрыть', 
    'отключенное', 'включенное', 'активное', 'фокус', 'нажатая', 'конфигурация', 'текст_виджета', 'цвет_фона', 
    'цвет_текста', 'шрифт_текста', 'команда', 'соединялка', 'курсор', 'изображение', 'отступы', 'состояние', 'текст', 
    'высота', 'тип_границы', 'текстовая_переменная', 'подчеркивание', 'ширина', 'выравнивание', 'длина_упаковки', 
    'удалить', 'задать', 'добавить_', 'чтение', 'удаление', 'изменение', 'толщина_границы', 'диаметр_границы', 
    'цвет_фокуса', 'толщина_фокуса', 'фон_выбранного', 'режим_выбора', 'ОБЗОР', 'ОДИНОЧНЫЙ', 'МНОГОРАЗОВЫЙ', 
    'ДИАПОЗОНАЛЬНЫЙ', 'обзор', 'одиночный', 'многоразовый', 'диапозональный', 'горизонтальная_прокрутка', 
    'вертикальная_прокрутка', 'количество_элементов', 'выделение_диапозона', 'выделение_включает', 'очистить_выделение', 
    'отображаемый_символ', 'упаковка', 'растянуть_на_весь', 'растяжение', 'якорь', 'сторона', 'отступ_x', 'отступ_y', 
    'отступ_содержимого_x', 'отступ_содержимого_y', 'центр', 'СВЕРХУ', 'СЛЕВА', 'СПРАВА', 'СНИЗУ', 'ЦЕНТР', 'поставить', 
    'ширина', 'высота', 'дробная_ширина', 'дробная_высота', 'дробный_x', 'дробный_y', 'режим_границы', 'сетка', 
    'столбец_сетки', 'строка_сетки', 'диапозон_столбцов', 'диапозон_строк', 'выравнивание_в_ячейке', 'привязать', 
    'Кнопка_мыши', 'Отпускание_кнопки', 'Двойное_нажатие', 'Тройное_нажатие', 'Движение_мыши', '<К1-Движение_мыши>', 
    '<К2-Движение_мыши>', '<К3-Движение_мыши>', 'Выбор', 'Вошел', 'Вышел', 'Колесико_мыши', 'Клавиша', 'Нажатие_клавиши', 
    'Отпускание_клавиши', 'Возврат', 'Выход', 'БэкСпейс', 'Таб', 'Шифт_Л', 'Контрл_Л', 'Алт_Л', 'Шифт_П', 'Контрл_П', 
    'Алт_П', 'Шифт', 'Контрл', 'Алт', 'Изменение', 'Отображение', 'Скрытие', 'Фокус_В', 'Фокус_Вне', 'Выявление', 
    'Видемость', 'Актививный', 'Неактивный', 'Уничтожен', 'уничтожить', 'Тройное_нажатие', 'Двойное_нажатие', 
    'Выбор_Комбобокс', 'привязать_все', 'отвязать', 'привязать_классу', 'отвязать_все', 'теги_привязки', 
    'имитация_события', 'выкл_значение', 'вкл_значение', 'переменная', 'ориентация', 'просмотр_x', 'просмотр_y', 
    'прокрутить_на_x', 'прокрутить_на_y', 'сдвинуть_x', 'сдвинуть_y', 'только_чтение', 'длина_виджета', 'старт', 
    'остановить', 'шаг', 'активный_цвет_фона', 'активная_толщина_границы', 'активный_цвет_текста', 'цвет_выключенного', 
    'отсоединение', 'добавить_команду', 'добавить_каскад', 'добавить_разграничитель', 'добавить_радиокнопку', 
    'добавить_флажок', 'добавить_опцию', 'ребенок', 'спрятанный', 'спрятать', 'удалить_вкладку', 'получить_выделение', 
    'очистить_выделение', 'всплывающее_окно', 'опции', 'показать_инфо', 'показать_ошибку', 'показать_предупреждение', 
    'сообщение', 'спросить_да_нет', 'спросить_ок_отмена', 'спросить_снова_отмена', 'спросить_вопрос', 
    'спросить_да_нет_отмена', 'деталь', 'файловый_диалог', 'путь_к_файлам', 'пути_к_файлам', 'путь_к_сохраняемому_файлу', 
    'сохранить_как_файл', 'выбор_каталога', 'выбор_файла', 'выбор_файлов', 'КОНЕЦ', 'предупреждение_перезаписи', 
    'обычное_расширение', 'типы_файлов', 'стартовый_каталог', 'стартовый_файл', 'типовая_переменная', 'гип', 
    'диалог_шрифтов', 'метка', 'регистрировать', 'вызов', 'диалог_цветов', 'спросить_цвет', 'стартовый_цвет', 
    'текстовый_цвет', 'задний_цвет', 'указание', 'разделитель', 'диалоги', 'строковый_диалог', 'численный_диалог', 
    'дробный_диалог'
]
  
        # Создаем новое окно
        command_window = tk.Toplevel(self.master, bg='#2E2E2E')
        command_window.title("Выбор команды")
        command_window.geometry("400x350")

        # Создаем Listbox для команд
        self.listbox = tk.Listbox(command_window, height=10, bg='#2E2E2E', fg='#FFFFFF')
        for command in lbcommands:
            self.listbox.insert(tk.END, command)
        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Создаем Scrollbar и связываем его с Listbox
        scrollbar = tk.Scrollbar(command_window)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.listbox.yview)

        # Кнопка для вставки команды
        insert_button = tk.Button(command_window, text="Вставить", command=self.insert_command)
        insert_button.pack()
    def insert_command(self):
        # Получаем выбранный элемент из Listbox
        selected_command = self.listbox.get(tk.ACTIVE)
        if selected_command:
            # Вставляем выбранную команду в текстовое поле
            self.text.insert(tk.END, selected_command + "\n")

    def помощь_ui(self):
          messagebox.showinfo("Справка по ГИП", """В этом приложении можно создать свою программу на русском языке, используя язык TimCode
Чтобы создать главное окно, можно нажать кнопку создать окно и задать дальнейшие параметры окна.
Чтобы добавить виджет, его также можно выбрать из меню ниже, либо написать все методы самому.
Чтобы добавить переменную виджета, надо воспользоваться списком переменных.
Также можно выбрать цвета, дополнительные методы и т.д
Не стоит забывать использовать функции и методы стандартного языка TimCode, а также его модулей.""")

class _DropdownMenu(tk.Toplevel):
    def __init__(self, parent, button, options):
        super().__init__(parent)
        self._parent_button = button
        self.overrideredirect(True)
        self.attributes("-topmost", True)
        self.geometry(f"+{button.winfo_rootx()}+{button.winfo_rooty() + 30}")
        self.fg_color = "#333333"
        self._options = options
        
        for text, command in options:
            btn = tk.Button(self, text=text, width=120,
                              bg=self.fg_color, fg="#FFFFFF", activebackground="#444444",
                              command=lambda c=command: (c(), self.destroy()))
            btn.pack(fill="x", padx=1, pady=1)

    def show(self):
        self.deiconify()
        self.focus_set()
        self.bind("<FocusOut>", self._on_focus_out)

    def _on_focus_out(self, event):
        if not self.focus_get() in self.children.values():
            self.destroy()

class OutputRedirector:
    def __init__(self, text_widget):
        self.text_widget = text_widget
        # Словарь для перевода объектов
        self.translations = {
            "True": "Правда",
            "False": "Ложь",
            "None": "Отсутствует",
            "int": "число",
            "float": "дробное",
            "str": "строка",
            "list": "список",
            "dict": "словарь",
            "tuple": "кортеж",
            "set": "множество",
            "complex":"комплексное",
            "function": "функция",
            "class": "класс",
            "frozen":"замороженное ",
            "type":"тип",
        }

    def translate_output(self, message):
        # Перевод объектов в выводе
        for eng, rus in self.translations.items():
            message = message.replace(eng, rus)
        return message

    def write(self, message):
        translated = self.translate_output(message)
        self.text_widget.after(0, self._update_output, translated)

    def _update_output(self, text):
        self.text_widget.config(state="normal")
        self.text_widget.insert(tk.END, text)
        self.text_widget.see(tk.END)
        self.text_widget.config(state="disabled")

if __name__ == "__main__":
    app = TimCodeEditor()
    app.mainloop()
