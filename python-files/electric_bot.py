import telebot
from math import sqrt

TOKEN = "7704795429:AAFIRkLTvbEwmM2UYAsPYE7KIadC6qe4MII"
bot = telebot.TeleBot(TOKEN)

# –¢–∞–±–ª–∏—Ü—ã —Å–µ—á–µ–Ω–∏–π (–º–µ–¥—å –∏ –∞–ª—é–º–∏–Ω–∏–π)
CABLE_TABLES = {
    'copper': {
        1.5: 19, 2.5: 27, 4: 38, 6: 50, 10: 70
    },
    'aluminum': {
        2.5: 21, 4: 29, 6: 38, 10: 55
    }
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–∫–ª–∞–¥–∫–∏
INSTALLATION_FACTORS = {
    'open': 1.0,
    'closed': 1.2  # +20% –∫ —Ç–æ–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π –ø—Ä–æ–∫–ª–∞–¥–∫–∏
}

@bot.message_handler(commands=['start'])
def start(message):
    help_text = """
    ‚ö° *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞*
    
    –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    `U, P, I, R, –º–∞—Ç–µ—Ä–∏–∞–ª, –ø—Ä–æ–∫–ª–∞–¥–∫–∞, –¥–ª–∏–Ω–∞`
    
    –ì–¥–µ:
    - –ü–µ—Ä–≤—ã–µ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (U,P,I,R): –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ `?`
    - –ú–∞—Ç–µ—Ä–∏–∞–ª: `–º–µ–¥—å` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ `–∞–ª—é–º–∏–Ω–∏–π`
    - –ü—Ä–æ–∫–ª–∞–¥–∫–∞: `–æ—Ç–∫—Ä—ã—Ç–∞—è` (–ø–æ —É–º–æ–ª—á.) –∏–ª–∏ `–∑–∞–∫—Ä—ã—Ç–∞—è`
    - –î–ª–∏–Ω–∞: —á–∏—Å–ª–æ (–º) –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞–¥–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
    
    –ü—Ä–∏–º–µ—Ä—ã:
    `220, 5500, ?, ?, –º–µ–¥—å, –∑–∞–∫—Ä—ã—Ç–∞—è, 25`
    `380, ?, 20, ?, –∞–ª—é–º–∏–Ω–∏–π, –æ—Ç–∫—Ä—ã—Ç–∞—è, 10`
    """
    bot.reply_to(message, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help(message):
    help_text = '''U - –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)
    P - –ú–æ—â–Ω–æ—Å—Ç—å(–í—Ç)
    I - –°–∏–ª–∞ —Ç–æ–∫–∞(–ê)
    R - –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ(–û–º)\n
    –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –≤—ã–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏.
    '''
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['tips'])
def send_tips(message):
    tips = """
    üìú –ù–æ—Ä–º—ã:
    ‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ: 1.5 –º–º¬≤ –º–µ–¥—å
    ‚Ä¢ –†–æ–∑–µ—Ç–∫–∏: 2.5 –º–º¬≤
    ‚Ä¢ –í–∞—Ä–æ—á–Ω–∞—è: 6 –º–º¬≤
    """
    bot.reply_to(message, tips)

def calculate_cable_section(current, material='copper', installation='open'):
    """–í—ã–±–æ—Ä —Å–µ—á–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø—Ä–æ–∫–ª–∞–¥–∫–∏"""
    adjusted_current = current * INSTALLATION_FACTORS.get(installation, 1.0)
    table = CABLE_TABLES.get(material, CABLE_TABLES['copper'])
    
    for section, max_current in sorted(table.items()):
        if adjusted_current <= max_current:
            return section
    return max(table.keys(), default=10)

def calculate_voltage_drop(U, I, length, section, material='copper'):
    """–†–∞—Å—á—ë—Ç –ø–∞–¥–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –≤ %"""
    rho = 0.0175 if material == 'copper' else 0.028
    if U == 0 or section == 0:
        return 0
    drop = (2 * I * length * rho) / section
    return (drop / U) * 100

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    try:
        parts = [p.strip().lower() for p in message.text.split(',')]
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        U = float(parts[0]) if parts[0] != '?' else None
        P = float(parts[1]) if len(parts) > 1 and parts[1] != '?' else None
        I = float(parts[2]) if len(parts) > 2 and parts[2] != '?' else None
        R = float(parts[3]) if len(parts) > 3 and parts[3] != '?' else None
        
        material = 'copper'
        installation = 'open'
        length = 0
        
        if len(parts) > 4:
            material = parts[4] if parts[4] in ['–º–µ–¥—å', '–∞–ª—é–º–∏–Ω–∏–π'] else 'copper'
        if len(parts) > 5:
            installation = parts[5] if parts[5] in ['–æ—Ç–∫—Ä—ã—Ç–∞—è', '–∑–∞–∫—Ä—ã—Ç–∞—è'] else 'open'
        if len(parts) > 6:
            length = float(parts[6])

        # –†–∞—Å—á—ë—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω
        if U is None and P is not None and I is not None:
            U = P / I
        if P is None and U is not None and I is not None:
            P = U * I
        if I is None and P is not None and U is not None:
            I = P / U
        if R is None and U is not None and I is not None:
            R = U / I

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = f"""
        üîå *–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
        –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (U): {U or '?'} –í
        –ú–æ—â–Ω–æ—Å—Ç—å (P): {P or '?'} –í—Ç
        –¢–æ–∫ (I): {I or '?'} –ê
        –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (R): {R or '?'} –û–º
        """

        # –†–∞—Å—á—ë—Ç —Å–µ—á–µ–Ω–∏—è –∏ –ø–∞–¥–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
        if I is not None:
            section = calculate_cable_section(I, material, installation)
            result += f"\nüìè *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–µ—á–µ–Ω–∏–µ:* {section} –º–º¬≤ ({material})"
            
            if length > 0 and U is not None:
                drop = calculate_voltage_drop(U, I, length, section, material)
                result += f"\n‚ö† *–ü–∞–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:* {drop:.2f}% ({length} –º)"
                
                if drop > 5:
                    result += "\n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–∞–¥–µ–Ω–∏–µ! –£–≤–µ–ª–∏—á—å—Ç–µ —Å–µ—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è"

        bot.reply_to(message, result, parse_mode="Markdown")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`220, 5500, ?, ?, –º–µ–¥—å, –∑–∞–∫—Ä—ã—Ç–∞—è, 25`")

bot.polling()