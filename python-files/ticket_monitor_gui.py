
import requests
import time
import threading
from tkinter import Tk, Label, Entry, Button, messagebox
from win10toast import ToastNotifier
from datetime import datetime

toaster = ToastNotifier()

def show_notification(message):
    toaster.show_toast("üöÜ –ë–∏–ª–µ—Ç—ã –†–ñ–î –Ω–∞–π–¥–µ–Ω—ã!", message, duration=15, threaded=True)

def check_tickets(departure, arrival, date, interval):
    url = "https://www.rzd.ru/v3/api/public/en/timetable/trains"
    headers = {"User-Agent": "Mozilla/5.0"}

    while True:
        print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ {departure} ‚Üí {arrival} –Ω–∞ {date}")
        payload = {
            "direction": "0",
            "st0": departure,
            "st1": arrival,
            "dt0": date,
            "checkSeats": "1"
        }

        try:
            r = requests.get(url, params=payload, headers=headers)
            r.raise_for_status()
            data = r.json()

            trains = data.get("tp", [])
            if not trains:
                print("–ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                found = False
                msg_text = ""

                for train in trains[0].get("list", []):
                    num = train["number"]
                    name = train.get("brand", "")
                    cars = train.get("cars", [])

                    for car in cars:
                        free = int(car["freeSeats"])
                        if free > 0:
                            found = True
                            msg_text += f"{num} ({name}) - {car['type']} - –°–≤–æ–±–æ–¥–Ω–æ: {free} –º–µ—Å—Ç\n"

                if found:
                    print("üö® –ë–∏–ª–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã!")
                    print(msg_text)
                    show_notification(msg_text)
                else:
                    print("–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç.")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)

        time.sleep(interval)

def start_check():
    dep = entry_dep.get().strip()
    arr = entry_arr.get().strip()
    date = entry_date.get().strip()
    if not (dep and arr and date):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        return

    try:
        datetime.strptime(date, "%d.%m.%Y")
    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    interval = 600
    threading.Thread(target=check_tickets, args=(dep, arr, date, interval), daemon=True).start()
    messagebox.showinfo("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {dep} ‚Üí {arr} –Ω–∞ {date}")

root = Tk()
root.title("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î")

Label(root, text="–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:").grid(row=0, column=0, sticky="e")
Label(root, text="–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è:").grid(row=1, column=0, sticky="e")
Label(root, text="–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):").grid(row=2, column=0, sticky="e")

entry_dep = Entry(root, width=30)
entry_arr = Entry(root, width=30)
entry_date = Entry(root, width=15)

entry_dep.grid(row=0, column=1, padx=10, pady=5)
entry_arr.grid(row=1, column=1, padx=10, pady=5)
entry_date.grid(row=2, column=1, padx=10, pady=5)

Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", command=start_check).grid(row=3, column=0, columnspan=2, pady=10)

root.mainloop()
