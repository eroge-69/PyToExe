import socket
import sys
import threading
import os
import subprocess
import time
import shlex

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install paramiko
import paramiko

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –°–µ—Ä–≤–µ—Ä–∞ ---
HOST = '127.0.0.1'  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è —Ç—É–Ω–Ω–µ–ª—è
PORT = 2222         # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è SSH
LOG_FILE = 'ssh_server.log' # –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
HOST_KEY_FILE = 'test_rsa.key'

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pinggy ---
# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Authtoken —Å —Å–∞–π—Ç–∞ pinggy.io
# –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ https://pinggy.io/
PINGGY_AUTHTOKEN = "PASTE_YOUR_PINGGY_AUTHTOKEN_HERE"

# --- –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) ---
SSH_USER = 'user'
SSH_PASSWORD = 'password123'

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Authtoken ---
if 'PASTE_YOUR_PINGGY_AUTHTOKEN_HERE' in PINGGY_AUTHTOKEN:
    print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    print("!!! –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Pinggy Authtoken     !!!")
    print("!!! –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PINGGY_AUTHTOKEN –≤ —Å—Ç—Ä–æ–∫–µ 20.            !!!")
    print("!!! –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://pinggy.io/                   !!!")
    print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    sys.exit(1)


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —Ö–æ—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) ---
try:
    host_key = paramiko.RSAKey(filename=HOST_KEY_FILE)
except IOError:
    print(f'*** –ö–ª—é—á —Ö–æ—Å—Ç–∞ ({HOST_KEY_FILE}) –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π...')
    try:
        host_key = paramiko.RSAKey.generate(2048)
        host_key.write_private_key_file(HOST_KEY_FILE)
        print('*** –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.')
    except Exception as e:
        print(f'*** –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}')
        sys.exit(1)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
paramiko.util.log_to_file(LOG_FILE)


# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Paramiko (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class SSHServerHandler(paramiko.ServerInterface):
    def __init__(self, client_address):
        self.client_address = client_address
        self.event = threading.Event()

    def check_channel_request(self, kind, chanid):
        if kind == 'session':
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def check_auth_password(self, username, password):
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –æ—Ç {username} —Å –∞–¥—Ä–µ—Å–∞ {self.client_address[0]}...")
        if (username == SSH_USER) and (password == SSH_PASSWORD):
            print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return paramiko.AUTH_SUCCESSFUL
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        return paramiko.AUTH_FAILED

    def get_allowed_auths(self, username):
        return 'password'

    def check_channel_exec_request(self, channel, command):
        command_str = command.decode('utf-8', 'ignore')
        print(f"–ö–ª–∏–µ–Ω—Ç ({self.client_address[0]}) –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É: '{command_str}'")
        try:
            p = subprocess.Popen(command_str, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            stdout, stderr = p.communicate()
            if stdout:
                channel.send(stdout)
            if stderr:
                channel.send_stderr(stderr)
            exit_code = p.wait()
            channel.send_exit_status(exit_code)
            print(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º {exit_code}")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}\n".encode('utf-8')
            channel.send_stderr(error_msg)
            channel.send_exit_status(1)
        self.event.set()
        return True

    def check_channel_shell_request(self, channel):
        self.event.set()
        return True

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª—è Pinggy ---
def start_pinggy_tunnel():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pinggy –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL."""
    def run_pinggy():
        global pinggy_process
        print("\n*** –ó–∞–ø—É—Å–∫–∞—é —Ç—É–Ω–Ω–µ–ª—å Pinggy...")
        command = f'pinggy tcp -p {PORT} --token {PINGGY_AUTHTOKEN}'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º shlex.split –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–∑–Ω—ã—Ö –û–°
        pinggy_process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8')

        for line in iter(pinggy_process.stdout.readline, ''):
            print(f"[Pinggy]: {line.strip()}")
            if "Tunnel established at" in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å—Ç—Ä–æ–∫–∏
                try:
                    url = line.split("at:")[1].strip()
                    print("\n" + "="*50)
                    print(" " * 10 + "üéâ –¢–£–ù–ù–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù! üéâ")
                    print(f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É SSH-—Å–µ—Ä–≤–µ—Ä—É –∏–∑–≤–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                    print(f"ssh {SSH_USER}@{url.replace('tcp://', '')}")
                    print(f"–ü–∞—Ä–æ–ª—å: {SSH_PASSWORD}")
                    print("="*50 + "\n")
                except IndexError:
                    pass # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º pinggy –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
    pinggy_thread = threading.Thread(target=run_pinggy, daemon=True)
    pinggy_thread.start()


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
def run_server():
    global pinggy_process
    pinggy_process = None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
    start_pinggy_tunnel()
    time.sleep(5) # –î–∞–µ–º Pinggy –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –≤—ã–≤–æ–¥ URL

    try:
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind((HOST, PORT))
        server_socket.listen(100)
        print(f'*** –õ–æ–∫–∞–ª—å–Ω—ã–π SSH-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}...')
        print(f"*** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω '{SSH_USER}' –∏ –ø–∞—Ä–æ–ª—å '{SSH_PASSWORD}' –¥–ª—è –≤—Ö–æ–¥–∞.")
        print('*** –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')
    except Exception as e:
        print(f'*** –û—à–∏–±–∫–∞ –±–∏–Ω–¥–∞ —Å–æ–∫–µ—Ç–∞: {e}')
        if pinggy_process:
            pinggy_process.terminate()
        sys.exit(1)

    try:
        while True:
            client_socket, client_address = server_socket.accept()
            print(f'\n*** –ü–æ–ª—É—á–µ–Ω–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç {client_address[0]}:{client_address[1]}')
            
            transport = paramiko.Transport(client_socket)
            transport.add_server_key(host_key)
            
            server_handler = SSHServerHandler(client_address)
            transport.start_server(server=server_handler)

            channel = transport.accept(20)
            if channel is None:
                print('*** –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–Ω–∞–ª. –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.')
                transport.close()
                continue
            
            print('*** –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç.')
            server_handler.event.wait(10)

            if channel.active:
                channel.close()
            transport.close()
            print(f'*** –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {client_address[0]} –∑–∞–∫—Ä—ã—Ç–æ.')

    except KeyboardInterrupt:
        print('\n*** –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...')
    finally:
        if pinggy_process:
            print("*** –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç—É–Ω–Ω–µ–ª—å Pinggy...")
            pinggy_process.terminate()
            pinggy_process.wait()
        server_socket.close()
        print('*** –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')


if __name__ == '__main__':
    run_server()
