import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import tempfile

# Thi·∫øt l·∫≠p chung
st.set_page_config(page_title="Ph√¢n T√≠ch Gi√° & L·ª£i Nhu·∫≠n", page_icon="üìä", layout="wide")
st.title("üìä Ph√¢n T√≠ch Gi√° & L·ª£i Nhu·∫≠n Thi·∫øt B·ªã Nh·∫≠p Kh·∫©u")

# H√†m ƒë·ªãnh d·∫°ng s·ªë
def format_currency(x):
    if abs(x) >= 1e9:
        return f"{x/1e9:,.2f} t·ª∑"
    elif abs(x) >= 1e6:
        return f"{x/1e6:,.2f} tri·ªáu"
    return f"{x:,.0f}"

def format_percent(x):
    return f"{x*100:.2f}%"

# H√†m t√≠nh to√°n
def calculate_pricing(unit_price, quantity, profit_rate, commission_rate, 
                     import_tax_rate, accessories_cost, exchange_rate=28500, 
                     corporate_tax_rate=0.2, vat_rate=0.1):
    # T√≠nh to√°n c∆° b·∫£n
    ex_value = unit_price * quantity
    cif_value = ex_value + accessories_cost
    
    # T√≠nh thu·∫ø nh·∫≠p kh·∫©u
    import_tax = cif_value * import_tax_rate
    
    # T√≠nh gi√° tr·ªã VND
    ex_value_vnd = ex_value * exchange_rate
    cif_value_vnd = cif_value * exchange_rate
    import_tax_vnd = import_tax * exchange_rate
    
    # T√≠nh hoa h·ªìng
    commission = cif_value * commission_rate
    commission_vnd = commission * exchange_rate
    
    # T√≠nh t·ªïng chi ph√≠ tr∆∞·ªõc l·ª£i nhu·∫≠n
    total_cost = cif_value + import_tax + commission
    total_cost_vnd = total_cost * exchange_rate
    
    # T√≠nh gi√° b√°n mong mu·ªën
    desired_profit = total_cost * profit_rate
    selling_price = total_cost + desired_profit
    selling_price_vnd = selling_price * exchange_rate
    
    # T√≠nh VAT
    vat_amount = selling_price * vat_rate
    vat_amount_vnd = vat_amount * exchange_rate
    
    # T√≠nh gi√° b√°n bao g·ªìm VAT
    selling_price_inc_vat = selling_price + vat_amount
    selling_price_inc_vat_vnd = selling_price_inc_vat * exchange_rate
    
    # T√≠nh thu·∫ø TNDN
    corporate_tax = (selling_price - total_cost) * corporate_tax_rate
    corporate_tax_vnd = corporate_tax * exchange_rate
    
    # T√≠nh l·ª£i nhu·∫≠n sau thu·∫ø
    net_profit = (selling_price - total_cost) - corporate_tax
    net_profit_vnd = net_profit * exchange_rate
    
    # T√≠nh gi√° c·∫°nh tranh
    min_selling_price = total_cost * 1.05  # Gi√° b√°n t·ªëi thi·ªÉu (l·ª£i nhu·∫≠n 5%)
    max_selling_price = total_cost * 1.25  # Gi√° b√°n t·ªëi ƒëa (l·ª£i nhu·∫≠n 25%)
    
    return {
        "ex_value": ex_value,
        "ex_value_vnd": ex_value_vnd,
        "cif_value": cif_value,
        "cif_value_vnd": cif_value_vnd,
        "import_tax": import_tax,
        "import_tax_vnd": import_tax_vnd,
        "commission": commission,
        "commission_vnd": commission_vnd,
        "total_cost": total_cost,
        "total_cost_vnd": total_cost_vnd,
        "desired_profit": desired_profit,
        "desired_profit_vnd": desired_profit * exchange_rate,
        "selling_price": selling_price,
        "selling_price_vnd": selling_price_vnd,
        "vat_amount": vat_amount,
        "vat_amount_vnd": vat_amount_vnd,
        "selling_price_inc_vat": selling_price_inc_vat,
        "selling_price_inc_vat_vnd": selling_price_inc_vat_vnd,
        "corporate_tax": corporate_tax,
        "corporate_tax_vnd": corporate_tax_vnd,
        "net_profit": net_profit,
        "net_profit_vnd": net_profit_vnd,
        "min_selling_price": min_selling_price,
        "min_selling_price_vnd": min_selling_price * exchange_rate,
        "max_selling_price": max_selling_price,
        "max_selling_price_vnd": max_selling_price * exchange_rate,
        "exchange_rate": exchange_rate
    }

# H√†m t·∫°o PDF
def create_pdf(results, unit_price, quantity, profit_rate, commission_rate, 
              import_tax_rate, accessories_cost, exchange_rate):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    elements = []
    
    # Ti√™u ƒë·ªÅ
    title = Paragraph("B√°o C√°o Ph√¢n T√≠ch Gi√° & L·ª£i Nhu·∫≠n", styles['Title'])
    elements.append(title)
    elements.append(Spacer(1, 12))
    
    # Th√¥ng s·ªë ƒë·∫ßu v√†o
    input_data = [
        ["Th√¥ng s·ªë", "Gi√° tr·ªã"],
        ["ƒê∆°n gi√° thi·∫øt b·ªã (EUR)", f"{unit_price:,.2f}"],
        ["S·ªë l∆∞·ª£ng", f"{quantity}"],
        ["T·ª∑ l·ªá l·ª£i nhu·∫≠n mong mu·ªën", f"{profit_rate*100:.2f}%"],
        ["T·ª∑ l·ªá hoa h·ªìng", f"{commission_rate*100:.2f}%"],
        ["Thu·∫ø nh·∫≠p kh·∫©u", f"{import_tax_rate*100:.2f}%"],
        ["Gi√° ph·ª• t√πng (EUR)", f"{accessories_cost:,.2f}"],
        ["T·ª∑ gi√° EUR/VND", f"{exchange_rate:,.0f}"]
    ]
    
    input_table = Table(input_data)
    input_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(Paragraph("Th√¥ng S·ªë ƒê·∫ßu V√†o", styles['Heading2']))
    elements.append(input_table)
    elements.append(Spacer(1, 12))
    
    # K·∫øt qu·∫£ t√≠nh to√°n (EUR)
    eur_data = [
        ["H·∫°ng m·ª•c", "Gi√° tr·ªã (EUR)"],
        ["Gi√° EX", f"{results['ex_value']:,.2f}"],
        ["Gi√° CIF", f"{results['cif_value']:,.2f}"],
        ["Thu·∫ø nh·∫≠p kh·∫©u", f"{results['import_tax']:,.2f}"],
        ["Hoa h·ªìng", f"{results['commission']:,.2f}"],
        ["T·ªïng chi ph√≠", f"{results['total_cost']:,.2f}"],
        ["Gi√° b√°n d·ª± ki·∫øn", f"{results['selling_price']:,.2f}"],
        ["VAT", f"{results['vat_amount']:,.2f}"],
        ["Gi√° b√°n bao g·ªìm VAT", f"{results['selling_price_inc_vat']:,.2f}"],
        ["Thu·∫ø TNDN", f"{results['corporate_tax']:,.2f}"],
        ["L·ª£i nhu·∫≠n sau thu·∫ø", f"{results['net_profit']:,.2f}"]
    ]
    
    eur_table = Table(eur_data)
    eur_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(Paragraph("K·∫øt Qu·∫£ T√≠nh To√°n (EUR)", styles['Heading2']))
    elements.append(eur_table)
    elements.append(Spacer(1, 12))
    
    # K·∫øt qu·∫£ t√≠nh to√°n (VND)
    vnd_data = [
        ["H·∫°ng m·ª•c", "Gi√° tr·ªã (VND)"],
        ["Gi√° EX", format_currency(results['ex_value_vnd'])],
        ["Gi√° CIF", format_currency(results['cif_value_vnd'])],
        ["Thu·∫ø nh·∫≠p kh·∫©u", format_currency(results['import_tax_vnd'])],
        ["Hoa h·ªìng", format_currency(results['commission_vnd'])],
        ["T·ªïng chi ph√≠", format_currency(results['total_cost_vnd'])],
        ["Gi√° b√°n d·ª± ki·∫øn", format_currency(results['selling_price_vnd'])],
        ["VAT", format_currency(results['vat_amount_vnd'])],
        ["Gi√° b√°n bao g·ªìm VAT", format_currency(results['selling_price_inc_vat_vnd'])],
        ["Thu·∫ø TNDN", format_currency(results['corporate_tax_vnd'])],
        ["L·ª£i nhu·∫≠n sau thu·∫ø", format_currency(results['net_profit_vnd'])]
    ]
    
    vnd_table = Table(vnd_data)
    vnd_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(Paragraph("K·∫øt Qu·∫£ T√≠nh To√°n (VND)", styles['Heading2']))
    elements.append(vnd_table)
    elements.append(Spacer(1, 12))
    
    # Gi√° c·∫°nh tranh
    comp_data = [
        ["Lo·∫°i gi√°", "EUR", "VND"],
        ["Gi√° t·ªëi thi·ªÉu", 
         f"{results['min_selling_price']:,.2f}", 
         format_currency(results['min_selling_price_vnd'])],
        ["Gi√° ƒë·ªÅ xu·∫•t", 
         f"{results['selling_price']:,.2f}", 
         format_currency(results['selling_price_vnd'])],
        ["Gi√° t·ªëi ƒëa", 
         f"{results['max_selling_price']:,.2f}", 
         format_currency(results['max_selling_price_vnd'])]
    ]
    
    comp_table = Table(comp_data)
    comp_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.orange),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(Paragraph("Ph·∫°m Vi Gi√° C·∫°nh Tranh", styles['Heading2']))
    elements.append(comp_table)
    
    # T·∫°o PDF
    doc.build(elements)
    buffer.seek(0)
    return buffer

# Sidebar - Nh·∫≠p th√¥ng s·ªë
with st.sidebar:
    st.header("Th√¥ng S·ªë ƒê·∫ßu V√†o")
    
    unit_price = st.number_input("ƒê∆°n gi√° thi·∫øt b·ªã (EUR)", min_value=0.0, value=10000.0, step=100.0)
    quantity = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=1, step=1)
    profit_rate = st.slider("L·ª£i nhu·∫≠n mong mu·ªën (%)", min_value=5, max_value=50, value=18, step=1) / 100
    commission_rate = st.slider("T·ª∑ l·ªá hoa h·ªìng (%)", min_value=0, max_value=20, value=5, step=1) / 100
    import_tax_rate = st.slider("Thu·∫ø nh·∫≠p kh·∫©u (%)", min_value=0, max_value=50, value=10, step=1) / 100
    accessories_cost = st.number_input("Gi√° ph·ª• t√πng (EUR)", min_value=0.0, value=500.0, step=50.0)
    exchange_rate = st.number_input("T·ª∑ gi√° EUR/VND", min_value=10000, max_value=50000, value=28500, step=100)
    
    st.divider()
    st.caption("T√≠nh to√°n d·ª±a tr√™n thu·∫ø TNDN 20% v√† VAT 10%")

# T√≠nh to√°n k·∫øt qu·∫£
results = calculate_pricing(
    unit_price, quantity, profit_rate, commission_rate, 
    import_tax_rate, accessories_cost, exchange_rate
)

# Hi·ªÉn th·ªã k·∫øt qu·∫£
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("T·ªïng chi ph√≠", format_currency(results['total_cost_vnd']))
with col2:
    st.metric("Gi√° b√°n ƒë·ªÅ xu·∫•t", format_currency(results['selling_price_inc_vat_vnd']))
with col3:
    profit_percent = (results['net_profit'] / results['total_cost']) * 100
    st.metric("L·ª£i nhu·∫≠n sau thu·∫ø", format_currency(results['net_profit_vnd']), f"{profit_percent:.2f}%")

# Tab hi·ªÉn th·ªã k·∫øt qu·∫£
tab1, tab2, tab3, tab4 = st.tabs(["Ph√¢n T√≠ch Chi Ti·∫øt", "Bi·ªÉu ƒê·ªì Ph√¢n B·ªï", "Gi√° C·∫°nh Tranh", "Xu·∫•t B√°o C√°o"])

with tab1:
    st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
    
    # T·∫°o DataFrame cho k·∫øt qu·∫£
    data = {
        "H·∫°ng m·ª•c": [
            "Gi√° EX (EUR)", "Gi√° EX (VND)",
            "Gi√° CIF (EUR)", "Gi√° CIF (VND)",
            "Thu·∫ø nh·∫≠p kh·∫©u (EUR)", "Thu·∫ø nh·∫≠p kh·∫©u (VND)",
            "Hoa h·ªìng (EUR)", "Hoa h·ªìng (VND)",
            "T·ªïng chi ph√≠ (EUR)", "T·ªïng chi ph√≠ (VND)",
            "Gi√° b√°n d·ª± ki·∫øn (EUR)", "Gi√° b√°n d·ª± ki·∫øn (VND)",
            "VAT (EUR)", "VAT (VND)",
            "Gi√° b√°n bao g·ªìm VAT (EUR)", "Gi√° b√°n bao g·ªìm VAT (VND)",
            "Thu·∫ø TNDN (EUR)", "Thu·∫ø TNDN (VND)",
            "L·ª£i nhu·∫≠n sau thu·∫ø (EUR)", "L·ª£i nhu·∫≠n sau thu·∫ø (VND)"
        ],
        "Gi√° tr·ªã": [
            results['ex_value'], results['ex_value_vnd'],
            results['cif_value'], results['cif_value_vnd'],
            results['import_tax'], results['import_tax_vnd'],
            results['commission'], results['commission_vnd'],
            results['total_cost'], results['total_cost_vnd'],
            results['selling_price'], results['selling_price_vnd'],
            results['vat_amount'], results['vat_amount_vnd'],
            results['selling_price_inc_vat'], results['selling_price_inc_vat_vnd'],
            results['corporate_tax'], results['corporate_tax_vnd'],
            results['net_profit'], results['net_profit_vnd']
        ]
    }
    
    df = pd.DataFrame(data)
    df['Gi√° tr·ªã'] = df['Gi√° tr·ªã'].apply(format_currency)
    st.dataframe(df, hide_index=True, use_container_width=True)

with tab2:
    st.subheader("Ph√¢n B·ªï Chi Ph√≠ & L·ª£i Nhu·∫≠n")
    
    # D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    cost_components = {
        "Gi√° EX": results['ex_value'],
        "Ph·ª• t√πng": accessories_cost,
        "Thu·∫ø nh·∫≠p kh·∫©u": results['import_tax'],
        "Hoa h·ªìng": results['commission']
    }
    
    revenue_components = {
        "T·ªïng chi ph√≠": results['total_cost'],
        "Thu·∫ø TNDN": results['corporate_tax'],
        "L·ª£i nhu·∫≠n sau thu·∫ø": results['net_profit']
    }
    
    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    
    # Bi·ªÉu ƒë·ªì ph√¢n b·ªï chi ph√≠
    ax1.pie(cost_components.values(), labels=cost_components.keys(), autopct='%1.1f%%',
            colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
    ax1.set_title('Ph√¢n B·ªï Chi Ph√≠ (EUR)')
    
    # Bi·ªÉu ƒë·ªì ph√¢n b·ªï doanh thu
    ax2.pie(revenue_components.values(), labels=revenue_components.keys(), autopct='%1.1f%%',
            colors=['#66b3ff','#99ff99','#ffcc99'])
    ax2.set_title('Ph√¢n B·ªï Doanh Thu (EUR)')
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # Bi·ªÉu ƒë·ªì gi√° c·∫°nh tranh
    st.subheader("Ph·∫°m Vi Gi√° C·∫°nh Tranh")
    
    price_range = {
        "Gi√° t·ªëi thi·ªÉu": results['min_selling_price_vnd'],
        "Gi√° ƒë·ªÅ xu·∫•t": results['selling_price_vnd'],
        "Gi√° t·ªëi ƒëa": results['max_selling_price_vnd']
    }
    
    fig, ax = plt.subplots(figsize=(10, 4))
    bars = ax.barh(list(price_range.keys()), list(price_range.values()), color=['#ff9999', '#66b3ff', '#99ff99'])
    
    # ƒê·ªãnh d·∫°ng tr·ª•c x
    ax.xaxis.set_major_formatter(FuncFormatter(lambda x, pos: format_currency(x)))
    
    # Th√™m gi√° tr·ªã tr√™n m·ªói c·ªôt
    for bar in bars:
        width = bar.get_width()
        ax.text(width, bar.get_y() + bar.get_height()/2, 
                format_currency(width), 
                ha='left', va='center')
    
    plt.title('Ph·∫°m Vi Gi√° C·∫°nh Tranh (VND)')
    plt.tight_layout()
    st.pyplot(fig)

with tab3:
    st.subheader("Chi·∫øn L∆∞·ª£c Gi√° C·∫°nh Tranh")
    
    # B·∫£ng so s√°nh gi√°
    comp_data = {
        "Lo·∫°i gi√°": ["Gi√° t·ªëi thi·ªÉu", "Gi√° ƒë·ªÅ xu·∫•t", "Gi√° t·ªëi ƒëa"],
        "EUR": [
            results['min_selling_price'], 
            results['selling_price'], 
            results['max_selling_price']
        ],
        "VND": [
            results['min_selling_price_vnd'], 
            results['selling_price_vnd'], 
            results['max_selling_price_vnd']
        ],
        "L·ª£i nhu·∫≠n sau thu·∫ø (VND)": [
            (results['min_selling_price'] - results['total_cost']) * 0.8 * exchange_rate,
            results['net_profit_vnd'],
            (results['max_selling_price'] - results['total_cost']) * 0.8 * exchange_rate
        ],
        "T·ª∑ su·∫•t l·ª£i nhu·∫≠n": [
            f"{((results['min_selling_price'] - results['total_cost']) * 0.8 / results['min_selling_price'])*100:.2f}%",
            f"{(results['net_profit'] / results['selling_price'])*100:.2f}%",
            f"{((results['max_selling_price'] - results['total_cost']) * 0.8 / results['max_selling_price'])*100:.2f}%"
        ]
    }
    
    df_comp = pd.DataFrame(comp_data)
    df_comp['EUR'] = df_comp['EUR'].apply(lambda x: f"{x:,.2f}")
    df_comp['VND'] = df_comp['VND'].apply(format_currency)
    df_comp['L·ª£i nhu·∫≠n sau thu·∫ø (VND)'] = df_comp['L·ª£i nhu·∫≠n sau thu·∫ø (VND)'].apply(format_currency)
    
    st.dataframe(df_comp, hide_index=True, use_container_width=True)
    
    # Ph√¢n t√≠ch chi·∫øn l∆∞·ª£c
    st.subheader("Ph√¢n T√≠ch Chi·∫øn L∆∞·ª£c")
    
    st.markdown(f"""
    **Gi√° t·ªëi thi·ªÉu ({format_currency(results['min_selling_price_vnd'])})**:
    - T·ª∑ su·∫•t l·ª£i nhu·∫≠n: {df_comp.loc[0, 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n']}
    - L·ª£i nhu·∫≠n sau thu·∫ø: {format_currency(comp_data['L·ª£i nhu·∫≠n sau thu·∫ø (VND)'][0])}
    - **Chi·∫øn l∆∞·ª£c**: Gi·ªõi thi·ªáu s·∫£n ph·∫©m, c·∫°nh tranh gi√°, th·ªã tr∆∞·ªùng nh·∫°y c·∫£m v·ªÅ gi√°
    """)
    
    st.markdown(f"""
    **Gi√° ƒë·ªÅ xu·∫•t ({format_currency(results['selling_price_vnd'])})**:
    - T·ª∑ su·∫•t l·ª£i nhu·∫≠n: {df_comp.loc[1, 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n']}
    - L·ª£i nhu·∫≠n sau thu·∫ø: {format_currency(comp_data['L·ª£i nhu·∫≠n sau thu·∫ø (VND)'][1])}
    - **Chi·∫øn l∆∞·ª£c**: C√¢n b·∫±ng gi·ªØa c·∫°nh tranh v√† l·ª£i nhu·∫≠n, ph√π h·ª£p cho h·∫ßu h·∫øt th·ªã tr∆∞·ªùng
    """)
    
    st.markdown(f"""
    **Gi√° t·ªëi ƒëa ({format_currency(results['max_selling_price_vnd'])})**:
    - T·ª∑ su·∫•t l·ª£i nhu·∫≠n: {df_comp.loc[2, 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n']}
    - L·ª£i nhu·∫≠n sau thu·∫ø: {format_currency(comp_data['L·ª£i nhu·∫≠n sau thu·∫ø (VND)'][2])}
    - **Chi·∫øn l∆∞·ª£c**: S·∫£n ph·∫©m cao c·∫•p, th·ªã tr∆∞·ªùng √≠t nh·∫°y c·∫£m v·ªÅ gi√°, kh√°ch h√†ng doanh nghi·ªáp
    """)

with tab4:
    st.subheader("Xu·∫•t B√°o C√°o")
    
    # Xu·∫•t Excel
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
        # T·∫°o sheet k·∫øt qu·∫£
        result_data = {
            "H·∫°ng m·ª•c": [
                "ƒê∆°n gi√° thi·∫øt b·ªã (EUR)", "S·ªë l∆∞·ª£ng", "T·ª∑ l·ªá l·ª£i nhu·∫≠n", "T·ª∑ l·ªá hoa h·ªìng",
                "Thu·∫ø nh·∫≠p kh·∫©u", "Gi√° ph·ª• t√πng (EUR)", "T·ª∑ gi√° EUR/VND",
                "Gi√° EX (EUR)", "Gi√° EX (VND)",
                "Gi√° CIF (EUR)", "Gi√° CIF (VND)",
                "Thu·∫ø nh·∫≠p kh·∫©u (EUR)", "Thu·∫ø nh·∫≠p kh·∫©u (VND)",
                "Hoa h·ªìng (EUR)", "Hoa h·ªìng (VND)",
                "T·ªïng chi ph√≠ (EUR)", "T·ªïng chi ph√≠ (VND)",
                "Gi√° b√°n d·ª± ki·∫øn (EUR)", "Gi√° b√°n d·ª± ki·∫øn (VND)",
                "VAT (EUR)", "VAT (VND)",
                "Gi√° b√°n bao g·ªìm VAT (EUR)", "Gi√° b√°n bao g·ªìm VAT (VND)",
                "Thu·∫ø TNDN (EUR)", "Thu·∫ø TNDN (VND)",
                "L·ª£i nhu·∫≠n sau thu·∫ø (EUR)", "L·ª£i nhu·∫≠n sau thu·∫ø (VND)",
                "Gi√° t·ªëi thi·ªÉu (EUR)", "Gi√° t·ªëi thi·ªÉu (VND)",
                "Gi√° t·ªëi ƒëa (EUR)", "Gi√° t·ªëi ƒëa (VND)"
            ],
            "Gi√° tr·ªã": [
                unit_price, quantity, profit_rate, commission_rate,
                import_tax_rate, accessories_cost, exchange_rate,
                results['ex_value'], results['ex_value_vnd'],
                results['cif_value'], results['cif_value_vnd'],
                results['import_tax'], results['import_tax_vnd'],
                results['commission'], results['commission_vnd'],
                results['total_cost'], results['total_cost_vnd'],
                results['selling_price'], results['selling_price_vnd'],
                results['vat_amount'], results['vat_amount_vnd'],
                results['selling_price_inc_vat'], results['selling_price_inc_vat_vnd'],
                results['corporate_tax'], results['corporate_tax_vnd'],
                results['net_profit'], results['net_profit_vnd'],
                results['min_selling_price'], results['min_selling_price_vnd'],
                results['max_selling_price'], results['max_selling_price_vnd']
            ]
        }
        df_result = pd.DataFrame(result_data)
        df_result.to_excel(writer, sheet_name='K·∫øt Qu·∫£ T√≠nh To√°n', index=False)
        
        # T·∫°o sheet ph√¢n t√≠ch
        analysis_data = {
            "Lo·∫°i gi√°": ["Gi√° t·ªëi thi·ªÉu", "Gi√° ƒë·ªÅ xu·∫•t", "Gi√° t·ªëi ƒëa"],
            "EUR": [
                results['min_selling_price'], 
                results['selling_price'], 
                results['max_selling_price']
            ],
            "VND": [
                results['min_selling_price_vnd'], 
                results['selling_price_vnd'], 
                results['max_selling_price_vnd']
            ],
            "L·ª£i nhu·∫≠n sau thu·∫ø (VND)": [
                (results['min_selling_price'] - results['total_cost']) * 0.8 * exchange_rate,
                results['net_profit_vnd'],
                (results['max_selling_price'] - results['total_cost']) * 0.8 * exchange_rate
            ],
            "T·ª∑ su·∫•t l·ª£i nhu·∫≠n": [
                ((results['min_selling_price'] - results['total_cost']) * 0.8 / results['min_selling_price'])*100,
                (results['net_profit'] / results['selling_price'])*100,
                ((results['max_selling_price'] - results['total_cost']) * 0.8 / results['max_selling_price'])*100
            ]
        }
        df_analysis = pd.DataFrame(analysis_data)
        df_analysis.to_excel(writer, sheet_name='Ph√¢n T√≠ch Gi√° C·∫°nh Tranh', index=False)
    
    excel_buffer.seek(0)
    
    # Xu·∫•t PDF
    pdf_buffer = create_pdf(
        results, unit_price, quantity, profit_rate, commission_rate, 
        import_tax_rate, accessories_cost, exchange_rate
    )
    
    col1, col2 = st.columns(2)
    with col1:
        st.download_button(
            label="üì• T·∫£i Xu·ªëng Excel",
            data=excel_buffer,
            file_name="phan_tich_gia_loi_nhuan.xlsx",
            mime="application/vnd.ms-excel"
        )
    
    with col2:
        st.download_button(
            label="üì• T·∫£i Xu·ªëng PDF",
            data=pdf_buffer,
            file_name="bao_cao_phan_tich_gia.pdf",
            mime="application/pdf"
        )
    
    st.success("Nh·∫•n n√∫t ph√≠a tr√™n ƒë·ªÉ t·∫£i b√°o c√°o ƒë·∫ßy ƒë·ªß")

# Footer
st.divider()
st.caption("C√¥ng c·ª• Ph√¢n T√≠ch Gi√° & L·ª£i Nhu·∫≠n - ¬© 2024 | Phi√™n b·∫£n 1.0")