# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S_AdILkpWsHnUAUX5_u_1-63EVNfBffd
"""

import pandas as pd

def process_pituba(df):
    """
    Calcula a contagem de leads para a clínica Pituba.
    """
    df['Link Rastreável'] = df['Link Rastreável'].astype(str)
    whatsapp_leads = df[df['Origem'] == 'Meta Ads via Campanha de Mensagem'].shape[0]
    link_bio_grupo_iad_leads = df[df['Link Rastreável'].str.contains('Link da Bio Instagram \[Grupo IAD\]', na=False, regex=True)].shape[0]
    link_bio_pituba_leads = df[df['Link Rastreável'].str.contains('Link da Bio Instagram \[Pituba\]', na=False, regex=True)].shape[0]
    story_leads = df[df['Link Rastreável'].str.contains('story', na=False)].shape[0]
    sites_leads = df[df['Link Rastreável'].str.contains('LP', na=False)].shape[0]
    nao_rastreada_leads = df[df['Origem'] == 'Não Rastreada'].shape[0]

    return {
        "WhatsApp": whatsapp_leads,
        "Link da Bio Grupo IAD": link_bio_grupo_iad_leads,
        "Link da Bio": link_bio_pituba_leads,
        "Story": story_leads,
        "Sites": sites_leads,
        "Não Rastreada": nao_rastreada_leads,
    }

def process_outras_clinicas(df):
    """
    Calcula a contagem de leads para as outras clínicas.
    """
    df['Link Rastreável'] = df['Link Rastreável'].astype(str)
    whatsapp_leads = df[df['Origem'] == 'Meta Ads via Campanha de Mensagem'].shape[0]
    link_bio_leads = df[df['Link Rastreável'].str.contains('Link da Bio Instagram', na=False)].shape[0]
    story_leads = df[df['Link Rastreável'].str.contains('story', na=False)].shape[0]
    sites_leads = df[df['Link Rastreável'].str.contains('LP', na=False)].shape[0]
    nao_rastreada_leads = df[df['Origem'] == 'Não Rastreada'].shape[0]

    return {
        "WhatsApp": whatsapp_leads,
        "Link da Bio": link_bio_leads,
        "Story": story_leads,
        "Sites": sites_leads,
        "Não Rastreada": nao_rastreada_leads,
    }

# Lista dos nomes dos arquivos CSV
uploaded_files = [
    "pituba 17.csv",
    "Brotas 17.csv",
    "Lauro 17.csv",
    "Gion 17.csv",
    "itd 17.csv",
    "imd 17.csv",
    "iso 17.csv",
    "nivaldo 17.csv",
    "cot 17.csv"
]

results = {}

# Processa cada arquivo
for file_path in uploaded_files:
    clinic_name_key = file_path.split(' ')[0].lower()
    clinic_name_proper = clinic_name_key.capitalize()

    try:
        df = pd.read_csv(file_path)
        if "pituba" in clinic_name_key:
            results[clinic_name_key] = (clinic_name_proper, process_pituba(df))
        else:
            results[clinic_name_key] = (clinic_name_proper, process_outras_clinicas(df))
    except FileNotFoundError:
        print(f"AVISO: O arquivo '{file_path}' não foi encontrado e será ignorado.")
    except Exception as e:
        print(f"Erro ao processar o arquivo {file_path}: {e}")

# Ordem de exibição dos resultados
ordered_clinic_keys = ["pituba", "brotas", "lauro", "gion", "itd", "imd", "iso", "nivaldo", "cot"]

# Imprime os resultados na ordem correta
for key in ordered_clinic_keys:
    if key in results:
        clinic_name, leads = results[key]
        print(f"--- {clinic_name} ---")
        for source, count in leads.items():
            print(f"Quantidade de Leads {source}: {count}")
        print("\n")
    else:
        print(f"--- {key.capitalize()} ---")
        print(f"Resultados não disponíveis, arquivo não encontrado.\n")