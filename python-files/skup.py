# -*- coding: utf-8 -*-
"""Kopia notatnika Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Za3eci40Vg44ubLB6wSKWS5fhHPHtA1
"""

import json
import os
import datetime
import platform

class Magazyn:
    """Klasa do zarządzania stanem magazynowym towaru i kasy."""
    def __init__(self, nazwa_towaru="Towar", poczatkowy_stan_kasy=0, proba=1000):
        self.nazwa_towaru = nazwa_towaru
        self.proba = proba # Próba towaru (np. 585, 999.9)
        self.stan_magazynu_g = 0  # Stan w gramach
        self.stan_kasy_pln = poczatkowy_stan_kasy # Stan w PLN
        self.historia_transakcji = []
        self.historia_usunietych_transakcji = [] # Nowa lista na usunięte transakcje
        self.suma_kosztow_zakupu = 0 # Dodano pole do sumowania kosztów zakupu
        self.suma_ilosci_zakupu = 0 # Dodano pole do sumowania ilości zakupu
        self.suma_przychodow_sprzedazy = 0 # Dodano pole do sumowania przychodów ze sprzedaży
        self.suma_ilosci_sprzedazy = 0 # Dodano pole do sumowania ilości sprzedaży
        self.plik_konfiguracji = "magazyn_config.json" # Nazwa pliku konfiguracyjnego
        self.plik_kopii_zapasowej = self.wczytaj_sciezke_kopii_zapasowej() # Wczytanie ścieżki z pliku konfiguracyjnego


    def przelicz_na_999(self, ilosc_g):
        """Przelicza ilość towaru o danej próbie na ekwiwalent 999.9."""
        if self.proba == 0: # Uniknięcie dzielenia przez zero
            return 0
        return ilosc_g * (self.proba / 999.9)

    def oblicz_srednia_cene_zakupu(self):
        """Oblicza średnią cenę zakupu za gram towaru."""
        if self.suma_ilosci_zakupu == 0:
            return 0
        return self.suma_kosztow_zakupu / self.suma_ilosci_zakupu

    def oblicz_srednia_cene_sprzedazy(self):
        """Oblicza średnią cenę sprzedaży za gram towaru."""
        if self.suma_ilosci_sprzedazy == 0:
            return 0
        return self.suma_przychodow_sprzedazy / self.suma_ilosci_sprzedazy


    def gramy_na_uncje(self, ilosc_g):
        """Przelicza gramy na uncje trojańskie."""
        return ilosc_g / 31.1035

    def uncje_na_gramy(ilosc_oz):
        """Przelicza uncje trojańskie na gramy."""
        return ilosc_oz * 31.1035

    def oblicz_wartosc_magazynu_rynkowa(self, cena_rynkowa_za_gram_999):
        """Oblicza rynkową wartość całego magazynu w oparciu o podaną cenę za gram 999.9."""
        ekwiwalent_999 = self.przelicz_na_999(self.stan_magazynu_g)
        wartosc_rynkowa = ekwiwalent_999 * cena_rynkowa_za_gram_999
        return wartosc_rynkowa


    def skup(self, ilosc_g, cena_calkowita):
        """Rejestruje zakup (skup) towaru, dodaje go do magazynu i odejmuje koszt z kasy."""
        self.stan_magazynu_g += ilosc_g
        self.stan_kasy_pln -= cena_calkowita # Odejmujemy koszt z kasy
        self.suma_kosztow_zakupu += cena_calkowita # Dodaj koszt do sumy
        self.suma_ilosci_zakupu += ilosc_g # Dodaj ilość do sumy

        transakcja = {
            "typ": "SKUP",
            "ilosc_g": ilosc_g,
            "cena_calkowita": cena_calkowita,
            "stan_towaru_po": self.stan_magazynu_g,
            "stan_kasy_po": self.stan_kasy_pln, # Zapisujemy stan kasy po transakcji
            "czas": datetime.datetime.now().isoformat() # Zapisujemy czas w formacie ISO 8601
        }
        self.historia_transakcji.append(transakcja)

        ekwiwalent_999 = self.przelicz_na_999(self.stan_magazynu_g) # Przeliczenie po transakcji

        print(f"\n✅ SKUP ZAREJESTROWANY:")
        print(f"   Dodano: {ilosc_g:.2f}g {self.nazwa_towaru}")
        print(f"   Całkowity koszt: {cena_calkowita:.2f} PLN")
        print(f"   Nowy stan magazynu: {self.stan_magazynu_g:.2f}g")
        print(f"   Ekwiwalent 999.9: {ekwiwalent_999:.2f}g") # Wyświetlenie ekwiwalentu
        print(f"   Nowy stan kasy: {self.stan_kasy_pln:.2f} PLN\n")


    def sprzedaz(self, ilosc_g, cena_calkowita):
        """Rejestruje sprzedaż towaru, odejmuje go z magazynu i dodaje przychód do kasy."""
        przychód = cena_calkowita
        self.stan_magazynu_g -= ilosc_g
        self.stan_kasy_pln += przychód # Dodajemy przychód do kasy
        self.suma_przychodow_sprzedazy += przychód # Dodaj przychód do sumy
        self.suma_ilosci_sprzedazy += ilosc_g # Dodaj ilość do sumy
        # Nie odejmujemy od sum kosztów/ilości zakupu przy sprzedaży, bo średnia dotyczy zakupu

        transakcja = {
            "typ": "SPRZEDAŻ",
            "ilosc_g": ilosc_g,
            "cena_calkowita": cena_calkowita,
            "przychód_calkowity": przychód,
            "stan_towaru_po": self.stan_magazynu_g,
            "stan_kasy_po": self.stan_kasy_pln, # Zapisujemy stan kasy po transakcji
            "czas": datetime.datetime.now().isoformat() # Zapisujemy czas w formacie ISO 8601
        }
        self.historia_transakcji.append(transakcja)

        ekwiwalent_999 = self.przelicz_na_999(self.stan_magazynu_g) # Przeliczenie po transakcji

        print(f"\n✅ SPRZEDAŻ ZAREJESTROWANA:")
        print(f"   Sprzedano: {ilosc_g:.2f}g {self.nazwa_towaru}")
        print(f"   Całkowity przychód: {przychód:.2f} PLN")
        print(f"   Nowy stan magazynu: {self.stan_magazynu_g:.2f}g")
        print(f"   Ekwiwalent 999.9: {ekwiwalent_999:.2f}g") # Wyświetlenie ekwiwalentu
        print(f"   Nowy stan kasy: {self.stan_kasy_pln:.2f} PLN\n")

    def pokaz_stan(self):
        """Wyświetla aktualny stan magazynu i kasy."""
        ekwiwalent_999 = self.przelicz_na_999(self.stan_magazynu_g) # Przeliczenie ekwiwalentu
        srednia_cena = self.oblicz_srednia_cene_zakupu() # Obliczenie średniej ceny
        ekwiwalent_999_oz = self.gramy_na_uncje(ekwiwalent_999) # Przeliczenie ekwiwalentu na uncje

        print("="*40)
        print(f"STAN MAGAZYNU I KASY DLA: {self.nazwa_towaru.upper()} (Próba: {self.proba})") # Dodano informację o próbie
        print("="*40)
        print(f"Aktualny stan towaru: {self.stan_magazynu_g:.2f} gramów")
        print(f"Ekwiwalent 999.9: {ekwiwalent_999:.2f}g ({ekwiwalent_999_oz:.2f} oz)") # Wyświetlenie ekwiwalentu w stanie
        print(f"Średnia cena zakupu (za gram {self.proba}): {srednia_cena:.2f} PLN/g") # Wyświetlenie średniej ceny
        print(f"Aktualny stan kasy: {self.stan_kasy_pln:.2f} PLN")
        print("="*40)

    def pokaz_historie(self):
        """Wyświetla historię transakcji z uwzględnieniem stanu kasy."""
        print("\n" + "="*80) # Zwiększona szerokość linii
        print(f"HISTORIA TRANSAKCJI DLA: {self.nazwa_towaru.upper()} (Próba: {self.proba})") # Dodano informację o próbie
        print("="*80)

        if not self.historia_transakcji and not self.historia_usunietych_transakcji:
            print("Brak zarejestrowanych transakcji.")
            return

        # Wyświetlanie aktualnych transakcji
        print("\n--- AKTUALNE TRANSAKCJE ---")
        if not self.historia_transakcji:
            print("Brak aktualnych transakcji.")
        else:
            for i, transakcja in enumerate(self.historia_transakcji):
                typ = transakcja['typ']
                ilosc = transakcja['ilosc_g']
                stan_towaru_po = transakcja['stan_towaru_po']
                stan_kasy_po = transakcja['stan_kasy_po'] # Pobieramy stan kasy po transakcji
                ekwiwalent_999_po = self.przelicz_na_999(stan_towaru_po) # Przeliczenie ekwiwalentu dla stanu po transakcji
                czas = datetime.datetime.fromisoformat(transakcja['czas']).strftime("%Y-%m-%d %H:%M:%S") # Formatowanie daty i godziny

                if typ == "SKUP":
                    cena = transakcja['cena_calkowita']
                    print(f"{i+1}. {czas} | SKUP: +{ilosc:.2f}g | Koszt: {cena:.2f} PLN | Stan towaru po: {stan_towaru_po:.2f}g ({ekwiwalent_999_po:.2f}g 999.9) | Stan kasy po: {stan_kasy_po:.2f} PLN") # Zmodyfikowany komunikat i dodano ekwiwalent
                else: # SPRZEDAŻ
                    przychód = transakcja['przychód_calkowity']
                    print(f"{i+1}. {czas} | SPRZEDAŻ: -{ilosc:.2f}g | Przychód: {przychód:.2f} PLN | Stan towaru po: {stan_towaru_po:.2f}g ({ekwiwalent_999_po:.2f}g 999.9) | Stan kasy po: {stan_kasy_po:.2f} PLN") # Zmodyfikowany komunikat i dodano ekwiwalent

        # Wyświetlanie usuniętych transakcji
        print("\n--- USUNIĘTE TRANSAKCJE ---")
        if not self.historia_usunietych_transakcji:
            print("Brak usuniętych transakcji.")
        else:
            for i, transakcja in enumerate(self.historia_usunietych_transakcji):
                typ = transakcja['typ']
                ilosc = transakcja['ilosc_g']
                stan_towaru_po = transakcja['stan_towaru_po']
                stan_kasy_po = transakcja['stan_kasy_po']
                ekwiwalent_999_po = self.przelicz_na_999(stan_towaru_po)
                czas = datetime.datetime.fromisoformat(transakcja['czas']).strftime("%Y-%m-%d %H:%M:%S")

                if typ == "SKUP":
                    cena = transakcja['cena_calkowita']
                    print(f"{i+1}. {czas} | SKUP (usunięta): +{ilosc:.2f}g | Koszt: {cena:.2f} PLN | Stan towaru po: {stan_towaru_po:.2f}g ({ekwiwalent_999_po:.2f}g 999.9) | Stan kasy po: {stan_kasy_po:.2f} PLN")
                else: # SPRZEDAŻ
                    przychód = transakcja['przychód_calkowity']
                    print(f"{i+1}. {czas} | SPRZEDAŻ (usunięta): -{ilosc:.2f}g | Przychód: {przychód:.2f} PLN | Stan towaru po: {stan_towaru_po:.2f}g ({ekwiwalent_999_po:.2f}g 999.9) | Stan kasy po: {stan_kasy_po:.2f} PLN")

        print("="*80)


    def usun_ostatnia_transakcje(self):
        """Usuwa ostatnią transakcję z historii, przywraca stan magazynu i kasy, oraz przenosi transakcję do listy usuniętych."""
        if not self.historia_transakcji:
            print("\n❌ Błąd: Brak transakcji do usunięcia.")
            return

        ostatnia_transakcja = self.historia_transakcji.pop()
        self.historia_usunietych_transakcji.append(ostatnia_transakcja) # Przenosimy usuniętą transakcję

        # Przywracanie stanu magazynu i kasy do stanu sprzed ostatniej transakcji
        if self.historia_transakcji:
            poprzednia_transakcja = self.historia_transakcji[-1]
            self.stan_magazynu_g = poprzednia_transakcja['stan_towaru_po']
            self.stan_kasy_pln = poprzednia_transakcja['stan_kasy_po']
        else:
            # Jeśli po usunięciu nie ma więcej transakcji, resetujemy stan
            self.stan_magazynu_g = 0
            self.stan_kasy_pln = 0 # Zakładamy, że kasa wraca do stanu początkowego, ale można to zmodyfikować jeśli potrzeba

        # Po usunięciu transakcji SKUP, musimy przeliczyć sumy kosztów i ilości zakupu
        self.suma_kosztow_zakupu = sum(t['cena_calkowita'] for t in self.historia_transakcji if t['typ'] == 'SKUP')
        self.suma_ilosci_zakupu = sum(t['ilosc_g'] for t in self.historia_transakcji if t['typ'] == 'SKUP')
        self.suma_przychodow_sprzedazy = sum(t.get('przychód_calkowity', 0) for t in self.historia_transakcji if t['typ'] == 'SPRZEDAŻ') # Używamy get z wartością domyślną 0
        self.suma_ilosci_sprzedazy = sum(t['ilosc_g'] for t in self.historia_transakcji if t['typ'] == 'SPRZEDAŻ')


        print(f"\n✅ Usunięto ostatnią transakcję ({ostatnia_transakcja['typ']}).")
        self.pokaz_stan() # Wyświetlamy nowy stan po usunięciu

    def przelicz_na_probe_docelowa(self, ilosc_g, proba_wejsciowa, proba_docelowa):
        """Przelicza ilość towaru z próby wejściowej na ekwiwalent w próbie docelowej."""
        if proba_wejsciowa == 0:
            return 0
        return ilosc_g * (proba_wejsciowa / proba_docelowa)

    def zapisz_stan(self):
        """Zapisuje aktualny stan magazynu i historię transakcji do pliku JSON."""
        stan_do_zapisu = {
            "nazwa_towaru": self.nazwa_towaru,
            "proba": self.proba,
            "stan_magazynu_g": self.stan_magazynu_g,
            "stan_kasy_pln": self.stan_kasy_pln,
            "historia_transakcji": self.historia_transakcji,
            "historia_usunietych_transakcji": self.historia_usunietych_transakcji,
            "suma_kosztow_zakupu": self.suma_kosztow_zakupu,
            "suma_ilosci_zakupu": self.suma_ilosci_zakupu,
            "suma_przychodow_sprzedazy": self.suma_przychodow_sprzedazy,
            "suma_ilosci_sprzedazy": self.suma_ilosci_sprzedazy
        }
        try:
            with open(self.plik_kopii_zapasowej, 'w', encoding='utf-8') as f:
                json.dump(stan_do_zapisu, f, indent=4)
            print(f"\n✅ Stan magazynu zapisano do pliku: {self.plik_kopii_zapasowej}")
        except IOError as e:
            print(f"\n❌ Błąd podczas zapisu pliku: {e}")


    def wczytaj_stan(self):
        """Wczytuje stan magazynu i historię transakcji z pliku JSON."""
        if not os.path.exists(self.plik_kopii_zapasowej):
            print(f"\n❌ Błąd: Plik kopii zapasowej '{self.plik_kopii_zapasowej}' nie istnieje. Uruchamianie ze stanem zerowym.")
            return

        try:
            with open(self.plik_kopii_zapasowej, 'r', encoding='utf-8') as f:
                wczytany_stan = json.load(f)

            self.nazwa_towaru = wczytany_stan.get("nazwa_towaru", "Towar")
            self.proba = wczytany_stan.get("proba", 1000)
            self.stan_magazynu_g = wczytany_stan.get("stan_magazynu_g", 0)
            self.stan_kasy_pln = wczytany_stan.get("stan_kasy_pln", 0)
            self.historia_transakcji = wczytany_stan.get("historia_transakcji", [])
            self.historia_usunietych_transakcji = wczytany_stan.get("historia_usunietych_transakcji", [])
            self.suma_kosztow_zakupu = wczytany_stan.get("suma_kosztow_zakupu", 0)
            self.suma_ilosci_zakupu = wczytany_stan.get("suma_ilosci_zakupu", 0)
            self.suma_przychodow_sprzedazy = wczytany_stan.get("suma_przychodow_sprzedazy", 0) # Wczytanie pola
            self.suma_ilosci_sprzedazy = wczytany_stan.get("suma_ilosci_sprzedazy", 0) # Wczytanie pola

            # Konwersja stringów ISO 8601 na obiekty datetime
            for transakcja in self.historia_transakcji:
                if isinstance(transakcja.get('czas'), str):
                    try:
                        transakcja['czas'] = datetime.datetime.fromisoformat(transakcja['czas'])
                    except ValueError:
                        transakcja['czas'] = datetime.datetime.now() # Domyślna wartość w przypadku błędu formatu

            for transakcja in self.historia_usunietych_transakcji:
                 if isinstance(transakcja.get('czas'), str):
                    try:
                        transakcja['czas'] = datetime.datetime.fromisoformat(transakcja['czas'])
                    except ValueError:
                        transakcja['czas'] = datetime.datetime.now() # Domyślna wartość w przypadku błędu formatu


            print(f"\n✅ Stan magazynu wczytano z pliku: {self.plik_kopii_zapasowej}")
            self.pokaz_stan()
        except (IOError, json.JSONDecodeError) as e:
            print(f"\n❌ Błąd podczas wczytywania pliku: {e}")


    def zapisz_sciezke_kopii_zapasowej(self):
        """Zapisuje ścieżkę kopii zapasowej do pliku konfiguracyjnego."""
        config_data = {"plik_kopii_zapasowej": self.plik_kopii_zapasowej}
        try:
            with open(self.plik_konfiguracji, 'w', encoding='utf-8') as f:
                json.dump(config_data, f)
        except IOError as e:
            print(f"\n❌ Błąd podczas zapisu pliku konfiguracyjnego: {e}")

    def wczytaj_sciezke_kopii_zapasowej(self):
        """Wczytuje ścieżkę kopii zapasowej z pliku konfiguracyjnego."""
        if not os.path.exists(self.plik_konfiguracji):
            return "c:\\skup\\" # Domyślna ścieżka jeśli plik nie istnieje

        try:
            with open(self.plik_konfiguracji, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                return config_data.get("plik_kopii_zapasowej", "c:\\skup\\")
        except (IOError, json.JSONDecodeError) as e:
            print(f"\n❌ Błąd podczas wczytywania pliku konfiguracyjnego: {e}")
            return "c:\\skup\\" # Zwracamy domyślną ścieżkę w przypadku błędu


# ----------------------------------------------------------------------
# INTERAKTYWNA PĘTLA PROGRAMU Z FUNKCJĄ INPUT()
# ----------------------------------------------------------------------

def pobierz_liczbe(komunikat):
    """Pomocnicza funkcja do bezpiecznego pobierania liczb od użytkownika."""
    while True:
        try:
            wartosc_str = input(komunikat).replace(',', '.') # Zamiana przecinka na kropkę
            wartosc = float(wartosc_str)
            # Usunięto sprawdzenie czy wartość jest ujemna
            return wartosc
        except ValueError:
            print("To nie jest prawidłowa liczba. Spróbuj ponownie.")

def main():
    """Główna funkcja programu z menu."""

    # Inicjalizacja magazynu - ustawiono domyślny towar na "złoto 585" i jego próbę
    nazwa = "złoto"
    proba = 585 # Nowa próba
    poczatkowy_stan = 0 # Możesz ustawić inną wartość początkową kasy tutaj, jeśli potrzebujesz
    magazyn = Magazyn(nazwa, poczatkowy_stan, proba)

    # Wczytanie stanu przy starcie programu (już w __init__ klasy Magazyn)


    while True:
        ekwiwalent_999_stan = magazyn.przelicz_na_999(magazyn.stan_magazynu_g) # Obliczenie ekwiwalentu dla menu
        ekwiwalent_999_oz = magazyn.gramy_na_uncje(ekwiwalent_999_stan) # Obliczenie ekwiwalentu w uncjach dla menu
        srednia_cena_zakupu_menu = magazyn.oblicz_srednia_cene_zakupu() # Obliczenie średniej ceny dla menu
        srednia_cena_sprzedazy_menu = magazyn.oblicz_srednia_cene_sprzedazy() # Obliczenie średniej ceny sprzedaży


        print("\n" + "="*30)
        print("  SYSTEM ZARZĄDZANIA MAGAZYNEM")
        print("="*30)
        print(f"STAN TOWARU ({magazyn.proba}): {magazyn.stan_magazynu_g:.2f}g") # Wyświetlanie stanu w oryginalnej próbie
        print(f"STAN TOWARU (999.9): {ekwiwalent_999_stan:.2f}g ({ekwiwalent_999_oz:.2f} oz)") # Wyświetlanie stanu w 999.9 w gramach i uncjach
        print(f"ŚREDNIA CENA ZAKUPU ({magazyn.proba}): {srednia_cena_zakupu_menu:.2f} PLN/g") # Wyświetlenie średniej ceny
        print(f"ŚREDNIA CENA SPRZEDAŻY ({magazyn.proba}): {srednia_cena_sprzedazy_menu:.2f} PLN/g") # Wyświetlenie średniej ceny sprzedaży
        print(f"STAN KASY: {magazyn.stan_kasy_pln:.2f} PLN")
        print(f"SUMA SKUPU: {magazyn.suma_ilosci_zakupu:.2f}g za {magazyn.suma_kosztow_zakupu:.2f} PLN") # Dodano sumę skupu
        print(f"SUMA SPRZEDAŻY: {magazyn.suma_ilosci_sprzedazy:.2f}g za {magazyn.suma_przychodow_sprzedazy:.2f} PLN") # Dodano sumę sprzedaży
        print("="*30)
        print("1. Rejestracja skupu (zakup)")
        print("2. Rejestracja sprzedaży")
        print("3. Pokaż historię transakcji") # Zmieniona nazwa opcji
        print("4. Usuń ostatnią transakcję") # Nowa opcja
        print("5. Kalkulator skupu innej próby") # Dodano nową opcję
        print("6. Podaj cenę rynkową i oblicz wartość magazynu") # Nowa opcja
        print("8. Ustawienia") # Nowa opcja Ustawienia
        print("9. Zresetuj stany i historię") # Nowa opcja resetowania
        print("0. Zakończ program") # Zmieniono numer opcji
        print("="*30)

        wybor = input("Wybierz opcję (0-6, 8-9): ") # Zmieniono zakres opcji

        if wybor == '1':
            print("\n--- REJESTRACJA SKUPU ---")
            ilosc = pobierz_liczbe(f"Podaj masę towaru do skupu ({magazyn.nazwa_towaru} {magazyn.proba} w g): ") # Zmieniono komunikat
            cena_calkowita = pobierz_liczbe(f"Podaj całkowitą cenę skupu ({magazyn.nazwa_towaru} {magazyn.proba} w PLN): ") # Zmieniono komunikat
            magazyn.skup(ilosc, cena_calkowita)

        elif wybor == '2':
            print("\n--- REJESTRACJA SPRZEDAŻY ---")
            ilosc = pobierz_liczbe(f"Podaj masę towaru do sprzedaży ({magazyn.nazwa_towaru} {magazyn.proba} w g): ") # Zmieniono komunikat
            cena_calkowita = pobierz_liczbe(f"Podaj całkowitą cenę sprzedaży ({magazyn.nazwa_towaru} {magazyn.proba} w PLN): ") # Zmieniono komunikat
            magazyn.sprzedaz(ilosc, cena_calkowita)

        elif wybor == '3':
            magazyn.pokaz_historie()

        elif wybor == '4': # Obsługa nowej opcji
            magazyn.usun_ostatnia_transakcje()

        elif wybor == '5': # Nowa opcja Kalkulator skupu innej próby
            print("\n--- KALKULATOR SKUPU INNEJ PRÓBY ---")
            proba_wejsciowa = pobierz_liczbe("Podaj próbę złota do skupu: ")
            ilosc_wejsciowa = pobierz_liczbe("Podaj ilość (w gramach) złota do skupu: ")
            ilosc_przeliczona = magazyn.przelicz_na_probe_docelowa(ilosc_wejsciowa, proba_wejsciowa, magazyn.proba)
            print(f"\n{ilosc_wejsciowa:.2f}g złota próby {proba_wejsciowa} to {ilosc_przeliczona:.2f}g ekwiwalentu próby {magazyn.proba}.")

            cena_za_gram_585 = pobierz_liczbe(f"Podaj cenę skupu za gram złota próby {magazyn.proba} w PLN: ")
            cena_calkowita = ilosc_przeliczona * cena_za_gram_585
            print(f"Obliczona całkowita cena skupu: {cena_calkowita:.2f} PLN")


            zarejestrowac = input("Czy chcesz zarejestrować ten zakup? (1 - tak, 0 - nie): ")
            if zarejestrowac == '1':
                cena_zaplacona = pobierz_liczbe("Podaj faktyczną cenę zapłaconą w PLN: ")
                magazyn.skup(ilosc_przeliczona, cena_zaplacona) # Rejestrujemy przeliczoną ilość i faktyczną cenę

        elif wybor == '6': # Obsługa nowej opcji obliczania wartości rynkowej
            print("\n--- OBLICZANIE WARTOŚCI RYNKOWEJ ---")
            cena_rynkowa_oz = pobierz_liczbe("Podaj aktualną rynkową cenę za uncję złota próby 999.9 w PLN: ")
            cena_rynkowa_gram = cena_rynkowa_oz / 31.1035 # Przeliczenie ceny z uncji na gramy
            wartosc_magazynu = magazyn.oblicz_wartosc_magazynu_rynkowa(cena_rynkowa_gram)
            ekwiwalent_999 = magazyn.przelicz_na_999(magazyn.stan_magazynu_g)
            ekwiwalent_999_oz = magazyn.gramy_na_uncje(ekwiwalent_999)
            print("\n--- WARTOŚĆ MAGAZYNU NA PODSTAWIE CENY RYNKOWEJ ---")
            print(f"Stan magazynu (999.9): {ekwiwalent_999:.2f}g ({ekwiwalent_999_oz:.2f} oz)")
            print(f"Wartość rynkowa magazynu: {wartosc_magazynu:.2f} PLN")
            print(f"Całkowity koszt zakupu: {magazyn.suma_kosztow_zakupu:.2f} PLN") # Wyświetlenie kosztu zakupu
            zysk_strata = wartosc_magazynu - magazyn.suma_kosztow_zakupu # Obliczenie zysku/straty
            if zysk_strata >= 0:
                print(f"Zysk: {zysk_strata:.2f} PLN") # Wyświetlenie zysku
            else:
                print(f"Strata: {zysk_strata:.2f} PLN") # Wyświetlenie straty
            print("="*40)

        elif wybor == '8': # Nowa opcja Ustawienia
            while True:
                print("\n--- USTAWIENIA ---")
                print(f"Aktualna ścieżka kopii zapasowej: {magazyn.plik_kopii_zapasowej}")
                print("1. Zapisz kopię zapasową")
                print("2. Wczytaj kopię zapasową")
                print("9. Ustaw ścieżkę kopii zapasowej")
                print("0. Powrót do menu głównego")
                wybor_ustawienia = input("Wybierz opcję (0-2, 9): ")

                if wybor_ustawienia == '1':
                    magazyn.zapisz_stan()
                elif wybor_ustawienia == '2':
                    magazyn.wczytaj_stan()
                elif wybor_ustawienia == '9':
                    nowa_sciezka = input("Podaj nową ścieżkę do pliku kopii zapasowej: ")
                    magazyn.plik_kopii_zapasowej = nowa_sciezka
                    magazyn.zapisz_sciezke_kopii_zapasowej() # Zapis nowej ścieżki do pliku konfiguracyjnego
                    print(f"✅ Nowa ścieżka kopii zapasowej ustawiona na: {magazyn.plik_kopii_zapasowej}")
                elif wybor_ustawienia == '0':
                    break
                else:
                    print("Nieprawidłowa opcja. Wprowadź cyfrę od 0 do 2 lub 9.")

        elif wybor == '9': # Nowa opcja resetowania
            print("\n--- RESETOWANIE STANÓW I HISTORII ---")
            potwierdzenie = input("Czy na pewno chcesz zresetować wszystkie stany i historię? Wpisz 'TAK' aby potwierdzić: ")
            if potwierdzenie == 'TAK':
                magazyn.__init__(magazyn.nazwa_towaru, 0, magazyn.proba) # Resetowanie stanu magazynu i kasy
                print("✅ Stany magazynu i historia zostały zresetowane.")
            else:
                print("❌ Resetowanie anulowane.")


        elif wybor == '0': # Zmieniono numer opcji zakończenia
            magazyn.zapisz_stan() # Zapis stanu przed wyjściem
            print("Dziękujemy za korzystanie z systemu. Do widzenia! 👋")
            break

        else:
            print("Nieprawidłowa opcja. Wprowadź cyfrę od 0 do 6, 8 lub 9.") # Zmieniono zakres opcji

# Uruchomienie głównej funkcji programu
if __name__ == "__main__":
    main()

