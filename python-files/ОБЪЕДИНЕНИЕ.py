import pandas as pd
import os
import glob
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter.scrolledtext import ScrolledText
import threading

class ExcelMergerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.folder_path = tk.StringVar()
        self.output_filename = tk.StringVar(value="–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π_—Ñ–∞–π–ª.xlsx")
        self.progress = tk.DoubleVar()
        
        self.setup_ui()
    
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        ttk.Label(main_frame, text="–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏:").grid(row=1, column=0, sticky=tk.W, pady=5)
        
        folder_frame = ttk.Frame(main_frame)
        folder_frame.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        folder_frame.columnconfigure(0, weight=1)
        
        ttk.Entry(folder_frame, textvariable=self.folder_path).grid(row=0, column=0, sticky=(tk.W, tk.E))
        ttk.Button(folder_frame, text="–û–±–∑–æ—Ä", command=self.browse_folder).grid(row=0, column=1, padx=(5, 0))
        
        # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:").grid(row=2, column=0, sticky=tk.W, pady=5)
        ttk.Entry(main_frame, textvariable=self.output_filename).grid(row=2, column=1, sticky=(tk.W, tk.E), pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, pady=10)
        
        ttk.Button(button_frame, text="–ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã", command=self.find_files).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", command=self.start_merge).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_log).pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ttk.Progressbar(main_frame, variable=self.progress, maximum=100)
        self.progress_bar.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.grid(row=5, column=0, columnspan=3, sticky=tk.W, pady=5)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding="5")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(6, weight=1)
        
        self.log_text = ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.create_context_menu()
    
    def create_context_menu(self):
        self.context_menu = tk.Menu(self.log_text, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_log)
        self.context_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_log)
        
        self.log_text.bind("<Button-3>", self.show_context_menu)
    
    def show_context_menu(self, event):
        self.context_menu.post(event.x_root, event.y_root)
    
    def copy_log(self):
        try:
            selected_text = self.log_text.get("sel.first", "sel.last")
            if selected_text:
                self.root.clipboard_clear()
                self.root.clipboard_append(selected_text)
        except:
            pass
    
    def browse_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å Excel —Ñ–∞–π–ª–∞–º–∏")
        if folder:
            self.folder_path.set(folder)
            self.log("–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: " + folder)
    
    def find_files(self):
        folder = self.folder_path.get()
        if not folder or not os.path.exists(folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        excel_files = glob.glob(os.path.join(folder, "*.xlsx")) + \
                     glob.glob(os.path.join(folder, "*.xls"))
        
        self.clear_log()
        if excel_files:
            self.log(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
            for file in excel_files:
                self.log(f"‚úì {os.path.basename(file)}")
        else:
            self.log("Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    def start_merge(self):
        if not self.folder_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏")
            return
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI
        thread = threading.Thread(target=self.merge_files)
        thread.daemon = True
        thread.start()
    
    def merge_files(self):
        try:
            self.update_status("–ù–∞—á–∞–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
            self.progress.set(0)
            
            folder = self.folder_path.get()
            output_file = self.output_filename.get()
            
            excel_files = glob.glob(os.path.join(folder, "*.xlsx")) + \
                         glob.glob(os.path.join(folder, "*.xls"))
            
            if not excel_files:
                self.log("‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                self.update_status("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            self.clear_log()
            self.log(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
            self.log("–ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            
            all_dataframes = []
            processed_files = 0
            
            for file in excel_files:
                try:
                    self.log(f"üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {os.path.basename(file)}")
                    
                    df = pd.read_excel(file)
                    all_dataframes.append(df)
                    processed_files += 1
                    
                    self.log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {os.path.basename(file)} - {len(df)} —Å—Ç—Ä–æ–∫")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress_value = (processed_files / len(excel_files)) * 100
                    self.progress.set(progress_value)
                    self.update_status(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files}/{len(excel_files)} —Ñ–∞–π–ª–æ–≤")
                    
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {os.path.basename(file)}: {str(e)}")
            
            if all_dataframes:
                self.log("üìä –û–±—ä–µ–¥–∏–Ω—è—é –¥–∞–Ω–Ω—ã–µ...")
                combined_df = pd.concat(all_dataframes, ignore_index=True)
                
                self.log("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                combined_df.to_excel(output_file, index=False)
                
                self.log("=" * 50)
                self.log(f"‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
                self.log(f"üìÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {output_file}")
                self.log(f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(combined_df)}")
                self.log(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_dataframes)}")
                self.log("=" * 50)
                
                self.progress.set(100)
                self.update_status("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", 
                                  f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!\n\n"
                                  f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}\n"
                                  f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(combined_df)}\n"
                                  f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_dataframes)}")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                self.update_status("–û—à–∏–±–∫–∞ - —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã")
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.log(error_msg)
            self.update_status("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
    
    def log(self, message):
        def update_log():
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)
            self.log_text.update_idletasks()
        
        self.root.after(0, update_log)
    
    def clear_log(self):
        self.log_text.delete(1.0, tk.END)
    
    def update_status(self, message):
        def update():
            self.status_label.config(text=message)
        
        self.root.after(0, update)

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        import pandas
        import openpyxl
    except ImportError as e:
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
        print("pip install pandas openpyxl")
        return
    
    root = tk.Tk()
    app = ExcelMergerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()