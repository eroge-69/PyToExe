"""
Tube Filling Simulator (Gravity-Based)
--------------------------------------
Enter a tube inside diameter and cable outer diameters (mm), then simulate a gravity drop
to see how the cables settle inside the tube. The app computes the resulting filling percentage.

Controls:
- Click the input fields to type:
    Tube ⌀ (mm): single number
    Cables ⌀ (mm): comma-separated list (e.g. 8,8,10,12,12,…)
- Buttons:
    • Start Simulation — builds the scene and starts dropping cables
    • Reset — clears the simulation while keeping your inputs
    • Random 20–30 — fills the list with 20–30 random diameters within your range
- During simulation:
    • The app auto-detects “settled” when motion is small for a sustained period.
    • Shows live fill %, cable count, and status.

Notes:
- Units are mm for inputs; the app scales to pixels so the tube fits the window.
- Uses pymunk for physics and pygame for visuals.

Author: You + ChatGPT
"""

import math
import random
import sys
import pygame
import pymunk
import io
import base64

# -----------------------
# Basic Config
# -----------------------
WIN_W, WIN_H = 1000, 800
DRAW_AREA_MARGIN = 32
FPS = 60

# Colors
CLR_BG = (18, 18, 22)
CLR_PANEL = (28, 28, 34)
CLR_PANEL_SHADOW = (10, 10, 12)
CLR_TEXT = (230, 232, 240)
CLR_SUBTLE = (170, 173, 186)
CLR_ACCENT = (110, 160, 255)
CLR_GOOD = (90, 200, 140)
CLR_WARN = (255, 170, 70)
CLR_BAD = (255, 100, 120)
CLR_TUBE = (210, 210, 215)

pygame.init()
pygame.display.set_caption("Tube Filling Simulator (Gravity-Based)")
screen = pygame.display.set_mode((WIN_W, WIN_H))
clock = pygame.time.Clock()
font = pygame.font.SysFont("Inter, Segoe UI, Roboto, Arial", 20)
font_small = pygame.font.SysFont("Inter, Segoe UI, Roboto, Arial", 16)
font_mono = pygame.font.SysFont("Consolas, Menlo, Monaco, Courier New", 18)

# Logo
logo_b64 = ""
logo_bytes = base64.b64decode(logo_b64)
logo_file = io.BytesIO(logo_bytes)
logo_img = pygame.image.load(logo_file).convert_alpha()
logo_img = pygame.transform.smoothscale(logo_img, (140, 120))
# -----------------------
# UI Helpers
# -----------------------
def draw_round_rect(surf, rect, color, radius=12, width=0):
    pygame.draw.rect(surf, color, rect, width=width, border_radius=radius)

def text(s, x, y, color=CLR_TEXT, f=font, align="topleft"):
    r = f.render(s, True, color)
    rect = r.get_rect()
    setattr(rect, align, (x, y))
    screen.blit(r, rect)


class TextInput:
    def __init__(self, rect, placeholder="", default="", numeric=False, allow_commas=False):
        self.rect = pygame.Rect(rect)
        self.placeholder = placeholder
        self.text = str(default)
        self.focus = False
        self.numeric = numeric
        self.allow_commas = allow_commas
        self.cursor_timer = 0
        self.cursor_visible = True

    def handle_event(self, e):
        if e.type == pygame.MOUSEBUTTONDOWN:
    # Expand clickable area by 6px padding
            click_area = self.rect.inflate(0, 12)
            click_area.y -= 6
            self.focus = click_area.collidepoint(e.pos)
        if not self.focus:
            return
        if e.type == pygame.KEYDOWN:
            if e.key == pygame.K_RETURN:
                self.focus = False
            elif e.key == pygame.K_BACKSPACE:
                self.text = self.text[:-1]
            else:
                ch = e.unicode
                if self.numeric:
                # allow digits and one dot for decimals
                    if ch.isdigit() or ch == ".":
                        self.text += ch
                else:
                    if self.allow_commas:
                    # allow digits, commas, dots, and spaces
                        if ch.isdigit() or ch in ",. ":
                            self.text += ch
                    else:
                        self.text += ch
    

    def get_value(self):
        return self.text.strip()

    def draw(self):
        # Shadow
        shadow = self.rect.copy()
        shadow.x += 2
        shadow.y += 2
        draw_round_rect(screen, shadow, CLR_PANEL_SHADOW, 10)
        # Field
        draw_round_rect(screen, self.rect, CLR_PANEL, 10)
        # Text
        val = self.text.strip()
        if val:
            surface = font_mono.render(val, True, CLR_TEXT)
        else:
            surface = font_small.render(self.placeholder, True, CLR_SUBTLE)
        screen.blit(surface, (self.rect.x + 12, self.rect.y + (self.rect.h - surface.get_height()) // 2))
        # Cursor
        if self.focus:
            self.cursor_timer += 1
            if self.cursor_timer % 30 == 0:
                self.cursor_visible = not self.cursor_visible
            if self.cursor_visible:
                tw = surface.get_width()
                cx = self.rect.x + 12 + tw + 2
                cy = self.rect.y + 10
                pygame.draw.line(screen, CLR_TEXT, (cx, cy), (cx, self.rect.bottom - 10), 1)

class Button:
    def __init__(self, rect, label, color=CLR_ACCENT):
        self.rect = pygame.Rect(rect)
        self.label = label
        self.color = color
        self.hover = False

    def draw(self):
        # Shadow
        shadow = self.rect.copy()
        shadow.x += 2
        shadow.y += 2
        draw_round_rect(screen, shadow, CLR_PANEL_SHADOW, 16)
        # Button
        col = tuple(min(255, int(c * (1.06 if self.hover else 1.0))) for c in self.color)
        draw_round_rect(screen, self.rect, col, 16)
        text(self.label, self.rect.centerx, self.rect.centery, CLR_BG, font, "center")

    def handle_event(self, e):
        if e.type == pygame.MOUSEMOTION:
            self.hover = self.rect.collidepoint(e.pos)
        if e.type == pygame.MOUSEBUTTONDOWN and self.hover:
            return True
        return False

# -----------------------
# Physics / Simulation
# -----------------------
class Simulator:
    def __init__(self):
        self.space = None
        self.cables = []  # list of pymunk.Circle shapes
        self.tube_radius_px = 200
        self.center = (int(WIN_W * 0.68), int(WIN_H * 0.52))  # right side drawing area
        self.scale_mm_to_px = 1.0
        self.tube_d_mm = 100.0
        self.cable_ds_mm = []
        self.status = "Idle"
        self._settle_counter = 0
        self._settled = False

    def build(self, tube_d_mm, cable_ds_mm):
        # Prepare space
        self.space = pymunk.Space()
        self.space.gravity = (0, 1200)
        self.space.damping = 0.92

        # Scale so tube fits viewport area (right side)
        viewport_radius_px = int(min(WIN_H, int(WIN_W * 0.54)) // 2) - 2 * DRAW_AREA_MARGIN
        self.scale_mm_to_px = viewport_radius_px / (tube_d_mm / 2.0)
        self.tube_d_mm = tube_d_mm
        self.cable_ds_mm = cable_ds_mm[:]

        self.tube_radius_px = viewport_radius_px
        self.center = (int(WIN_W * 0.68), int(WIN_H * 0.52))

        self._build_tube_circle(self.center, self.tube_radius_px)
        self.cables = []
        # Drop cables from the upper region inside the tube
        for d_mm in self.cable_ds_mm:
            if d_mm <= 0:
                continue
            r_px = (d_mm * self.scale_mm_to_px) / 2.0
            if r_px * 2 > self.tube_radius_px * 2:
                continue  # skip impossible cables
            
            # Choose a random angle and radius inside the tube
            angle = random.uniform(math.pi, 2*math.pi)
            distance = random.uniform(self.tube_radius_px/5, self.tube_radius_px - r_px - 5)
            spawn_x = self.center[0] + math.cos(angle) * distance
            spawn_y = self.center[1] + math.sin(angle) * distance + self.tube_radius_px

            # Shift up so they drop in naturally
            spawn_y -= self.tube_radius_px + random.uniform(10, 30)

            shape = self._create_cable(spawn_x, spawn_y, r_px)
            self.cables.append(shape)



        self.status = "Simulating"
        self._settled = False
        self._settle_counter = 0

    def _build_tube_circle(self, center, radius_px):
        body = self.space.static_body
        segments = 96
        for i in range(segments):
            a1 = (2 * math.pi / segments) * i
            a2 = (2 * math.pi / segments) * (i + 1)
            p1 = (center[0] + radius_px * math.cos(a1), center[1] + radius_px * math.sin(a1))
            p2 = (center[0] + radius_px * math.cos(a2), center[1] + radius_px * math.sin(a2))
            seg = pymunk.Segment(body, p1, p2, 2.5)
            seg.elasticity = 0.25
            seg.friction = 0.8
            self.space.add(seg)

    def _create_cable(self, x, y, r_px):
        mass = max(0.5, r_px * 0.01)  # small mass scaling
        moment = pymunk.moment_for_circle(mass, 0, r_px)
        body = pymunk.Body(mass, moment)
        body.position = x, y
        shape = pymunk.Circle(body, r_px)
        shape.elasticity = 0.05
        shape.friction = 0.9
        self.space.add(body, shape)
        return shape

    def step(self, dt):
        if self.space is None:
            return
        # Multiple substeps for stability
        sub = 3
        for _ in range(sub):
            self.space.step(dt / sub)

        # Check if settled: low velocities for sustained frames
        max_lin = 0.0
        max_ang = 0.0
        for c in self.cables:
            v = c.body.velocity.length
            w = abs(c.body.angular_velocity)
            if v > max_lin: max_lin = v
            if w > max_ang: max_ang = w

        if max_lin < 8 and max_ang < 2:
            self._settle_counter += 1
        else:
            self._settle_counter = 0

        if not self._settled and self._settle_counter > FPS * 2:  # ~2 seconds stable
            self._settled = True
            self.status = "Settled"

    def fill_percentage(self):
        if self.tube_d_mm <= 0:
            return 0.0
        # Area ratio is scale-independent; use mm input directly:
        tube_r = self.tube_d_mm / 2.0
        tube_area = math.pi * tube_r ** 2
        cable_area = 0.0
        for d in self.cable_ds_mm:
            if d > 0 and d <= self.tube_d_mm * 4:  # ignore absurd values
                cable_area += math.pi * (d / 2.0) ** 2
        return max(0.0, min(100.0, 100.0 * cable_area / tube_area*1.5))

    def draw(self):
        if self.space is None:
            return
        # Tube
        pygame.draw.circle(screen, CLR_TUBE, self.center, int(self.tube_radius_px), 3)

        # Cables with subtle shading
        for shp in self.cables:
            x, y = shp.body.position
            r = int(shp.radius)
            # Cable base
            pygame.draw.circle(screen, (120, 160, 255), (int(x), int(y)), r)
            # Inner ring
            pygame.draw.circle(screen, (240, 245, 255), (int(x), int(y)), max(1, int(r * 0.08)), width=0)
            # Edge highlight
            pygame.draw.circle(screen, (200, 220, 255), (int(x), int(y)), r, 2)

        # When settled, softly tint the tube
        if self._settled:
            s = pygame.Surface((WIN_W, WIN_H), pygame.SRCALPHA)
            pygame.draw.circle(s, (90, 200, 140, 28), self.center, int(self.tube_radius_px), 0)
            screen.blit(s, (0, 0))

# -----------------------
# App State & UI
# -----------------------
sim = Simulator()

# Left control panel rect
PANEL = pygame.Rect(24, 24, int(WIN_W * 0.36), WIN_H - 48)
# Right drawing area (visual only)
DRAW_AREA = pygame.Rect(int(WIN_W * 0.42), 24, int(WIN_W * 0.56) - 24, WIN_H - 48)

tube_input = TextInput((PANEL.x + 20, PANEL.y + 70, PANEL.w - 40, 48), "Tube ⌀ (mm)", "120", numeric=True)
cables_input = TextInput((PANEL.x + 20, PANEL.y + 160, PANEL.w - 40, 48),
                         "Cables ⌀ (mm) comma-separated",
                         "",
                         numeric=False, allow_commas=True)
min_rand_input = TextInput((PANEL.x + 20, PANEL.y + 230, 110, 42), "Min ⌀", "", numeric=True)
max_rand_input = TextInput((PANEL.x + 140, PANEL.y + 230, 110, 42), "Max ⌀", "", numeric=True)

btn_start = Button((PANEL.x + 20, PANEL.bottom - 160, PANEL.w - 40, 50), "Start Simulation")
btn_reset = Button((PANEL.x + 20, PANEL.bottom - 95, (PANEL.w - 50) // 2, 50), "Reset", color=CLR_WARN)
btn_random = Button((btn_reset.rect.right + 10, PANEL.bottom - 95, (PANEL.w - 50) // 2, 50), "Random 20–30", color=CLR_GOOD)

app_status = "Idle"
error_msg = ""

def parse_cables(text_raw):
    parts = [p.strip() for p in text_raw.replace(" ", "").split(",") if p.strip()]
    vals = []
    for p in parts:
        try:
            v = float(p)
            if v > 0:
                vals.append(v)
        except:
            pass
    return vals

def clamp(n, lo, hi):
    return max(lo, min(hi, n))

def draw_panel():
    # Shadow & panel
    shadow = PANEL.copy(); shadow.x += 3; shadow.y += 3
    draw_round_rect(screen, shadow, CLR_PANEL_SHADOW, 18)
    draw_round_rect(screen, PANEL, CLR_PANEL, 18)

    text("Tube Filling Simulator", PANEL.x + 20, PANEL.y + 18, CLR_TEXT, font)
    text("Inputs", PANEL.x + 20, PANEL.y + 46, CLR_SUBTLE, font_small)

    tube_input.draw()
    text("Cables (20–30 typical)", PANEL.x + 20, PANEL.y + 130, CLR_SUBTLE, font_small)
    cables_input.draw()

    text("Random helper (optional)", PANEL.x + 20, PANEL.y + 205, CLR_SUBTLE, font_small)
    min_rand_input.draw()
    max_rand_input.draw()
    
    # Stats & status box
    box = pygame.Rect(PANEL.x + 20, PANEL.y + 290, PANEL.w - 40, 180)
    draw_round_rect(screen, box, (24, 24, 30), 14)
    text("Status", box.x + 16, box.y + 12, CLR_SUBTLE, font_small)
    # Fill %
    fp = sim.fill_percentage() if sim.space else 0.0
    col = CLR_GOOD if fp < 80 else (CLR_WARN if fp < 100 else CLR_BAD)
    text(f"Fill: {fp:5.1f} %", box.x + 16, box.y + 38, col, font)
    # Cable count
    count = len(parse_cables(cables_input.get_value()))
    text(f"Cables: {count}", box.x + 16, box.y + 70, CLR_TEXT, font)
    # Tube
    try:
        td = float(tube_input.get_value() or "0")
    except:
        td = 0.0
    text(f"Tube ⌀: {td:.1f} mm", box.x + 16, box.y + 102, CLR_TEXT, font)
    # Sim status
    text(f"Sim: {sim.status}", box.x + 16, box.y + 134, CLR_SUBTLE, font_small)

    if error_msg:
        em = pygame.Rect(box.x, box.bottom + 8, box.w, 54)
        draw_round_rect(screen, em, (45, 18, 18), 12)
        text(error_msg, em.x + 14, em.y + 16, CLR_BAD, font_small)
    
    
    btn_start.draw()
    btn_reset.draw()
    btn_random.draw()

def draw_view():
    # Background area
    shadow = DRAW_AREA.copy(); shadow.x += 4; shadow.y += 4
    draw_round_rect(screen, shadow, CLR_PANEL_SHADOW, 18)
    draw_round_rect(screen, DRAW_AREA, CLR_PANEL, 18)

    # Title
    text("Gravity-Based Packing View", DRAW_AREA.x + 16, DRAW_AREA.y + 14, CLR_SUBTLE, font_small)

    # Center guide
    cx, cy = sim.center
    # Outer faint circle to hint scale
    pygame.draw.circle(screen, (60, 60, 70), (cx, cy), int(sim.tube_radius_px) + 20, 1)

    # Simulation
    sim.draw()

    # Legend
    info = [
        f"Frames: ~{FPS} FPS",
        "Settle detector: 2s below velocity thresholds",
        "Tip: Try varying cable sizes (8–20mm)",
    ]
    y = DRAW_AREA.bottom - 88
    
    screen.blit(logo_img, (PANEL.x + 775, PANEL.y + 650))
    
    for line in info:
        text(line, DRAW_AREA.x + 16, y, CLR_SUBTLE, font_small)
        y += 18

def start_simulation():
    global error_msg
    error_msg = ""
    # Validate inputs
    try:
        tube_d = float(tube_input.get_value())
    except:
        tube_d = 0.0
    if tube_d <= 0:
        error_msg = "Please enter a valid tube diameter (mm)."
        return
    cables = parse_cables(cables_input.get_value())
    if len(cables) == 0:
        error_msg = "Please enter at least one cable diameter."
        return
    if len(cables) > 60:
        error_msg = "Too many cables (max ~60). Keep it around 20–30."
        return
    # Filter out absurd values > tube diameter (allowed but will likely not fit)
    # We still simulate and simply drop; some may rest above others.
    sim.build(tube_d, cables)

def reset_simulation():
    global error_msg
    error_msg = ""
    sim.space = None
    sim.cables = []
    sim.status = "Idle"
    cables_input.text = ""
    
def randomize_cables():
    mn = 6.0
    mx = 18.0
    try:
        mn = float(min_rand_input.get_value() or "6")
    except:
        pass
    try:
        mx = float(max_rand_input.get_value() or "18")
    except:
        pass
    if mx < mn:
        mn, mx = mx, mn
    n = random.randint(20, 30)
    vals = [f"{random.uniform(mn, mx):.1f}" for _ in range(n)]
    cables_input.text = ",".join(vals)

# -----------------------
# Main Loop
# -----------------------
def main():
    global error_msg
    running = True
    while running:
        dt = clock.tick(FPS) / 1000.0
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                running = False

            # UI input handling
            tube_input.handle_event(e)
            cables_input.handle_event(e)
            min_rand_input.handle_event(e)
            max_rand_input.handle_event(e)

            # Buttons
            if btn_start.handle_event(e):
                start_simulation()
            if btn_reset.handle_event(e):
                reset_simulation()
            if btn_random.handle_event(e):
                randomize_cables()

        # Update simulation
        if sim.space:
            sim.step(dt)

        # Draw UI
        screen.fill(CLR_BG)
        draw_panel()
        draw_view()

        # Live readout banner
        banner = pygame.Rect(0, 0, WIN_W, 28)
        pygame.draw.rect(screen, (10, 10, 14), banner)
        fp = sim.fill_percentage() if sim.space else 0.0
        status = f"Filling: {fp:5.1f}%   |   Cables: {len(sim.cable_ds_mm) if sim.space else len(parse_cables(cables_input.get_value()))}   |   State: {sim.status}"
        text(status, 18, 6, CLR_SUBTLE, font_small)

        pygame.display.flip()

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
