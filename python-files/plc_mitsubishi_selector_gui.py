import tkinter as tk
from tkinter import ttk, messagebox

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ü–õ–ö (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
equipment_types = {
    "–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã": (1, 0),
    "–ü–Ω–µ–≤–º–æ—Ü–∏–ª–∏–Ω–¥—Ä": (1, 2),
    "–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å": (2, 1),
    "–°–µ–Ω—Å–æ—Ä–Ω—ã–π –¥–∞—Ç—á–∏–∫": (1, 0),
    "–†–µ–ª–µ": (0, 1),
    "–ö–æ–Ω–≤–µ–π–µ—Ä–Ω–∞—è –ª–µ–Ω—Ç–∞": (2, 3),
}

plc_models = {
    "FX3U-16MR/ES": (8, 8),
    "FX3U-32MR/ES": (16, 16),
    "FX5U-32MT/ES": (16, 16),
    "FX5U-64MT/ES": (32, 32),
    "FX5U-128MT/ES": (64, 64),
}

class PLCSelectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü–æ–¥–±–æ—Ä –ü–õ–ö Mitsubishi")
        self.root.geometry("500x500")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.equipment_list = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.create_widgets()
    
    def create_widgets(self):
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        self.label_eq = ttk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")
        self.label_eq.pack(pady=5)
        
        self.eq_combobox = ttk.Combobox(self.root, values=list(equipment_types.keys()))
        self.eq_combobox.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.label_count = ttk.Label(self.root, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        self.label_count.pack(pady=5)
        
        self.count_entry = ttk.Entry(self.root)
        self.count_entry.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"
        self.add_button = ttk.Button(self.root, text="–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", command=self.add_equipment)
        self.add_button.pack(pady=10)
        
        # –õ–∏—Å—Ç–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        self.listbox_label = ttk.Label(self.root, text="–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:")
        self.listbox_label.pack(pady=5)
        
        self.equipment_listbox = tk.Listbox(self.root, height=8)
        self.equipment_listbox.pack(pady=5, fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
        self.calculate_button = ttk.Button(self.root, text="–ü–æ–¥–æ–±—Ä–∞—Ç—å –ü–õ–ö", command=self.calculate_plc)
        self.calculate_button.pack(pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_label = ttk.Label(self.root, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        self.result_label.pack(pady=5)
        
        self.result_text = tk.Text(self.root, height=8, state="disabled")
        self.result_text.pack(pady=5, fill=tk.BOTH, expand=True)
    
    def add_equipment(self):
        eq_type = self.eq_combobox.get()
        count = self.count_entry.get()
        
        if not eq_type or not count:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        try:
            count = int(count)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        self.equipment_list.append((eq_type, count))
        self.equipment_listbox.insert(tk.END, f"{eq_type} x{count}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        self.count_entry.delete(0, tk.END)
    
    def calculate_plc(self):
        if not self.equipment_list:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!")
            return
        
        # –°—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã
        total_inputs = 0
        total_outputs = 0
        
        for item in self.equipment_list:
            eq_type, count = item
            inputs, outputs = equipment_types.get(eq_type, (0, 0))
            total_inputs += inputs * count
            total_outputs += outputs * count
        
        # –ó–∞–ø–∞—Å 10%
        total_inputs = int(total_inputs * 1.1)
        total_outputs = int(total_outputs * 1.1)
        
        # –ü–æ–¥–±–æ—Ä –ü–õ–ö
        suggestion = []
        for model, (max_inputs, max_outputs) in plc_models.items():
            if max_inputs >= total_inputs and max_outputs >= total_outputs:
                suggestion.append(model)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_text.config(state="normal")
        self.result_text.delete(1.0, tk.END)
        
        self.result_text.insert(tk.END, f"–û–±—â–∏–µ –≤—Ö–æ–¥—ã (—Å –∑–∞–ø–∞—Å–æ–º 10%): {total_inputs}\n")
        self.result_text.insert(tk.END, f"–û–±—â–∏–µ –≤—ã—Ö–æ–¥—ã (—Å –∑–∞–ø–∞—Å–æ–º 10%): {total_outputs}\n\n")
        
        if suggestion:
            self.result_text.insert(tk.END, "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ü–õ–ö:\n")
            for plc in suggestion:
                self.result_text.insert(tk.END, f"- {plc}\n")
        else:
            self.result_text.insert(tk.END, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ü–õ–ö –≤ –±–∞–∑–µ üö´\n–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Å–∫–∞–¥–Ω—É—é —Å—Ö–µ–º—É.")
        
        self.result_text.config(state="disabled")

if __name__ == "__main__":
    root = tk.Tk()
    app = PLCSelectorApp(root)
    root.mainloop()
