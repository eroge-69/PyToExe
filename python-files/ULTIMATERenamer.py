import os
import random
import string
import shutil
import math
import hashlib
from tkinter import *
from tkinter import filedialog, messagebox, ttk
from datetime import datetime

class RenamerPro:
    def __init__(self, root):
        self.root = root
        self.root.title("Renamer Ultimate")
        self.root.minsize(750, 850)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.files = []
        self.pattern_var = StringVar(value="–§–∞–π–ª {numbers1}")
        self.preview_var = BooleanVar(value=True)
        self.random_chars_var = StringVar(value="5")
        self.undo_stack = []
        self.target_folder = ""
        self.file_types = {
            "images": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff"],
            "audio": [".mp3", ".wav", ".ogg", ".flac", ".m4a"],
            "video": [".mp4", ".avi", ".mkv", ".mov", ".wmv"],
            "documents": [".pdf", ".doc", ".docx", ".txt", ".xlsx"]
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.main_frame = ttk.Frame(self.notebook)
        self.advanced_frame = ttk.Frame(self.notebook)
        self.batch_frame = ttk.Frame(self.notebook)
        self.organize_frame = ttk.Frame(self.notebook)
        self.stats_frame = ttk.Frame(self.notebook)
        
        self.notebook.add(self.main_frame, text="üéØ –û—Å–Ω–æ–≤–Ω–æ–µ")
        self.notebook.add(self.advanced_frame, text="‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
        self.notebook.add(self.batch_frame, text="üîÅ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        self.notebook.add(self.organize_frame, text="üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
        self.notebook.add(self.stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        self.setup_main_tab()
        self.setup_advanced_tab()
        self.setup_batch_tab()
        self.setup_organize_tab()
        self.setup_stats_tab()
    
    def setup_main_tab(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        Label(self.main_frame, text="–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏:", font=("Arial", 10, "bold")).pack(pady=(10, 0))
        
        input_frame = Frame(self.main_frame)
        input_frame.pack(fill=X, padx=5, pady=(0, 10))
        
        self.pattern_entry = Entry(input_frame, textvariable=self.pattern_var, width=50, font=("Arial", 10))
        self.pattern_entry.pack(side=LEFT, fill=X, expand=True)
        
        Button(input_frame, text="üìã", command=self.show_placeholder_menu, 
               width=3, relief="raised", bg="lightblue", font=("Arial", 12)).pack(side=RIGHT, padx=(5, 0))
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        self.setup_placeholder_buttons()
        
        # –§—Ä–µ–π–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        desc_frame = LabelFrame(self.main_frame, text="üìñ –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤")
        desc_frame.pack(fill=X, padx=5, pady=5)
        
        descriptions = [
            "{numbersX} - –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å X (–Ω–∞–ø—Ä–∏–º–µ—Ä, {numbers7} ‚Üí 7, 8, 9...)",
            "{reverse} - –æ–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)",
            "{letters} - –±—É–∫–≤—ã a, b, c... (–µ—Å–ª–∏ >26 —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–º–µ—Ä)",
            "{Letters} - –±—É–∫–≤—ã A, B, C... (–µ—Å–ª–∏ >26 —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–º–µ—Ä)",
            "{lettersR} - —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã a-z (–µ—Å–ª–∏ >13 —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–º–µ—Ä)",
            "{LettersR} - —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã A-Z (–µ—Å–ª–∏ >13 —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–º–µ—Ä)",
            "{date} - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–î–î-–ú–ú-–ì–ì–ì–ì), {time} - –≤—Ä–µ–º—è (–ß–ß-–ú–ú-–°–°)",
            "{datetime} - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, {year} - —Ç–æ–ª—å–∫–æ –≥–æ–¥",
            "{randomX} - —Å–ª—É—á–∞–π–Ω—ã–µ X —Å–∏–º–≤–æ–ª–æ–≤ (—É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)",
            "{uuid} - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
            "{original} - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, {ext} - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
        ]
        
        for desc in descriptions:
            Label(desc_frame, text=desc, anchor="w", justify=LEFT, 
                 font=("Arial", 8), wraplength=600).pack(fill=X, padx=5, pady=1)
        
        # –û–ø—Ü–∏–∏
        options_frame = Frame(self.main_frame)
        options_frame.pack(fill=X, pady=5)
        
        Checkbutton(options_frame, text="üîç –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", 
                   variable=self.preview_var, font=("Arial", 9)).pack(side=LEFT, padx=5)
        
        Button(options_frame, text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", 
              command=self.undo_rename, bg="lightyellow", font=("Arial", 9)).pack(side=RIGHT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = Frame(self.main_frame)
        button_frame.pack(fill=X, pady=10)
        
        Button(button_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", command=self.select_files, 
               bg="lightblue", width=16, font=("Arial", 9)).pack(side=LEFT, padx=3)
        Button(button_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é", command=self.show_preview,
               bg="lightyellow", width=16, font=("Arial", 9)).pack(side=LEFT, padx=3)
        Button(button_frame, text="‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.rename_files,
               bg="lightgreen", width=16, font=("Arial", 9)).pack(side=LEFT, padx=3)
        Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.clear_list,
               bg="lightcoral", width=16, font=("Arial", 9)).pack(side=LEFT, padx=3)
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        list_frame = LabelFrame(self.main_frame, text="üìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        list_frame.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        self.file_listbox = Listbox(list_frame, width=80, height=15, font=("Courier", 9))
        scrollbar = Scrollbar(list_frame)
        self.file_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.file_listbox.yview)
        
        self.file_listbox.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.listbox_menu = Menu(self.root, tearoff=0)
        self.listbox_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", command=self.remove_selected_file)
        self.listbox_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫", command=self.clear_list)
        self.file_listbox.bind("<Button-3>", self.show_listbox_menu)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(self.main_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", 
                                 relief=SUNKEN, anchor=W, font=("Arial", 9))
        self.status_label.pack(fill=X, side=BOTTOM, pady=(5, 0))
    
    def setup_placeholder_buttons(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = [
            {
                "name": "üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è",
                "placeholders": [
                    ("{numbers1}", "–ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1", "#E3F2FD"),
                    ("{numbers0}", "–ù—É–º–µ—Ä–∞—Ü–∏—è —Å 0", "#E3F2FD"),
                    ("{numbersX}", "–ù—É–º–µ—Ä–∞—Ü–∏—è —Å X", "#E3F2FD"),
                    ("{reverse}", "–û–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", "#E3F2FD")
                ]
            },
            {
                "name": "üî§ –ë—É–∫–≤—ã –∏ —Ç–µ–∫—Å—Ç",
                "placeholders": [
                    ("{letters}", "–ë—É–∫–≤—ã a-z", "#FFF9C4"),
                    ("{Letters}", "–ë—É–∫–≤—ã A-Z", "#FFF9C4"),
                    ("{lettersR}", "–°–ª—É—á–∞–π–Ω—ã–µ a-z", "#FFF9C4"),
                    ("{LettersR}", "–°–ª—É—á–∞–π–Ω—ã–µ A-Z", "#FFF9C4")
                ]
            },
            {
                "name": "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                "placeholders": [
                    ("{date}", "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "#C8E6C9"),
                    ("{time}", "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "#C8E6C9"),
                    ("{datetime}", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "#C8E6C9"),
                    ("{year}", "–¢–µ–∫—É—â–∏–π –≥–æ–¥", "#C8E6C9")
                ]
            },
            {
                "name": "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                "placeholders": [
                    ("{random3}", "3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞", "#FFCDD2"),
                    ("{random5}", "5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{random8}", "8 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{randomX}", "X —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤", "#FFCDD2"),
                    ("{uuid}", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID", "#FFCDD2")
                ]
            },
            {
                "name": "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ",
                "placeholders": [
                    ("{original}", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è", "#E1BEE7"),
                    ("{ext}", "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "#E1BEE7")
                ]
            }
        ]
        
        for category in categories:
            cat_frame = LabelFrame(self.main_frame, text=category["name"])
            cat_frame.pack(fill=X, padx=5, pady=2)
            
            frame = Frame(cat_frame)
            frame.pack(fill=X, padx=5, pady=2)
            
            for ph, desc, color in category["placeholders"]:
                btn = Button(frame, text=ph, width=14 if len(ph) < 10 else 16, 
                           command=lambda p=ph: self.insert_placeholder(p),
                           relief="raised", bg=color, font=("Arial", 8))
                btn.pack(side=LEFT, padx=1, pady=1)
                self.create_tooltip(btn, desc)
    
    def setup_advanced_tab(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        # –£–º–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        smart_frame = LabelFrame(self.advanced_frame, text="üß† –£–º–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        smart_frame.pack(fill=X, padx=5, pady=5)
        
        Button(smart_frame, text="–ò–∑ EXIF —Ñ–æ—Ç–æ", command=self.rename_from_exif,
               width=20, bg="#E3F2FD", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(smart_frame, text="–ò–∑ ID3 —Ç–µ–≥–æ–≤", command=self.rename_from_id3,
               width=20, bg="#E3F2FD", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(smart_frame, text="–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è", command=self.rename_by_date,
               width=20, bg="#E3F2FD", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        translit_frame = LabelFrame(self.advanced_frame, text="üî§ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ —Ç–µ–∫—Å—Ç")
        translit_frame.pack(fill=X, padx=5, pady=5)
        
        Button(translit_frame, text="–†—É—Å ‚Üí –ê–Ω–≥–ª", command=lambda: self.transliterate("ru_en"),
               width=15, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(translit_frame, text="–ê–Ω–≥–ª ‚Üí –†—É—Å", command=lambda: self.transliterate("en_ru"),
               width=15, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(translit_frame, text="–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä", command=lambda: self.change_case("upper"),
               width=15, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(translit_frame, text="–ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä", command=lambda: self.change_case("lower"),
               width=15, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        batch_frame = LabelFrame(self.advanced_frame, text="üîÑ –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        batch_frame.pack(fill=X, padx=5, pady=5)
        
        Button(batch_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ", command=self.add_folder_recursive,
               width=22, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(batch_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤", command=self.filter_by_type,
               width=22, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(batch_frame, text="–°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫", command=self.shuffle_files,
               width=22, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        security_frame = LabelFrame(self.advanced_frame, text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        security_frame.pack(fill=X, padx=5, pady=5)
        
        Button(security_frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞", command=self.encrypt_names,
               width=18, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(security_frame, text="–°–æ–∑–¥–∞—Ç—å MD5 —Ö–µ—à", command=lambda: self.hash_names("md5"),
               width=18, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(security_frame, text="–°–æ–∑–¥–∞—Ç—å SHA256 —Ö–µ—à", command=lambda: self.hash_names("sha256"),
               width=18, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –ó–∞–º–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text_frame = LabelFrame(self.advanced_frame, text="‚úÇÔ∏è –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
        text_frame.pack(fill=X, padx=5, pady=5)
        
        replace_frame = Frame(text_frame)
        replace_frame.pack(fill=X, pady=2)
        
        Label(replace_frame, text="–ù–∞–π—Ç–∏:").pack(side=LEFT, padx=5)
        self.find_entry = Entry(replace_frame, width=15)
        self.find_entry.pack(side=LEFT, padx=5)
        
        Label(replace_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞:").pack(side=LEFT, padx=5)
        self.replace_entry = Entry(replace_frame, width=15)
        self.replace_entry.pack(side=LEFT, padx=5)
        
        Button(replace_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", command=self.replace_text,
               bg="#E1BEE7", font=("Arial", 9)).pack(side=LEFT, padx=10)
        
        delete_frame = Frame(text_frame)
        delete_frame.pack(fill=X, pady=2)
        
        Button(delete_frame, text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã", command=lambda: self.delete_chars("spaces"),
               width=15, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(delete_frame, text="–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã", command=lambda: self.delete_chars("digits"),
               width=15, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(delete_frame, text="–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã", command=lambda: self.delete_chars("special"),
               width=15, bg="#FFE0B2", font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    def setup_batch_tab(self):
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        templates_frame = LabelFrame(self.batch_frame, text="üìã –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤")
        templates_frame.pack(fill=X, padx=5, pady=5)
        
        self.template_vars = {}
        template_types = [
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–§–æ—Ç–æ {numbers1}"),
            ("–ê—É–¥–∏–æ", "–¢—Ä–µ–∫ {numbers1}"),
            ("–í–∏–¥–µ–æ", "–í–∏–¥–µ–æ {numbers1}"),
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "–î–æ–∫ {numbers1}")
        ]
        
        for i, (file_type, default) in enumerate(template_types):
            frame = Frame(templates_frame)
            frame.pack(fill=X, pady=2)
            
            Label(frame, text=file_type, width=12, font=("Arial", 9)).pack(side=LEFT)
            var = StringVar(value=default)
            self.template_vars[file_type] = var
            Entry(frame, textvariable=var, width=30, font=("Arial", 9)).pack(side=LEFT, padx=5)
            Button(frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", 
                  command=lambda t=file_type: self.apply_template(t),
                  width=10, font=("Arial", 8)).pack(side=LEFT)
        
        # –°–µ—Ä–∏–π–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        series_frame = LabelFrame(self.batch_frame, text="üé¨ –°–µ—Ä–∏–π–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        series_frame.pack(fill=X, padx=5, pady=5)
        
        Label(series_frame, text="–§–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏:", font=("Arial", 9)).pack(side=LEFT)
        self.series_format = Entry(series_frame, width=20, font=("Arial", 9))
        self.series_format.insert(0, "–°–µ—Ä–∏—è {season}x{episode}")
        self.series_format.pack(side=LEFT, padx=5)
        
        Label(series_frame, text="–°–µ–∑–æ–Ω:", font=("Arial", 9)).pack(side=LEFT)
        self.season_num = Entry(series_frame, width=3, font=("Arial", 9))
        self.season_num.insert(0, "1")
        self.season_num.pack(side=LEFT, padx=2)
        
        Label(series_frame, text="–ù–∞—á–∞–ª—å–Ω—ã–π —ç–ø–∏–∑–æ–¥:", font=("Arial", 9)).pack(side=LEFT)
        self.episode_start = Entry(series_frame, width=3, font=("Arial", 9))
        self.episode_start.insert(0, "1")
        self.episode_start.pack(side=LEFT, padx=2)
        
        Button(series_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –≤–∏–¥–µ–æ", command=self.apply_series_format,
               bg="#E3F2FD", font=("Arial", 9)).pack(side=LEFT, padx=10)
        
        # –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        group_frame = LabelFrame(self.batch_frame, text="üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        group_frame.pack(fill=X, padx=5, pady=5)
        
        Button(group_frame, text="–†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10", command=lambda: self.create_file_groups(10),
               width=20, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(group_frame, text="–†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 25", command=lambda: self.create_file_groups(25),
               width=20, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(group_frame, text="–û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫", command=self.reverse_order,
               width=20, bg="#FFF9C4", font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    def setup_organize_tab(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        folders_frame = LabelFrame(self.organize_frame, text="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫")
        folders_frame.pack(fill=X, padx=5, pady=5)
        
        Button(folders_frame, text="–ü–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º", command=self.organize_by_extension,
               width=18, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(folders_frame, text="–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è", command=self.organize_by_date,
               width=18, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(folders_frame, text="–ü–æ —Ä–∞–∑–º–µ—Ä—É", command=self.organize_by_size,
               width=18, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(folders_frame, text="–ü–æ —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤", command=self.organize_by_type,
               width=18, bg="#C8E6C9", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        move_frame = LabelFrame(self.organize_frame, text="üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        move_frame.pack(fill=X, padx=5, pady=5)
        
        target_frame = Frame(move_frame)
        target_frame.pack(fill=X, pady=2)
        
        Button(target_frame, text="–í—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É", command=self.select_target_folder,
               width=20, bg="#E3F2FD", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        self.target_label = Label(target_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω–∞", fg="red", font=("Arial", 9))
        self.target_label.pack(side=LEFT, padx=10)
        
        action_frame = Frame(move_frame)
        action_frame.pack(fill=X, pady=2)
        
        Button(action_frame, text="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É", command=self.move_to_folder,
               width=20, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(action_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫—É", command=self.copy_to_folder,
               width=20, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(action_frame, text="–°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏", command=self.create_symlinks,
               width=25, bg="#FFCDD2", font=("Arial", 9)).pack(side=LEFT, padx=2)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        group_frame = LabelFrame(self.organize_frame, text="üë• –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤")
        group_frame.pack(fill=X, padx=5, pady=5)
        
        custom_frame = Frame(group_frame)
        custom_frame.pack(fill=X, pady=2)
        
        Label(custom_frame, text="–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", font=("Arial", 9)).pack(side=LEFT)
        self.group_size = Entry(custom_frame, width=5, font=("Arial", 9))
        self.group_size.insert(0, "10")
        self.group_size.pack(side=LEFT, padx=5)
        Label(custom_frame, text="—Ñ–∞–π–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ", font=("Arial", 9)).pack(side=LEFT)
        
        Button(custom_frame, text="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã", command=self.create_file_groups_custom,
               bg="#E1BEE7", font=("Arial", 9)).pack(side=LEFT, padx=10)
    
    def setup_stats_tab(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        stats_frame = LabelFrame(self.stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤")
        stats_frame.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        self.stats_text = Text(stats_frame, height=15, wrap=WORD, font=("Courier", 9))
        scrollbar = Scrollbar(stats_frame, command=self.stats_text.yview)
        self.stats_text.config(yscrollcommand=scrollbar.set)
        
        self.stats_text.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        analysis_frame = Frame(self.stats_frame)
        analysis_frame.pack(fill=X, padx=5, pady=5)
        
        Button(analysis_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", command=self.update_stats,
               bg="#E3F2FD", width=18, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(analysis_frame, text="üîç –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã", command=self.find_duplicates,
               bg="#C8E6C9", width=18, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(analysis_frame, text="üìä –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω", command=self.analyze_names,
               bg="#FFF9C4", width=18, font=("Arial", 9)).pack(side=LEFT, padx=2)
        Button(analysis_frame, text="üìè –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤", command=self.analyze_sizes,
               bg="#FFCDD2", width=18, font=("Arial", 9)).pack(side=LEFT, padx=2)
    
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        def on_enter(event):
            tooltip = Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = Label(tooltip, text=text, background="yellow", relief="solid", 
                         borderwidth=1, font=("Arial", 8), padx=5, pady=2)
            label.pack()
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def insert_placeholder(self, placeholder):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        current = self.pattern_entry.get()
        cursor_pos = self.pattern_entry.index(INSERT)
        
        if placeholder == "{randomX}":
            try:
                count = int(self.random_chars_var.get())
                if count <= 0:
                    raise ValueError
                placeholder = f"{{random{count}}}"
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤")
                return
        
        new_text = current[:cursor_pos] + placeholder + current[cursor_pos:]
        self.pattern_var.set(new_text)
        self.pattern_entry.focus_set()
        self.pattern_entry.icursor(cursor_pos + len(placeholder))
    
    def show_placeholder_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏"""
        menu = Menu(self.root, tearoff=0)
        
        categories = {
            "üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è": ["{numbers1}", "{numbers0}", "{numbersX}", "{reverse}"],
            "üî§ –ë—É–∫–≤—ã": ["{letters}", "{Letters}", "{lettersR}", "{LettersR}"],
            "üìÖ –î–∞—Ç–∞/–í—Ä–µ–º—è": ["{date}", "{time}", "{datetime}", "{year}"],
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ": ["{random3}", "{random5}", "{random8}", "{random10}", "{randomX}", "{uuid}"],
            "üìÑ –§–∞–π–ª—ã": ["{original}", "{ext}"]
        }
        
        for category, placeholders in categories.items():
            submenu = Menu(menu, tearoff=0)
            for ph in placeholders:
                submenu.add_command(label=ph, 
                                  command=lambda p=ph: self.insert_placeholder(p))
            menu.add_cascade(label=category, menu=submenu)
        
        menu.post(self.pattern_entry.winfo_rootx(), 
                 self.pattern_entry.winfo_rooty() + self.pattern_entry.winfo_height())
    
    def show_listbox_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            self.listbox_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.listbox_menu.grab_release()
    
    def remove_selected_file(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selection = self.file_listbox.curselection()
        if selection:
            index = selection[0]
            self.files.pop(index)
            self.update_file_list()
    
    def select_files(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è",
            filetypes=[
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp *.tiff"),
                ("–ê—É–¥–∏–æ", "*.mp3 *.wav *.ogg *.flac *.m4a"),
                ("–í–∏–¥–µ–æ", "*.mp4 *.avi *.mkv *.mov *.wmv"),
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.txt *.xlsx")
            ]
        )
        if files:
            self.files = list(files)
            self.update_file_list()
    
    def update_file_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        self.file_listbox.delete(0, END)
        for file in self.files:
            self.file_listbox.insert(END, os.path.basename(file))
        self.status_label.config(text=f"üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files)}")
    
    # –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø
    def generate_new_name(self, pattern, i, original_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        new_name = pattern
        filename, ext = os.path.splitext(original_name)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        random_matches = re.findall(r'\{random(\d+)\}', new_name)
        for match in random_matches:
            count = int(match)
            random_chars = ''.join(random.choices(string.ascii_lowercase + string.digits, k=count))
            new_name = new_name.replace(f"{{random{match}}}", random_chars)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ {randomX} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if "{randomX}" in new_name:
            try:
                count = int(self.random_chars_var.get())
                if count > 0:
                    random_chars = ''.join(random.choices(string.ascii_lowercase + string.digits, k=count))
                    new_name = new_name.replace("{randomX}", random_chars)
            except ValueError:
                pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ UUID
        if "{uuid}" in new_name:
            import uuid
            new_name = new_name.replace("{uuid}", str(uuid.uuid4())[:8])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if "{date}" in new_name:
            new_name = new_name.replace("{date}", datetime.now().strftime("%Y-%m-%d"))
        
        if "{time}" in new_name:
            new_name = new_name.replace("{time}", datetime.now().strftime("%H-%M-%S"))
        
        if "{datetime}" in new_name:
            new_name = new_name.replace("{datetime}", datetime.now().strftime("%Y-%m-%d_%H-%M-%S"))
        
        if "{year}" in new_name:
            new_name = new_name.replace("{year}", datetime.now().strftime("%Y"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        if "{original}" in new_name:
            new_name = new_name.replace("{original}", filename)
        
        if "{ext}" in new_name:
            new_name = new_name.replace("{ext}", ext[1:] if ext else "")
        
        # –ù—É–º–µ—Ä–∞—Ü–∏—è
        if "{numbers" in new_name:
            start = new_name.find("{numbers") + 8
            end = new_name.find("}", start)
            if start < end:
                num_str = new_name[start:end]
                try:
                    start_num = int(num_str)
                except ValueError:
                    start_num = 1
                new_num = start_num + i
                new_name = new_name.replace(f"{{numbers{num_str}}}", str(new_num))
        
        # –û–±—Ä–∞—Ç–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
        if "{reverse}" in new_name:
            new_num = len(self.files) - i
            new_name = new_name.replace("{reverse}", str(new_num))
        
        # –ë—É–∫–≤—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        if "{letters}" in new_name:
            letter = chr(97 + i % 26)
            if len(self.files) > 26:
                letter += str(i // 26 + 1)
            new_name = new_name.replace("{letters}", letter)
        
        if "{Letters}" in new_name:
            letter = chr(65 + i % 26)
            if len(self.files) > 26:
                letter += str(i // 26 + 1)
            new_name = new_name.replace("{Letters}", letter)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã
        while "{lettersR}" in new_name:
            letter = chr(random.randint(97, 122))
            if len(self.files) > 13:
                letter += str(i + 1)
            new_name = new_name.replace("{lettersR}", letter, 1)
        
        while "{LettersR}" in new_name:
            letter = chr(random.randint(65, 90))
            if len(self.files) > 13:
                letter += str(i + 1)
            new_name = new_name.replace("{LettersR}", letter, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.splitext(new_name)[1] and ext:
            new_name += ext
        
        return new_name
    
    def show_preview(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–≤—å—é")
            return
        
        pattern = self.pattern_var.get()
        if not pattern:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏")
            return
        
        preview_window = Toplevel(self.root)
        preview_window.title("üëÅÔ∏è –ü—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        preview_window.geometry("800x500")
        preview_window.transient(self.root)
        preview_window.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = Frame(preview_window)
        header_frame.pack(fill=X, padx=10, pady=10)
        
        Label(header_frame, text="–ü—Ä–µ–≤—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", font=("Arial", 12, "bold")).pack()
        Label(header_frame, text=f"–§–∞–π–ª–æ–≤: {len(self.files)} | –®–∞–±–ª–æ–Ω: {pattern}", 
              font=("Arial", 9)).pack()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–≤—å—é
        tree_frame = Frame(preview_window)
        tree_frame.pack(fill=BOTH, expand=True, padx=10, pady=5)
        
        tree = ttk.Treeview(tree_frame, columns=("old", "new"), show="headings", height=15)
        tree.heading("old", text="üìÑ –°—Ç–∞—Ä–æ–µ –∏–º—è")
        tree.heading("new", text="üîÑ –ù–æ–≤–æ–µ –∏–º—è")
        tree.column("old", width=350)
        tree.column("new", width=350)
        
        scrollbar = ttk.Scrollbar(tree_frame, orient=VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        tree.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        for i, file_path in enumerate(self.files):
            old_name = os.path.basename(file_path)
            new_name = self.generate_new_name(pattern, i, old_name)
            tree.insert("", END, values=(old_name, new_name))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = Frame(preview_window)
        button_frame.pack(fill=X, padx=10, pady=10)
        
        Button(button_frame, text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 
               command=lambda: [preview_window.destroy(), self.rename_files()],
               bg="lightgreen", font=("Arial", 10)).pack(side=LEFT, padx=5)
        
        Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
               command=preview_window.destroy,
               bg="lightcoral", font=("Arial", 10)).pack(side=RIGHT, padx=5)
    
    def rename_files(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return
        
        pattern = self.pattern_var.get()
        if not pattern:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        placeholders = ["{numbers", "{letters", "{Letters", "{date", "{time", 
                       "{random", "{original", "{ext", "{reverse", "{uuid", "{year", "{datetime"]
        has_placeholder = any(ph in pattern for ph in placeholders)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º {numbers1}
        if not has_placeholder:
            pattern += " {numbers1}"
            self.pattern_var.set(pattern)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            self.undo_stack.append(list(self.files))
            if len(self.undo_stack) > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞
                self.undo_stack.pop(0)
            
            directory = os.path.dirname(self.files[0])
            renamed_files = []
            
            for i, file_path in enumerate(self.files):
                old_name = os.path.basename(file_path)
                new_name = self.generate_new_name(pattern, i, old_name)
                new_path = os.path.join(directory, new_name)
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                counter = 1
                temp_path = new_path
                while os.path.exists(temp_path):
                    name, ext = os.path.splitext(new_path)
                    temp_path = f"{name}_{counter}{ext}"
                    counter += 1
                
                os.rename(file_path, temp_path)
                renamed_files.append(temp_path)
            
            self.files = renamed_files
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(renamed_files)} —Ñ–∞–π–ª–æ–≤")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    def undo_rename(self):
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not self.undo_stack:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìù –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
        
        try:
            old_files = self.undo_stack.pop()
            directory = os.path.dirname(self.files[0])
            
            for old_path, new_path in zip(old_files, self.files):
                if os.path.exists(new_path):
                    os.rename(new_path, old_path)
            
            self.files = old_files
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚Ü©Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {str(e)}")
    
    def clear_list(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.files = []
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
    def rename_from_exif(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ EXIF –¥–∞–Ω–Ω—ã–º"""
        if not self.files:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PIL
            try:
                from PIL import Image
                from PIL.ExifTags import TAGS
            except ImportError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow: pip install Pillow")
                return
            
            self.undo_stack.append(list(self.files))
            renamed_files = []
            
            for i, file_path in enumerate(self.files):
                if file_path.lower().endswith(('.jpg', '.jpeg', '.tiff', '.png')):
                    try:
                        with Image.open(file_path) as image:
                            exif_data = image._getexif()
                            
                            if exif_data:
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å—ä–µ–º–∫–∏
                                date_str = datetime.now().strftime('%Y-%m-%d')
                                for tag_id, value in exif_data.items():
                                    tag = TAGS.get(tag_id, tag_id)
                                    if tag in ['DateTime', 'DateTimeOriginal', 'DateTimeDigitized']:
                                        date_str = value.replace(':', '-').replace(' ', '_')[:19]
                                        break
                                
                                name, ext = os.path.splitext(os.path.basename(file_path))
                                new_name = f"–§–æ—Ç–æ_{date_str}{ext}"
                                new_path = os.path.join(os.path.dirname(file_path), new_name)
                                os.rename(file_path, new_path)
                                renamed_files.append(new_path)
                            else:
                                renamed_files.append(file_path)
                                
                    except Exception as e:
                        renamed_files.append(file_path)
                        continue
                else:
                    renamed_files.append(file_path)
            
            self.files = renamed_files
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "EXIF –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ EXIF: {str(e)}")
    
    def rename_from_id3(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ ID3 —Ç–µ–≥–∞–º"""
        messagebox.showinfo("–ò–Ω—Ñ–æ", "–§—É–Ω–∫—Ü–∏—è ID3 –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mutagen: pip install mutagen")
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å mutagen –±—ã–ª–∞ –±—ã –∑–¥–µ—Å—å
    
    def rename_by_date(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for i, file_path in enumerate(self.files):
            try:
                stat = os.stat(file_path)
                create_time = datetime.fromtimestamp(stat.st_ctime)
                date_str = create_time.strftime('%Y-%m-%d_%H-%M-%S')
                
                name, ext = os.path.splitext(os.path.basename(file_path))
                new_name = f"{date_str}_{name}{ext}"
                new_path = os.path.join(os.path.dirname(file_path), new_name)
                
                os.rename(file_path, new_path)
                renamed_files.append(new_path)
            except:
                renamed_files.append(file_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def transliterate(self, direction):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å‚Üî–∞–Ω–≥–ª"""
        if not self.files:
            return
        
        ru_en = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            new_name = ""
            
            if direction == "ru_en":
                for char in name.lower():
                    new_name += ru_en.get(char, char)
            else:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
                en_ru = {v: k for k, v in ru_en.items() if v}
                for char in name.lower():
                    new_name += en_ru.get(char, char)
            
            new_path = os.path.join(os.path.dirname(file_path), new_name + ext)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def change_case(self, case_type):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            
            if case_type == "upper":
                new_name = name.upper() + ext
            elif case_type == "lower":
                new_name = name.lower() + ext
            elif case_type == "title":
                new_name = name.title() + ext
            
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω")
    
    def add_folder_recursive(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            all_files = []
            for root, dirs, files in os.walk(folder):
                for file in files:
                    all_files.append(os.path.join(root, file))
            
            self.files.extend(all_files)
            self.update_file_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
    
    def filter_by_type(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É"""
        if not self.files:
            return
        
        filter_window = Toplevel(self.root)
        filter_window.title("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤")
        filter_window.geometry("300x200")
        
        Label(filter_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:", font=("Arial", 10)).pack(pady=10)
        
        type_var = StringVar(value="images")
        types = [("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "images"), ("–ê—É–¥–∏–æ", "audio"), 
                ("–í–∏–¥–µ–æ", "video"), ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "documents")]
        
        for text, value in types:
            Radiobutton(filter_window, text=text, variable=type_var, 
                       value=value, font=("Arial", 9)).pack(anchor="w", padx=20)
        
        def apply_filter():
            selected_type = type_var.get()
            filtered_files = []
            
            for file_path in self.files:
                ext = os.path.splitext(file_path)[1].lower()
                if ext in self.file_types[selected_type]:
                    filtered_files.append(file_path)
            
            self.files = filtered_files
            self.update_file_list()
            filter_window.destroy()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Å—Ç–∞–≤–ª–µ–Ω–æ {len(filtered_files)} —Ñ–∞–π–ª–æ–≤")
        
        Button(filter_window, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", command=apply_filter,
               bg="lightgreen", font=("Arial", 10)).pack(pady=20)
    
    def shuffle_files(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        if not self.files:
            return
        
        random.shuffle(self.files)
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã")
    
    def encrypt_names(self):
        """–ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            # –ü—Ä–æ—Å—Ç–æ–µ "—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ" - —Ä–µ–≤–µ—Ä—Å –∏–º–µ–Ω–∏
            encrypted_name = name[::-1] + ext
            new_path = os.path.join(os.path.dirname(file_path), encrypted_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–º–µ–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
    
    def hash_names(self, algorithm):
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            
            if algorithm == "md5":
                hash_obj = hashlib.md5(name.encode())
            else:  # sha256
                hash_obj = hashlib.sha256(name.encode())
            
            hashed_name = hash_obj.hexdigest()[:8] + ext
            new_path = os.path.join(os.path.dirname(file_path), hashed_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–µ–Ω–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã ({algorithm})")
    
    def replace_text(self):
        """–ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        find_text = self.find_entry.get()
        if not find_text:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        replace_text = self.replace_entry.get()
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            new_name = name.replace(find_text, replace_text) + ext
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç –∑–∞–º–µ–Ω–µ–Ω")
    
    def delete_chars(self, char_type):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for file_path in self.files:
            name, ext = os.path.splitext(os.path.basename(file_path))
            
            if char_type == "spaces":
                new_name = name.replace(" ", "") + ext
            elif char_type == "digits":
                new_name = ''.join([c for c in name if not c.isdigit()]) + ext
            elif char_type == "special":
                new_name = ''.join([c for c in name if c.isalnum() or c in ' .-_']) + ext
            
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–∏–º–≤–æ–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
    # –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
    def apply_template(self, file_type):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        template = self.template_vars[file_type].get()
        if not template:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        counter = 1
        
        for file_path in self.files:
            ext = os.path.splitext(file_path)[1].lower()
            if ext in self.file_types[file_type.lower()]:
                name, ext = os.path.splitext(os.path.basename(file_path))
                new_name = template.replace("{numbers1}", str(counter)) + ext
                new_path = os.path.join(os.path.dirname(file_path), new_name)
                os.rename(file_path, new_path)
                renamed_files.append(new_path)
                counter += 1
            else:
                renamed_files.append(file_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ {file_type}")
    
    def apply_series_format(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ—Ä–∏–∏ –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º"""
        if not self.files:
            return
        
        try:
            season = int(self.season_num.get())
            episode = int(self.episode_start.get())
        except ValueError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–∞ –∏ —ç–ø–∏–∑–æ–¥–∞")
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        current_episode = episode
        
        for file_path in self.files:
            ext = os.path.splitext(file_path)[1].lower()
            if ext in self.file_types["video"]:
                new_name = self.series_format.get().replace("{season}", str(season)).replace("{episode}", str(current_episode)) + ext
                new_path = os.path.join(os.path.dirname(file_path), new_name)
                os.rename(file_path, new_path)
                renamed_files.append(new_path)
                current_episode += 1
            else:
                renamed_files.append(file_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω")
    
    def reverse_order(self):
        """–û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.files.reverse()
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π")
    
    def create_file_groups(self, group_size):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        self.undo_stack.append(list(self.files))
        renamed_files = []
        
        for i, file_path in enumerate(self.files):
            name, ext = os.path.splitext(os.path.basename(file_path))
            group_num = i // group_size + 1
            new_name = f"–ì—Ä—É–ø–ø–∞{group_num}_{name}{ext}"
            new_path = os.path.join(os.path.dirname(file_path), new_name)
            os.rename(file_path, new_path)
            renamed_files.append(new_path)
        
        self.files = renamed_files
        self.update_file_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ–∑–¥–∞–Ω—ã –≥—Ä—É–ø–ø—ã –ø–æ {group_size} —Ñ–∞–π–ª–æ–≤")
    
    def create_file_groups_custom(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            group_size = int(self.group_size.get())
            if group_size <= 0:
                raise ValueError
            self.create_file_groups(group_size)
        except ValueError:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã")
    
    # –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í
    def organize_by_extension(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º"""
        if not self.files:
            return
        
        for file_path in self.files:
            ext = os.path.splitext(file_path)[1][1:]  # –ë–µ–∑ —Ç–æ—á–∫–∏
            if not ext:
                ext = "no_extension"
            
            folder_path = os.path.join(os.path.dirname(file_path), ext.upper())
            os.makedirs(folder_path, exist_ok=True)
            
            new_path = os.path.join(folder_path, os.path.basename(file_path))
            shutil.move(file_path, new_path)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º")
        self.files = []
        self.update_file_list()
    
    def organize_by_date(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        if not self.files:
            return
        
        for file_path in self.files:
            try:
                stat = os.stat(file_path)
                create_time = datetime.fromtimestamp(stat.st_ctime)
                date_str = create_time.strftime('%Y-%m-%d')
                
                folder_path = os.path.join(os.path.dirname(file_path), date_str)
                os.makedirs(folder_path, exist_ok=True)
                
                new_path = os.path.join(folder_path, os.path.basename(file_path))
                shutil.move(file_path, new_path)
            except:
                continue
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ")
        self.files = []
        self.update_file_list()
    
    def organize_by_size(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
        if not self.files:
            return
        
        size_categories = {
            "tiny": (0, 1024),           # < 1KB
            "small": (1024, 1024*100),   # 1KB - 100KB
            "medium": (1024*100, 1024*1024),  # 100KB - 1MB
            "large": (1024*1024, 1024*1024*10),  # 1MB - 10MB
            "huge": (1024*1024*10, float('inf'))  # > 10MB
        }
        
        for file_path in self.files:
            try:
                size = os.path.getsize(file_path)
                category = "unknown"
                
                for cat, (min_size, max_size) in size_categories.items():
                    if min_size <= size < max_size:
                        category = cat
                        break
                
                folder_path = os.path.join(os.path.dirname(file_path), category.upper())
                os.makedirs(folder_path, exist_ok=True)
                
                new_path = os.path.join(folder_path, os.path.basename(file_path))
                shutil.move(file_path, new_path)
            except:
                continue
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É")
        self.files = []
        self.update_file_list()
    
    def organize_by_type(self):
        """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        for file_path in self.files:
            ext = os.path.splitext(file_path)[1].lower()
            file_type = "other"
            
            for type_name, extensions in self.file_types.items():
                if ext in extensions:
                    file_type = type_name
                    break
            
            folder_path = os.path.join(os.path.dirname(file_path), file_type.upper())
            os.makedirs(folder_path, exist_ok=True)
            
            new_path = os.path.join(folder_path, os.path.basename(file_path))
            shutil.move(file_path, new_path)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ç–∏–ø–∞–º")
        self.files = []
        self.update_file_list()
    
    def select_target_folder(self):
        """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
        if folder:
            self.target_folder = folder
            self.target_label.config(text=folder, fg="green")
    
    def move_to_folder(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        if not self.target_folder:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
            return
        
        if not self.files:
            return
        
        for file_path in self.files:
            try:
                new_path = os.path.join(self.target_folder, os.path.basename(file_path))
                shutil.move(file_path, new_path)
            except:
                continue
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã")
        self.files = []
        self.update_file_list()
    
    def copy_to_folder(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        if not self.target_folder:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
            return
        
        if not self.files:
            return
        
        for file_path in self.files:
            try:
                new_path = os.path.join(self.target_folder, os.path.basename(file_path))
                shutil.copy2(file_path, new_path)
            except:
                continue
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        # –§–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    def create_symlinks(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫"""
        if not self.target_folder:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
            return
        
        if not self.files:
            return
        
        for file_path in self.files:
            try:
                link_path = os.path.join(self.target_folder, os.path.basename(file_path))
                if os.path.exists(link_path):
                    os.remove(link_path)
                os.symlink(file_path, link_path)
            except:
                continue
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–ó
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.files:
            self.stats_text.delete(1.0, END)
            self.stats_text.insert(END, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        total_size = 0
        extensions = {}
        size_categories = {
            "tiny": 0, "small": 0, "medium": 0, "large": 0, "huge": 0
        }
        
        for file_path in self.files:
            try:
                size = os.path.getsize(file_path)
                total_size += size
                ext = os.path.splitext(file_path)[1].lower() or "–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                extensions[ext] = extensions.get(ext, 0) + 1
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                if size < 1024:
                    size_categories["tiny"] += 1
                elif size < 1024*100:
                    size_categories["small"] += 1
                elif size < 1024*1024:
                    size_categories["medium"] += 1
                elif size < 1024*1024*10:
                    size_categories["large"] += 1
                else:
                    size_categories["huge"] += 1
                    
            except:
                continue
        
        stats = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(self.files)}
üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(total_size)}
üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}

üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:
"""
        for ext, count in sorted(extensions.items(), key=lambda x: x[1], reverse=True)[:10]:
            stats += f"  {ext}: {count} —Ñ–∞–π–ª–æ–≤\n"
        
        stats += f"\nüìè –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ê–ó–ú–ï–†–ê–ú:\n"
        stats += f"  üêú –ö—Ä–æ—à–µ—á–Ω—ã–µ (<1KB): {size_categories['tiny']}\n"
        stats += f"  üìÑ –ú–∞–ª—ã–µ (1KB-100KB): {size_categories['small']}\n"
        stats += f"  üìÅ –°—Ä–µ–¥–Ω–∏–µ (100KB-1MB): {size_categories['medium']}\n"
        stats += f"  üíΩ –ë–æ–ª—å—à–∏–µ (1MB-10MB): {size_categories['large']}\n"
        stats += f"  üêã –û–≥—Ä–æ–º–Ω—ã–µ (>10MB): {size_categories['huge']}\n"
        
        self.stats_text.delete(1.0, END)
        self.stats_text.insert(END, stats)
    
    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        size_names = ["B", "KB", "MB", "GB"]
        i = int(math.floor(math.log(size_bytes, 1024)))
        p = math.pow(1024, i)
        s = round(size_bytes / p, 2)
        return f"{s} {size_names[i]}"
    
    def find_duplicates(self):
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        if not self.files:
            return
        
        hashes = {}
        duplicates = []
        
        for file_path in self.files:
            try:
                # –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –∏–º–µ–Ω–∏ (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
                file_hash = f"{os.path.getsize(file_path)}_{os.path.basename(file_path)}"
                if file_hash in hashes:
                    duplicates.append((hashes[file_hash], file_path))
                else:
                    hashes[file_hash] = file_path
            except:
                continue
        
        if duplicates:
            result = "üîç –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´:\n\n"
            for i, (orig, dup) in enumerate(duplicates[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                result += f"{i+1}. üìÑ {os.path.basename(orig)}\n"
                result += f"   ‚îú‚îÄ {orig}\n"
                result += f"   ‚îî‚îÄ {dup}\n\n"
            
            if len(duplicates) > 10:
                result += f"... –∏ –µ—â—ë {len(duplicates) - 10} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n"
            
            self.stats_text.delete(1.0, END)
            self.stats_text.insert(END, result)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            Button(self.stats_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", 
                  command=lambda: self.delete_duplicates(duplicates),
                  bg="red", fg="white", font=("Arial", 9)).pack(pady=5)
        else:
            self.stats_text.insert(END, "\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def delete_duplicates(self, duplicates):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        for orig, dup in duplicates:
            try:
                os.remove(dup)
            except:
                continue
        
        self.update_file_list()
        self.update_stats()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
    
    def analyze_names(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        name_lengths = []
        common_words = {}
        
        for file_path in self.files:
            name = os.path.splitext(os.path.basename(file_path))[0]
            name_lengths.append(len(name))
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –¥–µ—Ñ–∏—Å–∞–º)
            words = name.replace('_', ' ').replace('-', ' ').split()
            for word in words:
                if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                    common_words[word.lower()] = common_words.get(word.lower(), 0) + 1
        
        avg_length = sum(name_lengths) / len(name_lengths) if name_lengths else 0
        max_length = max(name_lengths) if name_lengths else 0
        min_length = min(name_lengths) if name_lengths else 0
        
        analysis = f"""üìä –ê–ù–ê–õ–ò–ó –ò–ú–ï–ù –§–ê–ô–õ–û–í
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìè –î–ª–∏–Ω–∞ –∏–º–µ–Ω:
  –°—Ä–µ–¥–Ω—è—è: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤
  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_length} —Å–∏–º–≤–æ–ª–æ–≤
  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_length} —Å–∏–º–≤–æ–ª–æ–≤

üî§ –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞:
"""
        for word, count in sorted(common_words.items(), key=lambda x: x[1], reverse=True)[:10]:
            analysis += f"  '{word}': {count} —Ä–∞–∑\n"
        
        self.stats_text.delete(1.0, END)
        self.stats_text.insert(END, analysis)
    
    def analyze_sizes(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        if not self.files:
            return
        
        sizes = []
        for file_path in self.files:
            try:
                sizes.append(os.path.getsize(file_path))
            except:
                continue
        
        if not sizes:
            return
        
        avg_size = sum(sizes) / len(sizes)
        max_size = max(sizes)
        min_size = min(sizes)
        total_size = sum(sizes)
        
        analysis = f"""üìè –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(total_size)}
üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {self.format_size(avg_size)}
‚¨ÜÔ∏è –°–∞–º—ã–π –±–æ–ª—å—à–æ–π: {self.format_size(max_size)}
‚¨áÔ∏è –°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π: {self.format_size(min_size)}
üìà –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.format_size(sorted(sizes)[len(sizes)//2])}

üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
"""
        size_ranges = [
            (0, 1024, "–ú–µ–Ω–µ–µ 1KB"),
            (1024, 1024*1024, "1KB - 1MB"),
            (1024*1024, 1024*1024*10, "1MB - 10MB"),
            (1024*1024*10, 1024*1024*100, "10MB - 100MB"),
            (1024*1024*100, float('inf'), "–ë–æ–ª–µ–µ 100MB")
        ]
        
        for min_r, max_r, desc in size_ranges:
            count = sum(1 for size in sizes if min_r <= size < max_r)
            percentage = (count / len(sizes)) * 100
            analysis += f"  {desc}: {count} —Ñ–∞–π–ª–æ–≤ ({percentage:.1f}%)\n"
        
        self.stats_text.delete(1.0, END)
        self.stats_text.insert(END, analysis)

if __name__ == "__main__":
    root = Tk()
    app = RenamerPro(root)
    root.mainloop()
