import asyncio
import logging
import re
import time
from pathlib import Path
from typing import List, Optional, Dict, Any, Tuple

import aiofiles
import aiohttp
import chardet
from HdRezkaApi import HdRezkaSession
from tqdm import tqdm
from tqdm.asyncio import tqdm as asyncio_tqdm

# ========================================
# –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê –í –ê–ö–ö–ê–£–ù–¢
# ========================================
class Credentials:
    EMAIL: str = "gazanovik@gmail.com"
    PASSWORD: str = "7162654909"

# ========================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ß–ò–ö–ê
# ========================================
class Config:
    BASE_URL: str = "https://standby-rezka.tv/"
    MAX_CONCURRENT_DOWNLOADS: int = 10
    DOWNLOAD_MAX_RETRIES: int = 3
    CHUNK_SIZE: int = 32768  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    REQUEST_TIMEOUT: int = 120
    DOWNLOAD_FOLDER: str = "Rezka_Downloads"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∞–∑—ã —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫
    API_REQUEST_DELAY: float = 0.2  # –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
    API_MAX_RETRIES: int = 3
    API_RETRY_DELAY: float = 1.0
    
    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    PROGRESS_UPDATE_INTERVAL: int = 1024

CONFIG = Config()
CREDENTIALS = Credentials()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("hdrezka_downloader.log", "w", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ========================================
# –£–¢–ò–õ–ò–¢–´
# ========================================
def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    sanitized = re.sub(r'[\\/*?:"<>|]', ' ', filename)
    sanitized = re.sub(r'\s+', ' ', sanitized).strip()
    return sanitized[:200] if len(sanitized) > 200 else sanitized

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ."""
    if size_bytes == 0:
        return "0 B"
    
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_bytes < 1024:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.2f} TB"

def format_speed(bytes_per_second: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏."""
    return f"{format_size(int(bytes_per_second))}/s"

def select_from_list(items: List[str], title: str) -> Optional[int]:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not items:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return None
    
    print(f"\n{'='*20} {title.upper()} {'='*20}")
    for i, item in enumerate(items, 1):
        print(f"{i:2d}: {item}")
    print("=" * (42 + len(title)))
    
    while True:
        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(items)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip().lower()
            if choice == 'q':
                return None
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(items):
                return choice_num - 1
            
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(items)}.")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥.")
            return None

# ========================================
# –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ö–õ–ê–°–° –ó–ê–ì–†–£–ó–ß–ò–ö–ê
# ========================================
class Downloader:
    def __init__(self, config: Config):
        self.config = config
        self.session: Optional[aiohttp.ClientSession] = None
        self.semaphore = asyncio.Semaphore(config.MAX_CONCURRENT_DOWNLOADS)

    async def __aenter__(self):
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        connector = aiohttp.TCPConnector(
            limit=self.config.MAX_CONCURRENT_DOWNLOADS + 5,
            limit_per_host=self.config.MAX_CONCURRENT_DOWNLOADS,
            keepalive_timeout=30,
            enable_cleanup_closed=True
        )
        
        timeout = aiohttp.ClientTimeout(
            total=self.config.REQUEST_TIMEOUT,
            connect=30,
            sock_read=30
        )
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers=headers,
            trust_env=True
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await asyncio.sleep(0.1)

    async def get_file_size(self, url: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏."""
        try:
            async with self.session.head(url) as response:
                return int(response.headers.get('content-length', 0))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {e}")
            return 0

    async def download_file(self, url: str, filepath: Path, description: str) -> Tuple[bool, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        async with self.semaphore:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–º
            if filepath.exists() and not filepath.name.endswith('.part'):
                file_size = filepath.stat().st_size
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                expected_size = await self.get_file_size(url)
                if expected_size == 0 or file_size == expected_size:
                    logger.info(f"‚úÖ –§–∞–π–ª '{filepath.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    return True, file_size

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            filepath.parent.mkdir(parents=True, exist_ok=True)
            temp_filepath = filepath.with_suffix('.part')

            for attempt in range(self.config.DOWNLOAD_MAX_RETRIES):
                try:
                    start_time = time.time()
                    downloaded = 0

                    async with self.session.get(url) as response:
                        response.raise_for_status()
                        total_size = int(response.headers.get('content-length', 0))
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                        progress_bar = asyncio_tqdm(
                            total=total_size,
                            unit='B',
                            unit_scale=True,
                            desc=f"üì• {description:<20}",
                            leave=False,
                            bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{rate_fmt}] [{elapsed}<{remaining}]',
                            miniters=1
                        )

                        async with aiofiles.open(temp_filepath, 'wb') as f:
                            async for chunk in response.content.iter_chunked(self.config.CHUNK_SIZE):
                                await f.write(chunk)
                                downloaded += len(chunk)
                                progress_bar.update(len(chunk))

                        progress_bar.close()
                        
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if temp_filepath.exists():
                            temp_filepath.rename(filepath)
                        
                        elapsed_time = time.time() - start_time
                        speed = downloaded / elapsed_time if elapsed_time > 0 else 0
                        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {description} ({format_size(downloaded)} –∑–∞ {elapsed_time:.1f}—Å, {format_speed(speed)})")
                        
                        return True, downloaded

                except asyncio.TimeoutError:
                    logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                except aiohttp.ClientError as e:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_filepath.exists():
                    try:
                        temp_filepath.unlink()
                    except OSError:
                        pass
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt < self.config.DOWNLOAD_MAX_RETRIES - 1:
                    delay = min(2 ** attempt, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)

            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {description} –ø–æ—Å–ª–µ {self.config.DOWNLOAD_MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.")
            return False, 0

# ========================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

async def run_async_downloads(download_tasks: List[Dict[str, Any]]):
    """–§–∞–∑–∞ 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–º —Å—Å—ã–ª–∫–∞–º."""
    if not download_tasks:
        print("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    start_time = time.time()
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(download_tasks)} —Ñ–∞–π–ª–æ–≤...")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {CONFIG.MAX_CONCURRENT_DOWNLOADS}")
    
    try:
        async with Downloader(CONFIG) as downloader:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            tasks_to_run = [
                downloader.download_file(task['url'], task['filepath'], task['description'])
                for task in download_tasks
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks_to_run, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_downloads = 0
        failed_downloads = 0
        total_downloaded_size = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {download_tasks[i]['description']}: {result}")
                failed_downloads += 1
            elif result[0]:  # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                successful_downloads += 1
                total_downloaded_size += result[1]
            else:
                failed_downloads += 1

        elapsed_time = time.time() - start_time
        avg_speed = total_downloaded_size / elapsed_time if elapsed_time > 0 else 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*60)
        print("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê üéâ")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads} –∏–∑ {len(download_tasks)}")
        if failed_downloads > 0:
            print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {failed_downloads}")
        print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_size(total_downloaded_size)}")
        print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {format_speed(avg_speed)}")
        print(f"‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫.")
        print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {Path(CONFIG.DOWNLOAD_FOLDER).resolve()}")
        print("="*60)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        raise

def prepare_download_links(rezka: Any, initial_tasks: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–§–∞–∑–∞ 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    if not initial_tasks:
        return []

    ready_tasks = []
    failed_count = 0
    
    print(f"\nüîó –§–∞–∑–∞ 1: –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ {len(initial_tasks)} —ç–ø–∏–∑–æ–¥–æ–≤...")
    
    with tqdm(initial_tasks, desc="–°–±–æ—Ä —Å—Å—ã–ª–æ–∫", unit="—ç–ø") as pbar:
        for task in pbar:
            stream = None
            success = False
            
            # –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
            for attempt in range(CONFIG.API_MAX_RETRIES):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    pbar.set_postfix_str(f"{task['description']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ API
                    stream = rezka.getStream(task['season'], task['episode'], task['translator_id'])
                    if stream and hasattr(stream, 'videos') and stream.videos:
                        success = True
                        break
                    else:
                        raise ValueError("–ü—É—Å—Ç–æ–π –ø–æ—Ç–æ–∫ –∏–ª–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ")
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –¥–ª—è {task['description']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{CONFIG.API_MAX_RETRIES}): {str(e)[:100]}"
                    if attempt < CONFIG.API_MAX_RETRIES - 1:
                        pbar.write(f"‚ö†Ô∏è {error_msg}")
                        time.sleep(CONFIG.API_RETRY_DELAY * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    else:
                        pbar.write(f"‚ùå {error_msg}")

            if not success or not stream:
                failed_count += 1
                continue

            try:
                # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
                video_urls = None
                available_qualities = list(stream.videos.keys())
                
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                if task['quality'] in available_qualities:
                    video_urls = stream(task['quality'])
                
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –±–µ—Ä–µ–º –ª—É—á—à–µ–µ
                if not video_urls and available_qualities:
                    best_quality = available_qualities[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ–µ
                    pbar.write(f"‚ÑπÔ∏è {task['description']}: –∫–∞—á–µ—Å—Ç–≤–æ '{task['quality']}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º '{best_quality}'")
                    video_urls = stream(best_quality)
                    task['actual_quality'] = best_quality
                else:
                    task['actual_quality'] = task['quality']

                if video_urls and len(video_urls) > 0:
                    task['url'] = video_urls[0]
                    ready_tasks.append(task)
                else:
                    pbar.write(f"‚ùå {task['description']}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ URL –¥–ª—è –≤–∏–¥–µ–æ")
                    failed_count += 1

            except Exception as e:
                pbar.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ URL –¥–ª—è {task['description']}: {e}")
                failed_count += 1

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º —ç–ø–∏–∑–æ–¥–∞–º
            time.sleep(CONFIG.API_REQUEST_DELAY)

    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(ready_tasks)} –∏–∑ {len(initial_tasks)}")
    if failed_count > 0:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏: {failed_count}")
    
    return ready_tasks

def fix_encoding_hook(response, *args, **kwargs):
    """Hook –¥–ª—è requests, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        content_type = response.headers.get('Content-Type', '')
        if 'text' in content_type or 'json' in content_type:
            if response.encoding is None or 'iso-8859-1' in response.encoding.lower():
                detection = chardet.detect(response.content[:1024])  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1024 –±–∞–π—Ç–∞
                encoding = detection.get('encoding')
                if encoding and detection.get('confidence', 0) > 0.7:
                    response.encoding = encoding
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤ —Ö—É–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
    
    return response

def validate_credentials() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if not CREDENTIALS.EMAIL or not CREDENTIALS.PASSWORD:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (EMAIL –∏ PASSWORD).")
        return False
    return True

def main_sync():
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å HDRezka...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not validate_credentials():
        return

    try:
        with HdRezkaSession(origin=CONFIG.BASE_URL) as session:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö—É–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            if hasattr(session, '_session') and session._session:
                session._session.hooks['response'].append(fix_encoding_hook)
                logger.info("‚úÖ –•—É–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω.")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ö—É–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏.")

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            print(f"üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç {CREDENTIALS.EMAIL}...")
            try:
                login_success = session.login(CREDENTIALS.EMAIL, CREDENTIALS.PASSWORD)
                if not login_success:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                else:
                    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

            # –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–∞
            while True:
                search_query = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
                if not search_query:
                    print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    continue
                break

            print(f"üîç –ü–æ–∏—Å–∫ '{search_query}'...")
            try:
                search_results = session.search(search_query)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                return

            if not search_results:
                print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                return

            # –í—ã–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∞
            result_titles = [f"{item['title']} ({item.get('year', 'N/A')})" for item in search_results]
            chosen_index = select_from_list(result_titles, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            if chosen_index is None:
                return
            
            selected_series = search_results[chosen_index]
            print(f"\nüé¨ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–∏–∞–ª: {selected_series['title']}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ
            try:
                rezka = session.get(selected_series['url'])
                if not rezka.ok:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∞–ª–µ: {rezka.exception}")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                return

            # –í—ã–±–æ—Ä –æ–∑–≤—É—á–∫–∏
            if not hasattr(rezka, 'translators_names') or not rezka.translators_names:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∑–≤—É—á–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞.")
                return

            translator_names = list(rezka.translators_names.keys())
            chosen_translator_index = select_from_list(translator_names, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–∑–≤—É—á–∫—É")
            if chosen_translator_index is None:
                return

            translator_name = translator_names[chosen_translator_index]
            translator_id = str(rezka.translators_names[translator_name]['id'])

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            print("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞...")
            available_qualities = ['360p', '480p', '720p', '1080p', '1080p Ultra']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤
                if hasattr(rezka, 'episodesInfo') and rezka.episodesInfo:
                    first_season = rezka.episodesInfo[0]
                    if first_season['episodes']:
                        first_episode = first_season['episodes'][0]
                        test_stream = rezka.getStream(first_season['season'], first_episode['episode'], translator_id)
                        if test_stream and hasattr(test_stream, 'videos'):
                            available_qualities = list(test_stream.videos.keys())
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–∞: {', '.join(available_qualities)}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤: {e}")
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤.")

            # –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
            chosen_quality_index = select_from_list(available_qualities, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ")
            if chosen_quality_index is None:
                return
            
            quality = available_qualities[chosen_quality_index]
            print(f"üé§ –û–∑–≤—É—á–∫–∞: {translator_name} | üì∫ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
            if not hasattr(rezka, 'episodesInfo') or not rezka.episodesInfo:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∑–æ–¥–∞—Ö.")
                return

            initial_tasks = []
            series_name = sanitize_filename(rezka.name) if hasattr(rezka, 'name') else "Unknown_Series"
            base_path = Path(CONFIG.DOWNLOAD_FOLDER) / series_name

            for season_info in rezka.episodesInfo:
                season_num = season_info['season']
                for episode_info in season_info['episodes']:
                    episode_num = episode_info['episode']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
                    if any(str(t['translator_id']) == translator_id for t in episode_info['translations']):
                        episode_name = f"S{season_num:02d}E{episode_num:02d}"
                        initial_tasks.append({
                            'season': season_num,
                            'episode': episode_num,
                            'translator_id': translator_id,
                            'quality': quality,
                            'description': episode_name,
                            'filepath': base_path / f"–°–µ–∑–æ–Ω {season_num:02d}" / f"{episode_name}.mp4"
                        })

            if not initial_tasks:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π.")
                return

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: {len(initial_tasks)}")

            # –ó–∞–ø—É—Å–∫ —Ñ–∞–∑—ã 1: —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫
            ready_to_download_tasks = prepare_download_links(rezka, initial_tasks)

            if not ready_to_download_tasks:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                return

            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {len(ready_to_download_tasks)} –∏–∑ {len(initial_tasks)} —ç–ø–∏–∑–æ–¥–æ–≤")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            total_estimated_size = len(ready_to_download_tasks) * 500 * 1024 * 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ 500MB –Ω–∞ —ç–ø–∏–∑–æ–¥
            print(f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ~{format_size(total_estimated_size)}")
            print(f"üìÅ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {base_path}")
            
            confirm = input(f"\n–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É {len(ready_to_download_tasks)} —ç–ø–∏–∑–æ–¥–æ–≤? (y/n): ").lower().strip()
            if confirm not in ['y', 'yes', '–¥–∞']:
                print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return

            # –ó–∞–ø—É—Å–∫ —Ñ–∞–∑—ã 2: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            print("\n" + "="*60)
            print("üöÄ –§–ê–ó–ê 2: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï")
            print("="*60)
            
            asyncio.run(run_async_downloads(ready_to_download_tasks))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    try:
        main_sync()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ hdrezka_downloader.log")
    finally:
        print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

