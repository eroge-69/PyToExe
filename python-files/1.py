class LEDSupportBot:
    def __init__(self):
        self.current_state = "main_menu"
    
    def show_menu(self):
        menus = {
            "main_menu": {
                "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏! –ß—Ç–æ —É –≤–∞—Å –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?",
                "options": {
                    "1": "‚õ™ –ê–ø—Ç–µ—á–Ω—ã–π –∫—Ä–µ—Å—Ç",
                    "2": "üìú –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞", 
                    "3": "üì∫ –°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–π —ç–∫—Ä–∞–Ω",
                    "4": "üõ†Ô∏è –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
                }
            },
            "device_cross": {
                "text": "–ê–ø—Ç–µ—á–Ω—ã–π –∫—Ä–µ—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                "options": {
                    "1": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ü–û",
                    "2": "‚ùó –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
                    "3": "üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Å–±–æ–∏",
                    "0": "‚óÄÔ∏è –ù–∞–∑–∞–¥"
                }
            },
            "cross_software": {
                "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ü–û –¥–ª—è –∞–ø—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∞:",
                "options": {
                    "1": "üñ•Ô∏è HD",
                    "2": "üñ•Ô∏è BX", 
                    "3": "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    "0": "‚óÄÔ∏è –ù–∞–∑–∞–¥"
                }
            },
            "cross_software_hd": {
                "text": "–ü–û HD –¥–ª—è –∞–ø—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∞:\n–°–∫–∞—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é:\nhttps://example.com/hd-cross\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:...",
                "options": {"0": "‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –ü–û"}
            },
            "cross_software_bx": {
                "text": "–ü–û BX –¥–ª—è –∞–ø—Ç–µ—á–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∞:\n–°–∫–∞—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é:\nhttps://example.com/bx-cross\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏:...",
                "options": {"0": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}
            },
            "cross_manual": {
                "text": "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:\nhttps://example.com/manual-cross",
                "options": {"0": "‚óÄÔ∏è –ù–∞–∑–∞–¥"}
            },
            "urgent_help": {
                "text": "–î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ–º–æ—â–∏:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (343) 228-77-10\n‚úâÔ∏è Email: sinfo@eqsrf.ru\nüïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-18:00",
                "options": {"0": "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}
            }
        }
        return menus.get(self.current_state, {"text": "–û—à–∏–±–∫–∞ –º–µ–Ω—é", "options": {}})
    
    def handle_input(self, choice):
        transition_map = {
            "main_menu": {
                "1": "device_cross",
                "2": "device_string",
                "3": "device_screen",
                "4": "urgent_help"
            },
            "device_cross": {
                "1": "cross_software",
                "2": "cross_issues",
                "3": "cross_hardware",
                "0": "main_menu"
            },
            "cross_software": {
                "1": "cross_software_hd",
                "2": "cross_software_bx",
                "3": "cross_manual",
                "0": "device_cross"
            },
            "cross_software_hd": {"0": "cross_software"},
            "cross_software_bx": {"0": "cross_software"},
            "cross_manual": {"0": "cross_software"},
            "urgent_help": {"0": "main_menu"}
        }
        
        if self.current_state in transition_map:
            current_transitions = transition_map[self.current_state]
            if choice in current_transitions:
                self.current_state = current_transitions[choice]
                return True
        return False

if __name__ == "__main__":
    bot = LEDSupportBot()
    
    while True:
        current_menu = bot.show_menu()
        print(f"\n{current_menu['text']}\n")
        
        for key, value in current_menu['options'].items():
            print(f"{key}. {value}")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if not bot.handle_input(choice):
            print("\n‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        
        print("\n" + "="*40)