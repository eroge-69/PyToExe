import tkinter as tk
from tkinter import colorchooser, ttk
import threading
import time
import pyautogui
import keyboard
import numpy as np

# C·∫•u h√¨nh m√†u s·∫Øc cho giao di·ªán t·ªëi (Dark Mode)
BG_PRIMARY = "#1e1e1e"
FG_PRIMARY = "#ffffff"
ACCENT_COLOR = "#00ff7f"  # M√†u xanh neon s√°ng
BTN_NORMAL = "#3a3a3a"
BTN_ACTIVE = "#555555"

class ColorCircleApp:
    """
    ·ª®ng d·ª•ng DinoTriggerBot ph√°t hi·ªán m√†u s·∫Øc tr√™n m√†n h√¨nh v·ªõi v√≤ng tr√≤n overlay.
    S·ª≠ d·ª•ng multithreading ƒë·ªÉ ch·∫°y logic ph√°t hi·ªán m√†u n·ªÅn.
    """
    def __init__(self, root):
        self.root = root
        # THAY ƒê·ªîI: ƒê·ªïi t√™n ·ª©ng d·ª•ng
        self.root.title("DinoTriggerBot")
        # THAY ƒê·ªîI: TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ ch·ª©a hai checkbox m·ªõi
        self.root.geometry("350x720") # TƒÉng chi·ªÅu cao ƒë·ªÉ ch·ª©a ph·∫ßn Hex m·ªõi
        self.root.attributes("-topmost", True)
        # THAY ƒê·ªîI: S·ª≠ d·ª•ng m√†u n·ªÅn t·ªëi
        self.root.configure(bg=BG_PRIMARY)
        # THAY ƒê·ªîI: Cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï (ngang v√† d·ªçc)
        self.root.resizable(True, True)

        # --- C·∫•u h√¨nh Ban ƒë·∫ßu ---
        self.target_color = (255, 68, 68)  # m·∫∑c ƒë·ªãnh #ff4444
        # C·∫¨P NH·∫¨T M·ªöI: Bi·∫øn l∆∞u tr·ªØ m√£ Hex
        self.hex_code_var = tk.StringVar(value="#ff4444") 
        # S·ª≠ d·ª•ng StringVar/IntVar/DoubleVar ƒë·ªÉ li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi UI
        self.radius = tk.IntVar(value=100)
        self.delay = tk.DoubleVar(value=0.08)
        self.tolerance = tk.IntVar(value=30)
        self.mode_var = tk.StringVar(value="Shotgun (K√≠ch ho·∫°t 1 l·∫ßn)")
        
        # CH·ª®C NƒÇNG M·ªöI ƒê∆Ø·ª¢C T√ÅCH R·ªúI
        self.jump_enabled = tk.BooleanVar(value=False)
        self.drag_enabled = tk.BooleanVar(value=False)

        # S·ª≠ d·ª•ng Event ƒë·ªÉ ƒëi·ªÅu khi·ªÉn lu·ªìng ph√°t hi·ªán m√†u an to√†n (thay th·∫ø boolean)
        self.stop_event = threading.Event()
        self.detection_thread = None
        
        # TH√äM M·ªöI: Bi·∫øn l∆∞u tr·ªØ ID c·ªßa c√¥ng vi·ªác 'after' ƒë·ªÉ c√≥ th·ªÉ h·ªßy
        self._update_circle_job_id = None 

        self._setup_ui()
        self._setup_overlay()
        
        # ƒê·∫£m b·∫£o lu·ªìng d·ª´ng khi ƒë√≥ng c·ª≠a s·ªï ch√≠nh
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.update_circle() # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p c·∫≠p nh·∫≠t UI

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng ch√≠nh (Dark Mode) v·ªõi giao di·ªán n√¢ng c·∫•p."""
        
        # C√†i ƒë·∫∑t font chung
        HEADER_FONT = ("Arial", 18, "bold")
        LABEL_FONT = ("Arial", 10, "bold")
        
        main_frame = tk.Frame(self.root, padx=20, pady=15, bg=BG_PRIMARY)
        main_frame.pack(fill="both", expand=True)
        
        # Ti√™u ƒë·ªÅ 
        tk.Label(main_frame, text="ü¶ñ DinoTriggerBot", font=HEADER_FONT, bg=BG_PRIMARY, fg=ACCENT_COLOR).pack(pady=(0, 25))

        # --- Khung C√†i ƒë·∫∑t M√†u (Target Settings Frame) ---
        # S·ª≠ d·ª•ng LabelFrame ƒë·ªÉ nh√≥m giao di·ªán tr·ª±c quan h∆°n
        target_frame = tk.LabelFrame(main_frame, text="C√ÄI ƒê·∫∂T M·ª§C TI√äU (TARGET)", font=LABEL_FONT, bg=BG_PRIMARY, fg=ACCENT_COLOR, bd=1, relief=tk.SOLID, padx=10, pady=10)
        target_frame.pack(pady=10, fill="x")

        # Khung Ch·ªçn M√†u v√† Preview
        color_select_frame = tk.Frame(target_frame, bg=BG_PRIMARY)
        color_select_frame.pack(pady=5, fill="x")
        
        tk.Label(color_select_frame, text="M√†u m·ª•c ti√™u:", bg=BG_PRIMARY, fg=FG_PRIMARY, font=LABEL_FONT).pack(side="left", padx=(0, 10))
        
        # M√†u xem tr∆∞·ªõc v·ªõi border neon
        self.color_preview = tk.Label(color_select_frame, width=3, relief="flat", bg="#ff4444", bd=2, highlightbackground=ACCENT_COLOR, highlightthickness=1)
        self.color_preview.pack(side="left", padx=10)
        
        # N√∫t Ch·ªçn m√†u
        tk.Button(color_select_frame, text="Ch·ªçn m√†u", command=self.choose_color, 
                  relief="flat", bg=BTN_NORMAL, fg=FG_PRIMARY, activebackground=BTN_ACTIVE, activeforeground=FG_PRIMARY, bd=0, padx=10).pack(side="left")

        # C·∫¨P NH·∫¨T M·ªöI: Khung nh·∫≠p m√£ m√†u Hex
        hex_frame = tk.Frame(target_frame, bg=BG_PRIMARY)
        hex_frame.pack(pady=(15, 5), fill="x")

        tk.Label(hex_frame, text="M√£ Hex (#RRGGBB):", bg=BG_PRIMARY, fg=FG_PRIMARY, font=LABEL_FONT).pack(side="left")
        
        self.hex_entry = tk.Entry(hex_frame, textvariable=self.hex_code_var, width=10, bg=BTN_NORMAL, fg=FG_PRIMARY, insertbackground=ACCENT_COLOR, relief="flat")
        self.hex_entry.pack(side="left", padx=10, fill="x", expand=True)

        tk.Button(hex_frame, text="√Åp d·ª•ng", command=self.apply_hex_color,
                  relief="flat", bg=ACCENT_COLOR, fg=BG_PRIMARY, activebackground=BTN_ACTIVE, activeforeground=FG_PRIMARY, bd=0, padx=10).pack(side="right")
        # END C·∫¨P NH·∫¨T M·ªöI
        
        # Thanh tr∆∞·ª£t Sai s·ªë m√†u (Tolerance)
        tk.Label(target_frame, text="Sai s·ªë m√†u (Tolerance 1-100):", bg=BG_PRIMARY, fg=FG_PRIMARY).pack(pady=(15, 0), anchor="w")
        tk.Scale(target_frame, from_=1, to=100, orient="horizontal", variable=self.tolerance, 
                 bg=BG_PRIMARY, fg=FG_PRIMARY, highlightthickness=0, troughcolor=BTN_NORMAL, activebackground=ACCENT_COLOR, bd=0).pack(fill="x", padx=10)
        self.tolerance.set(30)
        
        # --- Khung C√†i ƒë·∫∑t H√†nh ƒë·ªông (Action Settings Frame) ---
        action_frame = tk.LabelFrame(main_frame, text="C√ÄI ƒê·∫∂T H√ÄNH ƒê·ªòNG (ACTION)", font=LABEL_FONT, bg=BG_PRIMARY, fg=ACCENT_COLOR, bd=1, relief=tk.SOLID, padx=10, pady=10)
        action_frame.pack(pady=10, fill="x")

        # Thanh tr∆∞·ª£t B√°n k√≠nh
        tk.Label(action_frame, text="B√°n k√≠nh qu√©t (10-500):", bg=BG_PRIMARY, fg=FG_PRIMARY).pack(pady=(5, 0), anchor="w")
        tk.Scale(action_frame, from_=10, to=500, orient="horizontal", variable=self.radius, 
                 bg=BG_PRIMARY, fg=FG_PRIMARY, highlightthickness=0, troughcolor=BTN_NORMAL, activebackground=ACCENT_COLOR, bd=0).pack(fill="x", padx=10)

        # Thanh tr∆∞·ª£t Delay
        tk.Label(action_frame, text="Delay qu√©t (gi√¢y - 0.01 ƒë·∫øn 1.0):", bg=BG_PRIMARY, fg=FG_PRIMARY).pack(pady=(15, 0), anchor="w")
        tk.Scale(action_frame, from_=0.01, to=1, resolution=0.01, orient="horizontal", variable=self.delay, 
                 bg=BG_PRIMARY, fg=FG_PRIMARY, highlightthickness=0, troughcolor=BTN_NORMAL, activebackground=ACCENT_COLOR, bd=0).pack(fill="x", padx=10)

        # Menu Ch·∫ø ƒë·ªô
        tk.Label(action_frame, text="Ch·∫ø ƒë·ªô b·∫Øn:", bg=BG_PRIMARY, fg=FG_PRIMARY).pack(pady=(15, 5), anchor="w")
        mode_options = ["Shotgun (K√≠ch ho·∫°t 1 l·∫ßn)", "AR (Gi·ªØ ph√≠m K)", "Sniper (Gi·ªØ ph√≠m L & Nh·∫•n K)"]
        
        # S·ª≠ d·ª•ng OptionMenu v√† t√πy ch·ªânh
        self.mode_menu = tk.OptionMenu(action_frame, self.mode_var, *mode_options)
        self.mode_menu.config(width=30, bg=BTN_NORMAL, fg=FG_PRIMARY, relief="flat", bd=0,
                              activebackground=BTN_ACTIVE, activeforeground=FG_PRIMARY)
        self.mode_menu["menu"].config(bg=BTN_NORMAL, fg=FG_PRIMARY, activebackground=ACCENT_COLOR, activeforeground=BG_PRIMARY)
        self.mode_menu.pack(pady=5, fill="x")
        
        # --- Khung T√πy ch·ªçn ƒê·∫∑c bi·ªát (Feature Checkboxes) ---
        feature_frame = tk.LabelFrame(main_frame, text="T√ôY CH·ªåN ƒê·∫∂C BI·ªÜT", font=LABEL_FONT, bg=BG_PRIMARY, fg=ACCENT_COLOR, bd=1, relief=tk.SOLID, padx=10, pady=5)
        feature_frame.pack(pady=10, fill="x")
        
        # CHECKBOX 1 M·ªöI: Auto Jump
        jump_check = tk.Checkbutton(feature_frame, text="1. T·ª± ƒë·ªông Nh·∫£y (Auto Jump - Space)", variable=self.jump_enabled,
                                    bg=BG_PRIMARY, fg=FG_PRIMARY, selectcolor=BTN_NORMAL, activebackground=BG_PRIMARY,
                                    activeforeground=ACCENT_COLOR, cursor="hand2")
        jump_check.pack(pady=2, anchor="w")

        # CHECKBOX 2 M·ªöI: Auto Drag
        drag_check = tk.Checkbutton(feature_frame, text="2. T·ª± ƒë·ªông K√©o t√¢m (Auto Drag - Move Mouse)", variable=self.drag_enabled,
                                    bg=BG_PRIMARY, fg=FG_PRIMARY, selectcolor=BTN_NORMAL, activebackground=BG_PRIMARY,
                                    activeforeground=ACCENT_COLOR, cursor="hand2")
        drag_check.pack(pady=2, anchor="w")
        
        # --- Khung ƒêi·ªÅu khi·ªÉn Ch√≠nh ---
        control_frame = tk.Frame(main_frame, bg=BG_PRIMARY)
        control_frame.pack(pady=10, fill="x")
        
        # Tr·∫°ng th√°i
        self.status_label = tk.Label(control_frame, text="Tr·∫°ng th√°i: OFF", fg="#ff4444", font=("Arial", 12, "bold"), bg=BG_PRIMARY)
        self.status_label.pack(pady=(15, 5))

        # N√∫t B·∫≠t/T·∫Øt
        self.toggle_btn = tk.Button(control_frame, text="B·∫≠t (F6)", bg="#4CAF50", fg="white", font=("Arial", 12, "bold"), command=self.toggle, 
                                    relief="flat", padx=15, pady=8, activebackground="#388e3c", activeforeground="white")
        self.toggle_btn.pack(pady=5, ipadx=30)
        
        # Thi·∫øt l·∫≠p ph√≠m t·∫Øt
        try:
            keyboard.add_hotkey('f6', self.toggle)
        except Exception as e:
            # L∆∞u √Ω: Hotkey c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông tr√™n m·ªôt s·ªë h·ªá ƒëi·ªÅu h√†nh/quy·ªÅn h·∫°n
            print(f"L·ªói thi·∫øt l·∫≠p hotkey F6: {e}")


    def _setup_overlay(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï overlay trong su·ªët cho v√≤ng tr√≤n."""
        self.overlay = tk.Toplevel(self.root)
        self.overlay.attributes("-transparentcolor", "black")
        self.overlay.attributes("-topmost", True)
        self.overlay.overrideredirect(True)

        screen_w = self.root.winfo_screenwidth()
        screen_h = self.root.winfo_screenheight()
        self.overlay.geometry(f"{screen_w}x{screen_h}+0+0")

        self.canvas = tk.Canvas(self.overlay, width=screen_w, height=screen_h, bg="black", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True) # ƒê·∫£m b·∫£o canvas l·∫•p ƒë·∫ßy overlay
        self.circle = None

    def hex_to_rgb(self, hex_code):
        """Chuy·ªÉn ƒë·ªïi m√£ hex (v√≠ d·ª•: #ff4444) sang tuple RGB."""
        # Lo·∫°i b·ªè k√Ω t·ª± '#' n·∫øu c√≥
        hex_code = hex_code.lstrip('#')
        # ƒê·∫£m b·∫£o m√£ c√≥ 6 k√Ω t·ª±
        if len(hex_code) != 6:
            raise ValueError("M√£ Hex kh√¥ng h·ª£p l·ªá (c·∫ßn 6 k√Ω t·ª±).")
            
        # Chuy·ªÉn ƒë·ªïi t·ª´ng c·∫∑p k√Ω t·ª± sang gi√° tr·ªã th·∫≠p ph√¢n
        r = int(hex_code[0:2], 16)
        g = int(hex_code[2:4], 16)
        b = int(hex_code[4:6], 16)
        return (r, g, b)

    def apply_hex_color(self):
        """√Åp d·ª•ng m√†u t·ª´ m√£ Hex do ng∆∞·ªùi d√πng nh·∫≠p."""
        hex_code = self.hex_code_var.get().strip()
        
        try:
            # Chuy·ªÉn ƒë·ªïi v√† c·∫≠p nh·∫≠t m√†u m·ª•c ti√™u
            rgb_color = self.hex_to_rgb(hex_code)
            self.target_color = rgb_color
            
            # C·∫≠p nh·∫≠t m√†u xem tr∆∞·ªõc
            # ƒê·∫£m b·∫£o m√£ hex c√≥ k√Ω t·ª± #
            final_hex = f'#{hex_code.lstrip("#")}' 
            self.color_preview.config(bg=final_hex)
            
            print(f"ƒê√£ √°p d·ª•ng m√†u m·ªõi: {final_hex}")
            
        except ValueError as e:
            # X·ª≠ l√Ω l·ªói khi m√£ hex kh√¥ng h·ª£p l·ªá (S·ª≠ d·ª•ng print thay v√¨ alert)
            print(f"L·ªói nh·∫≠p m√£ m√†u: {e}. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng #RRGGBB ho·∫∑c RRGGBB.")
            # ƒê·∫∑t l·∫°i m√†u preview th√†nh m√†u m·∫∑c ƒë·ªãnh ƒë·ªÉ b√°o hi·ªáu l·ªói
            self.color_preview.config(bg="#ff0000") 

    def choose_color(self):
        """M·ªü h·ªôp tho·∫°i ch·ªçn m√†u v√† c·∫≠p nh·∫≠t m√†u m·ª•c ti√™u."""
        initial_color = f'#{self.target_color[0]:02x}{self.target_color[1]:02x}{self.target_color[2]:02x}'
        
        color_info = colorchooser.askcolor(title="Ch·ªçn m√†u", initialcolor=initial_color)
        
        if color_info and color_info[0]:
            rgb, hex_code = color_info
            self.target_color = tuple(map(int, rgb))
            self.color_preview.config(bg=hex_code)
            
            # C·∫¨P NH·∫¨T M·ªöI: C·∫≠p nh·∫≠t bi·∫øn hex_code_var
            self.hex_code_var.set(hex_code)

    def toggle(self):
        """B·∫≠t/T·∫Øt lu·ªìng ph√°t hi·ªán m√†u."""
        if self.detection_thread and self.detection_thread.is_alive() and not self.stop_event.is_set():
            # ƒêang ·ªü tr·∫°ng th√°i B·∫¨T -> T·∫Øt
            self.stop_event.set()
            self.status_label.config(text="Tr·∫°ng th√°i: OFF", fg="#ff4444")
            self.toggle_btn.config(text="B·∫≠t (F6)", bg="#4CAF50")
            
            # ƒê·∫£m b·∫£o nh·∫£ ph√≠m n·∫øu ƒëang gi·ªØ
            try:
                if keyboard.is_pressed("k"):
                    keyboard.release("k")
                if keyboard.is_pressed("l"):
                    keyboard.release("l")
            except Exception as e:
                print(f"L·ªói khi nh·∫£ ph√≠m: {e}")
            
        else: 
            # ƒêang ·ªü tr·∫°ng th√°i T·∫ÆT -> B·∫≠t
            self.stop_event.clear()
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ON chi ti·∫øt
            status_text = f"Tr·∫°ng th√°i: ON ({self.mode_var.get().split(' ')[0]})"
            if self.drag_enabled.get():
                status_text += " | Drag ON"
            if self.jump_enabled.get():
                status_text += " | Jump ON"
                
            self.status_label.config(text=status_text, fg=ACCENT_COLOR)
            self.toggle_btn.config(text="T·∫Øt (F6)", bg="#f44336")
            
            self.detection_thread = threading.Thread(target=self.run_detection, daemon=True)
            self.detection_thread.start()
            
    def on_closing(self):
        """X·ª≠ l√Ω ƒë√≥ng c·ª≠a s·ªï, ƒë·∫£m b·∫£o d·ª´ng lu·ªìng an to√†n."""
        self.stop_event.set()
        
        # FIX L·ªñI: H·ªßy c√¥ng vi·ªác after() ƒëang ch·ªù x·ª≠ l√Ω ƒë·ªÉ tr√°nh l·ªói Tcl
        if self._update_circle_job_id:
            try:
                self.root.after_cancel(self._update_circle_job_id)
            except Exception:
                # B·ªè qua n·∫øu l·ªói h·ªßy l·ªánh (v√≠ d·ª•: ƒë√£ b·ªã h·ªßy ho·∫∑c root ƒë√£ b·ªã destroy)
                pass 

        # Ch·ªù lu·ªìng k·∫øt th√∫c (timeout ng·∫Øn)
        if self.detection_thread and self.detection_thread.is_alive():
            self.detection_thread.join(0.1) 
        
        # X√≥a hotkey
        try:
            keyboard.remove_hotkey('f6')
        except:
            pass
            
        self.overlay.destroy()
        self.root.destroy()

    def update_circle(self):
        """
        V·∫Ω l·∫°i v√≤ng tr√≤n c·ªë ƒë·ªãnh t·∫°i trung t√¢m m√†n h√¨nh v√† c·∫≠p nh·∫≠t b√°n k√≠nh.
        
        C·∫¨P NH·∫¨T: S·ª≠ d·ª•ng canvas.coords() ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng canvas thay v√¨ x√≥a v√† t·∫°o l·∫°i,
        gi√∫p vi·ªác c·∫≠p nh·∫≠t m∆∞·ª£t m√† h∆°n v√† tr√°nh c√°c l·ªói hi·ªÉn th·ªã.
        """
        # B√°n k√≠nh ƒë∆∞·ª£c l·∫•y t·ª´ self.radius.get()
        r = self.radius.get()
        
        # ƒê·∫∂T V√íNG TR√íN C·ªê ƒê·ªäNH T·∫†I TRUNG T√ÇM M√ÄN H√åNH
        center_x = self.root.winfo_screenwidth() // 2
        center_y = self.root.winfo_screenheight() // 2
        
        x0, y0 = center_x - r, center_y - r
        x1, y1 = center_x + r, center_y + r
        
        if self.circle:
            # N·∫øu v√≤ng tr√≤n ƒë√£ t·ªìn t·∫°i, ch·ªâ c·∫≠p nh·∫≠t t·ªça ƒë·ªô
            self.canvas.coords(self.circle, x0, y0, x1, y1)
        else:
            # L·∫ßn ƒë·∫ßu ti√™n, t·∫°o v√≤ng tr√≤n
            self.circle = self.canvas.create_oval(
                x0, y0, x1, y1, 
                outline=ACCENT_COLOR, 
                width=2,
                dash=(5, 3) 
            )
        
        # C·∫¨P NH·∫¨T M·ªöI: ƒê·∫£m b·∫£o c·ª≠a s·ªï overlay lu√¥n n·∫±m tr√™n c√πng (gi√∫p kh·∫Øc ph·ª•c l·ªói hi·ªÉn th·ªã)
        self.overlay.lift()

        # L·∫≠p l·ªãch g·ªçi l·∫°i ch√≠nh n√≥
        if not self.stop_event.is_set():
             # C·∫¨P NH·∫¨T: L∆∞u ID c√¥ng vi·ªác ƒë·ªÉ c√≥ th·ªÉ h·ªßy khi ƒë√≥ng ·ª©ng d·ª•ng
             self._update_circle_job_id = self.root.after(50, self.update_circle)
        
    def check_for_color(self, img, target_color, tolerance):
        """
        S·ª≠ d·ª•ng NumPy ƒë·ªÉ ki·ªÉm tra m√†u s·∫Øc hi·ªáu qu·∫£ v√† tr·∫£ v·ªÅ v·ªã tr√≠ c·ªßa pixel kh·ªõp (n·∫øu t√¨m th·∫•y).
        Tr·∫£ v·ªÅ (found_bool, relative_x, relative_y)
        T√¨m pixel kh·ªõp G·∫¶N T√ÇM NH·∫§T c·ªßa v√πng qu√©t.
        """
        target_np = np.array(target_color, dtype=np.uint8)
        img_rgb = img[:, :, :3]
        
        # T√≠nh s·ª± kh√°c bi·ªát tuy·ªát ƒë·ªëi
        diff = np.abs(img_rgb.astype(np.int16) - target_np.astype(np.int16))
        
        # T·∫°o m·∫∑t n·∫° n∆°i t·∫•t c·∫£ 3 k√™nh RGB ƒë·ªÅu n·∫±m trong ph·∫°m vi Tolerance
        mask = np.all(diff <= tolerance, axis=-1)
        
        if np.any(mask):
            # T√¨m v·ªã tr√≠ (ch·ªâ m·ª•c) c·ªßa t·∫•t c·∫£ c√°c pixel kh·ªõp (h√†ng, c·ªôt)
            match_indices = np.argwhere(mask)
            
            # T√≠nh to√°n v·ªã tr√≠ t√¢m t∆∞∆°ng ƒë·ªëi c·ªßa ·∫£nh ch·ª•p
            center_x = img.shape[1] // 2
            center_y = img.shape[0] // 2
            
            # T√≠nh kho·∫£ng c√°ch t·ª´ m·ªói ƒëi·ªÉm kh·ªõp ƒë·∫øn t√¢m
            distances = np.sqrt((match_indices[:, 1] - center_x)**2 + (match_indices[:, 0] - center_y)**2)
            
            # T√¨m ch·ªâ m·ª•c c·ªßa ƒëi·ªÉm c√≥ kho·∫£ng c√°ch nh·ªè nh·∫•t
            closest_index = np.argmin(distances)
            
            # L·∫•y t·ªça ƒë·ªô t∆∞∆°ng ƒë·ªëi (x, y)
            best_match_y, best_match_x = match_indices[closest_index]
            
            return True, best_match_x, best_match_y
        
        return False, 0, 0

    def run_detection(self):
        """V√≤ng l·∫∑p ph√°t hi·ªán m√†u ch√≠nh, ch·∫°y trong m·ªôt lu·ªìng ri√™ng."""
        # T√çNH TO√ÅN V·ªä TR√ç TRUNG T√ÇM M√ÄN H√åNH C·ªê ƒê·ªäNH CHO V√ôNG QU√âT
        screen_w = self.root.winfo_screenwidth()
        screen_h = self.root.winfo_screenheight()
        fixed_center_x = screen_w // 2
        fixed_center_y = screen_h // 2

        # THAM S·ªê ƒêI·ªÄU CH·ªàNH ƒê·ªò CH√çNH X√ÅC K√âO CHU·ªòT 
        # Gi√° tr·ªã 5 pixel h∆∞·ªõng xu·ªëng ƒë·ªÉ nh·∫Øm v√†o th√¢n (Centre Mass)
        # H∆Ø·ªöNG D·∫™N TINH CH·ªàNH: TƒÉng gi√° tr·ªã n√†y (v√≠ d·ª•: 8 ho·∫∑c 10) n·∫øu k√©o qu√° cao (nh·∫Øm v√†o ƒë·∫ßu).
        # Gi·∫£m gi√° tr·ªã n√†y (v√≠ d·ª•: 2 ho·∫∑c 0) n·∫øu k√©o qu√° th·∫•p.
        VERTICAL_OFFSET = 5 
        
        # THAM S·ªê ƒêI·ªÄU CH·ªàNH T·ªêC ƒê·ªò K√âO CHU·ªòT
        # ƒê√É S·ª¨A: Gi·∫£m xu·ªëng 0.03s ƒë·ªÉ ph·∫£n h·ªìi nhanh v√† nh·∫°y h∆°n
        DRAG_DURATION = 0.03 
        
        # THAM S·ªê ƒêI·ªÄU CH·ªàNH DELAY SAU KHI NH·∫¢Y 
        # 0.05s ƒë·ªÉ game c√≥ th·ªùi gian x·ª≠ l√Ω c√∫ nh·∫£y tr∆∞·ªõc khi aim
        JUMP_DELAY = 0.05 
        
        # THAM S·ªê M·ªöI: ƒê·ªô d√†i th·ªùi gian nh·∫•n ph√≠m Jump (space)
        JUMP_PRESS_DURATION = 0.01 
        
        while not self.stop_event.is_set():
            try:
                current_radius = self.radius.get()
                current_delay = self.delay.get()
                current_mode = self.mode_var.get()
                current_tolerance = self.tolerance.get()

                # V·ªä TR√ç QU√âT C·ªê ƒê·ªäNH: S·ª≠ d·ª•ng v·ªã tr√≠ trung t√¢m m√†n h√¨nh
                center_x, center_y = fixed_center_x, fixed_center_y
                
                # Ch·ª•p m√†n h√¨nh v√πng quanh trung t√¢m
                screenshot = pyautogui.screenshot(
                    region=(center_x - current_radius, center_y - current_radius, 
                            current_radius * 2, current_radius * 2)
                )
                img = np.array(screenshot)

                # Ki·ªÉm tra m√†u v√† l·∫•y t·ªça ƒë·ªô t∆∞∆°ng ƒë·ªëi
                found, relative_x, relative_y = self.check_for_color(img, self.target_color, current_tolerance)
                
                # --- X·ª¨ L√ù H√ÄNH VI (N·∫øu m√†u ƒë∆∞·ª£c t√¨m th·∫•y) ---
                if found:
                    
                    # 1. T·ª∞ ƒê·ªòNG K√âO T√ÇM (Auto Drag)
                    # Ch·ª©c nƒÉng n√†y ch·ªâ k√≠ch ho·∫°t n·∫øu checkbox "Auto Drag" ƒë∆∞·ª£c b·∫≠t
                    if self.drag_enabled.get():
                        # T√≠nh to√°n t·ªça ƒë·ªô tuy·ªát ƒë·ªëi c·ªßa ƒëi·ªÉm kh·ªõp g·∫ßn nh·∫•t
                        abs_target_x = (center_x - current_radius) + relative_x
                        # √Åp d·ª•ng Vertical Offset ƒë·ªÉ nh·∫Øm v√†o th√¢n
                        abs_target_y = (center_y - current_radius) + relative_y + VERTICAL_OFFSET

                        # Di chuy·ªÉn chu·ªôt m∆∞·ª£t m√† h∆°n (0.03s) ƒë·ªÉ game nh·∫≠n di·ªán t·ªët h∆°n
                        pyautogui.moveTo(abs_target_x, abs_target_y, duration=DRAG_DURATION)

                    # 2. T·ª∞ ƒê·ªòNG NH·∫¢Y (Auto Jump - Ph√≠m Space)
                    # Ch·ª©c nƒÉng n√†y ch·ªâ k√≠ch ho·∫°t n·∫øu checkbox "Auto Jump" ƒë∆∞·ª£c b·∫≠t.
                    # Lu√¥n ch·∫°y tr∆∞·ªõc l·ªánh B·∫ÆN.
                    if self.jump_enabled.get():
                        # S·ª¨A L·ªñI: Thay th·∫ø press_and_release b·∫±ng press/release th·ªß c√¥ng ƒë·ªÉ ƒë·∫£m b·∫£o game nh·∫≠n di·ªán input
                        keyboard.press('space')
                        time.sleep(JUMP_PRESS_DURATION)
                        keyboard.release('space')
                        
                        # Delay ng·∫Øn sau khi nh·∫£y
                        time.sleep(JUMP_DELAY) 
                        
                    # 3. K√çCH HO·∫†T B·∫ÆN (Shot) - B·∫§T K·ªÇ Drag hay Jump c√≥ b·∫≠t hay kh√¥ng
                    # Lu√¥n ch·∫°y sau l·ªánh Jump v√† Drag.
                    if current_mode.startswith("Shotgun"):
                        keyboard.press_and_release("k")
                        # Th√™m delay sau khi b·∫Øn n·∫øu c√≥ thao t√°c Drag/Jump
                        if self.drag_enabled.get() or self.jump_enabled.get():
                            time.sleep(0.15) 

                    elif current_mode.startswith("AR"):
                        if not keyboard.is_pressed("k"):
                            keyboard.press("k")
                    
                    elif current_mode.startswith("Sniper"):
                        # Logic Sniper: Gi·ªØ L, B·∫Øn K, Th·∫£ L (Quick Scope)
                        if not keyboard.is_pressed("l"):
                            keyboard.press("l")
                            time.sleep(0.05) # Gi·∫£ l·∫≠p th·ªùi gian m·ªü scope
                            
                        keyboard.press_and_release("k")
                        
                        # Th·∫£ L ngay sau khi b·∫Øn ƒë·ªÉ scope ra
                        if keyboard.is_pressed("l"):
                            keyboard.release("l")
                
                else: # M√†u KH√îNG ƒë∆∞·ª£c t√¨m th·∫•y
                    # ƒê·∫£m b·∫£o nh·∫£ ph√≠m b·∫Øn AR n·∫øu kh√¥ng t√¨m th·∫•y m√†u
                    if current_mode.startswith("AR") and keyboard.is_pressed("k"):
                        keyboard.release("k")

            except Exception as e:
                # X·ª≠ l√Ω c√°c l·ªói b·∫•t ng·ªù v√† ti·∫øp t·ª•c v√≤ng l·∫∑p
                print(f"L·ªói trong lu·ªìng ph√°t hi·ªán: {e}")

            # ƒê·∫£m b·∫£o lu·ªìng t·∫°m d·ª´ng theo gi√° tr·ªã delay hi·ªán t·∫°i. 
            time.sleep(current_delay)

if __name__ == "__main__":
    root = tk.Tk()
    app = ColorCircleApp(root)
    root.mainloop()
