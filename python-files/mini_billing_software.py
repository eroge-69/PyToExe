#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mini Billing Software (Windows-friendly)
- Data entry form for shipment/billing details
- Dynamic list of charges (add/remove)
- Auto-calculates Import Value (PKR) and Total Billing Amount
- Exports a clean, printable HTML bill (opens in browser)
No external libraries required (only Python standard library).
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import webbrowser
import datetime
import os
from decimal import Decimal, ROUND_HALF_UP

APP_TITLE = "Mini Billing Software — Kassim Style"
CSS_STYLE = """
<style>
  @media print {
    .no-print { display: none; }
  }
  body { font-family: Arial, sans-serif; margin: 24px; }
  .header { text-align: center; margin-bottom: 10px; }
  .meta-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 6px 24px; margin-bottom: 10px; }
  .row { display: flex; justify-content: space-between; }
  .title { font-size: 22px; font-weight: bold; letter-spacing: 0.5px; }
  .sub { font-size: 12px; color: #333; }
  .section { border: 1px solid #ccc; padding: 10px; margin-top: 10px; border-radius: 6px;}
  .label { font-weight: bold; }
  table { border-collapse: collapse; width: 100%; margin-top: 8px; }
  th, td { border: 1px solid #ddd; padding: 8px; font-size: 13px; }
  th { background: #f7f7f7; text-align: left; }
  .totals { margin-top: 12px; display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 8px; }
  .totals .amount { font-size: 16px; font-weight: bold; }
  .muted { color: #555; }
  .badge { display:inline-block; padding:2px 8px; border-radius: 10px; background:#f0f0f0; font-size:12px; }
</style>
"""

HTML_TEMPLATE = """<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Bill {bill_no} — {company}</title>
{css}
</head>
<body>
  <div class="header">
    <div class="title">BILL</div>
    <div class="sub">Generated by Mini Billing Software</div>
  </div>
  <div class="section">
    <div class="row">
      <div><span class="label">BILLS NO:</span> {bill_no}</div>
      <div><span class="label">FILE NO:</span> {file_no}</div>
    </div>
    <div style="margin-top:6px;"><span class="label">M/S</span> {company}</div>
  </div>

  <div class="section">
    <div class="meta-grid">
      <div><span class="label">BILLING DATE:</span> {billing_date}</div>
      <div><span class="label">DESCRIPTION:</span> {description}</div>
      <div><span class="label">NO OF PAKG:</span> {no_of_pakg}</div>
      <div><span class="label">CONSIGNEE NAME:</span> {consignee}</div>
      <div><span class="label">MACHINE NUMBER:</span> {machine_no}</div>
      <div><span class="label">MASTER AIRWAY BILL:</span> {master_awb}</div>
      <div><span class="label">HOUSE AIRWAY BILL:</span> {house_awb}</div>
      <div><span class="label">CURRENCY:</span> {currency} <span class="badge">Exch: {exchange_rate}</span></div>
      <div><span class="label">INVOICE VALUE:</span> {invoice_value} {currency}</div>
      <div><span class="label">FREIGHT VALUE:</span> {freight_value} {currency}</div>
      <div><span class="label">INSURANCE:</span> {insurance_pct}%</div>
      <div><span class="label">IMPORT VALUE (PKR):</span> {import_value_pkr}</div>
    </div>
  </div>

  <div class="section">
    <div class="label">Charges</div>
    <table>
      <thead>
        <tr>
          <th style="width:65%;">Description</th>
          <th style="width:35%;">Amount (PKR)</th>
        </tr>
      </thead>
      <tbody>
        {charges_rows}
      </tbody>
    </table>

    <div class="totals">
      <div class="muted">TOTAL BILLING AMOUNT</div>
      <div class="amount">PKR {total_amount}</div>
    </div>
  </div>

  <div class="sub" style="margin-top: 16px;">Printed on {printed_on}</div>
  <div class="no-print" style="margin-top: 8px;">
    <button onclick="window.print()">Print / Save as PDF</button>
  </div>
</body>
</html>
"""

def money(n):
    try:
        q = Decimal(str(n)).quantize(Decimal("1."), rounding=ROUND_HALF_UP)
        return f"{q:,}"
    except Exception:
        try:
            return f"{float(n):,.0f}"
        except Exception:
            return str(n)

def money_dec(n):
    try:
        q = Decimal(str(n)).quantize(Decimal("1.00"), rounding=ROUND_HALF_UP)
        return f"{q:,}"
    except Exception:
        try:
            return f"{float(n):,.2f}"
        except Exception:
            return str(n)

class BillingApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(APP_TITLE)
        self.geometry("1160x720")
        self.minsize(980, 650)

        self.vars = {}
        self._build_form()
        self._build_charges()
        self._build_actions()

        self._bind_live_calcs()

    def _make_var(self, key, default=""):
        v = tk.StringVar(value=default)
        self.vars[key] = v
        return v

    def _row(self, parent, label, key, default="", col=0, span=1, width=28):
        frm = ttk.Frame(parent)
        frm.grid(column=col, row=self._row_i, padx=6, pady=6, sticky="ew", columnspan=span)
        ttk.Label(frm, text=label).pack(anchor="w")
        ent = ttk.Entry(frm, textvariable=self._make_var(key, default), width=width)
        ent.pack(fill="x")
        return ent

    def _build_form(self):
        container = ttk.Frame(self, padding=10)
        container.pack(fill="x")

        header = ttk.Label(container, text="Bill Details", font=("Segoe UI", 14, "bold"))
        header.grid(column=0, row=0, sticky="w", pady=(0,8))

        grid = ttk.Frame(container)
        grid.grid(column=0, row=1, sticky="ew")
        for i in range(6):
            grid.columnconfigure(i, weight=1)

        self._row_i = 0
        self._row(grid, "BILLS NO", "bill_no", "")
        self._row(grid, "FILE NO", "file_no", "", col=1)
        self._row(grid, "M/S (Company)", "company", "KASSIM PVT LIMITED", col=2, span=2)
        self._row_i += 1

        today = datetime.date.today().strftime("%B %d, %Y")
        self._row(grid, "Billing Date", "billing_date", today, col=0)
        self._row(grid, "Description", "description", "GARMENTS ACCESSORIES", col=1, span=2)
        self._row(grid, "No of Packages", "no_of_pakg", "", col=3)
        self._row_i += 1

        self._row(grid, "Consignee Name", "consignee", "", col=0, span=3)
        self._row(grid, "Machine Number", "machine_no", "", col=3)
        self._row_i += 1

        self._row(grid, "Master Airway Bill", "master_awb", "", col=0, span=2)
        self._row(grid, "House Airway Bill", "house_awb", "", col=2, span=2)
        self._row_i += 1

        # money row
        money_frm = ttk.Frame(container)
        money_frm.grid(column=0, row=2, sticky="ew", pady=(8,0))
        for i in range(8):
            money_frm.columnconfigure(i, weight=1)

        ttk.Label(money_frm, text="Currency").grid(row=0, column=0, sticky="w")
        self.currency = ttk.Combobox(money_frm, values=["USD", "EURO"], state="readonly", width=8)
        self.currency.set("USD")
        self.currency.grid(row=1, column=0, sticky="w", padx=(0,12))

        ttk.Label(money_frm, text="Invoice Value").grid(row=0, column=1, sticky="w")
        self.invoice_val = ttk.Entry(money_frm, textvariable=self._make_var("invoice_value", ""), width=16)
        self.invoice_val.grid(row=1, column=1, sticky="w")

        ttk.Label(money_frm, text="Freight Value").grid(row=0, column=2, sticky="w")
        self.freight_val = ttk.Entry(money_frm, textvariable=self._make_var("freight_value", ""), width=16)
        self.freight_val.grid(row=1, column=2, sticky="w", padx=(12,0))

        ttk.Label(money_frm, text="Exchange Rate").grid(row=0, column=3, sticky="w")
        self.ex_rate = ttk.Entry(money_frm, textvariable=self._make_var("exchange_rate", ""), width=16)
        self.ex_rate.grid(row=1, column=3, sticky="w", padx=(12,0))

        ttk.Label(money_frm, text="Insurance %").grid(row=0, column=4, sticky="w")
        self.ins_pct = ttk.Entry(money_frm, textvariable=self._make_var("insurance_pct", "1"), width=10)
        self.ins_pct.grid(row=1, column=4, sticky="w", padx=(12,0))

        ttk.Label(money_frm, text="Import Value (PKR)").grid(row=0, column=5, sticky="w")
        self.import_value_pkr_ent = ttk.Entry(money_frm, textvariable=self._make_var("import_value_pkr", ""), width=20)
        self.import_value_pkr_ent.grid(row=1, column=5, sticky="w", padx=(12,0))

    def _build_charges(self):
        # Charges table
        wrapper = ttk.Frame(self, padding=10)
        wrapper.pack(fill="both", expand=True)
        ttk.Label(wrapper, text="Charges (PKR)", font=("Segoe UI", 13, "bold")).pack(anchor="w")

        btns = ttk.Frame(wrapper)
        btns.pack(anchor="w", pady=(4,6))
        ttk.Button(btns, text="Add Charge", command=self.add_charge).pack(side="left", padx=(0,6))
        ttk.Button(btns, text="Remove Selected", command=self.remove_selected).pack(side="left")

        cols = ("desc", "amount")
        self.tree = ttk.Treeview(wrapper, columns=cols, show="headings", height=10)
        self.tree.heading("desc", text="Description")
        self.tree.heading("amount", text="Amount (PKR)")
        self.tree.column("desc", width=600, anchor="w")
        self.tree.column("amount", width=160, anchor="e")
        self.tree.pack(fill="both", expand=True)

        # Total
        bottom = ttk.Frame(wrapper)
        bottom.pack(fill="x", pady=(8,0))
        ttk.Label(bottom, text="TOTAL BILLING AMOUNT (PKR)", font=("Segoe UI", 11, "bold")).pack(side="left")
        self.total_lbl_var = tk.StringVar(value="0")
        ttk.Label(bottom, textvariable=self.total_lbl_var, font=("Segoe UI", 12)).pack(side="right")

        # Seed with common rows
        for d in [
            "GODOWN RENT",
            "BANK CHARGES",
            "CIVIL AVIATION AUTHORITY",
            "BANK CHARGES",
            "ASST SUP STAMPD UTY",
            "BANK CHARGES",
            "PSW GD FEES",
            "BANK CHARGES",
            "CARTAGE CHARGES",
            "AGENCIES CHARGES",
        ]:
            self.tree.insert("", "end", values=(d, "0"))

    def _build_actions(self):
        actions = ttk.Frame(self, padding=10)
        actions.pack(fill="x")
        ttk.Button(actions, text="Save Bill as HTML", command=self.save_html).pack(side="left")
        ttk.Button(actions, text="New Bill (Clear Form)", command=self.clear_form).pack(side="left", padx=8)
        ttk.Button(actions, text="Help", command=self.show_help).pack(side="right")

    def _bind_live_calcs(self):
        for key in ["invoice_value", "freight_value", "exchange_rate", "insurance_pct"]:
            self.vars[key].trace_add("write", lambda *args: self.recalc_import_value())
        self.tree.bind("<<TreeviewSelect>>", lambda e: None)
        self.tree.bind("<Double-1>", self._edit_cell)

    def _to_decimal(self, s):
        try:
            s = str(s).replace(",", "").strip()
            if not s:
                return Decimal("0")
            return Decimal(s)
        except Exception:
            return Decimal("0")

    def recalc_import_value(self):
        inv = self._to_decimal(self.vars["invoice_value"].get())
        fr = self._to_decimal(self.vars["freight_value"].get())
        ex = self._to_decimal(self.vars["exchange_rate"].get())
        ins = self._to_decimal(self.vars["insurance_pct"].get())
        try:
            base = inv + fr
            factor = Decimal("1") + (ins / Decimal("100"))
            pkr = (base * factor) * ex
            self.vars["import_value_pkr"].set(money(pkr))
        except Exception:
            pass

    def add_charge(self):
        AddDialog(self, self.tree, self.update_total)

    def remove_selected(self):
        for item in self.tree.selection():
            self.tree.delete(item)
        self.update_total()

    def _edit_cell(self, event):
        # Simple editor on double-click
        item_id = self.tree.identify_row(event.y)
        col = self.tree.identify_column(event.x)
        if not item_id or col not in ("#1", "#2"):
            return
        x, y, w, h = self.tree.bbox(item_id, col)
        value = self.tree.set(item_id, col)
        entry = ttk.Entry(self.tree)
        entry.place(x=x, y=y, width=w, height=h)
        entry.insert(0, value)
        entry.focus()

        def save_edit(e=None):
            new_val = entry.get()
            self.tree.set(item_id, col, new_val)
            entry.destroy()
            self.update_total()
        entry.bind("<Return>", save_edit)
        entry.bind("<FocusOut>", lambda e: save_edit())

    def update_total(self):
        total = Decimal("0")
        for iid in self.tree.get_children():
            try:
                amt = self._to_decimal(self.tree.set(iid, "amount"))
                total += amt
            except Exception:
                pass
        self.total_lbl_var.set(money(total))

    def _collect_data(self):
        data = {k: v.get().strip() for k, v in self.vars.items()}
        data["currency"] = self.currency.get()
        # ensure recalculation
        self.update_total()
        return data

    def save_html(self):
        data = self._collect_data()
        # validate basics
        if not data.get("bill_no"):
            messagebox.showerror("Missing", "Please enter BILLS NO")
            return
        if not data.get("file_no"):
            messagebox.showerror("Missing", "Please enter FILE NO")
            return
        if not data.get("company"):
            messagebox.showerror("Missing", "Please enter M/S (Company)")
            return

        charges_rows = []
        total = Decimal("0")
        for iid in self.tree.get_children():
            desc = self.tree.set(iid, "desc")
            amt = self._to_decimal(self.tree.set(iid, "amount"))
            total += amt
            charges_rows.append(f"<tr><td>{desc}</td><td style='text-align:right;'>{money(amt)}</td></tr>")

        html = HTML_TEMPLATE.format(
            css=CSS_STYLE,
            bill_no=data.get("bill_no",""),
            file_no=data.get("file_no",""),
            company=data.get("company",""),
            billing_date=data.get("billing_date",""),
            description=data.get("description",""),
            no_of_pakg=data.get("no_of_pakg",""),
            consignee=data.get("consignee",""),
            machine_no=data.get("machine_no",""),
            master_awb=data.get("master_awb",""),
            house_awb=data.get("house_awb",""),
            currency=data.get("currency","USD"),
            invoice_value=money_dec(data.get("invoice_value","0")),
            freight_value=money_dec(data.get("freight_value","0")),
            exchange_rate=money_dec(data.get("exchange_rate","0")),
            insurance_pct=money_dec(data.get("insurance_pct","0")),
            import_value_pkr=money(data.get("import_value_pkr","0")),
            charges_rows="\n".join(charges_rows) if charges_rows else "<tr><td colspan='2' style='text-align:center;color:#777;'>No charges</td></tr>",
            total_amount=money(total),
            printed_on=datetime.datetime.now().strftime("%B %d, %Y %I:%M %p"),
        )

        default_name = f"Bill_{data.get('bill_no','')}.html".replace(" ", "_")
        try:
            # Ask user where to save
            fp = filedialog.asksaveasfilename(
                title="Save Bill as HTML",
                defaultextension=".html",
                filetypes=[("HTML Files","*.html")],
                initialfile=default_name
            )
        except tk.TclError:
            # In environments without GUI save dialog, fallback to current dir
            fp = os.path.abspath(default_name)

        if not fp:
            return

        with open(fp, "w", encoding="utf-8") as f:
            f.write(html)

        try:
            webbrowser.open_new_tab(f"file://{os.path.abspath(fp)}")
        except Exception:
            pass

        messagebox.showinfo("Saved", f"Bill saved:\n{fp}")

    def clear_form(self):
        for k, var in self.vars.items():
            if k == "insurance_pct":
                var.set("1")
            elif k in ("company", "description"):
                # keep defaults
                pass
            else:
                var.set("")
        self.currency.set("USD")

        # clear charges
        for iid in self.tree.get_children():
            self.tree.delete(iid)
        # re-seed common rows
        for d in [
            "GODOWN RENT",
            "BANK CHARGES",
            "CIVIL AVIATION AUTHORITY",
            "BANK CHARGES",
            "ASST SUP STAMPD UTY",
            "BANK CHARGES",
            "PSW GD FEES",
            "BANK CHARGES",
            "CARTAGE CHARGES",
            "AGENCIES CHARGES",
        ]:
            self.tree.insert("", "end", values=(d, "0"))
        self.update_total()

    def show_help(self):
        help_txt = (
            "How to use:\n"
            "1) Fill bill details at the top (BILLS NO, FILE NO, etc.).\n"
            "2) Enter money values: Invoice, Freight, Exchange Rate, Insurance %.\n"
            "   → Import Value (PKR) auto-calculates as (Invoice + Freight) × (1 + Insurance%) × Exchange Rate.\n"
            "3) Add/Edit charges in the table. Double-click a cell to edit.\n"
            "4) Check the Total Billing Amount at the bottom.\n"
            "5) Click 'Save Bill as HTML' to generate a printable bill.\n"
            "   • The HTML opens in your browser: press Ctrl+P to print or Save as PDF.\n"
            "6) Click 'New Bill' to clear and start again.\n\n"
            "Tip: You can change currency between USD/EURO. Exchange rate is applied to both.\n"
        )
        messagebox.showinfo("Help", help_txt)


class AddDialog(tk.Toplevel):
    def __init__(self, parent, tree, on_save_callback):
        super().__init__(parent)
        self.title("Add Charge")
        self.tree = tree
        self.on_save_callback = on_save_callback
        self.resizable(False, False)
        ttk.Label(self, text="Description").grid(row=0, column=0, sticky="w", padx=8, pady=(8,0))
        self.desc = ttk.Entry(self, width=48)
        self.desc.grid(row=1, column=0, padx=8, pady=(0,8))

        ttk.Label(self, text="Amount (PKR)").grid(row=2, column=0, sticky="w", padx=8, pady=(0,0))
        self.amt = ttk.Entry(self, width=24)
        self.amt.grid(row=3, column=0, padx=8, pady=(0,8))

        frm = ttk.Frame(self)
        frm.grid(row=4, column=0, sticky="e", padx=8, pady=8)
        ttk.Button(frm, text="Cancel", command=self.destroy).pack(side="right", padx=(0,6))
        ttk.Button(frm, text="Add", command=self._add).pack(side="right")

        self.bind("<Return>", lambda e: self._add())

        self.transient(parent)
        self.grab_set()
        self.desc.focus()

    def _add(self):
        d = self.desc.get().strip()
        a = self.amt.get().strip() or "0"
        if not d:
            messagebox.showerror("Missing", "Enter description")
            return
        self.tree.insert("", "end", values=(d, a))
        if callable(self.on_save_callback):
            self.on_save_callback()
        self.destroy()


def main():
    app = BillingApp()
    app.update_total()
    app.mainloop()


if __name__ == "__main__":
    main()
