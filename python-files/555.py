import random
import time
import sys
from typing import Dict


class RouletteSimulator:
    def __init__(self):
        self.numbers = list(range(0, 37))  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ (0-36)
        self.red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
        self.black_numbers = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
        self.balance = 1000  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö (1000‚ÇΩ)
        self.min_bet = 10  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10‚ÇΩ
        self.max_bet = 500  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 500‚ÇΩ
        self.exchange_rate = 1  # –ö—É—Ä—Å —Ä—É–±–ª—è

    def animate_text(self, text: str, delay: float = 0.03):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        for char in text:
            print(char, end='', flush=True)
            time.sleep(delay)
        print()

    def spinning_animation(self, duration: int = 3):
        """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏"""
        symbols = ["‚óê", "‚óì", "‚óë", "‚óí"]
        start_time = time.time()

        print("\nüé° ", end="")
        while time.time() - start_time < duration:
            for symbol in symbols:
                print(f"\rüé° –†—É–ª–µ—Ç–∫–∞ –≤—Ä–∞—â–∞–µ—Ç—Å—è... {symbol}", end="", flush=True)
                time.sleep(0.1)
        print()

    def countdown_animation(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞"""
        for i in range(3, 0, -1):
            print(f"\r‚è±Ô∏è  {i}...", end="", flush=True)
            time.sleep(1)
        print("\rüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç! ", end="", flush=True)
        time.sleep(0.5)

    def spin_wheel(self) -> int:
        """–í—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ –∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞"""
        return random.choice(self.numbers)

    def get_color(self, number: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞"""
        if number == 0:
            return '–∑–µ–ª–µ–Ω—ã–π'
        elif number in self.red_numbers:
            return '–∫—Ä–∞—Å–Ω—ã–π'
        else:
            return '—á–µ—Ä–Ω—ã–π'

    def format_money(self, amount: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
        return f"{amount:,}‚ÇΩ".replace(",", " ")

    def simple_betting(self, bet_amount: int, bet_type: str, bet_value: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        if bet_amount > self.balance:
            self.animate_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", 0.01)
            return False

        if bet_amount < self.min_bet:
            self.animate_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.format_money(self.min_bet)}!", 0.01)
            return False

        if bet_amount > self.max_bet:
            self.animate_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.format_money(self.max_bet)}!", 0.01)
            return False

        self.balance -= bet_amount
        print(f"\nüé≤ –°—Ç–∞–≤–∫–∞: {self.format_money(bet_amount)} –Ω–∞ {bet_type}: {bet_value}")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏–Ω–æ–º: {self.format_money(self.balance + bet_amount)}")

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        self.spinning_animation()
        self.countdown_animation()

        # –í—Ä–∞—â–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
        result = self.spin_wheel()
        result_color = self.get_color(result)

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"–í—ã–ø–∞–ª–æ: ", end="", flush=True)
        time.sleep(0.5)

        if result_color == '–∫—Ä–∞—Å–Ω—ã–π':
            print(f"üî¥ {result} ({result_color})")
        elif result_color == '—á–µ—Ä–Ω—ã–π':
            print(f"‚ö´ {result} ({result_color})")
        else:
            print(f"üü¢ {result} ({result_color})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win = False
        win_multiplier = 0

        if bet_type == '—Ü–≤–µ—Ç':
            if bet_value == result_color:
                win = True
                win_multiplier = 2
        elif bet_type == '—á–∏—Å–ª–æ':
            if str(result) == bet_value:
                win = True
                win_multiplier = 36
        elif bet_type == '—á–µ—Ç/–Ω–µ—á–µ—Ç':
            if result != 0:
                if (bet_value == '—á–µ—Ç' and result % 2 == 0) or (bet_value == '–Ω–µ—á–µ—Ç' and result % 2 == 1):
                    win = True
                    win_multiplier = 2

        # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        time.sleep(1)
        if win:
            win_amount = bet_amount * win_multiplier
            self.balance += win_amount
            print("‚ú®" * 30)
            self.animate_text(f"üéâ –í–´–ò–ì–†–´–®! +{self.format_money(win_amount)}", 0.02)
            print("‚ú®" * 30)
            print(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.format_money(self.balance)}")
        else:
            print("üí•" * 20)
            self.animate_text("üíî –ü—Ä–æ–∏–≥—Ä—ã—à", 0.05)
            print("üí•" * 20)
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {self.format_money(self.balance)}")

        return win

    def display_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã"""
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´")
        print("=" * 60)
        profit_loss = self.balance - 1000  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        percent_change = ((self.balance - 1000) / 1000 * 100)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.format_money(self.balance)}")

        if profit_loss > 0:
            print(f"üìà –ü—Ä–∏–±—ã–ª—å: +{self.format_money(profit_loss)}")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: +{percent_change:.1f}%")
        else:
            print(f"üìâ –£–±—ã—Ç–æ–∫: {self.format_money(profit_loss)}")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É–±—ã—Ç–∫–∞: {percent_change:.1f}%")


def main():
    simulator = RouletteSimulator()

    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    print("üé∞" * 20)
    simulator.animate_text("üé∞ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–£–°–°–ö–£–Æ –†–£–õ–ï–¢–ö–£! üé∞", 0.03)
    print("üé∞" * 20)
    print(f"üí∞ –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {simulator.format_money(simulator.balance)}")
    print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {simulator.format_money(simulator.min_bet)}")
    print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {simulator.format_money(simulator.max_bet)}")

    while simulator.balance > 0:
        print("\n" + "‚ïê" * 40)
        simulator.animate_text("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 0.02)
        print("‚ïê" * 40)
        print("1. üé® –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ü–≤–µ—Ç")
        print("2. üî¢ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —á–∏—Å–ª–æ")
        print("3. üîÑ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —á–µ—Ç/–Ω–µ—á–µ—Ç")
        print("4. üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        print("5. üö™ –í—ã–π—Ç–∏")
        print("‚ïê" * 40)

        choice = input("üéØ –í–∞—à –≤—ã–±–æ—Ä (1-5): ")

        if choice == '1':
            color = input("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π/—á–µ—Ä–Ω—ã–π): ").lower()
            if color in ['–∫—Ä–∞—Å–Ω—ã–π', '—á–µ—Ä–Ω—ã–π']:
                try:
                    amount = int(input("üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: "))
                    simulator.simple_betting(amount, '—Ü–≤–µ—Ç', color)
                except ValueError:
                    simulator.animate_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", 0.01)
            else:
                simulator.animate_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞!", 0.01)

        elif choice == '2':
            number = input("üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ (0-36): ")
            if number.isdigit() and 0 <= int(number) <= 36:
                try:
                    amount = int(input("üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: "))
                    simulator.simple_betting(amount, '—á–∏—Å–ª–æ', number)
                except ValueError:
                    simulator.animate_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", 0.01)
            else:
                simulator.animate_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 0 –¥–æ 36", 0.01)

        elif choice == '3':
            eo = input("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ (—á–µ—Ç/–Ω–µ—á–µ—Ç): ").lower()
            if eo in ['—á–µ—Ç', '–Ω–µ—á–µ—Ç']:
                try:
                    amount = int(input("üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: "))
                    simulator.simple_betting(amount, '—á–µ—Ç/–Ω–µ—á–µ—Ç', eo)
                except ValueError:
                    simulator.animate_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", 0.01)
            else:
                simulator.animate_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ '—á–µ—Ç' –∏–ª–∏ '–Ω–µ—á–µ—Ç'", 0.01)

        elif choice == '4':
            print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {simulator.format_money(simulator.balance)}")
            time.sleep(1)

        elif choice == '5':
            simulator.animate_text("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!", 0.03)
            break

        else:
            simulator.animate_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5", 0.01)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–µ–Ω—å–≥–∏
        if simulator.balance < simulator.min_bet:
            print("\n" + "üí∏" * 20)
            simulator.animate_text("üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–≥—Ä—ã!", 0.03)
            print("üí∏" * 20)
            break

        time.sleep(1)

    simulator.display_stats()

    print("\n" + "‚≠ê" * 30)
    if simulator.balance > 1000:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        simulator.animate_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤ –ø–ª—é—Å–µ! üéâ", 0.03)
    elif simulator.balance == 1000:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        simulator.animate_text("‚ûñ –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏ —Å–≤–æ–∏—Ö! ‚ûñ", 0.03)
    else:
        simulator.animate_text("üí∏ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤ –º–∏–Ω—É—Å–µ. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üí∏", 0.03)
    print("‚≠ê" * 30)


if __name__ == "__main__":
    main()