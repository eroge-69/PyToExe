#!/usr/bin/env python3
"""
Minecraft Server Manager 4.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""
import os
import sys
import json
import time
import webbrowser
import subprocess
import threading
import pyperclip
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext, simpledialog
from pathlib import Path
import requests
import re
from datetime import datetime
import shutil
import zipfile
import base64
import io
from PIL import Image, ImageTk
import platform

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psutil –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("–ú–æ–¥—É–ª—å 'psutil' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

# --- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ ---
COLORS = {
    "primary": "#4a90e2",
    "primary-dark": "#357abd",
    "success": "#5cb85c",
    "danger": "#d9534f",
    "warning": "#f0ad4e",
    "info": "#5bc0de",
    "dark": "#2c3e50",
    "light": "#ecf0f1",
    "background": "#f5f7fa",
    "card": "#ffffff",
    "border": "#d1d8e0"
}

# --- –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤ ---
PLUGINS_DB = [
    {"name": "EssentialsX", "version": "2.19.7", "downloads": "5,000,000+", "rating": "4.8/5.0",
     "compatible": "1.16.5 - 1.20.1", "description": "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
     "url": "https://www.spigotmc.org/resources/essentialsx.9089/", "features": ["–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–î–æ–º–∞"], "dependencies": ["Vault"]},
    {"name": "WorldEdit", "version": "7.2.10", "downloads": "5,200,000+", "rating": "4.9/5.0",
     "compatible": "1.16.5 - 1.20.1", "description": "–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏—Ä–∞",
     "url": "https://enginehub.org/worldedit/", "features": ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤", "–°—Ö–µ–º—ã"], "dependencies": []},
    {"name": "Vault", "version": "1.7.3", "downloads": "10,000,000+", "rating": "4.7/5.0",
     "compatible": "1.16.5 - 1.20.1", "description": "API –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏, —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø–µ—Ä–º–∏—à–µ–Ω–æ–≤",
     "url": "https://www.spigotmc.org/resources/vault.34315/", "features": ["API"], "dependencies": []},
    {"name": "LuckPerms", "version": "5.4.20", "downloads": "8,000,000+", "rating": "4.9/5.0",
     "compatible": "1.16.5 - 1.20.1", "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–ª–∞–≥–∏–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏",
     "url": "https://luckperms.net/", "features": ["–ì—Ä—É–ø–ø—ã", "–ü—Ä–∞–≤–∞", "–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã"], "dependencies": []},
    {"name": "Multiverse-Core", "version": "4.3.1", "downloads": "3,500,000+", "rating": "4.6/5.0",
     "compatible": "1.16.5 - 1.20.1", "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∏—Ä–∞–º–∏",
     "url": "https://dev.bukkit.org/projects/multiverse-core", "features": ["–ú–∏—Ä—ã", "–ü–æ—Ä—Ç–∞–ª—ã"], "dependencies": []},
]

# --- –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
TASKS_DB = [
    {"time": "04:00", "task": "stop", "enabled": True},
    {"time": "04:05", "task": "start", "enabled": True},
    {"time": "12:00", "task": "say –î–Ω–µ–≤–Ω–æ–π –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä–∞", "enabled": False},
    {"time": "12:01", "task": "save-all", "enabled": False},
]

# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π Minecraft –∏ Java ---
JAVA_VERSIONS_FOR_MINECRAFT = {
    "1.20.1": "17",  # 1.20.1 –∏ –≤—ã—à–µ —Ç—Ä–µ–±—É—é—Ç Java 17+
    "1.20": "17",
    "1.19.4": "17",
    "1.19.3": "17",
    "1.19.2": "17",
    "1.19.1": "17",
    "1.19": "17",
    "1.18.2": "17",
    "1.18.1": "17",
    "1.18": "17",
    "1.17.1": "17",
    "1.17": "17",
    "1.16.5": "8",   # 1.16.5 –∏ –Ω–∏–∂–µ —Ç—Ä–µ–±—É—é—Ç Java 8
    "1.16.4": "8",
    "1.16.3": "8",
    "1.16.2": "8",
    "1.16.1": "8",
    "1.16": "8",
    "1.15.2": "8",
    "1.15.1": "8",
    "1.15": "8",
    "1.14.4": "8",
    "1.14.3": "8",
    "1.14.2": "8",
    "1.14.1": "8",
    "1.14": "8",
    "1.13.2": "8",
    "1.13.1": "8",
    "1.13": "8",
    "1.12.2": "8",
    "1.12.1": "8",
    "1.12": "8",
    "1.11.2": "8",
    "1.11.1": "8",
    "1.11": "8",
    "1.10.2": "8",
    "1.10.1": "8",
    "1.10": "8",
    "1.9.4": "8",
    "1.9.3": "8",
    "1.9.2": "8",
    "1.9.1": "8",
    "1.9": "8",
    "1.8.9": "8",
    "1.8.8": "8",
    "1.8.7": "8",
    "1.8.6": "8",
    "1.8.5": "8",
    "1.8.4": "8",
    "1.8.3": "8",
    "1.8.2": "8",
    "1.8.1": "8",
    "1.8": "8",
    "1.7.10": "8",
    "1.7.9": "8",
    "1.7.8": "8",
    "1.7.7": "8",
    "1.7.6": "8",
    "1.7.5": "8",
    "1.7.4": "8",
    "1.7.3": "8",
    "1.7.2": "8",
    "1.7.1": "8",
    "1.7": "8",
    "1.6.4": "8",
    "1.6.3": "8",
    "1.6.2": "8",
    "1.6.1": "8",
    "1.6": "8",
    "1.5.2": "8",
    "1.5.1": "8",
    "1.5": "8",
    "1.4.7": "8",
    "1.4.6": "8",
    "1.4.5": "8",
    "1.4.4": "8",
    "1.4.3": "8",
    "1.4.2": "8",
    "1.4.1": "8",
    "1.4": "8",
    "1.3.2": "8",
    "1.3.1": "8",
    "1.3": "8",
    "1.2.5": "8",
    "1.2.4": "8",
    "1.2.3": "8",
    "1.2.2": "8",
    "1.2.1": "8",
    "1.2": "8",
    "1.1": "8",
    "1.0": "8",
}

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
class MinecraftServerManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Minecraft Server Manager 4.0")
        self.root.geometry("1200x800")
        self.root.configure(bg=COLORS["background"])
        self.server_process = None
        self.logs = []
        self.minecraft_versions = []
        self.forge_versions = {}
        self.paper_versions = {}
        self.fabric_versions = {}
        self.java_versions = ["8", "11", "17", "21"] # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏ Java
        self.java_paths = {} # –ü—É—Ç–∏ –∫ —Ä–∞–∑–Ω—ã–º –≤–µ—Ä—Å–∏—è–º Java
        self.is_running = False
        self.online_players = []

        self.setup_variables()
        self.setup_styles()
        self.create_widgets()
        self.load_versions() # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_server_types()
        self.check_java()
        self.refresh_diagnostics()

    def setup_variables(self):
        self.server_path = tk.StringVar(value=os.getcwd())
        self.minecraft_version = tk.StringVar(value="")
        self.server_type = tk.StringVar(value="Paper")
        self.memory = tk.StringVar(value="4")
        self.status_var = tk.StringVar(value="–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.selected_plugin = tk.StringVar()
        self.selected_task = tk.StringVar()
        self.java_version = tk.StringVar(value="17") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Java 17
        # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_properties = {}

    def setup_styles(self):
        style = ttk.Style()
        style.configure("Primary.TButton", background=COLORS["primary"], foreground="white")
        style.map("Primary.TButton", background=[('active', COLORS["primary-dark"])])
        style.configure("Success.TButton", background=COLORS["success"], foreground="white")
        style.map("Success.TButton", background=[('active', '#449d44')])
        style.configure("Danger.TButton", background=COLORS["danger"], foreground="white")
        style.map("Danger.TButton", background=[('active', '#c9302c')])
        style.configure("Warning.TLabel", foreground=COLORS["warning"])
        style.configure("Success.TLabel", foreground=COLORS["success"])
        style.configure("Danger.TLabel", foreground=COLORS["danger"])
        style.configure("Info.TLabel", foreground=COLORS["info"])

    def create_widgets(self):
        # --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ---
        top_frame = tk.Frame(self.root, bg=COLORS["dark"], height=60)
        top_frame.pack(fill="x")
        top_frame.pack_propagate(False)

        title_label = tk.Label(top_frame, text="üéÆ Minecraft Server Manager 4.0", font=("Arial", 16, "bold"),
                               fg=COLORS["light"], bg=COLORS["dark"])
        title_label.pack(side="left", padx=20, pady=10)

        status_label = tk.Label(top_frame, textvariable=self.status_var, font=("Arial", 10),
                                fg=COLORS["warning"], bg=COLORS["dark"])
        status_label.pack(side="right", padx=20, pady=10)

        # --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ---
        main_paned = tk.PanedWindow(self.root, orient=tk.HORIZONTAL, bg=COLORS["background"], sashwidth=5)
        main_paned.pack(fill="both", expand=True, padx=10, pady=10)

        # --- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–ù–∞—Å—Ç—Ä–æ–π–∫–∏) ---
        settings_frame = tk.Frame(main_paned, bg=COLORS["card"], relief="raised", bd=1)
        main_paned.add(settings_frame)

        # --- –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É ---
        path_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        path_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(path_frame, text="üìÅ –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É:", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        path_entry_frame = tk.Frame(path_frame, bg=COLORS["card"])
        path_entry_frame.pack(fill="x", pady=5)
        tk.Entry(path_entry_frame, textvariable=self.server_path, state="readonly").pack(side="left", fill="x", expand=True)
        tk.Button(path_entry_frame, text="–û–±–∑–æ—Ä", command=self.browse_path, bg=COLORS["primary"], fg="white").pack(side="right", padx=(5, 0))

        # --- –í–µ—Ä—Å–∏—è Minecraft ---
        version_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        version_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(version_frame, text="‚õè –í–µ—Ä—Å–∏—è Minecraft:", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        version_combo_frame = tk.Frame(version_frame, bg=COLORS["card"])
        version_combo_frame.pack(fill="x", pady=5)
        self.version_combo = ttk.Combobox(version_combo_frame, textvariable=self.minecraft_version,
                                          values=[], state="readonly")
        self.version_combo.pack(side="left", fill="x", expand=True)
        self.version_combo.bind("<<ComboboxSelected>>", lambda e: self.update_server_types())

        # --- –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ ---
        type_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        type_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(type_frame, text="üîß –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        type_combo_frame = tk.Frame(type_frame, bg=COLORS["card"])
        type_combo_frame.pack(fill="x", pady=5)
        self.type_combo = ttk.Combobox(type_combo_frame, textvariable=self.server_type, state="readonly")
        self.type_combo.pack(side="left", fill="x", expand=True)

        # --- –í–µ—Ä—Å–∏—è Java ---
        java_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        java_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(java_frame, text="‚òï –í–µ—Ä—Å–∏—è Java:", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        java_combo_frame = tk.Frame(java_frame, bg=COLORS["card"])
        java_combo_frame.pack(fill="x", pady=5)
        self.java_combo = ttk.Combobox(java_combo_frame, textvariable=self.java_version, values=self.java_versions, state="readonly")
        self.java_combo.pack(side="left", fill="x", expand=True)
        self.java_status = tk.Label(java_combo_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞...", bg=COLORS["card"], fg=COLORS["info"])
        self.java_status.pack(side="left", padx=5)

        # --- –ü–∞–º—è—Ç—å ---
        memory_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        memory_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(memory_frame, text="üíæ –ü–∞–º—è—Ç—å (–ì–ë):", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        memory_combo_frame = tk.Frame(memory_frame, bg=COLORS["card"])
        memory_combo_frame.pack(fill="x", pady=5)
        ram_options = [str(i) for i in range(1, int(self.get_total_ram_gb()) + 1)]
        self.memory_combo = ttk.Combobox(memory_combo_frame, textvariable=self.memory, values=ram_options, state="readonly")
        self.memory_combo.pack(side="left", fill="x", expand=True)

        # --- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        buttons_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        buttons_frame.pack(fill="x", padx=15, pady=10)
        btn_width = 15
        tk.Button(buttons_frame, text="üî® –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä", command=self.create_server_thread,
                  bg=COLORS["success"], fg="white", width=btn_width).pack(side="left", padx=2)
        self.start_btn = tk.Button(buttons_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start_server,
                                   bg=COLORS["primary"], fg="white", width=btn_width)
        self.start_btn.pack(side="left", padx=2)
        self.stop_btn = tk.Button(buttons_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_server,
                                  bg=COLORS["danger"], fg="white", width=btn_width, state="disabled")
        self.stop_btn.pack(side="left", padx=2)

        # --- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
        quick_actions_frame = tk.Frame(settings_frame, bg=COLORS["card"])
        quick_actions_frame.pack(fill="x", padx=15, pady=10)
        tk.Label(quick_actions_frame, text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", bg=COLORS["card"], font=("Arial", 10, "bold")).pack(anchor="w")
        actions_frame = tk.Frame(quick_actions_frame, bg=COLORS["card"])
        actions_frame.pack(fill="x", pady=5)
        tk.Button(actions_frame, text="üìÇ Mods", command=self.open_mods_folder, bg=COLORS["info"], fg="white").pack(side="left", padx=2)
        tk.Button(actions_frame, text="üìÅ Data Packs", command=self.open_datapacks_folder, bg=COLORS["warning"], fg="white").pack(side="left", padx=2)
        tk.Button(actions_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_server_properties, bg=COLORS["warning"], fg="white").pack(side="left", padx=2)
        tk.Button(actions_frame, text="üì¶ –ë—ç–∫–∞–ø—ã", command=self.manage_backups, bg=COLORS["primary"], fg="white").pack(side="left", padx=2)
        tk.Button(actions_frame, text="üß© –ü–ª–∞–≥–∏–Ω—ã", command=self.open_plugin_manager, bg=COLORS["success"], fg="white").pack(side="left", padx=2)
        tk.Button(actions_frame, text="üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", command=self.open_scheduler, bg=COLORS["info"], fg="white").pack(side="left", padx=2)

        # --- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–õ–æ–≥–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ---
        right_frame = tk.Frame(main_paned, bg=COLORS["background"])
        main_paned.add(right_frame)

        # --- –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ ---
        logs_label = tk.Label(right_frame, text="üìú –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞", bg=COLORS["background"], font=("Arial", 12, "bold"))
        logs_label.pack(anchor="w", padx=5, pady=(0, 5))
        
        # --- –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ ---
        filter_frame = tk.Frame(right_frame, bg=COLORS["background"])
        filter_frame.pack(fill="x", padx=5, pady=2)
        tk.Label(filter_frame, text="üîç –§–∏–ª—å—Ç—Ä:", bg=COLORS["background"]).pack(side="left")
        self.log_filter_var = tk.StringVar()
        self.log_filter_entry = tk.Entry(filter_frame, textvariable=self.log_filter_var)
        self.log_filter_entry.pack(side="left", fill="x", expand=True, padx=5)
        self.log_filter_entry.bind("<Return>", self.filter_logs)
        tk.Button(filter_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_logs, bg=COLORS["warning"], fg="white").pack(side="right", padx=2)
        tk.Button(filter_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_logs, bg=COLORS["primary"], fg="white").pack(side="right", padx=2)

        self.log_text = scrolledtext.ScrolledText(right_frame, state='disabled', height=15, bg="#2c3e50", fg="#ecf0f1")
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)

        # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
        diag_frame = tk.LabelFrame(right_frame, text="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", bg=COLORS["card"], fg=COLORS["dark"])
        diag_frame.pack(fill="x", padx=5, pady=10)

        self.diag_label = tk.Label(diag_frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞...", bg=COLORS["card"], fg=COLORS["warning"])
        self.diag_label.pack(anchor="w", padx=10, pady=5)

        conn_frame = tk.Frame(diag_frame, bg=COLORS["card"])
        conn_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(conn_frame, text="üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP:", bg=COLORS["card"]).pack(side="left")
        self.local_ip = tk.Label(conn_frame, text="...", bg=COLORS["card"], fg=COLORS["info"])
        self.local_ip.pack(side="left", padx=5)
        tk.Label(conn_frame, text=" | –ü—É–±–ª–∏—á–Ω—ã–π IP:", bg=COLORS["card"]).pack(side="left")
        self.public_ip = tk.Label(conn_frame, text="...", bg=COLORS["card"], fg=COLORS["info"])
        self.public_ip.pack(side="left", padx=5)

        # --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
        res_frame = tk.Frame(diag_frame, bg=COLORS["card"])
        res_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(res_frame, text="üñ• CPU:", bg=COLORS["card"]).pack(side="left")
        self.cpu_usage = tk.Label(res_frame, text="...", bg=COLORS["card"], fg=COLORS["info"])
        self.cpu_usage.pack(side="left", padx=5)
        tk.Label(res_frame, text=" | üß† RAM:", bg=COLORS["card"]).pack(side="left")
        self.ram_usage = tk.Label(res_frame, text="...", bg=COLORS["card"], fg=COLORS["info"])
        self.ram_usage.pack(side="left", padx=5)
        
        # --- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ---
        cmd_frame = tk.Frame(right_frame, bg=COLORS["background"])
        cmd_frame.pack(fill="x", padx=5, pady=5)
        tk.Label(cmd_frame, text="‚å® –ö–æ–º–∞–Ω–¥–∞:", bg=COLORS["background"]).pack(side="left")
        self.cmd_entry = tk.Entry(cmd_frame)
        self.cmd_entry.pack(side="left", fill="x", expand=True, padx=5)
        self.cmd_entry.bind("<Return>", self.send_command)
        tk.Button(cmd_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_command, bg=COLORS["primary"], fg="white").pack(side="right")

        # --- –í–∫–ª–∞–¥–∫–∏ ---
        self.notebook = ttk.Notebook(right_frame)
        self.notebook.pack(fill="both", expand=True, padx=5, pady=5)

        # --- –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞" ---
        self.props_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.props_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        self.create_properties_widgets()

        # --- –í–∫–ª–∞–¥–∫–∞ "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤" ---
        self.plugins_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.plugins_frame, text="üß© –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤")
        self.create_plugin_widgets()

        # --- –í–∫–ª–∞–¥–∫–∞ "–ë—ç–∫–∞–ø—ã" ---
        self.backups_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.backups_frame, text="üì¶ –ë—ç–∫–∞–ø—ã")
        self.create_backup_widgets()
        
        # --- –í–∫–ª–∞–¥–∫–∞ "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫" ---
        self.scheduler_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.scheduler_frame, text="üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        self.create_scheduler_widgets()
        
        # --- –í–∫–ª–∞–¥–∫–∞ "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è" ---
        self.optimization_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.optimization_frame, text="üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        self.create_optimization_widgets()

    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        self.logs.append(formatted_message)
        self.log_text.config(state='normal')
        self.log_text.insert(tk.END, formatted_message + "\n")
        self.log_text.config(state='disabled')
        self.log_text.see(tk.END)

    def get_total_ram_gb(self):
        try:
            if PSUTIL_AVAILABLE:
                return int(psutil.virtual_memory().total / (1024**3))
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                import multiprocessing
                cores = multiprocessing.cpu_count()
                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –Ω–∞ —è–¥—Ä–æ ~2–ì–ë (–æ—á–µ–Ω—å –≥—Ä—É–±–æ)
                estimated_gb = max(4, cores * 2)
                return estimated_gb
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–ó–£: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –ì–ë.")
            return 8

    def browse_path(self):
        path = filedialog.askdirectory(initialdir=self.server_path.get())
        if path:
            self.server_path.set(path)

    def load_versions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Minecraft, Forge –∏ Fabric"""
        self.log("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π...")
        # –í–µ—Ä—Å–∏–∏ Minecraft
        try:
            response = requests.get("https://launchermeta.mojang.com/mc/game/version_manifest.json")
            manifest = response.json()
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
            all_versions = [v["id"] for v in manifest["versions"] if v["type"] == "release"]
            self.minecraft_versions = sorted(all_versions, key=lambda x: tuple(map(int, x.split('.'))) if '.' in x else x)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –≤ —Å–ø–∏—Å–∫–µ
            if self.minecraft_versions:
                self.minecraft_version.set(self.minecraft_versions[-1]) # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (–Ω–æ–≤—É—é)
            self.log("–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π Minecraft –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.version_combo["values"] = self.minecraft_versions
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π Minecraft: {str(e)}")
            self.minecraft_versions = ["1.20.1", "1.19.4", "1.18.2", "1.17.1", "1.16.5"]
            self.version_combo["values"] = self.minecraft_versions
            self.minecraft_version.set(self.minecraft_versions[0])

        # –í–µ—Ä—Å–∏–∏ Paper (–ª—É—á—à–µ –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤)
        try:
            response = requests.get("https://papermc.io/api/v2/projects/paper")
            data = response.json()
            self.paper_versions = {}
            for version in data["versions"][-5:]: # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–µ—Ä—Å–∏–π
                response = requests.get(f"https://papermc.io/api/v2/projects/paper/versions/{version}")
                builds = response.json()["builds"]
                if builds:
                    self.paper_versions[version] = f"paper-{version}-{builds[-1]}"
            self.log("–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π Paper –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π Paper: {str(e)}")
            self.paper_versions = {
                "1.20.1": "paper-1.20.1-196",
                "1.19.4": "paper-1.19.4-550",
                "1.18.2": "paper-1.18.2-387",
                "1.17.1": "paper-1.17.1-411",
                "1.16.5": "paper-1.16.5-804"
            }

        # –í–µ—Ä—Å–∏–∏ Forge
        try:
            response = requests.get("https://files.minecraftforge.net/net/minecraftforge/forge/index.json")
            data = response.json()
            self.forge_versions = {}
            for version, builds in data["builds"].items():
                if builds:
                    self.forge_versions[version] = builds[-1]["version"]
            self.log("–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π Forge –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π Forge: {str(e)}")
            self.forge_versions = {
                "1.20.1": "1.20.1-47.2.0",
                "1.19.4": "1.19.4-45.2.0",
                "1.18.2": "1.18.2-40.2.17",
                "1.16.5": "1.16.5-36.2.42"
            }

        # –í–µ—Ä—Å–∏–∏ Fabric
        try:
            response = requests.get("https://meta.fabricmc.net/v2/versions/loader")
            self.fabric_versions = {item["loader"]["version"]: item["loader"]["version"]
                                    for item in response.json()[:10]}
            self.log("–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π Fabric –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–π Fabric: {str(e)}")
            self.fabric_versions = {
                "0.15.11": "0.15.11",
                "0.15.10": "0.15.10",
                "0.15.9": "0.15.9",
                "0.14.23": "0.14.23",
                "0.14.22": "0.14.22"
            }

        self.update_server_types()

    def update_server_types(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        version = self.minecraft_version.get()
        types = ["Paper"] # Paper –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
        if version in self.forge_versions:
            types.append("Forge")
        if version in self.fabric_versions:
            types.append("Fabric")
        self.type_combo["values"] = types
        if self.server_type.get() not in types:
            self.server_type.set(types[0] if types else "Paper")
        self.update_memory_limits()

    def update_memory_limits(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –û–ó–£"""
        total_ram = self.get_total_ram_gb()
        max_usable = max(1, int(total_ram * 0.7)) # 70% –æ—Ç –æ–±—â–µ–π –ø–∞–º—è—Ç–∏
        ram_options = [str(i) for i in range(1, max_usable + 1)]
        self.memory_combo['values'] = ram_options
        if int(self.memory.get()) > max_usable:
            self.memory.set(str(max_usable))

    def check_java(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Java"""
        self.java_paths = {}
        java_versions_found = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        java_paths = []
        if os.name == 'nt':  # Windows
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Java –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            java_paths.extend([
                r"C:\Program Files\Java\jdk-17\bin\java.exe",
                r"C:\Program Files\Java\jdk-11\bin\java.exe",
                r"C:\Program Files\Java\jdk-8\bin\java.exe",
                r"C:\Program Files\Java\jre-17\bin\java.exe",
                r"C:\Program Files\Java\jre-11\bin\java.exe",
                r"C:\Program Files\Java\jre-8\bin\java.exe",
                r"C:\Program Files\Eclipse Adoptium\jdk-17.0.11.1_windows-x64\bin\java.exe",
                r"C:\Program Files\Eclipse Adoptium\jdk-11.0.20.1_1_windows-x64\bin\java.exe",
                r"C:\Program Files\Eclipse Adoptium\jdk-8.0.402.6-hotspot\bin\java.exe",
            ])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è JAVA_HOME
            java_home = os.environ.get("JAVA_HOME")
            if java_home:
                java_paths.append(os.path.join(java_home, "bin", "java.exe"))
        else:  # Unix-like (Linux, macOS)
            java_paths.extend([
                "/usr/lib/jvm/java-17/bin/java",
                "/usr/lib/jvm/java-11/bin/java",
                "/usr/lib/jvm/java-8/bin/java",
                "/usr/lib/jvm/default-java/bin/java",
                "/opt/java/openjdk/bin/java",
                "/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java",
                "/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/bin/java",
                "/Library/Java/JavaVirtualMachines/jdk-8.jdk/Contents/Home/bin/java",
            ])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è JAVA_HOME
            java_home = os.environ.get("JAVA_HOME")
            if java_home:
                java_paths.append(os.path.join(java_home, "bin", "java"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Java –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç—è–º
        for path in java_paths:
            if os.path.exists(path):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é Java
                    result = subprocess.run([path, "-version"], capture_output=True, text=True, check=True)
                    version_match = re.search(r'version "(\d+(?:\.\d+)?)', result.stderr or result.stdout)
                    if version_match:
                        version = version_match.group(1)
                        self.java_paths[version] = path
                        java_versions_found.append(version)
                        self.log(f"–ù–∞–π–¥–µ–Ω–∞ Java {version}: {path}")
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Java –≤ {path}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É 'java -version' (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH)
        try:
            result = subprocess.run(["java", "-version"], capture_output=True, text=True, check=True)
            version_match = re.search(r'version "(\d+(?:\.\d+)?)', result.stderr or result.stdout)
            if version_match:
                version = version_match.group(1)
                if version not in self.java_paths:
                    self.java_paths[version] = "java"
                    java_versions_found.append(version)
                    self.log(f"–ù–∞–π–¥–µ–Ω–∞ Java {version} –∏–∑ PATH")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Java –∏–∑ PATH: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Java
        if java_versions_found:
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Minecraft
            current_mc_version = self.minecraft_version.get()
            required_java = JAVA_VERSIONS_FOR_MINECRAFT.get(current_mc_version, "17")
            if required_java in java_versions_found:
                self.java_version.set(required_java)
                self.java_status.config(text=f"Java {required_java} –¥–æ—Å—Ç—É–ø–Ω–∞", fg=COLORS["success"])
            else:
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
                first_version = java_versions_found[0]
                self.java_version.set(first_version)
                self.java_status.config(text=f"Java {first_version} –¥–æ—Å—Ç—É–ø–Ω–∞", fg=COLORS["warning"])
            self.log(f"–î–æ—Å—Ç—É–ø–Ω—ã –≤–µ—Ä—Å–∏–∏ Java: {', '.join(java_versions_found)}")
        else:
            self.java_status.config(text="Java –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", fg=COLORS["danger"])
            self.log("‚ö†Ô∏è Java –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Java —Å https://adoptium.net/")
            return False

        return True

    def create_server_thread(self):
        thread = threading.Thread(target=self.create_server)
        thread.daemon = True
        thread.start()

    def create_server(self):
        if not self.check_java():
             messagebox.showerror("–û—à–∏–±–∫–∞", "Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
             return

        path = Path(self.server_path.get())
        version = self.minecraft_version.get()
        server_type = self.server_type.get()
        memory = self.memory.get()
        java_version = self.java_version.get()

        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)

        self.log(f"–°–æ–∑–¥–∞—é {server_type} —Å–µ—Ä–≤–µ—Ä –¥–ª—è Minecraft {version} (Java {java_version}) –≤ {path}")
        try:
            if server_type == "Vanilla":
                self.create_vanilla_server(path, version)
            elif server_type == "Paper":
                self.create_paper_server(path, version)
            elif server_type == "Forge":
                self.create_forge_server(path, version)
            elif server_type == "Fabric":
                self.create_fabric_server(path, version)

            self.create_start_script(path, memory, server_type, version, java_version)
            self.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä:\n{str(e)}")

    def create_vanilla_server(self, path, version):
        self.log("–°–æ–∑–¥–∞—é Vanilla —Å–µ—Ä–≤–µ—Ä...")
        manifest_url = "https://launchermeta.mojang.com/mc/game/version_manifest.json"
        manifest = requests.get(manifest_url).json()
        version_url = None
        for ver in manifest["versions"]:
            if ver["id"] == version:
                version_url = ver["url"]
                break
        else:
            raise Exception(f"–í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ manifest")

        version_data = requests.get(version_url).json()
        server_url = version_data["downloads"]["server"]["url"]
        server_jar = path / f"server-{version}.jar"
        if not server_jar.exists():
            self.log("–°–∫–∞—á–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä–Ω—ã–π JAR...")
            response = requests.get(server_url)
            with open(server_jar, "wb") as f:
                f.write(response.content)
        with open(path / "eula.txt", "w") as f:
            f.write("eula=true")

    def create_paper_server(self, path, version):
        self.log("–°–æ–∑–¥–∞—é Paper —Å–µ—Ä–≤–µ—Ä...")
        if version not in self.paper_versions:
            raise Exception(f"–î–ª—è –≤–µ—Ä—Å–∏–∏ {version} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ Paper")
        paper_version = self.paper_versions[version]
        self.log(f"–ò—Å–ø–æ–ª—å–∑—É—é Paper {paper_version}")
        jar_name = f"{paper_version}.jar"
        server_jar = path / jar_name
        if not server_jar.exists():
             self.log("–°–∫–∞—á–∏–≤–∞—é Paper JAR...")
             # –ü—Ä–∏–º–µ—Ä URL, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
             paper_url = f"https://api.papermc.io/v2/projects/paper/versions/{version}/builds/{paper_version.split('-')[-1]}/downloads/{jar_name}"
             response = requests.get(paper_url)
             if response.status_code == 200:
                 with open(server_jar, "wb") as f:
                     f.write(response.content)
             else:
                 raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Paper. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")
        with open(path / "eula.txt", "w") as f:
            f.write("eula=true")

    def create_forge_server(self, path, version):
        self.log("–°–æ–∑–¥–∞—é Forge —Å–µ—Ä–≤–µ—Ä...")
        if version not in self.forge_versions:
            raise Exception(f"–î–ª—è –≤–µ—Ä—Å–∏–∏ {version} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ Forge")
        forge_version = self.forge_versions[version]
        self.log(f"–ò—Å–ø–æ–ª—å–∑—É—é Forge {forge_version}")
        installer_name = f"forge-{forge_version}-installer.jar"
        installer_path = path / installer_name
        if not installer_path.exists():
            self.log("–°–∫–∞—á–∏–≤–∞—é Forge Installer...")
            # –ü—Ä–∏–º–µ—Ä URL, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            installer_url = f"https://maven.minecraftforge.net/net/minecraftforge/forge/{forge_version}/{installer_name}"
            response = requests.get(installer_url)
            if response.status_code == 200:
                with open(installer_path, "wb") as f:
                    f.write(response.content)
            else:
                 raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Forge Installer. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")
        
        self.log("–ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Forge...")
        try:
            # –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ
            subprocess.run([
                "java", "-jar", installer_name, "--installServer"
            ], cwd=path, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            self.log("Forge —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            # –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # installer_path.unlink()
        except subprocess.CalledProcessError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Forge: {e}")

    def create_fabric_server(self, path, version):
        self.log("–°–æ–∑–¥–∞—é Fabric —Å–µ—Ä–≤–µ—Ä...")
        if version not in self.fabric_versions:
            raise Exception(f"–î–ª—è –≤–µ—Ä—Å–∏–∏ {version} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ Fabric")
        fabric_version = self.fabric_versions[version]
        self.log(f"–ò—Å–ø–æ–ª—å–∑—É—é Fabric Loader {fabric_version}")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Fabric Installer (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        installer_path = path / "fabric-installer.jar"
        if not installer_path.exists():
            self.log("–°–∫–∞—á–∏–≤–∞—é Fabric Installer...")
            installer_url = "https://meta.fabricmc.net/v2/versions/installer"
            response = requests.get(installer_url)
            if response.status_code == 200:
                latest_installer = response.json()[0] # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                installer_download_url = latest_installer['url']
                installer_response = requests.get(installer_download_url)
                with open(installer_path, "wb") as f:
                    f.write(installer_response.content)
            else:
                 raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–µ Fabric. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")

        self.log("–ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Fabric...")
        try:
            # –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ
            subprocess.run([
                "java", "-jar", "fabric-installer.jar", "server", "-mcversion", version, "-loader", fabric_version.split('+')[0], "-downloadMinecraft"
            ], cwd=path, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            self.log("Fabric —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ server.jar –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # (path / "fabric-server-launch.jar").rename(path / f"fabric-{version}-{fabric_version.split('+')[0]}.jar")
        except subprocess.CalledProcessError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Fabric: {e}")

    def create_start_script(self, path, memory, server_type, version, java_version):
        max_mem = memory
        min_mem = max(1, int(memory) // 2) # –ú–∏–Ω–∏–º—É–º 1–ì–ë –∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π
        java_path = self.java_paths.get(java_version, "java") # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Java
        if os.name == 'nt': # Windows
            start_script = path / "start.bat"
            jar_name = ""
            if server_type == "Vanilla":
                jar_name = f"server-{version}.jar"
            elif server_type == "Paper":
                jar_name = f"{self.paper_versions[version]}.jar"
            elif server_type == "Forge":
                 # –ò–º—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
                 potential_names = [f"forge-{self.forge_versions[version]}.jar", "forge-server.jar", "server.jar"]
                 for name in potential_names:
                     if (path / name).exists():
                         jar_name = name
                         break
                 if not jar_name:
                    jar_name = "server.jar" # fallback
            elif server_type == "Fabric":
                jar_name = "fabric-server-launch.jar" # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ

            with open(start_script, "w") as f:
                f.write(f"@echo off\n")
                f.write(f"echo –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Minecraft {version} ({server_type}) —Å Java {java_version}\n")
                f.write(f"echo –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory} –ì–ë (–º–∞–∫—Å. {max_mem} –ì–ë)\n")
                f.write(f"\"{java_path}\" -Xms{min_mem}G -Xmx{max_mem}G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -jar \"{jar_name}\" nogui\n")
                f.write("pause\n")
        else: # Unix-like
            start_script = path / "start.sh"
            jar_name = ""
            if server_type == "Vanilla":
                jar_name = f"server-{version}.jar"
            elif server_type == "Paper":
                jar_name = f"{self.paper_versions[version]}.jar"
            elif server_type == "Forge":
                 potential_names = [f"forge-{self.forge_versions[version]}.jar", "forge-server.jar", "server.jar"]
                 for name in potential_names:
                     if (path / name).exists():
                         jar_name = name
                         break
                 if not jar_name:
                    jar_name = "server.jar"
            elif server_type == "Fabric":
                jar_name = "fabric-server-launch.jar"

            with open(start_script, "w") as f:
                f.write("#!/bin/bash\n")
                f.write(f"echo \"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Minecraft {version} ({server_type}) —Å Java {java_version}\"\n")
                f.write(f"echo \"–í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory} –ì–ë (–º–∞–∫—Å. {max_mem} –ì–ë)\"\n")
                f.write(f"\"{java_path}\" -Xms{min_mem}G -Xmx{max_mem}G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -jar \"{jar_name}\" nogui\n")
            os.chmod(start_script, 0o755) # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º

    def start_server(self):
        path = Path(self.server_path.get())
        if not path.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ start —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ jar —Ñ–∞–π–ª–∞
        start_script = path / ("start.bat" if os.name == 'nt' else "start.sh")
        server_jar = None
        if not start_script.exists():
            # –ò—â–µ–º jar —Ñ–∞–π–ª—ã
            jar_files = list(path.glob("*.jar"))
            if not jar_files:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ .jar —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞!")
                return
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π jar - —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä
            server_jar = jar_files[0]
            self.log(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å {server_jar.name} –Ω–∞–ø—Ä—è–º—É—é.")

        self.log("–ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...")
        try:
            if start_script.exists():
                # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
                if os.name == 'nt':
                     self.server_process = subprocess.Popen(
                         ["cmd", "/c", "start.bat"],
                         cwd=path,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT,
                         text=True,
                         encoding='utf-8',
                         creationflags=subprocess.CREATE_NEW_CONSOLE
                     )
                else:
                     self.server_process = subprocess.Popen(
                         ["bash", "start.sh"],
                         cwd=path,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT,
                         text=True,
                         encoding='utf-8'
                     )
            elif server_jar:
                # –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ java
                 memory = self.memory.get()
                 max_mem = memory
                 min_mem = max(1, int(memory) // 2)
                 java_path = self.java_paths.get(self.java_version.get(), "java")
                 if os.name == 'nt':
                     self.server_process = subprocess.Popen(
                         [java_path, f"-Xms{min_mem}G", f"-Xmx{max_mem}G", "-jar", server_jar.name, "nogui"],
                         cwd=path,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT,
                         text=True,
                         encoding='utf-8',
                         creationflags=subprocess.CREATE_NEW_CONSOLE
                     )
                 else:
                     self.server_process = subprocess.Popen(
                         [java_path, f"-Xms{min_mem}G", f"-Xmx{max_mem}G", "-jar", server_jar.name, "nogui"],
                         cwd=path,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT,
                         text=True,
                         encoding='utf-8'
                     )
            else:
                 raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

            self.is_running = True
            self.status_var.set("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            self.start_btn.config(state="disabled")
            self.stop_btn.config(state="normal")
            self.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –õ–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∏–∂–µ.")
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
            threading.Thread(target=self.read_server_logs, daemon=True).start()
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if PSUTIL_AVAILABLE:
                threading.Thread(target=self.monitor_resources, daemon=True).start()
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:\n{str(e)}")

    def read_server_logs(self):
        """–ß–∏—Ç–∞–µ—Ç –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if self.server_process and self.server_process.stdout:
            try:
                while True:
                    output = self.server_process.stdout.readline()
                    if output == '' and self.server_process.poll() is not None:
                        break
                    if output:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
                        try:
                            decoded_output = output.strip()
                            self.log(decoded_output)
                        except UnicodeDecodeError:
                            # –ï—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º Windows-1251
                            try:
                                decoded_output = output.decode('cp1251').strip()
                                self.log(decoded_output)
                            except Exception as e:
                                # –ï—Å–ª–∏ –∏ cp1251 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º raw bytes
                                self.log(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∞: {e}")
            except Exception as e:
                 self.log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self.server_process = None
        self.is_running = False
        self.status_var.set("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")

    def monitor_resources(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        while self.is_running and self.server_process and self.server_process.poll() is None:
            try:
                if PSUTIL_AVAILABLE:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
                    p = psutil.Process(self.server_process.pid)
                    cpu_percent = p.cpu_percent()
                    mem_info = p.memory_info()
                    mem_mb = mem_info.rss / 1024 / 1024
                    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
                    total_ram_gb = self.get_total_ram_gb()
                    self.root.after(0, lambda: self.cpu_usage.config(text=f"{cpu_percent:.1f}%", fg=COLORS["success"] if cpu_percent < 50 else (COLORS["warning"] if cpu_percent < 80 else COLORS["danger"])))
                    self.root.after(0, lambda: self.ram_usage.config(text=f"{mem_mb:.1f} –ú–ë / {total_ram_gb} –ì–ë", fg=COLORS["success"] if mem_mb < total_ram_gb * 1024 * 0.6 else (COLORS["warning"] if mem_mb < total_ram_gb * 1024 * 0.8 else COLORS["danger"])))
                time.sleep(2) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            except psutil.NoSuchProcess:
                # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                break
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                break

    def stop_server(self):
         if self.server_process:
             try:
                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É 'stop' –≤ —Å–µ—Ä–≤–µ—Ä
                 self.send_command_internal("stop")
                 self.log("–ö–æ–º–∞–Ω–¥–∞ 'stop' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä—É...")
                 # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                 self.server_process.wait(timeout=30) # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                 self.log("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
             except subprocess.TimeoutExpired:
                 self.log("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                 self.server_process.kill()
                 self.server_process.wait()
                 self.log("–°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
             except Exception as e:
                 self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
             finally:
                 self.server_process = None
                 self.is_running = False
                 self.status_var.set("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                 self.start_btn.config(state="normal")
                 self.stop_btn.config(state="disabled")

    def send_command_internal(self, command):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        if self.server_process and self.server_process.stdin:
            try:
                self.server_process.stdin.write(command + "\n")
                self.server_process.stdin.flush()
                self.log(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {command}")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        else:
            self.log("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥.")

    def send_command(self, event=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.is_running or not self.server_process:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        command = self.cmd_entry.get().strip()
        if not command:
            return
        self.send_command_internal(command)
        self.cmd_entry.delete(0, tk.END)

    def open_mods_folder(self):
        path = Path(self.server_path.get())
        mods_path = path / "mods"
        if not mods_path.exists():
            mods_path.mkdir(parents=True, exist_ok=True)
        self.open_folder(mods_path)

    def open_datapacks_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É datapacks –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        path = Path(self.server_path.get())
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∏—Ä–∞ –∏–∑ server.properties (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        world_name = self.server_properties.get("level-name", "world")
        datapacks_path = path / world_name / "datapacks"
        if not datapacks_path.exists():
            datapacks_path.mkdir(parents=True, exist_ok=True)
            self.log(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞—Ç–∞-–ø–∞–∫–æ–≤: {datapacks_path}")
        self.open_folder(datapacks_path)

    def open_server_properties(self):
        path = Path(self.server_path.get())
        props_file = path / "server.properties"
        if not props_file.exists():
            with open(props_file, "w") as f:
                f.write("#Minecraft server properties\n")
        self.open_folder(props_file)

    def open_folder(self, path):
        try:
            if os.name == 'nt':  # Windows
                os.startfile(path)
            elif os.name == 'posix':  # macOS or Linux
                subprocess.run(['open' if sys.platform == 'darwin' else 'xdg-open', str(path)])
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{str(e)}")

    def manage_backups(self):
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –æ–∫–Ω–∞ –±—ç–∫–∞–ø–æ–≤
        self.notebook.select(self.backups_frame)
        
    def open_plugin_manager(self):
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –æ–∫–Ω–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        self.notebook.select(self.plugins_frame)
        
    def open_scheduler(self):
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –æ–∫–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.notebook.select(self.scheduler_frame)

    # --- –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞" ---
    def create_properties_widgets(self):
        self.props_vars = {}
        self.props_entries = {}
        canvas = tk.Canvas(self.props_frame, borderwidth=0)
        frame = tk.Frame(canvas)
        vsb = tk.Scrollbar(self.props_frame, orient="vertical", command=canvas.yview)
        canvas.configure(yscrollcommand=vsb.set)

        vsb.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)
        canvas.create_window((0, 0), window=frame, anchor="nw")
        frame.bind("<Configure>", lambda event, canvas=canvas: self.on_frame_configure(canvas))

        self.props_container = frame

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(self.props_frame)
        btn_frame.pack(side="bottom", fill="x", padx=5, pady=5)
        tk.Button(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.load_server_properties, bg=COLORS["info"], fg="white").pack(side="left", padx=5)
        tk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_server_properties, bg=COLORS["success"], fg="white").pack(side="left", padx=5)
        tk.Button(btn_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", command=self.reset_server_properties, bg=COLORS["warning"], fg="white").pack(side="left", padx=5)

    def on_frame_configure(self, canvas):
        canvas.configure(scrollregion=canvas.bbox("all"))

    def load_server_properties(self):
        path = Path(self.server_path.get())
        props_file = path / "server.properties"
        default_props = {
            "difficulty": "easy", "gamemode": "survival", "level-seed": "",
            "view-distance": "10", "simulation-distance": "10", "max-players": "20",
            "level-name": "world", "level-type": "default", "online-mode": "true",
            "white-list": "false", "pvp": "true"
        }
        properties = default_props.copy()
        if props_file.exists():
            try:
                with open(props_file, "r") as f:
                    for line in f:
                        if line.strip() and not line.startswith("#"):
                            key, value = line.strip().split("=", 1)
                            properties[key] = value
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ server.properties: {e}")

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        for widget in self.props_container.winfo_children():
            widget.destroy()
        self.props_vars.clear()
        self.props_entries.clear()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
        for key, value in properties.items():
            row_frame = tk.Frame(self.props_container, bg=COLORS["card"])
            row_frame.pack(fill="x", padx=5, pady=2)
            tk.Label(row_frame, text=key, width=20, anchor="w", bg=COLORS["card"]).pack(side="left")
            var = tk.StringVar(value=value)
            self.props_vars[key] = var
            entry = tk.Entry(row_frame, textvariable=var)
            entry.pack(side="left", fill="x", expand=True, padx=(5, 0))
            self.props_entries[key] = entry # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ entry

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, open_datapacks_folder)
        self.server_properties = properties

    def save_server_properties(self):
        path = Path(self.server_path.get())
        props_file = path / "server.properties"
        try:
            with open(props_file, "w") as f:
                f.write("#Minecraft server properties\n")
                f.write(f"#Saved on {datetime.now().strftime('%a %b %d %H:%M:%S MSK %Y')}\n")
                for key, var in self.props_vars.items():
                    f.write(f"{key}={var.get()}\n")
            self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è server.properties: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{str(e)}")

    def reset_server_properties(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"""
        result = messagebox.askyesno("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º?")
        if not result:
            return
        path = Path(self.server_path.get())
        props_file = path / "server.properties"
        try:
            props_file.unlink(missing_ok=True)
            self.load_server_properties() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º.")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ server.properties: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{str(e)}")

    # --- –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤" ---
    def create_plugin_widgets(self):
        # –ü–æ–∏—Å–∫
        search_frame = tk.Frame(self.plugins_frame)
        search_frame.pack(fill="x", padx=5, pady=5)
        tk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:").pack(side="left")
        self.plugin_search_var = tk.StringVar()
        self.plugin_search_var.trace_add("write", self.filter_plugins)
        tk.Entry(search_frame, textvariable=self.plugin_search_var).pack(side="left", fill="x", expand=True, padx=5)

        # –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
        list_frame = tk.Frame(self.plugins_frame)
        list_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.plugin_listbox = tk.Listbox(list_frame)
        self.plugin_listbox.pack(side="left", fill="both", expand=True)
        self.plugin_listbox.bind('<<ListboxSelect>>', self.on_plugin_select)

        scrollbar = tk.Scrollbar(list_frame, orient="vertical", command=self.plugin_listbox.yview)
        scrollbar.pack(side="right", fill="y")
        self.plugin_listbox.config(yscrollcommand=scrollbar.set)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ
        info_frame = tk.Frame(self.plugins_frame, relief="groove", bd=1)
        info_frame.pack(fill="x", padx=5, pady=5)
        self.plugin_info_text = tk.Text(info_frame, height=10, state='disabled')
        self.plugin_info_text.pack(fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∏
        plugin_btn_frame = tk.Frame(self.plugins_frame)
        plugin_btn_frame.pack(fill="x", padx=5, pady=5)
        tk.Button(plugin_btn_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", command=self.open_plugin_url, bg=COLORS["primary"], fg="white").pack(side="left", padx=5)
        tk.Button(plugin_btn_frame, text="‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.install_plugin, bg=COLORS["success"], fg="white").pack(side="left", padx=5)
        tk.Button(plugin_btn_frame, text="üóë –£–¥–∞–ª–∏—Ç—å", command=self.remove_plugin, bg=COLORS["danger"], fg="white").pack(side="left", padx=5)

        self.populate_plugin_list()

    def populate_plugin_list(self):
        self.plugin_listbox.delete(0, tk.END)
        for plugin in PLUGINS_DB:
            self.plugin_listbox.insert(tk.END, plugin["name"])

    def filter_plugins(self, *args):
        search_term = self.plugin_search_var.get().lower()
        self.plugin_listbox.delete(0, tk.END)
        for plugin in PLUGINS_DB:
            if search_term in plugin["name"].lower() or search_term in plugin["description"].lower():
                self.plugin_listbox.insert(tk.END, plugin["name"])

    def on_plugin_select(self, event):
        selection = event.widget.curselection()
        if selection:
            index = selection[0]
            plugin_name = event.widget.get(index)
            plugin = next((p for p in PLUGINS_DB if p["name"] == plugin_name), None)
            if plugin:
                self.display_plugin_info(plugin)

    def display_plugin_info(self, plugin):
        info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {plugin['name']}\n"
        info += f"–í–µ—Ä—Å–∏—è: {plugin['version']}\n"
        info += f"–°–∫–∞—á–∏–≤–∞–Ω–∏–π: {plugin['downloads']}\n"
        info += f"–†–µ–π—Ç–∏–Ω–≥: {plugin['rating']}\n"
        info += f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {plugin['compatible']}\n"
        info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {plugin['description']}\n"
        if plugin.get("features"):
            info += f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            for feature in plugin["features"]:
                info += f"  ‚Ä¢ {feature}\n"
        if plugin.get("dependencies"):
            info += f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n"
            for dep in plugin["dependencies"]:
                info += f"  ‚Ä¢ {dep}\n"
        info += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {plugin['url']}\n"
        self.plugin_info_text.config(state='normal')
        self.plugin_info_text.delete(1.0, tk.END)
        self.plugin_info_text.insert(tk.END, info)
        self.plugin_info_text.config(state='disabled')
        self.selected_plugin.set(plugin['name'])

    def open_plugin_url(self):
        plugin_name = self.selected_plugin.get()
        if plugin_name:
            plugin = next((p for p in PLUGINS_DB if p["name"] == plugin_name), None)
            if plugin:
                webbrowser.open(plugin["url"])
            else:
                messagebox.showwarning("–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            messagebox.showwarning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

    def install_plugin(self):
        plugin_name = self.selected_plugin.get()
        if plugin_name:
            plugin = next((p for p in PLUGINS_DB if p["name"] == plugin_name), None)
            if plugin:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è .jar —Ñ–∞–π–ª–∞
                # –∏ –µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–ø–∫—É plugins.
                # –¢–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç.
                messagebox.showinfo("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞", f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–∫–∞—á–∞–π—Ç–µ .jar —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é. –ó–∞—Ç–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É 'plugins' –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
                webbrowser.open(plugin["url"])
                self.log(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {plugin_name}")
            else:
                messagebox.showwarning("–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            messagebox.showwarning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

    def remove_plugin(self):
        plugin_name = self.selected_plugin.get()
        if plugin_name:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è .jar —Ñ–∞–π–ª–∞
            # –∏–∑ –ø–∞–ø–∫–∏ plugins. –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –ø–ª–∞–≥–∏–Ω–æ–≤,
            # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
            messagebox.showinfo("–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞", f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π .jar —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ 'plugins' –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
            self.log(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –ø–ª–∞–≥–∏–Ω–∞: {plugin_name}")
        else:
            messagebox.showwarning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

    # --- –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ë—ç–∫–∞–ø—ã" ---
    def create_backup_widgets(self):
        # –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
        list_frame = tk.Frame(self.backups_frame)
        list_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.backup_listbox = tk.Listbox(list_frame)
        self.backup_listbox.pack(side="left", fill="both", expand=True)

        scrollbar = tk.Scrollbar(list_frame, orient="vertical", command=self.backup_listbox.yview)
        scrollbar.pack(side="right", fill="y")
        self.backup_listbox.config(yscrollcommand=scrollbar.set)

        # –ö–Ω–æ–ø–∫–∏
        backup_btn_frame = tk.Frame(self.backups_frame)
        backup_btn_frame.pack(fill="x", padx=5, pady=5)
        tk.Button(backup_btn_frame, text="‚ûï –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", command=self.create_backup, bg=COLORS["success"], fg="white").pack(side="left", padx=5)
        tk.Button(backup_btn_frame, text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.restore_backup, bg=COLORS["warning"], fg="white").pack(side="left", padx=5)
        tk.Button(backup_btn_frame, text="üóë –£–¥–∞–ª–∏—Ç—å", command=self.delete_backup, bg=COLORS["danger"], fg="white").pack(side="left", padx=5)

        self.refresh_backups_list()

    def refresh_backups_list(self):
        self.backup_listbox.delete(0, tk.END)
        path = Path(self.server_path.get()) / "backups"
        if path.exists():
            backups = sorted(path.glob("*.zip"), key=os.path.getmtime, reverse=True)
            for backup in backups:
                self.backup_listbox.insert(tk.END, backup.name)

    def create_backup(self):
        path = Path(self.server_path.get())
        backups_path = path / "backups"
        backups_path.mkdir(exist_ok=True)
        backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
        backup_file = backups_path / backup_name
        try:
            with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(path):
                    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É backups –∏–∑ –∞—Ä—Ö–∏–≤–∞
                    dirs[:] = [d for d in dirs if os.path.join(root, d) != str(backups_path)]
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, path)
                        zipf.write(file_path, arcname)
            self.log(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_name}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë—ç–∫–∞–ø {backup_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            self.refresh_backups_list()
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø:\n{str(e)}")

    def restore_backup(self):
        selection = self.backup_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ë—ç–∫–∞–ø –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        backup_name = self.backup_listbox.get(selection[0])
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                                     f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–∑ –±—ç–∫–∞–ø–∞ {backup_name}? –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–µ—Ä–∞.")
        if result:
            path = Path(self.server_path.get())
            backups_path = path / "backups"
            backup_file = backups_path / backup_name
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
                if self.server_process:
                    self.stop_server()
                    time.sleep(2) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                temp_restore = path / "temp_restore"
                if temp_restore.exists():
                    shutil.rmtree(temp_restore)
                temp_restore.mkdir()

                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±—ç–∫–∞–ø –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                with zipfile.ZipFile(backup_file, 'r') as zipf:
                    zipf.extractall(temp_restore)

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–∞–ø–∫—É —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–∫–ª—é—á–∞—è backups
                for item in temp_restore.iterdir():
                    if item.name != "backups":
                        if (path / item.name).exists():
                            if (path / item.name).is_dir():
                                shutil.rmtree(path / item.name)
                            else:
                                (path / item.name).unlink()
                        shutil.move(str(item), str(path / item.name))

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                shutil.rmtree(temp_restore)

                self.log(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ {backup_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")
                self.load_server_properties() # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:\n{str(e)}")

    def delete_backup(self):
        selection = self.backup_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ë—ç–∫–∞–ø –Ω–µ –≤—ã–±—Ä–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        backup_name = self.backup_listbox.get(selection[0])
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                     f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø {backup_name}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
        if result:
            path = Path(self.server_path.get()) / "backups" / backup_name
            try:
                path.unlink()
                self.log(f"‚úÖ –ë—ç–∫–∞–ø {backup_name} —É–¥–∞–ª–µ–Ω!")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë—ç–∫–∞–ø {backup_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                self.refresh_backups_list()
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø:\n{str(e)}")

    # --- –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫" ---
    def create_scheduler_widgets(self):
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        list_frame = tk.Frame(self.scheduler_frame)
        list_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        columns = ("time", "task", "enabled")
        self.tasks_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        self.tasks_tree.heading("time", text="–í—Ä–µ–º—è")
        self.tasks_tree.heading("task", text="–ó–∞–¥–∞—á–∞")
        self.tasks_tree.heading("enabled", text="–í–∫–ª—é—á–µ–Ω–æ")
        self.tasks_tree.column("time", width=100)
        self.tasks_tree.column("task", width=300)
        self.tasks_tree.column("enabled", width=80)
        self.tasks_tree.pack(side="left", fill="both", expand=True)
        
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.tasks_tree.yview)
        scrollbar.pack(side="right", fill="y")
        self.tasks_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏
        task_btn_frame = tk.Frame(self.scheduler_frame)
        task_btn_frame.pack(fill="x", padx=5, pady=5)
        tk.Button(task_btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_task, bg=COLORS["success"], fg="white").pack(side="left", padx=5)
        tk.Button(task_btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_task, bg=COLORS["primary"], fg="white").pack(side="left", padx=5)
        tk.Button(task_btn_frame, text="üóë –£–¥–∞–ª–∏—Ç—å", command=self.delete_task, bg=COLORS["danger"], fg="white").pack(side="left", padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.tasks_tree.bind("<Double-1>", lambda e: self.edit_task())

    def populate_tasks_list(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        for item in self.tasks_tree.get_children():
            self.tasks_tree.delete(item)
        for task in TASKS_DB:
            enabled_text = "–î–∞" if task["enabled"] else "–ù–µ—Ç"
            self.tasks_tree.insert("", "end", values=(task["time"], task["task"], enabled_text))

    def add_task(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task_window = tk.Toplevel(self.root)
        task_window.title("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        task_window.geometry("400x200")
        task_window.transient(self.root)
        task_window.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        task_window.geometry("+%d+%d" % (self.root.winfo_rootx() + 50,
                                        self.root.winfo_rooty() + 50))

        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        form_frame = ttk.Frame(task_window)
        form_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ttk.Label(form_frame, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").grid(row=0, column=0, sticky="w", pady=5)
        time_entry = ttk.Entry(form_frame, width=10)
        time_entry.grid(row=0, column=1, sticky="w", pady=5, padx=(10, 0))

        ttk.Label(form_frame, text="–ó–∞–¥–∞—á–∞:").grid(row=1, column=0, sticky="w", pady=5)
        task_entry = ttk.Entry(form_frame, width=30)
        task_entry.grid(row=1, column=1, sticky="w", pady=5, padx=(10, 0))

        enabled_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(form_frame, text="–í–∫–ª—é—á–µ–Ω–æ", variable=enabled_var).grid(row=2, column=0, columnspan=2, sticky="w", pady=10)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(form_frame)
        btn_frame.grid(row=3, column=0, columnspan=2, pady=10)

        def save_new_task():
            time_str = time_entry.get().strip()
            task_name = task_entry.get().strip()
            enabled = enabled_var.get()
            if not time_str or not task_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not re.match(r"^\d{2}:\d{2}$", time_str):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)")
                return
            
            enabled_text = "–î–∞" if enabled else "–ù–µ—Ç"
            self.tasks_tree.insert("", "end", values=(time_str, task_name, enabled_text))
            task_window.destroy()

        ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_new_task, style="Primary.TButton").pack(side="left", padx=5)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=task_window.destroy).pack(side="left", padx=5)

    def edit_task(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
        selected = self.tasks_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        values = self.tasks_tree.item(selected[0], "values")
        
        task_window = tk.Toplevel(self.root)
        task_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
        task_window.geometry("400x200")
        task_window.transient(self.root)
        task_window.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        task_window.geometry("+%d+%d" % (self.root.winfo_rootx() + 50,
                                        self.root.winfo_rooty() + 50))

        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        form_frame = ttk.Frame(task_window)
        form_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ttk.Label(form_frame, text="–í—Ä–µ–º—è (–ß–ß:–ú–ú):").grid(row=0, column=0, sticky="w", pady=5)
        time_entry = ttk.Entry(form_frame, width=10)
        time_entry.grid(row=0, column=1, sticky="w", pady=5, padx=(10, 0))
        time_entry.insert(0, values[0])

        ttk.Label(form_frame, text="–ó–∞–¥–∞—á–∞:").grid(row=1, column=0, sticky="w", pady=5)
        task_entry = ttk.Entry(form_frame, width=30)
        task_entry.grid(row=1, column=1, sticky="w", pady=5, padx=(10, 0))
        task_entry.insert(0, values[1])

        enabled_var = tk.BooleanVar(value=values[2] == "–î–∞")
        ttk.Checkbutton(form_frame, text="–í–∫–ª—é—á–µ–Ω–æ", variable=enabled_var).grid(row=2, column=0, columnspan=2, sticky="w", pady=10)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(form_frame)
        btn_frame.grid(row=3, column=0, columnspan=2, pady=10)

        def update_task():
            time_str = time_entry.get().strip()
            task_name = task_entry.get().strip()
            enabled = enabled_var.get()
            if not time_str or not task_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if not re.match(r"^\d{2}:\d{2}$", time_str):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)")
                return
            
            enabled_text = "–î–∞" if enabled else "–ù–µ—Ç"
            self.tasks_tree.item(selected[0], values=(time_str, task_name, enabled_text))
            task_window.destroy()

        ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=update_task, style="Primary.TButton").pack(side="left", padx=5)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=task_window.destroy).pack(side="left", padx=5)

    def delete_task(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
        selected = self.tasks_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?")
        if result:
            self.tasks_tree.delete(selected[0])
            
    # --- –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è" ---
    def create_optimization_widgets(self):
        opt_frame = tk.Frame(self.optimization_frame, bg=COLORS["card"])
        opt_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        tk.Label(opt_frame, text="üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", font=("Arial", 12, "bold"), bg=COLORS["card"]).pack(anchor="w", pady=(0, 10))
        
        self.optimization_text = tk.Text(opt_frame, height=15, state='disabled')
        self.optimization_text.pack(fill="both", expand=True, pady=(0, 10))
        
        btn_frame = tk.Frame(opt_frame, bg=COLORS["card"])
        btn_frame.pack(fill="x")
        tk.Button(btn_frame, text="–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤", command=self.analyze_logs, bg=COLORS["primary"], fg="white").pack(side="left", padx=5)
        tk.Button(btn_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å TPS", command=self.check_tps, bg=COLORS["info"], fg="white").pack(side="left", padx=5)
        tk.Button(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", command=self.refresh_diagnostics, bg=COLORS["success"], fg="white").pack(side="left", padx=5)

    def analyze_logs(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...")
        issues = []
        suggestions = []
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
        for log_line in self.logs[-100:]: # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            if "WARN" in log_line:
                issues.append(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–æ–≥–∞—Ö: {log_line}")
            elif "ERROR" in log_line:
                issues.append(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∞—Ö: {log_line}")
            elif "lag" in log_line.lower() or "slow" in log_line.lower():
                issues.append(f"–í–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {log_line}")

        if issues:
            self.optimization_text.config(state='normal')
            self.optimization_text.delete(1.0, tk.END)
            self.optimization_text.insert(tk.END, "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")
            for issue in issues:
                self.optimization_text.insert(tk.END, f"  ‚Ä¢ {issue}\n")
            self.optimization_text.config(state='disabled')
        else:
            self.optimization_text.config(state='normal')
            self.optimization_text.delete(1.0, tk.END)
            self.optimization_text.insert(tk.END, "‚úÖ –í –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.\n")
            self.optimization_text.config(state='disabled')

    def check_tps(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç TPS —Å–µ—Ä–≤–µ—Ä–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ RCON)
        # –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ TPS
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ TPS...")
        # –ò–º–∏—Ç–∞—Ü–∏—è TPS
        import random
        tps = random.uniform(18.0, 20.0)
        if tps < 15.0:
            self.diag_label.config(text="üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π TPS! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", fg=COLORS["danger"])
        elif tps < 19.0:
            self.diag_label.config(text="‚ö†Ô∏è –ù–∏–∑–∫–∏–π TPS. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", fg=COLORS["warning"])
        else:
            self.diag_label.config(text="‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ", fg=COLORS["success"])
        self.log(f"TPS: {tps:.2f}")

    # --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ ---
    def filter_logs(self, event=None):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ª–æ–≥–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        filter_text = self.log_filter_var.get()
        self.log(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ: '{filter_text}' (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é)")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        
    def clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.log_text.config(state='normal')
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state='disabled')
        self.logs.clear()
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        logs_content = "\n".join(self.logs)
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏"
        )
        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(logs_content)
                self.log(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {file_path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏:\n{str(e)}")

    # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
    def refresh_diagnostics(self):
        self.update_connection_info()
        self.analyze_server()
        self.log("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    def update_connection_info(self):
        try:
            import socket
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            self.local_ip.config(text=local_ip, fg=COLORS["success"])
        except Exception:
            self.local_ip.config(text="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", fg=COLORS["danger"])

        try:
            response = requests.get("https://api.ipify.org", timeout=5)
            public_ip = response.text
            self.public_ip.config(text=public_ip, fg=COLORS["success"])
        except Exception:
            self.public_ip.config(text="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", fg=COLORS["danger"])

    def analyze_server(self):
        path = Path(self.server_path.get())
        issues = []
        suggestions = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ eula.txt
        eula_file = path / "eula.txt"
        if not eula_file.exists():
            issues.append("‚ùå –§–∞–π–ª eula.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            with open(eula_file, 'r') as f:
                if 'eula=true' not in f.read():
                    issues.append("‚ùå –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (eula.txt) –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ.")
                else:
                    suggestions.append("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ server.properties
        props_file = path / "server.properties"
        if props_file.exists():
            with open(props_file, 'r') as f:
                props_content = f.read()
                if 'online-mode=false' in props_content:
                    issues.append("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å online-mode=true –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
                if 'view-distance=12' in props_content or 'view-distance=16' in props_content or 'view-distance=14' in props_content:
                    suggestions.append("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ view-distance –¥–æ 8 –∏–ª–∏ 10 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        allocated_memory_gb = int(self.memory.get())
        total_ram_gb = self.get_total_ram_gb()
        if allocated_memory_gb > total_ram_gb * 0.8:
            issues.append(f"‚ö†Ô∏è –í—ã–¥–µ–ª–µ–Ω–æ –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ ({allocated_memory_gb}–ì–ë). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 80% –æ—Ç {total_ram_gb}–ì–ë.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è start —Å–∫—Ä–∏–ø—Ç–∞
        start_script = path / ("start.bat" if os.name == 'nt' else "start.sh")
        if not start_script.exists():
            issues.append("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ (start.bat/sh) –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–∏/–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")

        if not issues and not suggestions:
            self.diag_label.config(text="‚úÖ –°–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ", fg=COLORS["success"])
        else:
            diag_text = ""
            if issues:
                diag_text += "–ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(issues) + "\n\n"
            if suggestions:
                diag_text += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + "\n".join(suggestions)
            self.diag_label.config(text=diag_text, fg=COLORS["warning"] if issues else COLORS["info"])

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è Windows)
    if os.name == 'nt':
        try:
            is_admin = os.getuid() == 0
        except AttributeError:
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
        if not is_admin:
            messagebox.showwarning("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!")

    root = tk.Tk()
    app = MinecraftServerManager(root)
    root.mainloop()