import os
import subprocess
import tkinter as tk
from tkinter import filedialog
from PIL import Image
from datetime import datetime

# === Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng tool (·∫©n) ===
def check_expiry():
    # Ng√†y h·∫øt h·∫°n key (ƒë·ªãnh d·∫°ng: YYYY-MM-DD)
    expiry_str = "2025-08-11"  # <-- s·ª≠a th√†nh ng√†y b·∫°n mu·ªën
    expiry_date = datetime.strptime(expiry_str, "%Y-%m-%d").date()
    today = datetime.now().date()

    if today > expiry_date:
        print("üõ†Ô∏è Tool ƒëang c·∫≠p nh·∫≠t, qu√Ω kh√°ch vui l√≤ng ƒë·ª£i...")
        raise SystemExit

check_expiry()  # G·ªçi h√†m ki·ªÉm tra h·∫°n

# === H√†m ch·ªçn file ===
def pick_file(title, filetypes):
    root = tk.Tk()
    root.withdraw()
    return filedialog.askopenfilename(title=title, filetypes=filetypes)

# === H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ===
def pick_folder():
    root = tk.Tk()
    root.withdraw()
    return filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u video")

# === Resize ·∫£nh v·ªÅ 1920x1080 ===
def resize_to_1080p(img_path):
    img = Image.open(img_path)
    img_ratio = img.width / img.height
    target_ratio = 1920 / 1080
    if img_ratio > target_ratio:
        new_height = 1080
        new_width = int(1080 * img_ratio)
    else:
        new_width = 1920
        new_height = int(1920 / img_ratio)
    resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
    left = (new_width - 1920) // 2
    top = (new_height - 1080) // 2
    right = left + 1920
    bottom = top + 1080
    cropped_img = resized_img.crop((left, top, right, bottom))
    output_path = os.path.join(os.path.dirname(img_path), "resized_image.png")
    cropped_img.save(output_path)
    return output_path

# === L·∫•y th·ªùi l∆∞·ª£ng audio ===
def get_audio_duration(audio_file):
    cmd = [
        "ffprobe", "-v", "error", "-show_entries",
        "format=duration", "-of",
        "default=noprint_wrappers=1:nokey=1", audio_file
    ]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return float(result.stdout)

# === Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng ===
print("üñº Ch·ªçn ·∫£nh ho·∫∑c video n·ªÅn:")
bg_input_path = pick_file("Ch·ªçn ·∫£nh ho·∫∑c video n·ªÅn", [("Media files", "*.png *.jpg *.jpeg *.mp4")])
if not bg_input_path:
    raise SystemExit("‚ùå Kh√¥ng ch·ªçn file n·ªÅn!")

is_video_background = bg_input_path.lower().endswith(".mp4")

print("üé§ Ch·ªçn video MC (kh√¥ng n·ªÅn):")
mc_path = pick_file("Ch·ªçn video MC", [("Video", "*.mp4")])
if not mc_path:
    raise SystemExit("‚ùå Kh√¥ng ch·ªçn file MC!")

print("‚ú® Ch·ªçn hi·ªáu ·ª©ng overlay (ho·∫∑c b·ªè qua):")
effect_path = pick_file("Ch·ªçn hi·ªáu ·ª©ng overlay", [("Video", "*.mp4")])
use_effect = bool(effect_path)

print("üîä Ch·ªçn file √¢m thanh (.mp3):")
audio_path = pick_file("Ch·ªçn √¢m thanh", [("MP3", "*.mp3")])
if not audio_path:
    raise SystemExit("‚ùå Kh√¥ng ch·ªçn √¢m thanh!")

audio_duration = get_audio_duration(audio_path)

# Nh·∫≠p ch·ªØ ch·∫°y
scroll_text = input("üìù Nh·∫≠p d√≤ng ch·ªØ ch·∫°y ngang: ").strip()
if not scroll_text:
    scroll_text = " "  # tr√°nh filter r·ªóng
# Escape ƒë·ªÉ tr√°nh FFmpeg hi·ªÉu sai
scroll_text_escaped = scroll_text.replace("\\", "\\\\").replace(":", "\\:").replace("'", "\\'")

# C·ª° ch·ªØ
font_size = input("üî† Nh·∫≠p c·ª° ch·ªØ (v√≠ d·ª• 40): ").strip()
if not font_size.isdigit():
    font_size = "40"

# Th√™m nhi·ªÖu?
add_noise = input("üå™Ô∏è Th√™m hi·ªáu ·ª©ng nhi·ªÖu? (y/n): ").strip().lower() == "y"

# S·ªë lu·ªìng CPU
threads = input("‚öôÔ∏è Nh·∫≠p s·ªë lu·ªìng CPU (Enter ƒë·ªÉ t·ª± ƒë·ªông): ").strip()
if not threads.isdigit():
    threads = None

# Font path
FONT_PATH = "C\\:/Windows/Fonts/arial.ttf"  
# Ch·ªçn th∆∞ m·ª•c l∆∞u
save_folder = pick_folder()
if not save_folder:
    raise SystemExit("‚ùå Kh√¥ng ch·ªçn th∆∞ m·ª•c l∆∞u!")

# T·∫°o t√™n file tƒÉng d·∫ßn
i = 1
while True:
    save_path = os.path.join(save_folder, f"video{i}.mp4")
    if not os.path.exists(save_path):
        break
    i += 1

# T·∫°o video n·ªÅn
video_base = "video_base.mp4"
if is_video_background:
    cmd_loop_video = [
        "ffmpeg", "-y", "-stream_loop", "-1", "-i", bg_input_path,
        "-i", audio_path,
        "-t", str(audio_duration),
        "-map", "0:v:0", "-map", "1:a:0",
        "-c:v", "libx264", "-c:a", "aac",
        "-pix_fmt", "yuv420p", "-shortest", video_base
    ]
else:
    bg_image_resized = resize_to_1080p(bg_input_path)
    cmd_loop_video = [
        "ffmpeg", "-y", "-loop", "1", "-i", bg_image_resized,
        "-i", audio_path, "-c:v", "libx264", "-tune", "stillimage",
        "-c:a", "aac", "-b:a", "192k", "-pix_fmt", "yuv420p",
        "-t", str(audio_duration), "-shortest", video_base
    ]
subprocess.run(cmd_loop_video)

# Inputs
inputs = ["-i", video_base, "-stream_loop", "-1", "-i", mc_path]
if use_effect:
    inputs += ["-stream_loop", "-1", "-i", effect_path]

# Filter
filter_chain = ""
if use_effect:
    filter_chain += "[2:v]colorkey=0x01ff11:0.3:0.1[fx];"
    filter_chain += "[0:v][fx]overlay=0:0[tmp];"
    base = "[tmp]"
else:
    base = "[0:v]"

filter_chain += "[1:v]colorkey=0x01ff11:0.3:0.2,scale=480:-1[ckout];"
filter_chain += f"{base}[ckout]overlay=50:H-h[out1];"

filter_chain += (
    f"[out1]drawtext=fontfile='{FONT_PATH}':text='{scroll_text_escaped}':"
    f"fontcolor=yellow:fontsize={font_size}:x=w-mod(t*200\,w+tw):"
    f"y=50:box=1:boxcolor=black@1[out2]"
)
if add_noise:
    filter_chain += ";[out2]noise=alls=20:allf=t[outv]"
    output_map = "[outv]"
else:
    output_map = "[out2]"

# Xu·∫•t video
cmd_final = ["ffmpeg", "-y"] + inputs + [
    "-filter_complex", filter_chain,
    "-map", output_map, "-map", "0:a",
    "-c:v", "libx264", "-preset", "fast", "-crf", "30",
    "-c:a", "aac", "-b:a", "192k",
    "-movflags", "+faststart",
    "-shortest", save_path
]



if threads:
    cmd_final += ["-threads", threads]

print(f"üé¨ ƒêang xu·∫•t video ({save_path}) ...")
subprocess.run(cmd_final)
print(f"‚úÖ Video ƒë√£ t·∫°o: {save_path}")
