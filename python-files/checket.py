import tkinter as tk
import json
import os
import threading
from pathlib import Path

# –î–ª—è –∑–≤—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import winsound
    SOUND_ENABLED = True
except ImportError:
    SOUND_ENABLED = False  # –µ—Å–ª–∏ –Ω–µ Windows –∏–ª–∏ –Ω–µ—Ç winsound

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
SAVE_FILE = Path.home() / ".knitting_counter.json"

class KnittingCounter:
    def __init__(self, root):
        self.root = root
        self.root.title("üß∂ –°—á—ë—Ç—á–∏–∫ —Ä—è–¥–æ–≤ –¥–ª—è –≤—è–∑–∞–Ω–∏—è")
        self.root.geometry("400x300")
        self.root.resizable(False, False)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã
        self.root.configure(bg="#E6E6FA")  # lavender background

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞
        self.count = self.load_count()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.label_title = tk.Label(
            root,
            text="üß∂ –°—á—ë—Ç—á–∏–∫ —Ä—è–¥–æ–≤",
            font=("Comic Sans MS", 20, "bold"),
            bg="#E6E6FA",
            fg="#6A0DAD"  # —Ç—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        )
        self.label_title.pack(pady=20)

        # –°—á—ë—Ç—á–∏–∫
        self.label_count = tk.Label(
            root,
            text=str(self.count),
            font=("Arial", 48, "bold"),
            bg="#E6E6FA",
            fg="#800080"  # purple
        )
        self.label_count.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        self.reset_button = tk.Button(
            root,
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
            font=("Arial", 14, "bold"),
            bg="#9370DB",  # medium purple
            fg="white",
            activebackground="#8A2BE2",  # blue violet
            activeforeground="white",
            relief="raised",
            padx=20,
            pady=10,
            command=self.reset
        )
        self.reset_button.pack(pady=20)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–±–µ–ª–∞
        self.root.bind('<space>', self.increment)
        self.root.focus_set()

    def increment(self, event=None):
        self.count += 1
        self.update_display()
        self.save_count()  # —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º!
        if SOUND_ENABLED:
            threading.Thread(target=lambda: winsound.Beep(800, 100), daemon=True).start()

    def reset(self):
        self.count = 0
        self.update_display()
        self.save_count()

    def update_display(self):
        self.label_count.config(text=str(self.count))

    def save_count(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≤ —Ñ–∞–π–ª –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(SAVE_FILE, 'w', encoding='utf-8') as f:
                json.dump({"count": self.count}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def load_count(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å"""
        try:
            if SAVE_FILE.exists():
                with open(SAVE_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get("count", 0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return 0

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = KnittingCounter(root)
    root.mainloop()