
# -*- coding: utf-8 -*-
import sqlite3
from datetime import datetime
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, font
import sys
import os

class DentalClinicApp:
    def __init__(self, root):
        self.root = root
        self.setup_encoding()
        self.root.title("’ç’ø’∏’¥’°’ø’∏’¨’∏’£’´’°’Ø’°’∂ ’Ø’¨’´’∂’´’Ø’° - Dental Clinic")
        self.root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='#f5f7fa')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#4a8dbc',
            'secondary': '#6c757d',
            'success': '#28a745',
            'danger': '#dc3545',
            'warning': '#ffc107',
            'info': '#17a2b8',
            'light': '#f8f9fa',
            'dark': '#343a40',
            'background': '#f5f7fa',
            'card': '#ffffff',
            'text': '#212529'
        }
        
        # Ensure database directory exists
        if not os.path.exists('data'):
            os.makedirs('data')
        
        # ’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ÷Å’°’∂’Ø
        self.diseases_list = [
            "‘±÷Ä’µ’°’∂ ’£’•÷Ä’≥’∂’∑’∏÷Ç’¥",
            "‘±÷Ä’µ’°’∂ ’©’•÷Ä’≥’∂’∑’∏÷Ç’¥",
            "’ç÷Ä’ø’´ ’æ’´÷Ä’°’∞’°’ø’∏÷Ç’©’µ’∏÷Ç’∂",
            "’ë’°’æ ’Ø÷Ä’Æ÷Ñ’°’æ’°’∂’§’°’Ø’´ ’∑÷Ä’ª’°’∂’∏÷Ç’¥",
            "’é’°’∞’°’∂’°’±÷á ’£’•’≤’±’´ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂",
            "’é’°÷Ä’°’Ø’´’π ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä",
            "’Ñ’°’∑’Ø’°’µ’´’∂ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä",
            "’Ü’µ’°÷Ä’§’°’µ’´’∂ ÷á ’∞’∏’£’•’Ø’°’∂ ’≠’°’∂’£’°÷Ä’∏÷Ç’¥’∂’•÷Ä",
            "’ç’ø’°’¥’∏÷Ñ’Ω-’°’≤’´÷Ñ’°’µ’´’∂ ’∞’°’¥’°’Ø’°÷Ä’£’´ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä",
            "‘±÷Ä’µ’°’∂ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä",
            "‘±’¨’•÷Ä’£’´’°’∂’•÷Ä"
        ]
        
        # ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’Ø’°’∫
        self.db_path = 'data/dental_clinic.db'
        self.conn = sqlite3.connect(self.db_path)
        self.conn.execute('PRAGMA encoding="UTF-8"')
        self.create_tables()
        
        # ‘≥÷Ä’°÷Ü’´’Ø’°’Ø’°’∂ ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω
        self.setup_ui()
        self.current_patient_id = None
        self.patient_card_frame = None

    def setup_encoding(self):
        if sys.platform == 'win32':
            import ctypes
            try:
                ctypes.windll.kernel32.SetConsoleOutputCP(65001)
                ctypes.windll.kernel32.SetConsoleCP(65001)
            except:
                pass
        
        self.default_font = font.nametofont("TkDefaultFont")
        self.default_font.configure(family="Arial", size=10)
        
        self.text_font = font.nametofont("TkTextFont")
        self.text_font.configure(family="Arial", size=10)
        
        self.fixed_font = font.nametofont("TkFixedFont")
        self.fixed_font.configure(family="Arial", size=10)

        # Configure Armenian phonetic keyboard layout
        self.root.bind('<Key>', self.handle_key_press)

    def handle_key_press(self, event):
        # Armenian phonetic keyboard mapping
        mapping = {
            'a': '’°', 'b': '’¢', 'g': '’£', 'd': '’§', 'e': '’•', 'z': '’¶',
            'e`': '’ß', 'y': '’®', 't`': '’©', 'zh': '’™', 'i': '’´', 'l': '’¨',
            'x': '’≠', 'c': '’Æ', 'k': '’Ø', 'h': '’∞', 'j': '’ª', 'm': '’¥',
            'sh': '’∑', 'n': '’∂', 'o': '’∏', 'ch': '’π', 'p': '’∫', 's': '’Ω',
            'v': '’æ', 't': '’ø', 'r': '÷Ä', 'ts`': '÷Å', 'u': '’∏÷Ç', 'p`': '÷É',
            'k`': '÷Ñ', 'ev': '÷á', 'o`': '÷Ö', 'f': '÷Ü'
        }
        
        # Check if we need to convert the character
        if event.char.lower() in mapping:
            # Insert the Armenian character instead
            self.root.focus_get().insert(tk.INSERT, mapping[event.char.lower()])
            return "break"

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS patients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                full_name TEXT NOT NULL,
                birth_date TEXT,
                phone TEXT,
                notes TEXT,
                registration_date TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS patient_diseases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                patient_id INTEGER,
                disease_name TEXT,
                FOREIGN KEY (patient_id) REFERENCES patients (id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS procedures (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                patient_id INTEGER,
                procedure_date TEXT,
                procedure_type TEXT,
                tooth_number TEXT,
                price REAL,
                is_paid INTEGER DEFAULT 0,
                comments TEXT,
                FOREIGN KEY (patient_id) REFERENCES patients (id)
            )
        ''')
        self.conn.commit()

    def setup_ui(self):
        # Main container
        self.main_frame = tk.Frame(self.root, bg=self.colors['background'])
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # ’é’•÷Ä’∂’°’£’´÷Ä
        header_frame = tk.Frame(self.main_frame, bg=self.colors['primary'], height=90)
        header_frame.pack(fill=tk.X)
        
        # Add author signature (small and subtle)
        author_label = tk.Label(header_frame, 
                              text="Dr. Grigoryan", 
                              font=('Arial', 8, 'italic'), 
                              bg=self.colors['primary'], 
                              fg='white')
        author_label.pack(side=tk.RIGHT, padx=10, pady=5)
        
        logo_label = tk.Label(header_frame, 
                            text="ü¶∑ ’ç’ø’∏’¥’°’ø’∏’¨’∏’£’´’°’Ø’°’∂ ’Ø’¨’´’∂’´’Ø’°", 
                            font=('Arial', 18, 'bold'), 
                            bg=self.colors['primary'], 
                            fg='white',
                            pady=15)
        logo_label.pack(side=tk.LEFT, padx=20)
        
        # Exit fullscreen button
        exit_fullscreen_btn = tk.Button(header_frame, 
                                      text="‚éö Exit Fullscreen", 
                                      command=self.toggle_fullscreen,
                                      bg=self.colors['danger'],
                                      fg='white',
                                      font=('Arial', 10, 'bold'),
                                      relief=tk.FLAT,
                                      bd=0,
                                      padx=10,
                                      pady=5)
        exit_fullscreen_btn.pack(side=tk.RIGHT, padx=20)
        
        # ‘≥’∏÷Ä’Æ’´÷Ñ’°’£’∏’ø’´
        toolbar = tk.Frame(self.main_frame, bg=self.colors['light'], height=50)
        toolbar.pack(fill=tk.X, padx=10, pady=5)

        buttons = [
            ("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∞’´’æ’°’∂’§", self.add_patient, self.colors['success']),
            ("üîÑ ‘π’°÷Ä’¥’°÷Å’∂’•’¨", self.update_patients_table, self.colors['info']),
            ("üîç ’ì’∂’ø÷Ä’•’¨", self.search_patient, self.colors['warning']),
            ("üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", self.show_stats, self.colors['secondary']),
            ("‚Üê ’Ä’•’ø", self.show_patients_list, self.colors['dark']),
            ("‚ùå ’ã’∂’ª’•’¨ ’∞’´’æ’°’∂’§", self.delete_patient, self.colors['danger'])
        ]

        for text, cmd, color in buttons:
            btn = tk.Button(toolbar, 
                          text=text, 
                          command=cmd,
                          bg=color,
                          fg='white',
                          font=('Arial', 10, 'bold'),
                          relief=tk.FLAT,
                          padx=12,
                          pady=5,
                          bd=0,
                          activebackground=color,
                          activeforeground='white')
            btn.pack(side=tk.LEFT, padx=5)

        # Patients list frame
        self.patients_list_frame = tk.Frame(self.main_frame, bg=self.colors['background'])
        self.patients_list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))

        # Style for Treeview
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                      background=self.colors['card'],
                      foreground=self.colors['text'],
                      rowheight=25,
                      fieldbackground=self.colors['card'],
                      borderwidth=0)
        style.map('Treeview', background=[('selected', self.colors['primary'])])
        style.configure("Treeview.Heading",
                      background=self.colors['primary'],
                      foreground='white',
                      relief='flat',
                      font=('Arial', 10, 'bold'))
        style.map("Treeview.Heading",
                 background=[('active', self.colors['primary'])])

        # ’Ä’´’æ’°’∂’§’∂’•÷Ä’´ ’°’≤’µ’∏÷Ç’Ω’°’Ø
        self.patients_tree = ttk.Treeview(self.patients_list_frame, 
                                       columns=("ID", "‘±’∂’∏÷Ç’∂", "’Ä’•’º’°’≠’∏’Ω", "‘æ’∂’∂’§’µ’°’∂ ’°’¥’Ω’°’©’´’æ"), 
                                       show="headings",
                                       selectmode='browse')
        
        columns = [
            ("ID", 50),
            ("‘±’∂’∏÷Ç’∂", 300),
            ("’Ä’•’º’°’≠’∏’Ω", 150),
            ("‘æ’∂’∂’§’µ’°’∂ ’°’¥’Ω’°’©’´’æ", 150)
        ]

        for col, width in columns:
            self.patients_tree.heading(col, text=col)
            self.patients_tree.column(col, width=width, anchor='center')

        scrollbar = ttk.Scrollbar(self.patients_list_frame, orient="vertical", command=self.patients_tree.yview)
        scrollbar.pack(side="right", fill="y")
        self.patients_tree.configure(yscrollcommand=scrollbar.set)

        self.patients_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.patients_tree.bind("<Double-1>", self.open_patient_card)

        # ‘ø’°÷Ä’£’°’æ’´’≥’°’Ø’´ ’ø’∏’≤
        self.status_bar = tk.Label(self.main_frame, 
                                 text="’ä’°’ø÷Ä’°’Ω’ø ’ß", 
                                 bd=1, 
                                 relief=tk.SUNKEN, 
                                 anchor=tk.W,
                                 bg=self.colors['light'],
                                 fg=self.colors['dark'],
                                 font=('Arial', 9))
        self.status_bar.pack(fill=tk.X, padx=10, pady=(0, 10))

        self.update_patients_table()

    def toggle_fullscreen(self):
        self.root.attributes('-fullscreen', not self.root.attributes('-fullscreen'))

    def show_patients_list(self):
        if self.patient_card_frame:
            self.patient_card_frame.pack_forget()
        self.patients_list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        self.update_patients_table()

    def delete_patient(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        selected_item = self.patients_tree.selection()
        if not selected_item:
            messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "‘∏’∂’ø÷Ä’•÷Ñ ’∞’´’æ’°’∂’§’´’∂")
            return
            
        patient_id = self.patients_tree.item(selected_item[0], "values")[0]
        patient_name = self.patients_tree.item(selected_item[0], "values")[1]
        
        confirm = messagebox.askyesno("’Ä’°’Ω’ø’°’ø’∏÷Ç’¥", 
                                    f"‘¥’∏÷Ç÷Ñ ’æ’Ω’ø’°’∞ ’•÷Ñ, ’∏÷Ä ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’ª’∂’ª’•’¨ {patient_name} ’∞’´’æ’°’∂’§’´’∂?\n‘≤’∏’¨’∏÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä’® ’Ø’Ø’∏÷Ä’π’•’∂!")
        if not confirm:
            return
            
        try:
            cursor = self.conn.cursor()
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            cursor.execute("DELETE FROM procedures WHERE patient_id=?", (patient_id,))
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            cursor.execute("DELETE FROM patient_diseases WHERE patient_id=?", (patient_id,))
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            cursor.execute("DELETE FROM patients WHERE id=?", (patient_id,))
            self.conn.commit()
            
            messagebox.showinfo("’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂", "’Ä’´’æ’°’∂’§’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’ª’∂’ª’æ’°’Æ ’ß")
            self.status_bar.config(text=f"’Ä’´’æ’°’∂’§ {patient_name} ’ª’∂’ª’æ’°’Æ ’ß")
            self.update_patients_table()
        except Exception as e:
            messagebox.showerror("’ç’≠’°’¨", f"’ã’∂’ª’•’¨’´’Ω ’Ω’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨:\n{str(e)}")
            self.status_bar.config(text=f"’ç’≠’°’¨: {str(e)}")

    def add_patient(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("’Ü’∏÷Ä ’∞’´’æ’°’∂’§’´ ’£÷Ä’°’∂÷Å’∏÷Ç’¥")
        dialog.geometry("700x700")
        dialog.resizable(False, False)
        dialog.configure(bg=self.colors['background'])

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header = tk.Label(dialog, 
                        text="’Ä’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä", 
                        font=('Arial', 14, 'bold'), 
                        bg=self.colors['primary'], 
                        fg='white',
                        padx=10,
                        pady=10)
        header.pack(fill=tk.X)

        form_frame = tk.Frame(dialog, bg=self.colors['background'], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH, expand=True)

        # Style for entry fields
        entry_style = {
            'font': ('Arial', 10),
            'relief': tk.GROOVE,
            'bd': 1,
            'bg': self.colors['card'],
            'highlightbackground': self.colors['secondary'],
            'highlightthickness': 1
        }

        # ’Ä’´’¥’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
        tk.Label(form_frame, 
               text="1. ‘±’∂’∏÷Ç’∂ ’°’¶’£’°’∂’∏÷Ç’∂*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        name_entry = tk.Entry(form_frame, 
                            width=40,
                            **entry_style)
        name_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        tk.Label(form_frame, 
               text="2. ‘æ’∂’∂’§’µ’°’∂ ’°’¥’Ω’°’©’´’æ (’è’è’è’è-‘±‘±-’ï’ï):", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=1, column=0, padx=10, pady=5, sticky="e")
        birth_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        birth_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        tk.Label(form_frame, 
               text="3. ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=2, column=0, padx=10, pady=5, sticky="e")
        phone_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        phone_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        tk.Label(form_frame, 
               text="4. ‘±’µ’¨ ’∂’∑’∏÷Ç’¥’∂’•÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=3, column=0, padx=10, pady=5, sticky="e")
        notes_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        notes_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        # ’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∑÷Ä’ª’°’∂’°’Ø
        diseases_frame = tk.LabelFrame(form_frame, 
                                     text="5. ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä", 
                                     font=('Arial', 10, 'bold'),
                                     bg=self.colors['background'],
                                     padx=10, 
                                     pady=10)
        diseases_frame.grid(row=4, columnspan=2, sticky="we", padx=10, pady=10)

        disease_vars = []
        for i, disease in enumerate(self.diseases_list):
            var = tk.IntVar()
            disease_vars.append(var)
            cb = tk.Checkbutton(diseases_frame, 
                              text=f"‚Ä¢ {disease}", 
                              variable=var,
                              bg=self.colors['background'],
                              font=('Arial', 10),
                              anchor='w',
                              activebackground=self.colors['background'],
                              activeforeground=self.colors['text'])
            cb.pack(fill=tk.X, padx=5, pady=2)

        # ‘ø’∏’≥’°’Ø’∂’•÷Ä
        btn_frame = tk.Frame(form_frame, bg=self.colors['background'])
        btn_frame.grid(row=5, columnspan=2, pady=20)

        def save_patient():
            if not name_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∞’´’æ’°’∂’§’´ ’°’∂’∏÷Ç’∂ ’°’¶’£’°’∂’∏÷Ç’∂’®")
                return

            try:
                cursor = self.conn.cursor()
                cursor.execute(
                    "INSERT INTO patients (full_name, birth_date, phone, notes) VALUES (?, ?, ?, ?)",
                    (name_entry.get(), 
                     birth_entry.get(), 
                     phone_entry.get(), 
                     notes_entry.get())
                )
                patient_id = cursor.lastrowid
                
                # ’ä’°’∞’∫’°’∂’•’¨ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®
                for i, var in enumerate(disease_vars):
                    if var.get() == 1:
                        cursor.execute(
                            "INSERT INTO patient_diseases (patient_id, disease_name) VALUES (?, ?)",
                            (patient_id, self.diseases_list[i])
                        )
                
                self.conn.commit()
                self.update_patients_table()
                dialog.destroy()
                messagebox.showinfo("’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂", "’Ä’´’æ’°’∂’§’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß")
                self.status_bar.config(text="’Ä’´’æ’°’∂’§’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß")
            except Exception as e:
                messagebox.showerror("’ç’≠’°’¨", f"’è’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∫’°’∂’¥’°’∂ ’Ω’≠’°’¨:\n{str(e)}")
                self.status_bar.config(text=f"’ç’≠’°’¨: {str(e)}")

        tk.Button(btn_frame, 
                 text="’ä’°’∞’∫’°’∂’•’¨", 
                 command=save_patient,
                 bg=self.colors['success'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

        tk.Button(btn_frame, 
                 text="’â’•’≤’°÷Ä’Ø’•’¨", 
                 command=dialog.destroy,
                 bg=self.colors['danger'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

    def update_patients_table(self):
        for item in self.patients_tree.get_children():
            self.patients_tree.delete(item)
            
        cursor = self.conn.cursor()
        cursor.execute("SELECT id, full_name, phone, birth_date FROM patients ORDER BY full_name")
        
        for row in cursor.fetchall():
            self.patients_tree.insert("", "end", values=row)

    def open_patient_card(self, event=None):
        if event:
            selected_item = self.patients_tree.selection()
            if not selected_item:
                return
            self.current_patient_id = self.patients_tree.item(selected_item[0], "values")[0]
        else:
            if not self.current_patient_id:
                return
        
        # Hide patients list
        self.patients_list_frame.pack_forget()
        
        # Create patient card frame if not exists
        if not self.patient_card_frame:
            self.patient_card_frame = tk.Frame(self.main_frame, bg=self.colors['background'])
        
        # Clear previous content
        for widget in self.patient_card_frame.winfo_children():
            widget.destroy()
        
        self.patient_card_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header_frame = tk.Frame(self.patient_card_frame, bg=self.colors['primary'], height=60)
        header_frame.pack(fill=tk.X)
        
        tk.Button(header_frame, 
                text="‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®", 
                command=lambda: self.edit_patient(self.current_patient_id),
                bg=self.colors['info'],
                fg='white',
                font=('Arial', 10, 'bold'),
                relief=tk.FLAT,
                bd=0,
                padx=10,
                pady=5).pack(side=tk.LEFT, padx=10, pady=10)

        tk.Button(header_frame, 
                text="‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’°’∑’≠’°’ø’°’∂÷Ñ", 
                command=lambda: self.add_procedure(self.current_patient_id),
                bg=self.colors['success'],
                fg='white',
                font=('Arial', 10, 'bold'),
                relief=tk.FLAT,
                bd=0,
                padx=10,
                pady=5).pack(side=tk.LEFT, padx=10, pady=10)

        # ’Ä’´’¥’∂’°’Ø’°’∂ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂
        main_frame = tk.Frame(self.patient_card_frame, bg=self.colors['background'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # ’è’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂ ’∞’´’æ’°’∂’§’´ ’¥’°’Ω’´’∂
        info_frame = tk.LabelFrame(main_frame, 
                                 text="’Ä’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä", 
                                 font=('Arial', 12, 'bold'),
                                 bg=self.colors['card'],
                                 padx=15, 
                                 pady=15)
        info_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 20))

        # ’ç’ø’°’∂’°’¨ ’∞’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM patients WHERE id=?", (self.current_patient_id,))
        patient_data = cursor.fetchone()

        # ’Ä’´’¥’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
        labels = [
            ("1. ‘±’∂’∏÷Ç’∂ ’°’¶’£’°’∂’∏÷Ç’∂:", 0),
            ("2. ‘æ’∂’∂’§’µ’°’∂ ’°’¥’Ω’°’©’´’æ:", 1),
            ("3. ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä:", 2), 
            ("4. ‘±’µ’¨ ’∂’∑’∏÷Ç’¥’∂’•÷Ä:", 3),
            ("5. ‘≥÷Ä’°’∂÷Å’¥’°’∂ ’°’¥’Ω’°’©’´’æ:", 4)
        ]

        for text, row in labels:
            tk.Label(info_frame, 
                   text=text, 
                   font=('Arial', 10, 'bold'),
                   bg=self.colors['card']).grid(row=row, column=0, sticky="e", padx=5, pady=5)
            tk.Label(info_frame, 
                   text=patient_data[row+1], 
                   font=('Arial', 10),
                   bg=self.colors['card'],
                   wraplength=300,
                   justify=tk.LEFT).grid(row=row, column=1, sticky="w", padx=5, pady=5)

        # ’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∑÷Ä’ª’°’∂’°’Ø
        diseases_frame = tk.LabelFrame(info_frame, 
                                     text="6. ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä", 
                                     font=('Arial', 10, 'bold'),
                                     bg=self.colors['card'],
                                     padx=10, 
                                     pady=10)
        diseases_frame.grid(row=5, columnspan=2, sticky="we", pady=10)

        # ’ç’ø’°’∂’°’¨ ’∞’´’æ’°’∂’§’´ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®
        cursor.execute("SELECT disease_name FROM patient_diseases WHERE patient_id=?", (self.current_patient_id,))
        patient_diseases = [row[0] for row in cursor.fetchall()]

        # ’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®
        if patient_diseases:
            for disease in patient_diseases:
                tk.Label(diseases_frame, 
                       text=f"‚Ä¢ {disease}", 
                       font=('Arial', 10),
                       bg=self.colors['card'],
                       anchor='w').pack(fill=tk.X, padx=5, pady=2)
        else:
            tk.Label(diseases_frame, 
                   text="’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’π’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ", 
                   font=('Arial', 10),
                   bg=self.colors['card'],
                   fg='gray').pack(pady=5)

        # ‘ø’°’ø’°÷Ä’æ’°’Æ ’°’∑’≠’°’ø’°’∂÷Ñ’∂’•÷Ä
        procedures_frame = tk.LabelFrame(main_frame, 
                                       text="‘ø’°’ø’°÷Ä’æ’°’Æ ’°’∑’≠’°’ø’°’∂÷Ñ’∂’•÷Ä", 
                                       font=('Arial', 12, 'bold'),
                                       bg=self.colors['card'],
                                       padx=15, 
                                       pady=15)
        procedures_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # ‘±’∑’≠’°’ø’°’∂÷Ñ’∂’•÷Ä’´ ’°’≤’µ’∏÷Ç’Ω’°’Ø (–±–µ–∑ —Å—Ç–æ–ª–±—Ü–∞ ID)
        self.procedures_tree = ttk.Treeview(procedures_frame, 
                                     columns=("‘±’¥’Ω’°’©’´’æ", "‘æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂", "‘±’ø’°’¥", "‘±÷Ä’™’•÷Ñ", "’é’≥’°÷Ä’æ’°’Æ", "’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂"), 
                                     show="headings",
                                     selectmode='browse')
        
        columns = [
            ("‘±’¥’Ω’°’©’´’æ", 120),
            ("‘æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂", 200),
            ("‘±’ø’°’¥", 100),
            ("‘±÷Ä’™’•÷Ñ", 100),
            ("’é’≥’°÷Ä’æ’°’Æ", 100),
            ("’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂", 300)
        ]

        for col, width in columns:
            self.procedures_tree.heading(col, text=col)
            self.procedures_tree.column(col, width=width, anchor='center')

        scrollbar = ttk.Scrollbar(procedures_frame, orient="vertical", command=self.procedures_tree.yview)
        scrollbar.pack(side="right", fill="y")
        self.procedures_tree.configure(yscrollcommand=scrollbar.set)

        self.procedures_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # ‘ø’∏’≥’°’Ø’∂’•÷Ä
        btn_frame = tk.Frame(procedures_frame, bg=self.colors['card'])
        btn_frame.pack(fill=tk.X, pady=10)

        def update_procedures_table():
            for item in self.procedures_tree.get_children():
                self.procedures_tree.delete(item)
                
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT procedure_date, procedure_type, tooth_number, price, 
                       CASE WHEN is_paid = 1 THEN '‘±’µ’∏' ELSE '’à’π' END, comments 
                FROM procedures 
                WHERE patient_id=?
                ORDER BY procedure_date DESC
            """, (self.current_patient_id,))
            
            for row in cursor.fetchall():
                self.procedures_tree.insert("", "end", values=row)

        def toggle_payment_status():
            selected = self.procedures_tree.selection()
            if not selected:
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "‘∏’∂’ø÷Ä’•÷Ñ ’£÷Ä’°’∂÷Å’∏÷Ç’¥")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            procedure_date = self.procedures_tree.item(selected[0], "values")[0]
            cursor = self.conn.cursor()
            cursor.execute("SELECT id, is_paid FROM procedures WHERE patient_id=? AND procedure_date=?", 
                         (self.current_patient_id, procedure_date))
            procedure_id, current_status = cursor.fetchone()
            
            new_status = 0 if current_status == 1 else 1
            cursor.execute("UPDATE procedures SET is_paid=? WHERE id=?", 
                         (new_status, procedure_id))
            self.conn.commit()
            update_procedures_table()

        def delete_procedure():
            selected = self.procedures_tree.selection()
            if not selected:
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "‘∏’∂’ø÷Ä’•÷Ñ ’£÷Ä’°’∂÷Å’∏÷Ç’¥")
                return
                
            if not messagebox.askyesno("’Ä’°’Ω’ø’°’ø’∏÷Ç’¥", "’ã’∂’ª’•’û’¨ ’®’∂’ø÷Ä’æ’°’Æ ’£÷Ä’°’∂÷Å’∏÷Ç’¥’®"):
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            procedure_date = self.procedures_tree.item(selected[0], "values")[0]
            cursor = self.conn.cursor()
            cursor.execute("SELECT id FROM procedures WHERE patient_id=? AND procedure_date=?", 
                         (self.current_patient_id, procedure_date))
            procedure_id = cursor.fetchone()[0]
            cursor.execute("DELETE FROM procedures WHERE id=?", (procedure_id,))
            self.conn.commit()
            update_procedures_table()

        def edit_procedure():
            selected = self.procedures_tree.selection()
            if not selected:
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "‘∏’∂’ø÷Ä’•÷Ñ ’£÷Ä’°’∂÷Å’∏÷Ç’¥")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            procedure_date = self.procedures_tree.item(selected[0], "values")[0]
            cursor = self.conn.cursor()
            cursor.execute("SELECT id FROM procedures WHERE patient_id=? AND procedure_date=?", 
                         (self.current_patient_id, procedure_date))
            procedure_id = cursor.fetchone()[0]
            self.edit_procedure_details(procedure_id)

        buttons = [
            ("üîÑ ‘π’°÷Ä’¥’°÷Å’∂’•’¨", update_procedures_table, self.colors['info']),
            ("‚úèÔ∏è ’ì’∏’≠’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥’®", toggle_payment_status, self.colors['warning']),
            ("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", edit_procedure, self.colors['secondary']),
            ("‚ùå ’ã’∂’ª’•’¨", delete_procedure, self.colors['danger'])
        ]

        for text, cmd, color in buttons:
            btn = tk.Button(btn_frame, 
                          text=text, 
                          command=cmd,
                          bg=color,
                          fg='white',
                          font=('Arial', 10, 'bold'),
                          padx=10,
                          pady=5,
                          relief=tk.FLAT,
                          bd=0)
            btn.pack(side=tk.LEFT, padx=5)

        update_procedures_table()

    def edit_patient(self, patient_id):
        # ’ç’ø’°’∂’°’¨ ’∞’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM patients WHERE id=?", (patient_id,))
        patient_data = cursor.fetchone()
        
        cursor.execute("SELECT disease_name FROM patient_diseases WHERE patient_id=?", (patient_id,))
        patient_diseases = [row[0] for row in cursor.fetchall()]

        dialog = tk.Toplevel(self.root)
        dialog.title("‘Ω’¥’¢’°’£÷Ä’•’¨ ’∞’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®")
        dialog.geometry("700x700")
        dialog.resizable(False, False)
        dialog.configure(bg=self.colors['background'])

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header = tk.Label(dialog, 
                        text="‘Ω’¥’¢’°’£÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®", 
                        font=('Arial', 14, 'bold'), 
                        bg=self.colors['primary'], 
                        fg='white',
                        padx=10,
                        pady=10)
        header.pack(fill=tk.X)

        form_frame = tk.Frame(dialog, bg=self.colors['background'], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH, expand=True)

        # Style for entry fields
        entry_style = {
            'font': ('Arial', 10),
            'relief': tk.GROOVE,
            'bd': 1,
            'bg': self.colors['card'],
            'highlightbackground': self.colors['secondary'],
            'highlightthickness': 1
        }

        # ’Ä’´’¥’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
        tk.Label(form_frame, 
               text="1. ‘±’∂’∏÷Ç’∂ ’°’¶’£’°’∂’∏÷Ç’∂*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        name_entry = tk.Entry(form_frame, 
                            width=40,
                            **entry_style)
        name_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")
        name_entry.insert(0, patient_data[1])

        tk.Label(form_frame, 
               text="2. ‘æ’∂’∂’§’µ’°’∂ ’°’¥’Ω’°’©’´’æ (’è’è’è’è-‘±‘±-’ï’ï):", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=1, column=0, padx=10, pady=5, sticky="e")
        birth_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        birth_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")
        birth_entry.insert(0, patient_data[2])

        tk.Label(form_frame, 
               text="3. ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=2, column=0, padx=10, pady=5, sticky="e")
        phone_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        phone_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")
        phone_entry.insert(0, patient_data[3])

        tk.Label(form_frame, 
               text="4. ‘±’µ’¨ ’∂’∑’∏÷Ç’¥’∂’•÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=3, column=0, padx=10, pady=5, sticky="e")
        notes_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        notes_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")
        notes_entry.insert(0, patient_data[4])

        # ’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∑÷Ä’ª’°’∂’°’Ø
        diseases_frame = tk.LabelFrame(form_frame, 
                                     text="5. ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä", 
                                     font=('Arial', 10, 'bold'),
                                     bg=self.colors['background'],
                                     padx=10, 
                                     pady=10)
        diseases_frame.grid(row=4, columnspan=2, sticky="we", padx=10, pady=10)

        disease_vars = []
        for i, disease in enumerate(self.diseases_list):
            var = tk.IntVar()
            if disease in patient_diseases:
                var.set(1)
            disease_vars.append(var)
            cb = tk.Checkbutton(diseases_frame, 
                              text=f"‚Ä¢ {disease}", 
                              variable=var,
                              bg=self.colors['background'],
                              font=('Arial', 10),
                              anchor='w',
                              activebackground=self.colors['background'],
                              activeforeground=self.colors['text'])
            cb.pack(fill=tk.X, padx=5, pady=2)

        # ‘ø’∏’≥’°’Ø’∂’•÷Ä
        btn_frame = tk.Frame(form_frame, bg=self.colors['background'])
        btn_frame.grid(row=5, columnspan=2, pady=20)

        def save_changes():
            try:
                cursor = self.conn.cursor()
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’®
                cursor.execute(
                    """UPDATE patients SET 
                    full_name = ?,
                    birth_date = ?,
                    phone = ?,
                    notes = ?
                    WHERE id = ?""",
                    (name_entry.get(), 
                     birth_entry.get(),
                     phone_entry.get(),
                     notes_entry.get(),
                     patient_id)
                )
                
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®
                cursor.execute("DELETE FROM patient_diseases WHERE patient_id=?", (patient_id,))
                
                for i, var in enumerate(disease_vars):
                    if var.get() == 1:
                        cursor.execute(
                            "INSERT INTO patient_diseases (patient_id, disease_name) VALUES (?, ?)",
                            (patient_id, self.diseases_list[i])
                        )
                
                self.conn.commit()
                dialog.destroy()
                messagebox.showinfo("’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂", "’Ä’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’•’∂")
                self.status_bar.config(text="’Ä’´’æ’°’∂’§’´ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’•’∂")
                
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’∞’´’æ’°’∂’§’´ ÷Å’∏÷Ç÷Å’°’Ø’®
                self.update_patients_table()
                
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’∞’´’æ’°’∂’§’´ ÷Ñ’°÷Ä’ø’®
                self.open_patient_card()
                
            except Exception as e:
                messagebox.showerror("’ç’≠’°’¨", f"’è’æ’µ’°’¨’∂’•÷Ä’´ ’©’°÷Ä’¥’°÷Å’¥’°’∂ ’Ω’≠’°’¨:\n{str(e)}")
                self.status_bar.config(text=f"’ç’≠’°’¨: {str(e)}")

        tk.Button(btn_frame, 
                 text="’ä’°’∞’∫’°’∂’•’¨", 
                 command=save_changes,
                 bg=self.colors['success'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

        tk.Button(btn_frame, 
                 text="’â’•’≤’°÷Ä’Ø’•’¨", 
                 command=dialog.destroy,
                 bg=self.colors['danger'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

    def add_procedure(self, patient_id):
        dialog = tk.Toplevel(self.root)
        dialog.title("‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä ’°’∑’≠’°’ø’°’∂÷Ñ")
        dialog.geometry("600x500")
        dialog.resizable(False, False)
        dialog.configure(bg=self.colors['background'])

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header = tk.Label(dialog, 
                        text="‘±’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’æ’µ’°’¨’∂’•÷Ä", 
                        font=('Arial', 14, 'bold'), 
                        bg=self.colors['primary'], 
                        fg='white',
                        padx=10,
                        pady=10)
        header.pack(fill=tk.X)

        form_frame = tk.Frame(dialog, bg=self.colors['background'], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH, expand=True)

        # Style for entry fields
        entry_style = {
            'font': ('Arial', 10),
            'relief': tk.GROOVE,
            'bd': 1,
            'bg': self.colors['card'],
            'highlightbackground': self.colors['secondary'],
            'highlightthickness': 1
        }

        # ‘±’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø
        tk.Label(form_frame, 
               text="1. ‘±’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        procedure_entry = tk.Entry(form_frame, 
                                 width=40,
                                 **entry_style)
        procedure_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        # ‘±’¥’Ω’°’©’´’æ
        tk.Label(form_frame, 
               text="2. ‘±’¥’Ω’°’©’´’æ (’è’è’è’è-‘±‘±-’ï’ï)*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=1, column=0, padx=10, pady=5, sticky="e")
        date_entry = tk.Entry(form_frame, 
                            width=40,
                            **entry_style)
        date_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")
        date_entry.insert(0, datetime.now().strftime("%Y-%m-%d"))

        # ‘±’ø’°’¥’´ ’∞’°’¥’°÷Ä
        tk.Label(form_frame, 
               text="3. ‘±’ø’°’¥’´ ’∞’°’¥’°÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=2, column=0, padx=10, pady=5, sticky="e")
        tooth_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        tooth_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        # ‘≥’´’∂
        tk.Label(form_frame, 
               text="4. ‘≥’´’∂ (’§÷Ä’°’¥)*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=3, column=0, padx=10, pady=5, sticky="e")
        price_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        price_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        # ’é’≥’°÷Ä’¥’°’∂ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø
        paid_var = tk.IntVar()
        paid_check = tk.Checkbutton(form_frame, 
                                  text="5. ’é’≥’°÷Ä’æ’°’Æ ’ß", 
                                  variable=paid_var,
                                  bg=self.colors['background'],
                                  font=('Arial', 10))
        paid_check.grid(row=4, column=1, padx=10, pady=5, sticky="w")

        # ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂
        tk.Label(form_frame, 
               text="6. ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=5, column=0, padx=10, pady=5, sticky="ne")
        comments_text = tk.Text(form_frame, 
                              width=40, 
                              height=5, 
                              font=('Arial', 10),
                              relief=tk.GROOVE,
                              bd=2)
        comments_text.grid(row=5, column=1, padx=10, pady=5, sticky="w")

        # ‘ø’∏’≥’°’Ø’∂’•÷Ä
        btn_frame = tk.Frame(form_frame, bg=self.colors['background'])
        btn_frame.grid(row=6, columnspan=2, pady=20)

        def save_procedure():
            if not procedure_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø’®")
                return
            if not date_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’®")
                return
            if not price_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’£’´’∂’®")
                return

            try:
                price = float(price_entry.get())
                cursor = self.conn.cursor()
                cursor.execute(
                    """INSERT INTO procedures 
                    (patient_id, procedure_date, procedure_type, tooth_number, price, is_paid, comments) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)""",
                    (patient_id, 
                     date_entry.get(),
                     procedure_entry.get(),
                     tooth_entry.get(),
                     price,
                     paid_var.get(),
                     comments_text.get("1.0", tk.END).strip())
                )
                self.conn.commit()
                dialog.destroy()
                messagebox.showinfo("’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂", "‘±’∑’≠’°’ø’°’∂÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß")
                self.status_bar.config(text="‘±’∑’≠’°’ø’°’∂÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß")
                
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’°’∑’≠’°’ø’°’∂÷Ñ’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø’®
                self.open_patient_card()
            except ValueError:
                messagebox.showerror("’ç’≠’°’¨", "‘≥’´’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’©’´’æ")
            except Exception as e:
                messagebox.showerror("’ç’≠’°’¨", f"’è’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∫’°’∂’¥’°’∂ ’Ω’≠’°’¨:\n{str(e)}")
                self.status_bar.config(text=f"’ç’≠’°’¨: {str(e)}")

        tk.Button(btn_frame, 
                 text="’ä’°’∞’∫’°’∂’•’¨", 
                 command=save_procedure,
                 bg=self.colors['success'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

        tk.Button(btn_frame, 
                 text="’â’•’≤’°÷Ä’Ø’•’¨", 
                 command=dialog.destroy,
                 bg=self.colors['danger'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

    def edit_procedure_details(self, procedure_id):
        # ’ç’ø’°’∂’°’¨ ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM procedures WHERE id=?", (procedure_id,))
        procedure_data = cursor.fetchone()

        dialog = tk.Toplevel(self.root)
        dialog.title("‘Ω’¥’¢’°’£÷Ä’•’¨ ’°’∑’≠’°’ø’°’∂÷Ñ")
        dialog.geometry("600x500")
        dialog.resizable(False, False)
        dialog.configure(bg=self.colors['background'])

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header = tk.Label(dialog, 
                        text="‘Ω’¥’¢’°’£÷Ä’•’¨ ’°’∑’≠’°’ø’°’∂÷Ñ", 
                        font=('Arial', 14, 'bold'), 
                        bg=self.colors['primary'], 
                        fg='white',
                        padx=10,
                        pady=10)
        header.pack(fill=tk.X)

        form_frame = tk.Frame(dialog, bg=self.colors['background'], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH, expand=True)

        # Style for entry fields
        entry_style = {
            'font': ('Arial', 10),
            'relief': tk.GROOVE,
            'bd': 1,
            'bg': self.colors['card'],
            'highlightbackground': self.colors['secondary'],
            'highlightthickness': 1
        }

        # ‘±’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø
        tk.Label(form_frame, 
               text="1. ‘±’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        procedure_entry = tk.Entry(form_frame, 
                                 width=40,
                                 **entry_style)
        procedure_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")
        procedure_entry.insert(0, procedure_data[3])

        # ‘±’¥’Ω’°’©’´’æ
        tk.Label(form_frame, 
               text="2. ‘±’¥’Ω’°’©’´’æ (’è’è’è’è-‘±‘±-’ï’ï)*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=1, column=0, padx=10, pady=5, sticky="e")
        date_entry = tk.Entry(form_frame, 
                            width=40,
                            **entry_style)
        date_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")
        date_entry.insert(0, procedure_data[2])

        # ‘±’ø’°’¥’´ ’∞’°’¥’°÷Ä
        tk.Label(form_frame, 
               text="3. ‘±’ø’°’¥’´ ’∞’°’¥’°÷Ä:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=2, column=0, padx=10, pady=5, sticky="e")
        tooth_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        tooth_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")
        tooth_entry.insert(0, procedure_data[4])

        # ‘≥’´’∂
        tk.Label(form_frame, 
               text="4. ‘≥’´’∂ (’§÷Ä’°’¥)*:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=3, column=0, padx=10, pady=5, sticky="e")
        price_entry = tk.Entry(form_frame, 
                             width=40,
                             **entry_style)
        price_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")
        price_entry.insert(0, procedure_data[5])

        # ’é’≥’°÷Ä’¥’°’∂ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø
        paid_var = tk.IntVar(value=procedure_data[6])
        paid_check = tk.Checkbutton(form_frame, 
                                  text="5. ’é’≥’°÷Ä’æ’°’Æ ’ß", 
                                  variable=paid_var,
                                  bg=self.colors['background'],
                                  font=('Arial', 10))
        paid_check.grid(row=4, column=1, padx=10, pady=5, sticky="w")

        # ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂
        tk.Label(form_frame, 
               text="6. ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:", 
               bg=self.colors['background'],
               font=('Arial', 10, 'bold')).grid(row=5, column=0, padx=10, pady=5, sticky="ne")
        comments_text = tk.Text(form_frame, 
                              width=40, 
                              height=5, 
                              font=('Arial', 10),
                              relief=tk.GROOVE,
                              bd=2)
        comments_text.grid(row=5, column=1, padx=10, pady=5, sticky="w")
        comments_text.insert("1.0", procedure_data[7])

        # ‘ø’∏’≥’°’Ø’∂’•÷Ä
        btn_frame = tk.Frame(form_frame, bg=self.colors['background'])
        btn_frame.grid(row=6, columnspan=2, pady=20)

        def save_changes():
            if not procedure_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’ø’•’Ω’°’Ø’®")
                return
            if not date_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’®")
                return
            if not price_entry.get():
                messagebox.showwarning("‘∂’£’∏÷Ç’∑’°÷Å’∏÷Ç’¥", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’£’´’∂’®")
                return

            try:
                price = float(price_entry.get())
                cursor = self.conn.cursor()
                cursor.execute(
                    """UPDATE procedures SET 
                    procedure_date = ?,
                    procedure_type = ?,
                    tooth_number = ?,
                    price = ?,
                    is_paid = ?,
                    comments = ?
                    WHERE id = ?""",
                    (date_entry.get(),
                     procedure_entry.get(),
                     tooth_entry.get(),
                     price,
                     paid_var.get(),
                     comments_text.get("1.0", tk.END).strip(),
                     procedure_id)
                )
                self.conn.commit()
                dialog.destroy()
                messagebox.showinfo("’Ä’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂", "‘±’∑’≠’°’ø’°’∂÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’ß")
                self.status_bar.config(text="‘±’∑’≠’°’ø’°’∂÷Ñ’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’ß")
                
                # ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’°’∑’≠’°’ø’°’∂÷Ñ’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø’®
                self.open_patient_card()
            except ValueError:
                messagebox.showerror("’ç’≠’°’¨", "‘≥’´’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’©’´’æ")
            except Exception as e:
                messagebox.showerror("’ç’≠’°’¨", f"’è’æ’µ’°’¨’∂’•÷Ä’´ ’©’°÷Ä’¥’°÷Å’¥’°’∂ ’Ω’≠’°’¨:\n{str(e)}")
                self.status_bar.config(text=f"’ç’≠’°’¨: {str(e)}")

        tk.Button(btn_frame, 
                 text="’ä’°’∞’∫’°’∂’•’¨", 
                 command=save_changes,
                 bg=self.colors['success'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

        tk.Button(btn_frame, 
                 text="’â’•’≤’°÷Ä’Ø’•’¨", 
                 command=dialog.destroy,
                 bg=self.colors['danger'],
                 fg='white',
                 font=('Arial', 10, 'bold'),
                 padx=15,
                 pady=5,
                 relief=tk.FLAT,
                 bd=0).pack(side=tk.LEFT, padx=10)

    def search_patient(self):
        search_term = simpledialog.askstring("’ì’∂’ø÷Ä’•’¨ ’∞’´’æ’°’∂’§", "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∞’´’æ’°’∂’§’´ ’°’∂’∏÷Ç’∂’® ’Ø’°’¥ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®:")
        if not search_term:
            return
            
        for item in self.patients_tree.get_children():
            self.patients_tree.delete(item)
            
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT id, full_name, phone, birth_date 
            FROM patients 
            WHERE full_name LIKE ? OR phone LIKE ?
            ORDER BY full_name
        """, (f"%{search_term}%", f"%{search_term}%"))
        
        for row in cursor.fetchall():
            self.patients_tree.insert("", "end", values=row)

    def show_stats(self):
        cursor = self.conn.cursor()
        
        # ’Ä’°’∑’æ’°÷Ä’Ø’•’¨ ’∞’´’æ’°’∂’§’∂’•÷Ä’´ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ÷Ñ’°’∂’°’Ø’®
        cursor.execute("SELECT COUNT(*) FROM patients")
        total_patients = cursor.fetchone()[0]
        
        # ’Ä’°’∑’æ’°÷Ä’Ø’•’¨ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’•’Ø’°’¥’∏÷Ç’ø’®
        cursor.execute("SELECT SUM(price) FROM procedures WHERE is_paid=1")
        total_income = cursor.fetchone()[0] or 0
        
        # ’Ä’°’∑’æ’°÷Ä’Ø’•’¨ ’π’æ’≥’°÷Ä’æ’°’Æ ’£’∏÷Ç’¥’°÷Ä’®
        cursor.execute("SELECT SUM(price) FROM procedures WHERE is_paid=0")
        unpaid_amount = cursor.fetchone()[0] or 0
        
        # ’ç’ø’•’≤’Æ’•’¨ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’∫’°’ø’∏÷Ç’∞’°’∂
        stats_window = tk.Toplevel(self.root)
        stats_window.title("’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂")
        stats_window.geometry("500x300")
        stats_window.resizable(False, False)
        stats_window.configure(bg=self.colors['background'])

        # ’é’•÷Ä’∂’°’£’´÷Ä
        header = tk.Label(stats_window, 
                        text="‘ø’¨’´’∂’´’Ø’°’µ’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", 
                        font=('Arial', 14, 'bold'), 
                        bg=self.colors['primary'], 
                        fg='white',
                        padx=10,
                        pady=10)
        header.pack(fill=tk.X)

        # ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä
        stats_frame = tk.Frame(stats_window, bg=self.colors['background'], padx=20, pady=20)
        stats_frame.pack(fill=tk.BOTH, expand=True)

        stats = [
            (f"1. ’Ä’´’æ’°’∂’§’∂’•÷Ä’´ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ÷Ñ’°’∂’°’Ø’ù {total_patients}", 0),
            (f"2. ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’•’Ø’°’¥’∏÷Ç’ø’ù {total_income:.2f} ’§÷Ä’°’¥", 1),
            (f"3. ’â’æ’≥’°÷Ä’æ’°’Æ ’£’∏÷Ç’¥’°÷Ä’ù {unpaid_amount:.2f} ’§÷Ä’°’¥", 2)
        ]

        for text, row in stats:
            tk.Label(stats_frame, 
                   text=text, 
                   font=('Arial', 12),
                   bg=self.colors['background'],
                   anchor='w').grid(row=row, column=0, sticky="w", padx=10, pady=10)

    def __del__(self):
        if hasattr(self, 'conn'):
            self.conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = DentalClinicApp(root)
    root.mainloop()
