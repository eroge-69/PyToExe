import os
import subprocess
import ctypes
import string
import requests
import datetime
import psutil
import pyautogui
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from comtypes import CLSCTX_ALL
from ctypes import cast, POINTER
from plyer import notification
import cv2  # –î–ª—è –≤–µ–±-–∫–∞–º–µ—Ä—ã, pip install opencv-python
from PIL import Image  # –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, pip install pillow

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = '8379452459:AAHLbcbWlt3ZPuJ8Pcf17vFEVoffLnkYhd0'

# –¢–≤–æ–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ —à—É—Ç–∏–ª –Ω–∞–¥ —Ç–æ–±–æ–π üòÇ)
ALLOWED_USER_ID = 5186874712

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
DOWNLOAD_FOLDER = os.path.expanduser('~/Downloads')

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
waiting_for_wallpaper = False
waiting_for_file = False
waiting_for_music = False

# –î–∏—Å–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
drives = [f"{d}:\\" for d in string.ascii_uppercase if os.path.exists(f"{d}:\\")]

def get_drives_text():
    if not drives:
        return '–î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã? –ü—Ä–æ–≤–µ—Ä—å –ü–ö! üòÖ'
    return '\n'.join(f"{i+1}. üìÅ {d}" for i, d in enumerate(drives))

def get_items(path):
    items = []
    try:
        for name in sorted(os.listdir(path)):
            full = os.path.join(path, name)
            isdir = os.path.isdir(full)
            items.append((name, full, isdir))
    except PermissionError:
        items = [('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! üîí', '', False)]
    except Exception:
        items = [('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è! üò±', '', False)]
    return items

def get_list_text(items, path=''):
    if not items or items[0][0] in ['–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è!']:
        return f"üìÇ {path}\n{items[0][0]} üòÖ\n\nüîô –ù–∞–ø–∏—à–∏ 'back' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"

    def get_icon(name, isdir):
        if isdir:
            return "üìÅ"
        ext = name.lower().split('.')[-1]

        mapping = {
            # üìÇ –°–∏—Å—Ç–µ–º–Ω—ã–µ / –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ
            "exe": "üíæ", "msi": "üíæ", "bat": "‚öôÔ∏è", "sh": "üêö", "dll": "üß©", "sys": "üñ•Ô∏è",
            
            # üìù –¢–µ–∫—Å—Ç—ã –∏ –∫–æ–¥—ã
            "txt": "üìù", "log": "üìú", "md": "üìò", "ini": "‚öôÔ∏è", "cfg": "‚öôÔ∏è",
            "py": "üêç", "js": "‚ö°", "ts": "‚ö°", "html": "üåê", "htm": "üåê", "css": "üé®",
            "json": "üìë", "xml": "üßæ", "yml": "üìë", "yaml": "üìë", "c": "üíª", "cpp": "üíª",
            "cs": "üñ•Ô∏è", "java": "‚òï", "php": "üêò", "rb": "üíé", "go": "üêπ", "rs": "ü¶Ä",

            # üé∂ –ú—É–∑—ã–∫–∞
            "mp3": "üéµ", "wav": "üé∂", "flac": "üéº", "ogg": "üéß", "midi": "üéπ",

            # üé• –í–∏–¥–µ–æ
            "mp4": "üé•", "avi": "üìº", "mkv": "üé¨", "mov": "üéûÔ∏è", "webm": "üìΩÔ∏è",

            # üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∏
            "png": "üñºÔ∏è", "jpg": "üì∑", "jpeg": "üì∑", "gif": "ü§£", "bmp": "üñºÔ∏è",
            "svg": "üî≤", "ico": "üîò", "tiff": "üñºÔ∏è", "psd": "üé®", "xcf": "üé®",

            # üìö –î–æ–∫—É–º–µ–Ω—Ç—ã
            "pdf": "üìö", "doc": "üìò", "docx": "üìò", "odt": "üìò",
            "xls": "üìä", "xlsx": "üìä", "ods": "üìä",
            "ppt": "üìà", "pptx": "üìà", "odp": "üìà",
            "rtf": "üìë",

            # üì¶ –ê—Ä—Ö–∏–≤—ã
            "zip": "üì¶", "rar": "üì¶", "7z": "üì¶", "tar": "üì¶", "gz": "üì¶", "bz2": "üì¶",

            # üéÆ –ò–≥—Ä—ã –∏ –æ–±—Ä–∞–∑—ã
            "iso": "üíø", "bin": "üíø", "cue": "üíø", "img": "üíø", "vhd": "üíΩ", "vhdx": "üíΩ",
            "rom": "üéÆ", "sav": "üíæ",

            # üì° –ò–Ω—Ç–µ—Ä–Ω–µ—Ç
            "torrent": "üåÄ", "apk": "ü§ñ", "ipa": "üçè", "xap": "üì±",
            "batman": "ü¶á",  # —á–∏—Å—Ç–æ –¥–ª—è –ø—Ä–∏–∫–æ–ª–∞, –≤–¥—Ä—É–≥ –Ω–∞–π–¥—ë—à—å —Ç–∞–∫–æ–π —Ñ–∞–π–ª üòÇ
        }

        return mapping.get(ext, "üìÑ")

    header = f"üìÇ {path}\n" if path else ''
    lines = []

    for i, (name, _, isdir) in enumerate(items):
        # –¥–∏—Å–∫–∏
        if len(name) == 2 and name[1] == ":":
            icon = "üíΩ" if name[0].lower() in ["c", "d"] else "üíø"
        else:
            icon = get_icon(name, isdir)
        lines.append(f"{i+1}. {icon} {name}")

    return header + "\n".join(lines) + "\n\nüëâ –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ 'back' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ üòÇüî•"

def get_unique_filename(filename):
    base, ext = os.path.splitext(filename)
    file_path = os.path.join(DOWNLOAD_FOLDER, filename)
    if not os.path.exists(file_path):
        return file_path
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M")
    new_filename = f"{base}-{timestamp}{ext}"
    return os.path.join(DOWNLOAD_FOLDER, new_filename)

def check_user(update: Update) -> bool:
    return update.message.from_user.id == ALLOWED_USER_ID

async def start(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        await update.message.reply_text('–≠–π, —á—É–∂–∞–∫! –û—Ç–∫–∞–∑–æ–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ! üö´')
        return
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, –±–æ—Å—Å! –Ø —Ç–≤–æ–π –ü–ö-—Å–ª—É–≥–∞ !\n  –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n /screenshot (—Å–∫—Ä–∏–Ω —ç–∫—Ä–∞–Ω–∞!)\n /lock_screen (–±–ª–æ–∫ —ç–∫—Ä–∞–Ω–∞)\n /restart (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)\n /hibernate (—Å–ø—è—á–∫–∞) \n/list_processes (—Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å–æ–≤),\n /kill_all (–∑–∞–∫—Ä—ã—Ç—å –≤—Å—ë!)\n /set_brightness <0-100> (–Ø—Ä–∫–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞)\n /open_url <url> (–û—Ç–∫—Ä—ã—Ç–µ URL)\n /take_photo (—Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∏)\n /record_screen <—Å–µ–∫> (–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞)\n /system_info (–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)\n /clean_temp (–û—á–∏—Å—Ç–∫–∞ Temp)\n /random_wallpaper (–°–ª—É—á–∞–π–Ω—ã–µ –æ–±–æ–∏)\n /mute (–¢–∏—à–∏–Ω–∞)\n /unmute (–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∏—à–∏–Ω—É)\n /volume_up (–ü–æ–¥–Ω—è—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å)\n /volume_down (–ü–æ–Ω–∏–∑–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å)\n/search_file <–∏–º—è> (–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞)\n/create_folder <–ø—É—Ç—å> (–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É)\n/rename_file <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ> (–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª)\n/mouse_dance (—Ç–∞–Ω–µ—Ü –º—ã—à–∏!) \n–°—Ç–∞—Ä—ã–µ: \n/shutdown \n/open_app (–ª—é–±–æ–π —Ñ–∞–π–ª!)\n /open_media\n/delete_file \n/close_app (–ó–∞–∫—Ä—ã—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ) \n/change_wallpaper (–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏) \n/set_volume (–£—Å—Ç–æ–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å) \n/show_message (–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ) \n/sendfile (–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª) \n/playmusic (–ò–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É). ')

async def shutdown(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–í—ã–∫–ª—é—á–∞—é –ü–ö! –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Ö–æ–∑—è–∏–Ω! üò¥üòÇ')
    os.system('shutdown /s /t 1')

async def restart(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ü–ö! –î–µ—Ä–∂–∏—Å—å, –±—É–¥–µ—Ç —Ç—Ä—è—Å–∫–∞! üîÑüòÇ')
    os.system('shutdown /r /t 1')

async def hibernate(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–£–∫–ª–∞–¥—ã–≤–∞—é –ü–ö –≤ —Å–ø—è—á–∫—É! –°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, –∂–µ–ª–µ–∑—è–∫–∞! üõåüòÇ')
    os.system('shutdown /h')

async def lock_screen(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–ë–ª–æ–∫–∏—Ä—É—é —ç–∫—Ä–∞–Ω! –ù–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç —Ç–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã! üîíüòÇ')
    ctypes.windll.user32.LockWorkStation()


async def file_manager(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    context.user_data['mode'] = 'file_manager'
    context.user_data['page'] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if 'current_path' not in context.user_data:
        context.user_data['current_path'] = os.path.expanduser('~')  # –°—Ç–∞—Ä—Ç –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ üòÇ
    items = get_items(context.user_data['current_path'])
    await update.message.reply_text(get_list_text(items, context.user_data['current_path'], context.user_data['page']))

async def download_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–í–∫–ª—é—á–∏ /file_manager –∏ –∏—Å–ø–æ–ª—å–∑—É–π "download <num>" –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞! üòÇ')

async def upload_file(update: Update, context: CallbackContext) -> None:
    global waiting_for_upload
    if not check_user(update):
        return
    if 'current_path' not in context.user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ /file_manager –∏ –≤—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É! üòÇ')
        return
    waiting_for_upload = True
    await update.message.reply_text(f'–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ {context.user_data["current_path"]}! üì§üòÇ')

async def move_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    context.user_data['submode'] = 'move_source'
    await update.message.reply_text('–í–∫–ª—é—á–∏ /file_manager, –≤—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –Ω–∞–ø–∏—à–∏ "select <num>" –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è! –ü–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏ "paste"! üòÇ')

async def copy_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    context.user_data['submode'] = 'copy_source'
    await update.message.reply_text('–í–∫–ª—é—á–∏ /file_manager, –≤—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –Ω–∞–ø–∏—à–∏ "select <num>" –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è! –ü–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏ "paste"! üòÇ')

async def wifi_list(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        output = subprocess.check_output(['netsh', 'wlan', 'show', 'networks']).decode('cp866')
        await update.message.reply_text(f'WiFi-—Å–µ—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è:\n{output}\n–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å —Å–æ—Å–µ–¥–∞! üòúüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–µ—Ç–∏: {str(e)} üò¢')

async def battery(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        battery = psutil.sensors_battery()
        if battery:
            percent = battery.percent
            plugged = battery.power_plugged
            status = '–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è üîå' if plugged else '–ù–∞ –±–∞—Ç–∞—Ä–µ–π–∫–µ üîã'
            await update.message.reply_text(f'–ë–∞—Ç–∞—Ä–µ—è: {percent}% {status}! –ù–µ –¥–∞–π –ü–ö —É—Å–Ω—É—Ç—å! üò¥üòÇ')
        else:
            await update.message.reply_text('–ë–∞—Ç–∞—Ä–µ—è? –≠—Ç–æ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π –ü–ö, –±—Ä–æ! ‚ö°üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò¢')

async def clipboard_get(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        win32clipboard.OpenClipboard()
        data = win32clipboard.GetClipboardData()
        win32clipboard.CloseClipboard()
        await update.message.reply_text(f'–í –±—É—Ñ–µ—Ä–µ: {data[:100]}... üòúüòÇ' if len(data) > 100 else f'–í –±—É—Ñ–µ—Ä–µ: {data} üòúüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –¥–æ—Å—Ç–∞—Ç—å –±—É—Ñ–µ—Ä: {str(e)} üò¢')

async def clipboard_set(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ß—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±—É—Ñ–µ—Ä? /clipboard_set lol üòÇ')
        return
    text = ' '.join(context.args)
    try:
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardText(text)
        win32clipboard.CloseClipboard()
        await update.message.reply_text(f'–ó–∞–ø–∏—Å–∞–ª –≤ –±—É—Ñ–µ—Ä: {text}! –í—Å—Ç–∞–≤–ª—è–π –∏ —Ä–∂–∏! üòúüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò¢')

async def tell_joke(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç—ë–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –µ–º—É –æ —Å—á—ë—Ç–µ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ! üòúüòÇ",
        "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π? Python, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —à–∏–ø–∏—Ç –∫–∞–∫ –∑–º–µ–π–∫–∞! üêçüòÇ",
        "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—à—ë–ª –≤ –∞—Ä—Ç-—à–∫–æ–ª—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —Ö–æ—Ç–µ–ª –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –±–∞–π—Ç—ã! üé®üòÇ",
    ]
    await update.message.reply_text(random.choice(jokes))

async def press_key(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ö–∞–∫—É—é –∫–ª–∞–≤–∏—à—É –Ω–∞–∂–∞—Ç—å? /press_key enter üòÇ')
        return
    key = context.args[0].lower()
    try:
        pyautogui.press(key)
        await update.message.reply_text(f'–ù–∞–∂–∞–ª {key}! –ö–∞–∫ –±—É–¥—Ç–æ –ø—Ä–∏–≤–∏–¥–µ–Ω–∏–µ –∑–∞ –∫–ª–∞–≤–æ–π! üëªüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –Ω–∞–∂–∞—Ç—å: {str(e)} üò¢')

async def type_text(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ß—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å? /type_text –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üòÇ')
        return
    text = ' '.join(context.args)
    try:
        pyautogui.write(text)
        await update.message.reply_text(f'–ù–∞–ø–µ—á–∞—Ç–∞–ª: {text}! –ö–∞–∫ —Ö–∞–∫–µ—Ä –∏–∑ 90-—Ö! üíæüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò¢')

async def open_app(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if context.args:
        path = ' '.join(context.args)
        try:
            os.startfile(path)
            await update.message.reply_text(f'–û—Ç–∫—Ä—ã–≤–∞—é {path}! –í–æ–ª—à–µ–±—Å—Ç–≤–æ! ‚ú®üòÇ')
        except Exception as e:
            await update.message.reply_text(f'–û–π-–æ–π, –Ω–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å {path}: {str(e)} üòÖ')
    else:
        context.user_data['mode'] = 'open'
        context.user_data['current_path'] = ''
        await update.message.reply_text('–ò—â–µ–º —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è! –í—ã–±–µ—Ä–∏ –¥–∏—Å–∫:\n' + get_drives_text() + '\nüòÇ')

async def handle_media(update: Update, context: CallbackContext) -> None:
    global waiting_for_wallpaper, waiting_for_file, waiting_for_music
    if not check_user(update):
        return
    user_data = context.user_data
    if 'mode' in user_data:
        await update.message.reply_text('–≠–π, —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ —Ñ–∞–π–ª–æ–≤! –ó–∞–∫–æ–Ω—á–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –ø–æ—Ç–æ–º —à–ª—ë–π –º–µ–¥–∏–∞! üòú')
        return
    if waiting_for_music and update.message.audio:
        file = await update.message.audio.get_file()
        filename = update.message.audio.file_name or 'audio.mp3'
        file_path = get_unique_filename(filename)
        try:
            await file.download_to_drive(file_path)
            os.startfile(file_path)
            await update.message.reply_text(f'–í–∫–ª—é—á–∞—é —Ç–≤–æ—é –º—É–∑—ã–∫—É: {os.path.basename(file_path)}! –ö–∞—á–∞–π –≥–æ–ª–æ–≤–æ–π! üéµüòÇ')
        except Exception as e:
            await update.message.reply_text(f'–û–π, –Ω–µ –º–æ–≥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {str(e)} üò¢')
        waiting_for_music = False
    elif waiting_for_file and (update.message.document or update.message.photo or update.message.video):
        if update.message.document:
            file = await update.message.document.get_file()
            filename = update.message.document.file_name
        elif update.message.photo:
            file = await update.message.photo[-1].get_file()
            filename = 'photo.jpg'
        elif update.message.video:
            file = await update.message.video.get_file()
            filename = 'video.mp4'
        file_path = get_unique_filename(filename)
        try:
            await file.download_to_drive(file_path)
            await update.message.reply_text(f'–°–æ—Ö—Ä–∞–Ω–∏–ª {os.path.basename(file_path)} –≤ Downloads! üìÅüòÇ')
        except Exception as e:
            await update.message.reply_text(f'–ù–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {str(e)} üò¢')
        waiting_for_file = False
    elif update.message.photo and waiting_for_wallpaper:
        file = await update.message.photo[-1].get_file()
        file_path = os.path.join(DOWNLOAD_FOLDER, 'photo_wallpaper.jpg')
        await file.download_to_drive(file_path)
        try:
            abs_path = os.path.abspath(file_path)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, abs_path, 0)
            await update.message.reply_text(f'–°–º–µ–Ω–∏–ª –æ–±–æ–∏! –ü–ö —Å—Ç–∏–ª—å–Ω—ã–π! üñºÔ∏èüòÇ')
        except Exception as e:
            await update.message.reply_text(f'–ù–µ –º–æ–≥—É —Å–º–µ–Ω–∏—Ç—å –æ–±–æ–∏: {str(e)} üò≠')
        waiting_for_wallpaper = False
    elif update.message.photo:
        file = await update.message.photo[-1].get_file()
        file_path = os.path.join(DOWNLOAD_FOLDER, 'photo.jpg')
        await file.download_to_drive(file_path)
        os.startfile(file_path)
        await update.message.reply_text('–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ç–æ! üì∏üòÇ')
    elif update.message.video:
        file = await update.message.video.get_file()
        file_path = os.path.join(DOWNLOAD_FOLDER, 'video.mp4')
        await file.download_to_drive(file_path)
        os.startfile(file_path)
        await update.message.reply_text('–û—Ç–∫—Ä—ã–≤–∞—é –≤–∏–¥–µ–æ! üçøüòÇ')
    else:
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã! üòú')

async def delete_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if context.args:
        file_path = ' '.join(context.args)
        try:
            os.remove(file_path)
            await update.message.reply_text(f'–£–¥–∞–ª–∏–ª {file_path}! üóëÔ∏èüòÇ')
        except Exception as e:
            await update.message.reply_text(f'–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å: {str(e)} üò¢')
    else:
        context.user_data['mode'] = 'delete'
        context.user_data['current_path'] = ''
        await update.message.reply_text('–ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é! –í—ã–±–µ—Ä–∏ –¥–∏—Å–∫:\n' + get_drives_text() + ' üòÇ')

async def close_app(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ö–∞–∫—É—é –ø—Ä–æ–≥—É –∑–∞–∫—Ä—ã—Ç—å? /close_app chrome.exe üòÇ')
        return
    app_name = ' '.join(context.args)
    try:
        os.system(f'taskkill /IM {app_name} /F')
        await update.message.reply_text(f'–ó–∞–∫—Ä—ã–ª {app_name}! üö™üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –∑–∞–∫—Ä—ã—Ç—å: {str(e)} üòÖ')

async def kill_all(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–ó–∞–∫—Ä—ã–≤–∞—é –í–°–Å! –ü–ö –≤ —à–æ–∫–µ! üí•üòÇ')
    os.system('taskkill /f /im *')

async def list_processes(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    processes = [p.info for p in psutil.process_iter(['pid', 'name'])]
    text = '–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:\n' + '\n'.join([f"{p['pid']}: {p['name']}" for p in processes[:20]])  # –ü–µ—Ä–≤—ã–µ 20
    await update.message.reply_text(text + '\n...–∏ –µ—â—ë –∫—É—á–∞! üòÇ')

async def change_wallpaper(update: Update, context: CallbackContext) -> None:
    global waiting_for_wallpaper
    if not check_user(update):
        return
    if context.args:
        wallpaper_path = ' '.join(context.args)
        try:
            abs_path = os.path.abspath(wallpaper_path)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, abs_path, 0)
            await update.message.reply_text(f'–°–º–µ–Ω–∏–ª –æ–±–æ–∏ –Ω–∞ {wallpaper_path}! üñºÔ∏èüòÇ')
        except Exception as e:
            await update.message.reply_text(f'–ù–µ –º–æ–≥—É: {str(e)} üò≠')
    else:
        waiting_for_wallpaper = True
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ! üì∏üòé')

async def random_wallpaper(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    images = [f for f in os.listdir(DOWNLOAD_FOLDER) if f.lower().endswith(('.jpg', '.png'))]
    if images:
        import random
        img = random.choice(images)
        path = os.path.join(DOWNLOAD_FOLDER, img)
        try:
            abs_path = os.path.abspath(path)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, abs_path, 0)
            await update.message.reply_text(f'–°–ª—É—á–∞–π–Ω—ã–µ –æ–±–æ–∏: {img}! –°—é—Ä–ø—Ä–∏–∑! üé≤üòÇ')
        except Exception as e:
            await update.message.reply_text(f'–ù–µ –º–æ–≥—É: {str(e)} üò≠')
    else:
        await update.message.reply_text('–ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ Downloads! –î–æ–±–∞–≤—å! üòú')

async def set_volume(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏? /set_volume 50 üòÇ')
        return
    try:
        level = float(' '.join(context.args))
        if not 0 <= level <= 100:
            raise ValueError('0-100! üòÜ')
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMasterVolumeLevelScalar(level / 100.0, None)
        await update.message.reply_text(f'–ì—Ä–æ–º–∫–æ—Å—Ç—å {level}%! üéµüòÇ')
    except ValueError as e:
        await update.message.reply_text(f'–ù–µ–≤–µ—Ä–Ω–æ: {str(e)} üòú')
    except Exception as e:
        await update.message.reply_text(f'–ü—Ä–æ–±–ª–µ–º–∞: {str(e)} üò≠')

async def volume_up(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        current = volume.GetMasterVolumeLevelScalar()
        new = min(1.0, current + 0.1)
        volume.SetMasterVolumeLevelScalar(new, None)
        await update.message.reply_text('–ì—Ä–æ–º—á–µ! +10%! üîäüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üòÖ')

async def volume_down(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        current = volume.GetMasterVolumeLevelScalar()
        new = max(0.0, current - 0.1)
        volume.SetMasterVolumeLevelScalar(new, None)
        await update.message.reply_text('–¢–∏—à–µ! -10%! ü§´üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üòÖ')

async def mute(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMute(1, None)
        await update.message.reply_text('–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω! –¢–∏—à–∏–Ω–∞! ü§êüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò≠')

async def unmute(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMute(0, None)
        await update.message.reply_text('–ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω! –ì—Ä–æ–º–∫–æ! üîäüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò≠')

async def set_brightness(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–Ø—Ä–∫–æ—Å—Ç—å 0-100? /set_brightness 50 üòÇ')
        return
    try:
        level = int(' '.join(context.args))
        if not 0 <= level <= 100:
            raise ValueError('0-100! üòÜ')
        # –î–ª—è Windows, –∏—Å–ø–æ–ª—å–∑—É–µ–º WMI (–Ω—É–∂–µ–Ω pywin32)
        import wmi
        c = wmi.WMI(namespace="wmi")
        brightness_methods = c.WmiMonitorBrightnessMethods()[0]
        brightness_methods.WmiSetBrightness(1, level)
        await update.message.reply_text(f'–Ø—Ä–∫–æ—Å—Ç—å {level}%! –°–≤–µ—Ç–ª–æ! üí°üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –∏–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å: {str(e)} (–£—Å—Ç–∞–Ω–æ–≤–∏ pywin32!) üò≠')

async def open_url(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ö–∞–∫–æ–π URL? /open_url https://google.com üòÇ')
        return
    url = ' '.join(context.args)
    try:
        os.startfile(url)
        await update.message.reply_text(f'–û—Ç–∫—Ä—ã–≤–∞—é {url}! –°—ë—Ä—Ñ–∏–Ω–≥! üåäüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å URL: {str(e)} üòÖ')

async def screenshot(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        screenshot = pyautogui.screenshot()
        file_path = os.path.join(DOWNLOAD_FOLDER, f'screenshot-{datetime.datetime.now().strftime("%Y%m%d_%H%M")}.png')
        screenshot.save(file_path)
        with open(file_path, 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption='–°–∫—Ä–∏–Ω—à–æ—Ç —Ç–≤–æ–µ–≥–æ –ü–ö! üì∏üòÇ')
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω: {str(e)} (–£—Å—Ç–∞–Ω–æ–≤–∏ pyautogui!) üò≠')

async def take_photo(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    try:
        cap = cv2.VideoCapture(0)  # –í–µ–±-–∫–∞–º–µ—Ä–∞
        ret, frame = cap.read()
        if ret:
            file_path = os.path.join(DOWNLOAD_FOLDER, f'photo-{datetime.datetime.now().strftime("%Y%m%d_%H%M")}.jpg')
            cv2.imwrite(file_path, frame)
            cap.release()
            with open(file_path, 'rb') as photo:
                await update.message.reply_photo(photo=photo, caption='–§–æ—Ç–æ —Å –≤–µ–±–∫–∏! üòéüì∑üòÇ')
            os.remove(file_path)
        else:
            await update.message.reply_text('–ö–∞–º–µ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! üò¢')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {str(e)} (–£—Å—Ç–∞–Ω–æ–≤–∏ opencv-python!) üò≠')

async def record_screen(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å? /record_screen 10 üòÇ')
        return
    try:
        duration = int(' '.join(context.args))
        file_path = os.path.join(DOWNLOAD_FOLDER, f'record-{datetime.datetime.now().strftime("%Y%m%d_%H%M")}.mp4')
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ ffmpeg (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        cmd = f'ffmpeg -f gdigrab -framerate 10 -t {duration} -i desktop {file_path}'
        subprocess.run(cmd, shell=True)
        await update.message.reply_video(open(file_path, 'rb'), caption=f'–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ {duration} —Å–µ–∫! üé•üòÇ')
        os.remove(file_path)
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å: {str(e)} (–£—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg!) üò≠')

async def system_info(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    info = f'–û–°: {os.name}\nCPU: {psutil.cpu_percent()}%\nRAM: {psutil.virtual_memory().percent}%\n–î–∏—Å–∫–∏: {len(drives)}'
    await update.message.reply_text(info + '\n–¢–≤–æ–π –ü–ö –≤ —Ñ–æ—Ä–º–µ! üí™üòÇ')

async def clean_temp(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    temp_path = os.environ.get('TEMP', '')
    try:
        for file in os.listdir(temp_path):
            os.remove(os.path.join(temp_path, file))
        await update.message.reply_text('–û—á–∏—Å—Ç–∏–ª temp! –ß–∏—Å—Ç–æ, –∫–∞–∫ —Å–ª–µ–∑–∞! üßºüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É –æ—á–∏—Å—Ç–∏—Ç—å: {str(e)} üò¢')

async def search_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ß—Ç–æ –∏—Å–∫–∞—Ç—å? /search_file meme.jpg üòÇ')
        return
    search_name = ' '.join(context.args)
    results = []
    for root, dirs, files in os.walk('C:\\'):  # –ü–æ–∏—Å–∫ –ø–æ C:
        if search_name in files:
            results.append(os.path.join(root, search_name))
        if len(results) > 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–º
            break
    text = '–ù–∞—à—ë–ª: ' + '\n'.join(results) if results else '–ù–∏—á–µ–≥–æ! üò¢'
    await update.message.reply_text(text + ' üòÇ')

async def create_folder(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–ü—É—Ç—å –¥–ª—è –ø–∞–ø–∫–∏? /create_folder C:\\NewFolder üòÇ')
        return
    path = ' '.join(context.args)
    try:
        os.makedirs(path, exist_ok=True)
        await update.message.reply_text(f'–°–æ–∑–¥–∞–ª –ø–∞–ø–∫—É {path}! –î–æ–º –≥–æ—Ç–æ–≤! üè†üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å: {str(e)} üò¢')

async def rename_file(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if len(context.args) < 2:
        await update.message.reply_text('–°—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∏–º—è? /rename_file old.txt new.txt üòÇ')
        return
    old = context.args[0]
    new = ' '.join(context.args[1:])
    try:
        os.rename(old, new)
        await update.message.reply_text(f'–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª {old} –≤ {new}! –ö—Ä—É—Ç–æ! üîÑüòÇ')
    except Exception as e:
        await update.message.reply_text(f'–ù–µ –º–æ–≥—É: {str(e)} üò¢')

async def mouse_dance(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    await update.message.reply_text('–ú—ã—à—å —Ç–∞–Ω—Ü—É–µ—Ç! üíÉüñ±Ô∏èüòÇ')
    for _ in range(10):
        pyautogui.moveRel(100, 100, duration=0.5)
        pyautogui.moveRel(-100, -100, duration=0.5)

async def show_message(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    if not context.args:
        await update.message.reply_text('–¢–µ–∫—Å—Ç? /show_message Hello --title Bot üòÇ')
        return
    args = ' '.join(context.args)
    title = 'PC Controller Bot'
    message = args
    if '--title' in args:
        parts = args.split('--title')
        message = parts[0].strip()
        if len(parts) > 1:
            title = parts[1].strip()
    if not message:
        await update.message.reply_text('–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π! üòú')
        return
    try:
        notification.notify(title=title, message=message, timeout=10)
        await update.message.reply_text(f'–ü–æ–∫–∞–∑–∞–ª: "{message}"! üì¢üòÇ')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {str(e)} üò≠')

async def send_file(update: Update, context: CallbackContext) -> None:
    global waiting_for_file
    if not check_user(update):
        return
    waiting_for_file = True
    await update.message.reply_text('–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª! üìÅüòÇ')

async def play_music(update: Update, context: CallbackContext) -> None:
    global waiting_for_music
    if not check_user(update):
        return
    waiting_for_music = True
    await update.message.reply_text('–ü—Ä–∏—à–ª–∏ –∞—É–¥–∏–æ! üéµüòÇ')

async def handle_navigation(update: Update, context: CallbackContext) -> None:
    if not check_user(update):
        return
    user_data = context.user_data
    if 'mode' not in user_data:
        return
    mode = user_data['mode']
    text = update.message.text.strip()
    current_path = user_data.get('current_path', '')

    if text.lower() == 'back':
        if current_path == '':
            await update.message.reply_text('–£–∂–µ –Ω–∞ –¥–∏—Å–∫–∞—Ö! üòÇ')
            return
        if current_path.endswith(':'):
            user_data['current_path'] = ''
            await update.message.reply_text('–í–µ—Ä–Ω—É–ª—Å—è –∫ –¥–∏—Å–∫–∞–º!\n' + get_drives_text())
        else:
            parent = os.path.dirname(current_path)
            user_data['current_path'] = parent
            items = get_items(parent)
            await update.message.reply_text(get_list_text(items, parent))
        return

    try:
        index = int(text) - 1
        if current_path == '':
            if 0 <= index < len(drives):
                selected = drives[index]
                user_data['current_path'] = selected
                items = get_items(selected)
                await update.message.reply_text(get_list_text(items, selected))
            else:
                await update.message.reply_text('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–∏—Å–∫–∞! üòÖ')
        else:
            items = get_items(current_path)
            if 0 <= index < len(items):
                name, full, isdir = items[index]
                if items[0][0] in ['–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è!']:
                    await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! üîíüòÇ')
                    return
                if isdir:
                    user_data['current_path'] = full
                    new_items = get_items(full)
                    await update.message.reply_text(get_list_text(new_items, full))
                else:
                    if mode == 'open':
                        try:
                            os.startfile(full)
                            await update.message.reply_text(f'–û—Ç–∫—Ä—ã–ª {name}! üöÄüòÇ')
                        except Exception as e:
                            await update.message.reply_text(f'–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å: {str(e)} üò¢')
                    elif mode == 'delete':
                        try:
                            os.remove(full)
                            await update.message.reply_text(f'–£–¥–∞–ª–∏–ª {name}! üóëÔ∏èüòÇ')
                        except Exception as e:
                            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–∏–ª: {str(e)} üò¢')
                    del user_data['mode']
                    del user_data['current_path']
            else:
                await update.message.reply_text('–ù–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω—ã–π! ü§¶üòÇ')
    except ValueError:
        await update.message.reply_text("–ü–∏—à–∏ —á–∏—Å–ª–æ –∏–ª–∏ 'back'! üòÜ")
    except Exception as e:
        await update.message.reply_text(f'–°–ª–æ–º–∞–ª—Å—è: {str(e)} üòÇ')

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('shutdown', shutdown))
    application.add_handler(CommandHandler('restart', restart))
    application.add_handler(CommandHandler('hibernate', hibernate))
    application.add_handler(CommandHandler('lock_screen', lock_screen))
    application.add_handler(CommandHandler('file_manager', file_manager))
    application.add_handler(CommandHandler('download_file', download_file))
    application.add_handler(CommandHandler('upload_file', upload_file))
    application.add_handler(CommandHandler('move_file', move_file))
    application.add_handler(CommandHandler('copy_file', copy_file))
    application.add_handler(CommandHandler('wifi_list', wifi_list))
    application.add_handler(CommandHandler('battery', battery))
    application.add_handler(CommandHandler('clipboard_get', clipboard_get))
    application.add_handler(CommandHandler('clipboard_set', clipboard_set))
    application.add_handler(CommandHandler('tell_joke', tell_joke))
    application.add_handler(CommandHandler('press_key', press_key))
    application.add_handler(CommandHandler('type_text', type_text))
    application.add_handler(CommandHandler('close_app', close_app))
    application.add_handler(CommandHandler('kill_all', kill_all))
    application.add_handler(CommandHandler('list_processes', list_processes))
    application.add_handler(CommandHandler('change_wallpaper', change_wallpaper))
    application.add_handler(CommandHandler('random_wallpaper', random_wallpaper))
    application.add_handler(CommandHandler('set_volume', set_volume))
    application.add_handler(CommandHandler('volume_up', volume_up))
    application.add_handler(CommandHandler('volume_down', volume_down))
    application.add_handler(CommandHandler('mute', mute))
    application.add_handler(CommandHandler('unmute', unmute))
    application.add_handler(CommandHandler('set_brightness', set_brightness))
    application.add_handler(CommandHandler('open_url', open_url))
    application.add_handler(CommandHandler('screenshot', screenshot))
    application.add_handler(CommandHandler('take_photo', take_photo))
    application.add_handler(CommandHandler('record_screen', record_screen))
    application.add_handler(CommandHandler('system_info', system_info))
    application.add_handler(CommandHandler('clean_temp', clean_temp))
    application.add_handler(CommandHandler('search_file', search_file))
    application.add_handler(CommandHandler('mouse_dance', mouse_dance))
    application.add_handler(CommandHandler('show_message', show_message))
    application.add_handler(CommandHandler('sendfile', send_file))
    application.add_handler(CommandHandler('playmusic', play_music))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL | filters.AUDIO, handle_media))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_navigation))

    application.run_polling()

if __name__ == '__main__':
    main()