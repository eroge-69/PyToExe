import os
import re
import shutil
import pdfplumber
from PIL import Image
import pytesseract
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ PATH, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å)
# pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def extract_text_with_ocr(pdf_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF. –ï—Å–ª–∏ pdfplumber –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–∏–º–µ–Ω—è–µ—Ç OCR.
    """
    full_text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º OCR –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img = page.to_image(resolution=150).original
                    ocr_text = pytesseract.image_to_string(img, lang='rus+eng')
                    full_text += ocr_text + "\n"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ {pdf_path}: {e}")
        return None
    return full_text.strip()

def parse_payment_info(text):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¢–ò–ü –ø–ª–∞—Ç–µ–∂–∞ –∏ –§–ò–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏–∑ –¢–ó.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ç–∏–ø, –§–ò–û_—Å–æ–∫—Ä) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if not text:
        return None, None

    # –ü—Ä–∞–≤–∏–ª–æ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–ò–ü–ê
    payment_type = None
    if '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –§–£' in text:
        payment_type = '–¥–µ–ø–æ–∑–∏—Ç–∞'
    elif '–¥–µ–ø–æ–∑–∏—Ç' in text:
        payment_type = '–¥–µ–ø–æ–∑–∏—Ç–∞'
    elif '—Ä–∞—Å—Ö–æ–¥—ã' in text:
        payment_type = '—Ä–∞—Å—Ö–æ–¥–æ–≤'
    else:
        return None, None  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø

    # –ü—Ä–∞–≤–∏–ª–æ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –§–ò–û
    fio = None
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    patterns = [
        r'–î–æ–ª–∂–Ω–∏–∫-\s*([–ê-–Ø–∞-—è–Å—ë\s\-]+)',
        r'–ó–∞—è–≤–∏—Ç–µ–ª—å-\s*([–ê-–Ø–∞-—è–Å—ë\s\-]+)'
    ]

    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            raw_fio = match.group(1).strip()
            fio = abbreviate_fio(raw_fio)
            break

    if not fio:
        return None, None

    return payment_type, fio

def abbreviate_fio(full_name):
    """
    –°–æ–∫—Ä–∞—â–∞–µ—Ç –§–ò–û –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –§–∞–º–∏–ª–∏—è –ò.–û. –∏–ª–∏ –§–∞–º–∏–ª–∏—è –ò.–û.–û.
    """
    parts = full_name.split()
    if len(parts) < 2:
        return None

    surname = parts[0]
    initials = []
    for part in parts[1:]:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏/–æ—Ç—á–µ—Å—Ç–≤–∞
        if part:
            initials.append(part[0] + '.')

    abbreviated = surname + ' ' + ''.join(initials)
    return abbreviated

def generate_new_filename(payment_type, fio):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É.
    """
    return f"–ü–ª–∞—Ç–µ–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ {payment_type} –∑–∞ {fio} –Ω–∞ 1 –ª..pdf"

def get_unique_filename(folder, filename):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å _–∫–æ–ø–∏—è, _v2 –∏ —Ç.–¥.
    """
    base, ext = os.path.splitext(filename)
    counter = 1
    new_name = filename
    while os.path.exists(os.path.join(folder, new_name)):
        if counter == 1:
            new_name = f"{base}_–∫–æ–ø–∏—è{ext}"
        else:
            new_name = f"{base}_v{counter}{ext}"
        counter += 1
    return new_name

def main():
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å input() –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
    folder_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF-—Ñ–∞–π–ª–∞–º–∏: ").strip()
    if not os.path.exists(folder_path):
        print("–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
    log_file_path = os.path.join(folder_path, "rename_log.txt")
    error_log_path = os.path.join(folder_path, "error_log.txt")

    with open(log_file_path, 'w', encoding='utf-8') as log_file, \
         open(error_log_path, 'w', encoding='utf-8') as error_log_file:

        log_file.write("–õ–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:\n")
        error_log_file.write("–õ–æ–≥ –æ—à–∏–±–æ–∫:\n")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º PDF-—Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
        for filename in os.listdir(folder_path):
            if filename.lower().endswith('.pdf'):
                full_path = os.path.join(folder_path, filename)
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = extract_text_with_ocr(full_path)
                if not text:
                    error_msg = f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{filename}'."
                    print(error_msg)
                    error_log_file.write(error_msg + "\n")
                    continue

                # –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∏ –§–ò–û
                payment_type, fio = parse_payment_info(text)
                if not payment_type or not fio:
                    error_msg = f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –§–ò–û –≤ —Ñ–∞–π–ª–µ '{filename}'."
                    print(error_msg)
                    error_log_file.write(error_msg + "\n")
                    continue

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                new_filename = generate_new_filename(payment_type, fio)
                unique_new_filename = get_unique_filename(folder_path, new_filename)
                new_full_path = os.path.join(folder_path, unique_new_filename)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                try:
                    shutil.move(full_path, new_full_path)
                    success_msg = f"–£–°–ü–ï–•: '{filename}' -> '{unique_new_filename}'"
                    print(success_msg)
                    log_file.write(success_msg + "\n")
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ '{filename}': {e}"
                    print(error_msg)
                    error_log_file.write(error_msg + "\n")

    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    print(f"üìÑ –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π: {log_file_path}")
    print(f"‚ùó –õ–æ–≥ –æ—à–∏–±–æ–∫: {error_log_path}")

if __name__ == "__main__":
    main()