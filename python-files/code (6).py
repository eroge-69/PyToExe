
import telebot
import os
import subprocess
import time
from telebot import types

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8273213885:AAHI6Z4M4__QS8z1LzjsZzoErTaJVYof2rY'
bot = telebot.TeleBot(TOKEN)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Telegram
ADMIN_ID = 7948912553

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
START_PATH = "C:\\"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_paths = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
def create_keyboard(path, user_id, is_main_menu=False):
    markup = types.InlineKeyboardMarkup(row_width=2)
    try:
        items = os.listdir(path)
        for item in items:
            item_path = os.path.join(path, item)
            if os.path.isfile(item_path):
                button_text = f"üìÑ {item}"  # –°–∏–º–≤–æ–ª —Ñ–∞–π–ª–∞
                callback_data = f"file:{item_path}"
            elif os.path.isdir(item_path):
                button_text = f"üìÅ {item}"  # –°–∏–º–≤–æ–ª –ø–∞–ø–∫–∏
                callback_data = f"folder:{item_path}"
            else:
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏ –∏–ª–∏ –ø–∞–ø–∫–∞–º–∏
            markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    except PermissionError:
        markup.add(types.InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", callback_data="no_access"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if path != START_PATH and not is_main_menu:
        parent_path = os.path.dirname(path)
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"folder:{parent_path}"))

    #–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if is_main_menu:
        markup.add(types.InlineKeyboardButton("üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", callback_data="open_file"))
        markup.add(types.InlineKeyboardButton("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"))
        markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", callback_data="shutdown"))
        markup.add(types.InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª", callback_data="text_to_file"))
    elif not is_main_menu:
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))


    return markup

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    user_id = message.from_user.id
    user_paths[user_id] = START_PATH
    markup = create_keyboard(START_PATH, user_id, is_main_menu=True)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
        return

    user_id = call.from_user.id
    data = call.data

    if data.startswith("folder:"):
        path = data[7:]
        user_paths[user_id] = path
        markup = create_keyboard(path, user_id)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif data.startswith("file:"):
        file_path = data[5:]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥)
            # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å client.exe, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã
            #subprocess.Popen(['python', 'client.py', 'open_file', file_path])  # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
            send_command_to_client('open_file', file_path)
            bot.send_message(call.message.chat.id, f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(file_path)}")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    elif data == "open_file":
        user_paths[user_id] = START_PATH
        markup = create_keyboard(START_PATH, user_id)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif data == "screenshot":
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            #subprocess.Popen(['python', 'client.py', 'screenshot'])  # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
            send_command_to_client('screenshot')
            bot.send_message(call.message.chat.id, "–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            time.sleep(5) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            try:
                 with open('screenshot.png', 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo)
            except FileNotFoundError:
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç")

        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    elif data == "shutdown":
         try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            #subprocess.Popen(['python', 'client.py', 'shutdown'])  # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
            send_command_to_client('shutdown')
            bot.send_message(call.message.chat.id, "–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
         except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    elif data == "text_to_file":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª–∞:")
        bot.register_next_step_handler(call.message, create_text_file)
    elif data == "main_menu":
        markup = create_keyboard(START_PATH, user_id, is_main_menu=True)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

def create_text_file(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = message.text
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        #subprocess.Popen(['python', 'client.py', 'create_text_file', text])
        send_command_to_client('create_text_file', text)
        bot.send_message(message.chat.id, "–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def send_command_to_client(command, *args):
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'client.exe' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    cmd = ['client.exe', command] + list(args)
    subprocess.Popen(cmd, creationflags=subprocess.CREATE_NO_WINDOW)  # –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
