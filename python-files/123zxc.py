import json
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
import logging
from urllib.parse import urlparse
import asyncio
from datetime import datetime, timezone, timedelta
import os
import sys
from telethon import TelegramClient
from telethon.tl.functions.users import GetFullUserRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
TOKEN = "7223686049:AAE9MnTRG6uYMkAbV6-Md-c5np4FlpdBxXk"
OWNER_ID = 2119130131

SCAM_CHANNEL = "https://t.me/jddidodox"

# Telethon –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 25018678
API_HASH = '932d4bf3dbc93dfb50e76d59530bc612'

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

telethon_client = TelegramClient('wtn_antiscam', API_ID, API_HASH)
MOSCOW_TZ = timezone(timedelta(hours=3))

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–∫–∞–º–∞
SCAM_PROBABILITY = {
    "owner": 0,
    "admin": 1,
    "garant": 1,
    "trainee": 23,
    "default": 50
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
def get_main_keyboard(is_private: bool):
    if not is_private:
        return None
        
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üõ°Ô∏è –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤"),
                KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
            ],
            [
                KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                KeyboardButton(text="‚ö†Ô∏è –°–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞")
            ]
        ],
        resize_keyboard=True
    )

def get_app_path():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    return os.path.dirname(os.path.abspath(__file__))

APP_PATH = get_app_path()
DB_FILE = os.path.join(APP_PATH, "scam_db.json")

async def get_user_id_by_username(username):
    try:
        if username.startswith('@'):
            username = username[1:]
        
        async with telethon_client:
            user = await telethon_client(GetFullUserRequest(username))
            return user.users[0].id
    except Exception as e:
        logging.error(f"Error getting user ID: {e}")
        return None

def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

def load_db():
    try:
        if not os.path.exists(DB_FILE):
            default_db = {
                "users": {},
                "guarantors": [],
                "admins": [OWNER_ID],
                "trainees": []
            }
            with open(DB_FILE, "w", encoding="utf-8") as f:
                json.dump(default_db, f, ensure_ascii=False, indent=4)
            return default_db
        
        with open(DB_FILE, "r", encoding="utf-8") as f:
            db = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            if "trainees" not in db:
                db["trainees"] = []
            return db
    except Exception as e:
        logging.error(f"Error loading database: {e}")
        default_db = {
            "users": {},
            "guarantors": [],
            "admins": [OWNER_ID],
            "trainees": []
        }
        with open(DB_FILE, "w", encoding="utf-8") as f:
            json.dump(default_db, f, ensure_ascii=False, indent=4)
        return default_db

def save_db(data):
    try:
        with open(DB_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"Error saving database: {e}")

def is_owner(user_id: int):
    return user_id == OWNER_ID

def is_admin(user_id: int):
    db = load_db()
    return str(user_id) in db["admins"]

def is_garantor(user_id: int):
    db = load_db()
    return str(user_id) in db["guarantors"]

def is_trainee(user_id: int):
    db = load_db()
    return str(user_id) in db["trainees"]

def get_scam_probability(user_id: int):
    if is_owner(user_id):
        return SCAM_PROBABILITY["owner"]
    elif is_admin(user_id):
        return SCAM_PROBABILITY["admin"]
    elif is_garantor(user_id):
        return SCAM_PROBABILITY["garant"]
    elif is_trainee(user_id):
        return SCAM_PROBABILITY["trainee"]
    else:
        return SCAM_PROBABILITY["default"]

def add_new_user(user_id: str):
    db = load_db()
    if user_id not in db["users"]:
        db["users"][user_id] = {
            "checks": 0,
            "scams": []
        }
        save_db(db)
    return db["users"][user_id]

# ========== TEXT COMMANDS HANDLERS ==========

@dp.message(F.text.lower().startswith("—á–µ–∫ "))
async def check_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '—á–µ–∫'"""
    target = message.text.split(maxsplit=1)[1].strip()
    await check_user(message, target)

@dp.message(F.text.lower() == "—á–µ–∫ –º–∏")
@dp.message(F.text.lower() == "—á–µ–∫–º–∏")
@dp.message(F.text.lower() == "–º–∏")
async def me_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /me"""
    await my_stats(message)

@dp.message(F.text.lower() == "–≥–∞—Ä–∞–Ω—Ç—ã")
async def garants_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–≥–∞—Ä–∞–Ω—Ç—ã'"""
    await list_guarantors(message)

@dp.message(F.text.lower() == "–∞–¥–º–∏–Ω—ã")
async def admins_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–∞–¥–º–∏–Ω—ã'"""
    await list_admins(message)

@dp.message(F.text.lower().startswith("—á–µ–∫ "))
async def check_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '—á–µ–∫'"""
    target = message.text.split(maxsplit=1)[1].strip()
    await check_user(message, target)

# ========== BASIC COMMANDS ==========

@dp.message(Command("start"))
async def start(message: Message):
    add_new_user(str(message.from_user.id))
    await message.answer(
        "üîê <b>WTN | AntiScamBase</b> - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID/—é–∑–µ—Ä–Ω–µ–π–º—É\n"
        "‚ñ´Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤ —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏\n\n"
        "‚öôÔ∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚ñ´Ô∏è /me - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚ñ´Ô∏è /check [ID/@—é–∑–µ—Ä–Ω–µ–π–º] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚ñ´Ô∏è /garants - —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤",
        reply_markup=get_main_keyboard(message.chat.type == "private"),
        disable_web_page_preview=True
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    if not (is_admin(message.from_user.id) or is_owner(message.from_user.id)):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    help_text = """
<b>‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>üëë –í–ª–∞–¥–µ–ª–µ—Ü:</b>
<code>/add_admin ID</code> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
<code>/remove_admin ID</code> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
<code>/admins</code> - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
<code>/add_garant ID</code> - –î–æ–±–∞–≤–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞
<code>/remove_garant ID</code> - –£–¥–∞–ª–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞
<code>/add_trainee ID</code> - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–∂–µ—Ä–∞
<code>/remove_trainee ID</code> - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–∂–µ—Ä–∞

<b>üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>
<code>/add ID –ü—Ä–∏—á–∏–Ω–∞ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</code> - –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞
<code>/remove ID –ù–æ–º–µ—Ä_—Å–∫–∞–º–∞</code> - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–∫–∞–º–µ
<code>/garants</code> - –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤

<b>üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
<code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
<code>/me</code> - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
<code>/check ID</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
<code>/garants</code> - –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤
"""
    await message.answer(help_text, 
                       reply_markup=get_main_keyboard(message.chat.type == "private"))

# ========== PROFILE COMMANDS ==========

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@dp.message(Command("me"))
async def my_stats(message: Message):
    try:
        user_id = str(message.from_user.id)
        db = load_db()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in db["users"]:
            add_new_user(user_id)
            db = load_db()
        
        user = db["users"][user_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if is_owner(int(user_id)):
            status_icon = "üëë"
            status_text = "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"
            scam_prob = SCAM_PROBABILITY["owner"]
        elif is_admin(int(user_id)):
            status_icon = "üõ°Ô∏è"
            status_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            scam_prob = SCAM_PROBABILITY["admin"]
        elif is_garantor(int(user_id)):
            status_icon = "üõ°Ô∏è"
            status_text = "–ì–∞—Ä–∞–Ω—Ç"
            scam_prob = SCAM_PROBABILITY["garant"]
        elif is_trainee(int(user_id)):
            status_icon = "üîµ"
            status_text = "–°—Ç–∞–∂–µ—Ä"
            scam_prob = SCAM_PROBABILITY["trainee"]
        elif not user["scams"]:
            status_icon = "üü¢"
            status_text = "–ù–µ–π—Ç—Ä–∞–ª–µ–Ω"
            scam_prob = SCAM_PROBABILITY["default"]
        else:
            status_icon = "üî¥"
            status_text = f"–°–∫–∞–º–µ—Ä ({len(user['scams'])} —Å–ª—É—á–∞–µ–≤)"
            scam_prob = 100

        profile_message = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ïë [üë§] <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ïë\n"
            f"‚ïë ‚îå <b>ID:</b> <code>{user_id}</code>\n"
            f"‚ïë ‚îú\n"
            f"‚ïë ‚îú <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {user['checks']}\n"
            f"‚ïë ‚îú\n"
            f"‚ïë ‚îú <b>–°—Ç–∞—Ç—É—Å:</b> [{status_icon}] {status_text}\n"
            f"‚ïë ‚îî <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞:</b> {scam_prob}%\n"
            f"‚ïë\n"
            "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            "‚ïë –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫\n"
            "‚ïë –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ WTN.\n"
            "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"‚ïë –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: @WTN_antiscambot\n"
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        )

        scam_info = ""
        for i, scam in enumerate(user["scams"], 1):
            scam_info += (
                f"\n\n<b>‚ö†Ô∏è –°–∫–∞–º #{i}</b>\n"
                f"‚îú <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {scam['reason']}\n"
                f"‚îú <b>–î–∞—Ç–∞:</b> {scam['date']}\n"
                f"‚îî <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b> <a href='{scam['proof']}'>—Å—Å—ã–ª–∫–∞</a>"
            )

        reply_markup = None
        if message.chat.type == "private":
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")]
            ])

        await message.answer(
            profile_message + scam_info,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

    except Exception as e:
        logging.error(f"Error in my_stats: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        if message.chat.type == "private":
            await message.answer(error_msg, reply_markup=get_main_keyboard(True))
        else:
            await message.answer(error_msg)

# ========== CHECK USER ==========

async def check_user(message: Message, target: str):
    db = load_db()
    
    if target.startswith('@'):
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    elif not target.isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    if target not in db["users"]:
        db["users"][target] = {
            "checks": 0,
            "scams": []
        }
    
    db["users"][target]["checks"] += 1
    save_db(db)
    
    user = db["users"][target]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞
    if is_owner(int(target)):
        status_icon = "üëë"
        status_text = "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"
        scam_prob = SCAM_PROBABILITY["owner"]
    elif is_admin(int(target)):
        status_icon = "üõ°Ô∏è"
        status_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        scam_prob = SCAM_PROBABILITY["admin"]
    elif is_garantor(int(target)):
        status_icon = "üõ°Ô∏è"
        status_text = "–ì–∞—Ä–∞–Ω—Ç"
        scam_prob = SCAM_PROBABILITY["garant"]
    elif is_trainee(int(target)):
        status_icon = "üîµ"
        status_text = "–°—Ç–∞–∂–µ—Ä"
        scam_prob = SCAM_PROBABILITY["trainee"]
    elif not user["scams"]:
        status_icon = "üü¢"
        status_text = "–ù–µ–π—Ç—Ä–∞–ª–µ–Ω"
        scam_prob = SCAM_PROBABILITY["default"]
    else:
        status_icon = "üî¥"
        status_text = f"–°–∫–∞–º–µ—Ä ({len(user['scams'])} —Å–ª—É—á–∞–µ–≤)"
        scam_prob = 100

    result_message = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚ïë [üîç] <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚ïë\n"
        f"‚ïë ‚îå <b>ID:</b> <code>{target}</code>\n"
        f"‚ïë ‚îú\n"
        f"‚ïë ‚îú <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {user['checks']}\n"
        f"‚ïë ‚îú\n"
        f"‚ïë ‚îú <b>–°—Ç–∞—Ç—É—Å:</b> [{status_icon}] {status_text}\n"
        f"‚ïë ‚îî <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞:</b> {scam_prob}%\n"
        f"‚ïë\n"
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "‚ïë –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫\n"
        "‚ïë –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ WTN.\n"
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚ïë –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: @WTN_antiscambot\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

    scam_info = ""
    for i, scam in enumerate(user["scams"], 1):
        scam_info += (
            f"\n\n<b>‚ö†Ô∏è –°–∫–∞–º #{i}</b>\n"
            f"‚îú <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {scam['reason']}\n"
            f"‚îú <b>–î–∞—Ç–∞:</b> {scam['date']}\n"
            f"‚îî <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b> <a href='{scam['proof']}'>—Å—Å—ã–ª–∫–∞</a>"
        )

    profile_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é", url=f"tg://user?id={target}")]
    ])

    await message.answer(
        result_message + scam_info,
        reply_markup=profile_button,
        disable_web_page_preview=True
    )

@dp.message(Command("check"))
async def check_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    args = message.text.split()
    
    if len(args) < 2:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if message.chat.type == "private":
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check\n"
                               "–ü—Ä–∏–º–µ—Ä: <code>/check 123456</code> –∏–ª–∏ <code>/check @username</code>",
                               reply_markup=get_main_keyboard(True))
        else:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check [ID/@username]")
        return
    
    target = args[1]
    await check_user(message, target)

@dp.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def check_button_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)"""
    if message.chat.type != "private":
        return
        
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check —Å ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º–æ–º\n"
                       "–ü—Ä–∏–º–µ—Ä: <code>/check 123456</code> –∏–ª–∏ <code>/check @username</code>",
                       reply_markup=get_main_keyboard(True))

# ========== ADMIN LIST COMMAND ==========

@dp.message(Command("admins"))
async def list_admins(message: Message):
    try:
        db = load_db()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        categories = {
            "üëë –í–ª–∞–¥–µ–ª–µ—Ü": [OWNER_ID],
            "üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": db.get("admins", []),
            "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç—ã": db.get("guarantors", []),
            "üîµ –°—Ç–∞–∂–µ—Ä—ã": db.get("trainees", [])
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        text_lines = []
        button_lines = []
        
        for category, user_ids in categories.items():
            if not user_ids:
                continue
                
            category_users = []
            for user_id in user_ids:
                try:
                    async with telethon_client:
                        user = await telethon_client.get_entity(int(user_id))
                        name = user.first_name
                        if user.username:
                            name = f"@{user.username}"
                        elif user.last_name:
                            name = f"{user.first_name} {user.last_name}"
                        # –î–æ–±–∞–≤–ª—è–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        emoji = category.split()[0]
                        button_text = f"{emoji} {name}"
                except Exception as e:
                    logging.error(f"Error getting user info: {e}")
                    name = f"ID: {user_id}"
                    button_text = f"üë§ {name}"
                
                category_users.append(f"‚ñ´Ô∏è {name}")
                button_lines.append((user_id, button_text))
            
            text_lines.append(f"\n<b>{category}:</b>\n" + "\n".join(category_users))
        
        if not text_lines:
            await message.answer("‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏
        keyboard = []
        row = []
        for user_id, button_text in button_lines:
            row.append(InlineKeyboardButton(
                text=button_text,
                url=f"tg://user?id={user_id}"
            ))
            # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        admins_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ WTN</b>\n" + 
            "\n".join(text_lines) +
            "\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=admins_markup,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logging.error(f"Error in list_admins: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞"
        if message.chat.type == "private":
            await message.answer(error_msg, reply_markup=get_main_keyboard(True))
        else:
            await message.answer(error_msg)

@dp.message(Command("add_admin"))
async def add_admin(message: Message):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/add_admin ID/@—é–∑–µ—Ä–Ω–µ–π–º</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add_admin 123456</code>\n"
            "<code>/add_admin @username</code>",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    db = load_db()
    if target in db["admins"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    db["admins"].append(target)
    save_db(db)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
        reply_markup=get_main_keyboard(message.chat.type == "private")
    )

@dp.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/remove_admin ID/@—é–∑–µ—Ä–Ω–µ–π–º</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/remove_admin 123456</code>\n"
            "<code>/remove_admin @username</code>",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    db = load_db()
    if target not in db["admins"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    db["admins"].remove(target)
    save_db(db)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target}</code> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤",
        reply_markup=get_main_keyboard(message.chat.type == "private")
    )

# ========== GARANT MANAGEMENT COMMANDS ==========

@dp.message(Command("add_garant"))
async def add_garant(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if not is_owner(message.from_user.id):
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<code>/add_garant ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n"
                "–∏–ª–∏\n"
                "<code>/add_garant @username</code>",
                reply_markup=get_main_keyboard(message.chat.type == "private"))
            return

        target = args[1].strip("@")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º –≤ ID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not target.isdigit():
            await message.answer("üîÑ –û–ø—Ä–µ–¥–µ–ª—è—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            try:
                user_id = await get_user_id_by_username(target)
                if not user_id:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                       reply_markup=get_main_keyboard(message.chat.type == "private"))
                    return
                target = str(user_id)
            except Exception as e:
                logging.error(f"Error resolving username: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                   reply_markup=get_main_keyboard(message.chat.type == "private"))
                return

        db = load_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–æ–º
        if target in db["guarantors"]:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if target not in db["users"]:
            db["users"][target] = {"checks": 0, "scams": []}

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤
        db["guarantors"].append(target)
        save_db(db)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            async with telethon_client:
                user = await telethon_client.get_entity(int(target))
                name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name if user.last_name else ''}"
        except:
            name = f"ID {target}"

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name}</b> (<code>{target}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤",
            reply_markup=get_main_keyboard(message.chat.type == "private"))
            
    except Exception as e:
        logging.error(f"Error in add_garant: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∞",
                           reply_markup=get_main_keyboard(message.chat.type == "private"))

@dp.message(Command("remove_garant"))
async def remove_garant(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        if not is_owner(message.from_user.id):
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<code>/remove_garant ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n"
                "–∏–ª–∏\n"
                "<code>/remove_garant @username</code>",
                reply_markup=get_main_keyboard(message.chat.type == "private"))
            return

        target = args[1].strip("@")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º –≤ ID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not target.isdigit():
            await message.answer("üîÑ –û–ø—Ä–µ–¥–µ–ª—è—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            try:
                user_id = await get_user_id_by_username(target)
                if not user_id:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                       reply_markup=get_main_keyboard(message.chat.type == "private"))
                    return
                target = str(user_id)
            except Exception as e:
                logging.error(f"Error resolving username: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                   reply_markup=get_main_keyboard(message.chat.type == "private"))
                return

        db = load_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–∞—Ä–∞–Ω—Ç–æ–º
        if target not in db["guarantors"]:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º",
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤
        db["guarantors"].remove(target)
        save_db(db)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            async with telethon_client:
                user = await telethon_client.get_entity(int(target))
                name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name if user.last_name else ''}"
        except:
            name = f"ID {target}"

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name}</b> (<code>{target}</code>) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤",
            reply_markup=get_main_keyboard(message.chat.type == "private"))
            
    except Exception as e:
        logging.error(f"Error in remove_garant: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∞",
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        
# ========== GARANTS COMMANDS ==========

async def get_garants_list():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏"""
    db = load_db()
    garants_list = []
    
    for user_id in db.get("guarantors", []):
        try:
            async with telethon_client:
                user = await telethon_client.get_entity(int(user_id))
                name = user.first_name
                if user.username:
                    name = f"@{user.username}"
                elif user.last_name:
                    name = f"{user.first_name} {user.last_name}"
        except Exception as e:
            logging.error(f"Error getting user info: {e}")
            name = f"ID: {user_id}"
        
        garants_list.append((user_id, name))
    
    return garants_list

@dp.message(F.text == "üõ°Ô∏è –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤")
@dp.message(Command("garants"))
async def list_guarantors(message: Message):
    try:
        garants = await get_garants_list()
        
        if not garants:
            await message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –ø—É—Å—Ç", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for user_id, name in garants:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üõ°Ô∏è {name}",
                    url=f"tg://user?id={user_id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –õ–°
        if message.chat.type == "private":
            keyboard.append([
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                    callback_data="refresh_garants"
                )
            ])
        
        garants_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            "üõ°Ô∏è <b>–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ WTN</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –≥–∞—Ä–∞–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å:",
            reply_markup=garants_markup
        )
    except Exception as e:
        logging.error(f"Error in list_guarantors: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤",
                           reply_markup=get_main_keyboard(message.chat.type == "private"))

@dp.callback_query(F.data == "refresh_garants")
async def refresh_garants(callback: types.CallbackQuery):
    try:
        await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
        garants = await get_garants_list()
        
        if not garants:
            await callback.message.edit_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        keyboard = []
        for user_id, name in garants:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üõ°Ô∏è {name}",
                    url=f"tg://user?id={user_id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data="refresh_garants"
            )
        ])
        
        garants_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "üõ°Ô∏è <b>–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ WTN</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –≥–∞—Ä–∞–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å:",
            reply_markup=garants_markup
        )
    except Exception as e:
        logging.error(f"Error refreshing garants list: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

# ========== TRAINEE MANAGEMENT ==========

@dp.message(Command("add_trainee"))
async def add_trainee(message: Message):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/add_trainee ID/@—é–∑–µ—Ä–Ω–µ–π–º</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add_trainee 123456</code>\n"
            "<code>/add_trainee @username</code>",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    db = load_db()
    if target in db["trainees"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–∂–µ—Ä", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    db["trainees"].append(target)
    save_db(db)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤",
        reply_markup=get_main_keyboard(message.chat.type == "private")
    )

@dp.message(Command("remove_trainee"))
async def remove_trainee(message: Message):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/remove_trainee ID/@—é–∑–µ—Ä–Ω–µ–π–º</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/remove_trainee 123456</code>\n"
            "<code>/remove_trainee @username</code>",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    db = load_db()
    if target not in db["trainees"]:
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–∂–µ—Ä–æ–º", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    db["trainees"].remove(target)
    save_db(db)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target}</code> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤",
        reply_markup=get_main_keyboard(message.chat.type == "private")
    )

# ========== SCAM MANAGEMENT ==========

@dp.message(F.text == "‚ö†Ô∏è –°–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞")
async def report_scammer(message: Message):
    if message.chat.type != "private":
        return
    
    await message.answer(
        f"‚ö†Ô∏è <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞ –≤ –±–∞–∑—É:</b>\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª: {SCAM_CHANNEL}\n"
        f"2. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n"
        f"3. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        f"<i>–õ–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)</i>",
        reply_markup=get_main_keyboard(message.chat.type == "private"),
        disable_web_page_preview=True
    )

@dp.message(Command("add"))
async def add_scammer(message: Message):
    if message.chat.type != "private":
        return
        
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/add ID/@—é–∑–µ—Ä–Ω–µ–π–º –ü—Ä–∏—á–∏–Ω–∞ –°—Å—ã–ª–∫–∞_–Ω–∞_–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add 123456 –û–±–º–∞–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ https://example.com/proof</code>",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    reason = args[2]
    proof = args[3]
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    if not is_valid_url(proof):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>https://example.com/proof</code>)", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    db = load_db()
    if target not in db["users"]:
        db["users"][target] = {
            "checks": 0,
            "scams": []
        }
    
    new_scam = {
        "reason": reason,
        "proof": proof,
        "date": datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M (–ú–°–ö)")
    }
    
    db["users"][target]["scams"].append(new_scam)
    save_db(db)
    
    scam_count = len(db["users"][target]["scams"])
    await message.answer(
        f"‚úÖ <b>{target}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤!\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ —Å–∫–∞–º–æ–≤: <b>{scam_count}</b>\n"
        f"‚ñ´Ô∏è –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>\n"
        f"‚ñ´Ô∏è –î–∞—Ç–∞: <b>{new_scam['date']}</b>\n"
        f"‚ñ´Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: <a href='{proof}'>—Å—Å—ã–ª–∫–∞</a>",
        reply_markup=get_main_keyboard(message.chat.type == "private"),
        disable_web_page_preview=True
    )

@dp.message(Command("remove"))
async def remove_scammer(message: Message):
    if message.chat.type != "private":
        return
        
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    args = message.text.split()
    if len(args) < 3:
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/remove ID/@—é–∑–µ—Ä–Ω–µ–π–º –ù–æ–º–µ—Ä_—Å–∫–∞–º–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/remove 123456 1</code> - —É–¥–∞–ª–∏—Ç –ø–µ—Ä–≤—ã–π —Å–∫–∞–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456\n"
            "<code>/remove @username all</code> - —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–∫–∞–º—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    target = args[1].strip("@")
    scam_num = args[2].lower()
    
    if not target.isdigit():
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_id = await get_user_id_by_username(target)
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                               reply_markup=get_main_keyboard(message.chat.type == "private"))
            return
        target = str(user_id)
    
    db = load_db()
    if target not in db["users"]:
        await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    if not db["users"][target]["scams"]:
        await message.answer("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–∫–∞–º–∞—Ö", 
                           reply_markup=get_main_keyboard(message.chat.type == "private"))
        return
    
    if scam_num == "all":
        db["users"][target]["scams"] = []
        save_db(db)
        await message.answer(
            f"‚úÖ –í—Å–µ —Å–∫–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target}</code> —É–¥–∞–ª–µ–Ω—ã",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    try:
        scam_num = int(scam_num)
        if scam_num < 1 or scam_num > len(db["users"][target]["scams"]):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–∞–º–∞ (—á–∏—Å–ª–æ) –∏–ª–∏ 'all'",
            reply_markup=get_main_keyboard(message.chat.type == "private")
        )
        return
    
    removed_scam = db["users"][target]["scams"].pop(scam_num - 1)
    save_db(db)
    
    await message.answer(
        f"‚úÖ –°–∫–∞–º #{scam_num} —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target}</code>\n"
        f"‚ñ´Ô∏è –ü—Ä–∏—á–∏–Ω–∞: <b>{removed_scam['reason']}</b>\n"
        f"‚ñ´Ô∏è –î–∞—Ç–∞: <b>{removed_scam['date']}</b>\n"
        f"‚ñ´Ô∏è –ë—ã–ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: <a href='{removed_scam['proof']}'>—Å—Å—ã–ª–∫–∞</a>",
        reply_markup=get_main_keyboard(message.chat.type == "private"),
        disable_web_page_preview=True
    )

# ========== BOT STARTUP ==========

async def main():
    await telethon_client.start()
    logging.info("Telethon client started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if not os.path.exists(DB_FILE):
        load_db()
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_FILE}")
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(main())