# -*- coding: utf-8 -*-
"""acoin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12RgvrmSg2grJoHGq2EDRiHdYSEpnimlc
"""

import requests # pyright: ignore[reportMissingModuleSource]
import json
import os
from datetime import datetime

WALLET_FILE = "wallet.json"

class Wallet: # type: ignore
    def __init__(self, fiat_balance=10000.0, btc_balance=0.0, transactions=None):
        self.fiat_balance = fiat_balance
        self.btc_balance = btc_balance
        self.transactions = transactions if transactions else []

    def save(self):
        data = {
            "fiat_balance": self.fiat_balance,
            "btc_balance": self.btc_balance,
            "transactions": self.transactions
        }
        with open(WALLET_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

    @staticmethod
    def load():
        if os.path.exists(WALLET_FILE):
            with open(WALLET_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return Wallet(
                    data.get("fiat_balance", 10000.0),
                    data.get("btc_balance", 0.0),
                    data.get("transactions", [])
                )
        else:
            return Wallet()

    def summary(self):
        print(f"TRY Bakiyesi: {self.fiat_balance:.2f}")
        print(f"BTC Bakiyesi: {self.btc_balance:.8f}")
        if self.transactions:
            print("Son işlem:", self.transactions[-1])
        else:
            print("Henüz işlem yok.")

    def print_transactions(self):
        if not self.transactions:
            print("İşlem geçmişi boş.")
            return
        print("İşlem geçmişi:")
        for tx in self.transactions:
            print(tx)


def get_btc_price_try(): # pyright: ignore[reportRedeclaration]
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=try"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        return data["bitcoin"]["try"]
    except Exception as e:
        print("Fiyat alınamadı:", e)
        return None


def buy_btc(wallet: Wallet):
    price = get_btc_price_try()
    if price is None:
        return
    print(f"Güncel BTC fiyatı: {price:.2f} TRY")
    amount_try = float(input("Kaç TRY ile BTC almak istiyorsunuz? "))
    if amount_try <= 0 or amount_try > wallet.fiat_balance:
        print("Geçersiz tutar veya yetersiz bakiye.")
        return
    btc_bought = amount_try / price
    wallet.fiat_balance -= amount_try
    wallet.btc_balance += btc_bought
    tx = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] BUY {btc_bought:.8f} BTC ({amount_try:.2f} TRY)"
    wallet.transactions.append(tx)
    wallet.save()
    print("✅ İşlem başarılı:", tx)


def sell_btc(wallet: Wallet):
    price = get_btc_price_try()
    if price is None:
        return
    print(f"Güncel BTC fiyatı: {price:.2f} TRY")
    btc_amount = float(input("Kaç BTC satmak istiyorsunuz? "))
    if btc_amount <= 0 or btc_amount > wallet.btc_balance:
        print("Geçersiz miktar veya yetersiz BTC.")
        return
    fiat_gained = btc_amount * price
    wallet.btc_balance -= btc_amount
    wallet.fiat_balance += fiat_gained
    tx = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] SELL {btc_amount:.8f} BTC ({fiat_gained:.2f} TRY)"
    wallet.transactions.append(tx)
    wallet.save()
    print("✅ İşlem başarılı:", tx)


def main():
    print("=== ACOİN - Python Bitcoin Uygulaması ===")
    wallet = Wallet.load()

    while True:
        print("\nMenü:")
        print("1) Güncel BTC fiyatı")
        print("2) BTC satın al")
        print("3) BTC sat")
        print("4) Cüzdan özeti")
        print("5) İşlem geçmişi")
        print("0) Çıkış")
        choice = input("Seçiminiz: ").strip()

        if choice == "1":
            price = get_btc_price_try()
            if price:
                print(f"1 BTC = {price:.2f} TRY")
        elif choice == "2":
           buy_btc_Wallet # type: ignore
        elif choice == "3":
             sell_btc(wallet) # pyright: ignore[reportArgumentType]
        elif choice == "4":
            Wallet .summary() # pyright: ignore[reportAttributeAccessIssue]
        elif choice == "5":
            Walletallet.print_transactions() # pyright: ignore[reportUndefinedVariable]
        elif choice == "0":
            wallet.save()
            print("Çıkış yapıldı. Cüzdan kaydedildi.")
            break
        else:
            print("Geçersiz seçim.")

if __name__ == "__main__":
    main()
import tkinter as tk
from tkinter import messagebox, simpledialog
import requests # type: ignore
import json
import os
from datetime import datetime

WALLET_FILE = "wallet.json"

class Wallet:
    def __init__(self, fiat_balance=10000.0, btc_balance=0.0, transactions=None):
        self.fiat_balance = fiat_balance
        self.btc_balance = btc_balance
        self.transactions = transactions if transactions else []

    def save(self):
        data = {
            "fiat_balance": self.fiat_balance,
            "btc_balance": self.btc_balance,
            "transactions": self.transactions
        }
        with open(WALLET_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

    @staticmethod
    def load():
        if os.path.exists(WALLET_FILE):
            with open(WALLET_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return Wallet(
                    data.get("fiat_balance", 10000.0),
                    data.get("btc_balance", 0.0),
                    data.get("transactions", [])
                )
        else:
            return Wallet()

def get_btc_price_try():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=try"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        return r.json()["bitcoin"]["try"]
    except Exception as e:
        messagebox.showerror("Hata", f"Fiyat alınamadı: {e}")
        return None

class AcoinApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ACOİN - Bitcoin Masaüstü Uygulaması")
        self.wallet = Wallet.load()

        self.balance_label = tk.Label(root, text="", font=("Arial", 12), fg="blue")
        self.balance_label.pack(pady=10)

        btn_price = tk.Button(root, text="BTC Fiyatını Göster", command=self.show_price, width=30)
        btn_price.pack(pady=5)

        btn_buy = tk.Button(root, text="BTC Satın Al", command=self.buy_btc, width=30)
        btn_buy.pack(pady=5)

        btn_sell = tk.Button(root, text="BTC Sat", command=self.sell_btc, width=30)
        btn_sell.pack(pady=5)

        btn_history = tk.Button(root, text="İşlem Geçmişi", command=self.show_history, width=30)
        btn_history.pack(pady=5)

        btn_exit = tk.Button(root, text="Çıkış", command=self.exit_app, width=30, fg="red")
        btn_exit.pack(pady=10)

        self.update_balance_label()

    def update_balance_label(self):
        text = f"TRY Bakiyesi: {self.wallet.fiat_balance:.2f} ₺ | BTC Bakiyesi: {self.wallet.btc_balance:.8f}"
        self.balance_label.config(text=text)

    def show_price(self):
        price = get_btc_price_try()
        if price:
            messagebox.showinfo("BTC Fiyatı", f"1 BTC = {price:.2f} ₺")

    def buy_btc(self):
        price = get_btc_price_try()
        if price is None:
            return
        amount_try = simpledialog.askfloat("BTC Al", "Kaç TRY ile BTC almak istiyorsunuz?")
        if amount_try is None:
            return
        if amount_try <= 0 or amount_try > self.wallet.fiat_balance:
            messagebox.showerror("Hata", "Geçersiz tutar veya yetersiz bakiye.")
            return
        btc_bought = amount_try / price
        self.wallet.fiat_balance -= amount_try
        self.wallet.btc_balance += btc_bought
        tx = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] BUY {btc_bought:.8f} BTC ({amount_try:.2f} ₺)"
        self.wallet.transactions.append(tx)
        self.wallet.save()
        self.update_balance_label()
        messagebox.showinfo("Başarılı", tx)

    def sell_btc(self):
        price = get_btc_price_try()
        if price is None:
            return
        btc_amount = simpledialog.askfloat("BTC Sat", "Kaç BTC satmak istiyorsunuz?")
        if btc_amount is None:
            return
        if btc_amount <= 0 or btc_amount > self.wallet.btc_balance:
            messagebox.showerror("Hata", "Geçersiz miktar veya yetersiz BTC.")
            return
        fiat_gained = btc_amount * price
        self.wallet.btc_balance -= btc_amount
        self.wallet.fiat_balance += fiat_gained
        tx = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] SELL {btc_amount:.8f} BTC ({fiat_gained:.2f} ₺)"
        self.wallet.transactions.append(tx)
        self.wallet.save()
        self.update_balance_label()
        messagebox.showinfo("Başarılı", tx)

    def show_history(self):
        if not self.wallet.transactions:
            messagebox.showinfo("Geçmiş", "İşlem bulunmuyor.")
            return
        history_text = "\n".join(self.wallet.transactions[-10:])  # son 10 işlem
        messagebox.showinfo("İşlem Geçmişi", history_text)

    def exit_app(self):
        self.wallet.save()
        self.root.destroy()

def main_gui():
    root = tk.Tk()
    app = AcoinApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()