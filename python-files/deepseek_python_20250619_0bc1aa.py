import tkinter as tk
from datetime import datetime
from tkinter import messagebox

def calculate_hours():
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        date1_str = entry1.get()
        date2_str = entry2.get()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        dt1 = parse_datetime(date1_str)
        dt2 = parse_datetime(date2_str)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å–∞—Ö
        time_diff = dt2 - dt1
        total_hours = time_diff.total_seconds() / 3600
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if total_hours >= 0:
            direction = "–ø—Ä–æ—à–ª–æ"
        else:
            direction = "–æ—Å—Ç–∞–ª–æ—Å—å"
            total_hours = abs(total_hours)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"–ú–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ {direction}:\n"
        result_text += f"‚Ä¢ {total_hours:.2f} —á–∞—Å–æ–≤\n"
        result_text += f"‚Ä¢ {total_hours/24:.2f} –¥–Ω–µ–π\n"
        result_text += f"‚Ä¢ {total_hours*60:.0f} –º–∏–Ω—É—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_label.config(text=result_text)
    
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n2025-03-15\n15.03.2025 14:30")

def parse_datetime(input_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    formats = [
        "%Y-%m-%d %H:%M:%S",   # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISO
        "%Y-%m-%d",             # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ ISO
        "%Y-%m-%d %H:%M",       # ISO –±–µ–∑ —Å–µ–∫—É–Ω–¥
        "%d.%m.%Y %H:%M:%S",    # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        "%d.%m.%Y",             # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ (–µ–≤—Ä–æ–ø.)
        "%d.%m.%Y %H:%M",       # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –±–µ–∑ —Å–µ–∫—É–Ω–¥
        "%H:%M %d.%m.%Y",       # –í—Ä–µ–º—è —Å–Ω–∞—á–∞–ª–∞
        "%d/%m/%Y %H:%M:%S",    # –°–ª—ç—à-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        "%d/%m/%Y"              # –°–ª—ç—à-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–∞—Ç–∞)
    ]
    
    input_str = input_str.strip()
    
    for fmt in formats:
        try:
            return datetime.strptime(input_str, fmt)
        except ValueError:
            continue
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("üïí –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ üïí")
root.geometry("500x400")
root.resizable(False, False)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
bg_color = "#f0f8ff"
button_color = "#e6e6fa"
root.configure(bg=bg_color)

# –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
header = tk.Label(
    root, 
    text="–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏",
    font=("Arial", 16, "bold"),
    bg=bg_color,
    pady=10
)
header.pack()

# –§—Ä–µ–π–º –¥–ª—è –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
frame1 = tk.Frame(root, bg=bg_color)
frame1.pack(pady=5, fill="x", padx=20)
tk.Label(frame1, text="–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞:", bg=bg_color, font=("Arial", 10)).pack(side="left")
entry1 = tk.Entry(frame1, width=25, font=("Arial", 10))
entry1.pack(side="right", padx=10)
entry1.insert(0, datetime.now().strftime("%Y-%m-%d %H:%M"))

# –§—Ä–µ–π–º –¥–ª—è –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã
frame2 = tk.Frame(root, bg=bg_color)
frame2.pack(pady=5, fill="x", padx=20)
tk.Label(frame2, text="–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞:", bg=bg_color, font=("Arial", 10)).pack(side="left")
entry2 = tk.Entry(frame2, width=25, font=("Arial", 10))
entry2.pack(side="right", padx=10)
entry2.insert(0, datetime.now().strftime("%Y-%m-%d %H:%M"))

# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
calculate_btn = tk.Button(
    root,
    text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É",
    command=calculate_hours,
    bg=button_color,
    font=("Arial", 12, "bold"),
    padx=10,
    pady=5
)
calculate_btn.pack(pady=20)

# –ü–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result_frame = tk.LabelFrame(root, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", bg=bg_color, font=("Arial", 11))
result_frame.pack(fill="both", expand=True, padx=20, pady=10)
result_label = tk.Label(
    result_frame, 
    text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'",
    bg="#fffaf0",
    font=("Arial", 11),
    justify="left",
    pady=20
)
result_label.pack(fill="both", expand=True, padx=10, pady=10)

# –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
formats_label = tk.Label(
    root,
    text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú  |  15.03.2025 14:30  |  –î–î/–ú–ú/–ì–ì–ì–ì",
    font=("Arial", 9),
    bg=bg_color,
    fg="#555555"
)
formats_label.pack(side="bottom", pady=5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
root.mainloop()