import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                             QHBoxLayout, QPushButton, QLabel, QFrame, QMessageBox,
                             QGraphicsDropShadowEffect, QSizePolicy)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont, QPalette, QLinearGradient, QColor


class AnswerWidget(QFrame):
    def __init__(self, label, color, value, main_window):
        super().__init__()
        self.value = value
        self.is_selected = False
        self.color = color
        self.main_window = main_window

        self.setMinimumSize(100, 80)
        self.setMaximumSize(120, 90)
        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.setCursor(Qt.CursorShape.PointingHandCursor)

        layout = QVBoxLayout(self)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.setContentsMargins(6, 6, 6, 6)

        label_widget = QLabel(label)
        label_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label_widget.setWordWrap(True)
        label_widget.setStyleSheet("color: #2C3E50; font-size: 16px; font-weight: bold; background: transparent;")
        layout.addWidget(label_widget)

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)
        shadow.setColor(QColor(0, 0, 0, 50))
        shadow.setOffset(3, 3)
        self.setGraphicsEffect(shadow)

        self.update_style()

    def update_style(self):
        border = "3px solid #FFD700" if self.is_selected else "3px solid transparent"
        bg_color = self.color if not self.is_selected else f"qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 {self.color}, stop:1 #FFD700)"

        self.setStyleSheet(f"""
            AnswerWidget {{
                background: {bg_color};
                border-radius: 12px;
                border: {border};
            }}
            AnswerWidget:hover {{
                border: 3px solid white;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 {self.color}, stop:1 rgba(255,255,255,0.3));
            }}
        """)

    def mousePressEvent(self, event):
        self.set_selected(True)
        self.main_window.on_answer_clicked(self)

    def set_selected(self, selected):
        self.is_selected = selected
        self.update_style()


class InnovationRiskApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("FINANCIAL UNIVERSITY")
        self.setMinimumSize(1000, 750)

        self.questions = [
            "–ú–æ–∂–µ—Ç –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞, –∫–∞–∫ –æ—Ö—Ä–∞–Ω—è–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—â–µ–Ω–∞ –ø–∞—Ç–µ–Ω—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤ —Ä–∞–º–∫–∞—Ö —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?",
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –≤ –æ—Ç—Ä–∞—Å–ª–∏?",
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞ –¥–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—é –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?",
            "–£—Å–ª—É–≥–∞ –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –æ–∫—É–ø–∏—Ç—å—Å—è (—Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞)?",
            "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è?",
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ–∫–∞–∑–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π?",
            "–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π —É—Å–ª—É–≥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã –æ—Å–æ–±—ã–µ, –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è?",
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏?",
            "–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤ —Å–≤–æ–µ–π –æ—Ç—Ä–∞—Å–ª–∏?",
            "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∫–ª–∏–µ–Ω—Ç–∞–º, –∫–æ–º–ø–∞–Ω–∏—è–º –∏–∑ –¥—Ä—É–≥–∏—Ö –æ—Ç—Ä–∞—Å–ª–µ–π?",
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è?",
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —É—Å–ª—É–≥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º?"
        ]

        self.answers = [0] * len(self.questions)
        self.current_question = 0
        self.answer_widgets = []

        self.init_ui()

    def init_ui(self):
        self.set_modern_theme()
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(40, 30, 40, 30)
        layout.setSpacing(20)

        layout.addWidget(self.create_header())
        layout.addWidget(self.create_content_area(), 1)
        layout.addWidget(self.create_footer())

        self.update_navigation()

    def set_modern_theme(self):
        gradient = QLinearGradient(0, 0, 0, 1)
        gradient.setCoordinateMode(QLinearGradient.CoordinateMode.ObjectBoundingMode)
        gradient.setColorAt(0.0, QColor(64, 124, 189))
        gradient.setColorAt(0.5, QColor(96, 184, 211))
        gradient.setColorAt(1.0, QColor(155, 226, 245))

        palette = QPalette()
        palette.setBrush(QPalette.ColorRole.Window, gradient)
        self.setPalette(palette)

    def create_glass_frame(self):
        frame = QFrame()
        frame.setStyleSheet("background: rgba(255, 255, 255, 0.15); border-radius: 20px;")

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 80))
        shadow.setOffset(0, 5)
        frame.setGraphicsEffect(shadow)

        return frame

    def create_header(self):
        frame = self.create_glass_frame()
        layout = QHBoxLayout(frame)
        layout.setContentsMargins(20, 15, 20, 15)

        title = QLabel("FINANCIAL UNIVERSITY \n üöÄ –≠–∫—Å–ø—Ä–µ—Å—Å-–æ—Ü–µ–Ω–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("color: white; font-size: 28px; font-weight: bold; background: transparent; padding: 10px;")

        layout.addStretch()
        layout.addWidget(title)
        layout.addStretch()

        return frame

    def create_content_area(self):
        container = QWidget()
        layout = QVBoxLayout(container)
        layout.setSpacing(20)
        layout.setContentsMargins(0, 0, 0, 0)

        layout.addWidget(self.create_progress_section())
        layout.addWidget(self.create_question_section(), 3)
        layout.addWidget(self.create_answers_section(), 1)

        return container

    def create_progress_section(self):
        frame = self.create_glass_frame()
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(20, 10, 20, 10)
        layout.setSpacing(5)

        self.progress_label = QLabel(f"–í–æ–ø—Ä–æ—Å {self.current_question + 1} –∏–∑ {len(self.questions)}")
        self.progress_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.progress_label.setStyleSheet("color: white; font-size: 18px; font-weight: bold;")
        layout.addWidget(self.progress_label)

        progress_bg = QFrame()
        progress_bg.setStyleSheet("background-color: rgba(255, 255, 255, 0.25); border-radius: 10px;")
        progress_bg.setFixedHeight(12)

        self.progress_bar = QFrame(progress_bg)
        self.progress_bar.setStyleSheet(
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #FFD700, stop:1 #4ECDC4); border-radius: 10px;")
        self.progress_bar.setFixedHeight(12)

        layout.addWidget(progress_bg)
        return frame

    def create_question_section(self):
        frame = self.create_glass_frame()
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(30, 5, 30, 40)

        self.question_label = QLabel()
        self.question_label.setWordWrap(True)
        self.question_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.question_label.setStyleSheet(
            "color: white; font-size: 26px; font-weight: bold; line-height: 1.6; background: transparent; padding: 20px;")
        self.question_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.question_label.setMinimumHeight(180)

        layout.addWidget(self.question_label)
        return frame

    def create_answers_section(self):
        frame = self.create_glass_frame()
        layout = QHBoxLayout(frame)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        answer_data = [
            ("–¢–æ—á–Ω–æ –Ω–µ—Ç", "#FF6B6B", -2),
            ("–ù–µ—Ç", "#FFA8A8", -1),
            ("–ù–µ –∑–Ω–∞—é", "#E9ECEF", 0),
            ("–î–∞", "#A5D8FF", 1),
            ("–¢–æ—á–Ω–æ –¥–∞", "#4ECDC4", 2)
        ]

        self.answer_widgets.clear()
        for label, color, value in answer_data:
            widget = AnswerWidget(label, color, value, self)
            layout.addWidget(widget)
            self.answer_widgets.append(widget)

        return frame

    def create_footer(self):
        frame = self.create_glass_frame()
        layout = QHBoxLayout(frame)
        layout.setContentsMargins(20, 15, 20, 15)

        reset_btn = QPushButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        reset_btn.setMinimumSize(160, 55)
        reset_btn.setStyleSheet(self.get_button_style("#E9ECEF"))
        reset_btn.clicked.connect(self.reset_answers)

        layout.addStretch()
        layout.addWidget(reset_btn)
        layout.addStretch()

        return frame

    def get_button_style(self, base_color):
        text_color = "#000000" if base_color == "#E9ECEF" else "white"

        return f"""
            QPushButton {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 {base_color}, stop:1 {QColor(base_color).darker(120).name()});
                color: {text_color}; font-size: 16px; font-weight: bold; padding: 15px 25px;
                border: none; border-radius: 12px; min-width: 120px;
            }}
            QPushButton:hover {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 {QColor(base_color).lighter(120).name()}, stop:1 {base_color});
            }}
            QPushButton:pressed {{
                background: {QColor(base_color).darker(120).name()};
            }}
        """

    def on_answer_clicked(self, clicked_widget):
        for widget in self.answer_widgets:
            widget.set_selected(False)

        clicked_widget.set_selected(True)
        self.answers[self.current_question] = clicked_widget.value

        if self.current_question == len(self.questions) - 1:
            QTimer.singleShot(300, self.show_results)
        else:
            QTimer.singleShot(300, self.next_question_auto)

    def next_question_auto(self):
        if self.current_question < len(self.questions) - 1:
            self.current_question += 1
            self.update_navigation()

    def update_navigation(self):
        self.progress_label.setText(f"–í–æ–ø—Ä–æ—Å {self.current_question + 1} –∏–∑ {len(self.questions)}")
        self.question_label.setText(self.questions[self.current_question])

        for widget in self.answer_widgets:
            widget.set_selected(False)

        current_answer = self.answers[self.current_question]
        if current_answer != 0:
            for widget in self.answer_widgets:
                if widget.value == current_answer:
                    widget.set_selected(True)
                    break

        self.update_progress_bar()

    def update_progress_bar(self):
        progress = (self.current_question + 1) / len(self.questions)
        if hasattr(self, 'progress_bar') and self.progress_bar.parent().width() > 0:
            bar_width = int(self.progress_bar.parent().width() * progress)
            self.progress_bar.setFixedWidth(bar_width)

    def reset_answers(self):
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞",
                                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            self.answers = [0] * len(self.questions)
            self.current_question = 0
            self.update_navigation()

    def show_results(self):
        total_score = sum(self.answers)

        if total_score >= 12:
            risk_data = ("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üü¢", "#28A745", "üéâ",
                         "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞. –£—Å–ª—É–≥–∞ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö.")
        elif total_score >= 0:
            risk_data = ("–î–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫ üü°", "#FFC107", "‚ö†Ô∏è",
                         "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        elif total_score >= -11:
            risk_data = ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫ üü†", "#FD7E14", "üî•",
                         "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏.")
        else:
            risk_data = ("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫ üî¥", "#DC3545", "üö®",
                         "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —É—Å–ª—É–≥–∏.")

        risk_level, color, icon, description = risk_data

        result_text = f"""
        <div style='text-align: center;'>
            <h1 style='color: #2C3E50; margin-bottom: 30px; font-size: 32px;'>{icon} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏</h1>
            <p style='font-size: 20px; color: #2C3E50; margin: 15px;'>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤:</p>
            <p style='font-size: 64px; color: {color}; font-weight: bold; margin: 25px;'>{total_score}</p>
            <p style='font-size: 28px; color: {color}; font-weight: bold; margin: 20px;'>{risk_level}</p>
            <p style='font-size: 18px; color: #5A6C7D; margin-top: 25px; line-height: 1.6; padding: 0 20px;'>{description}</p>
        </div>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("üéØ FINANCIAL UNIVERSITY")
        msg.setTextFormat(Qt.TextFormat.RichText)
        msg.setText(result_text)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)

        msg.setStyleSheet("""
            QMessageBox {
                background: white;
                border: 3px solid #E9ECEF;
                border-radius: 20px; 
                min-width: 680px;
                min-height: 480px;
            }
            QMessageBox QLabel { 
                color: #495057; 
                background: transparent; 
                font-family: "Segoe UI";
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #6C757D, 
                    stop:1 #495057);
                color: white; 
                font-size: 16px; 
                font-weight: bold; 
                padding: 14px 32px;
                border: none;
                border-radius: 10px; 
                min-width: 130px;
                margin-top: 20px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, 
                    stop:0 #5A6268, 
                    stop:1 #3D4348);
            }
            QPushButton:pressed {
                background: #3D4348;
            }
        """)

        msg.exec()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    app.setFont(QFont("Segoe UI", 10))

    window = InnovationRiskApp()
    window.show()

    sys.exit(app.exec())