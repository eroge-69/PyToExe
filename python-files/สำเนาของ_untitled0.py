# -*- coding: utf-8 -*-
"""สำเนาของ Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qRew54oN3VqnADpDpdVWKkzpbzkfc3K1
"""

import math
import random

WIN_COMBINATIONS = [
    (0,1,2), (3,4,5), (6,7,8),
    (0,3,6), (1,4,7), (2,5,8),
    (0,4,8), (2,4,6)
]

def แสดงกระดาน(board):
    def c(i): return board[i] if board[i] != ' ' else str(i+1)
    print(f"\n {c(0)} | {c(1)} | {c(2)} ")
    print("---+---+---")
    print(f" {c(3)} | {c(4)} | {c(5)} ")
    print("---+---+---")
    print(f" {c(6)} | {c(7)} | {c(8)} \n")

def ตรวจผู้ชนะ(board):
    for a,b,c in WIN_COMBINATIONS:
        if board[a] == board[b] == board[c] and board[a] != ' ':
            return board[a]
    if ' ' not in board:
        return 'Draw'
    return None

def ช่องว่าง(board):
    return [i for i, v in enumerate(board) if v == ' ']

def minimax(board, depth, กำลังเป็นAI, AI, คน, alpha=-math.inf, beta=math.inf, ใช้AlphaBeta=True):
    ผลลัพธ์ = ตรวจผู้ชนะ(board)
    if ผลลัพธ์ == AI:
        return 10 - depth
    elif ผลลัพธ์ == คน:
        return depth - 10
    elif ผลลัพธ์ == 'Draw':
        return 0

    if กำลังเป็นAI:
        ค่าสูงสุด = -math.inf
        for move in ช่องว่าง(board):
            board[move] = AI
            ประเมิน = minimax(board, depth+1, False, AI, คน, alpha, beta, ใช้AlphaBeta)
            board[move] = ' '
            ค่าสูงสุด = max(ค่าสูงสุด, ประเมิน)
            if ใช้AlphaBeta:
                alpha = max(alpha, ประเมิน)
                if beta <= alpha:
                    break
        return ค่าสูงสุด
    else:
        ค่าต่ำสุด = math.inf
        for move in ช่องว่าง(board):
            board[move] = คน
            ประเมิน = minimax(board, depth+1, True, AI, คน, alpha, beta, ใช้AlphaBeta)
            board[move] = ' '
            ค่าต่ำสุด = min(ค่าต่ำสุด, ประเมิน)
            if ใช้AlphaBeta:
                beta = min(beta, ประเมิน)
                if beta <= alpha:
                    break
        return ค่าต่ำสุด

def หาตาที่ดีที่สุด(board, AI, คน, ใช้AlphaBeta=True):
    คะแนนดีที่สุด = -math.inf
    ตัวเลือกดีที่สุด = []
    for move in ช่องว่าง(board):
        board[move] = AI
        คะแนน = minimax(board, 0, False, AI, คน, -math.inf, math.inf, ใช้AlphaBeta)
        board[move] = ' '
        if คะแนน > คะแนนดีที่สุด:
            คะแนนดีที่สุด = คะแนน
            ตัวเลือกดีที่สุด = [move]
        elif คะแนน == คะแนนดีที่สุด:
            ตัวเลือกดีที่สุด.append(move)
    return random.choice(ตัวเลือกดีที่สุด) if ตัวเลือกดีที่สุด else None

def ตาคน(board, คน):
    ว่าง = ช่องว่าง(board)
    while True:
        try:
            เลือก = int(input(f"ตาคุณ ({คน}) เลือกช่อง 1-9: ")) - 1
            if เลือก in ว่าง:
                board[เลือก] = คน
                return
            else:
                print("ช่องนี้ถูกเลือกแล้ว หรือไม่ถูกต้อง ลองใหม่")
        except ValueError:
            print("กรุณาใส่ตัวเลข 1-9")

def ตาAI(board, AI, คน, ใช้AlphaBeta=True):
    move = หาตาที่ดีที่สุด(board, AI, คน, ใช้AlphaBeta)
    board[move] = AI
    print(f"AI ({AI}) เลือกช่อง {move+1}")

def เล่นเกม():
    board = [' '] * 9
    คน = input("คุณอยากเป็น X หรือ O? : ").upper()
    AI = 'O' if คน == 'X' else 'X'
    แสดงกระดาน(board)

    if AI == 'X':
        ตาAI(board, AI, คน)

    while True:
        แสดงกระดาน(board)
        ตาคน(board, คน)
        if ตรวจผู้ชนะ(board):
            break
        ตาAI(board, AI, คน)
        if ตรวจผู้ชนะ(board):
            break

    แสดงกระดาน(board)
    winner = ตรวจผู้ชนะ(board)
    if winner == 'Draw':
        print("เสมอ!")
    else:
        print(f"ผู้ชนะคือ {winner}")

if __name__ == "__main__":
    เล่นเกม()