import os
import time
import msvcrt



def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏."""
    os.system('cls' if os.name == 'nt' else 'clear')


def is_solvable(board, n):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å–∫–∏ —Ä–µ—à–µ–Ω–∏–µ."""
    tiles = []
    empty_row = -1

    for i in range(n):
        for j in range(n):
            tile = board[i][j]
            if tile == 0:
                empty_row = i
            else:
                tiles.append(tile)

    inv_count = 0
    for i in range(len(tiles)):
        for j in range(i + 1, len(tiles)):
            if tiles[i] > tiles[j]:
                inv_count += 1

    if n % 2 == 1:
        return inv_count % 2 == 0
    else:
        row_from_bottom = n - empty_row
        return (inv_count + row_from_bottom) % 2 == 1


def heuristic(board, n):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    h = 0
    for i in range(n):
        for j in range(n):
            num = board[i][j]
            if num != 0:
                target_row, target_col = divmod(num - 1, n)
                h += abs(i - target_row) + abs(j - target_col)
    return h


def solve_puzzle(start_board, n):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IDA* –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""
    empty_pos = next(((i, j) for i in range(n) for j in range(n) if start_board[i][j] == 0), None)
    start = tuple(tuple(row) for row in start_board)
    threshold = heuristic(start, n)

    def search(node, empty, g, threshold, path):
        h_val = heuristic(node, n)
        f = g + h_val

        if f > threshold:
            return (f, None)
        if h_val == 0:
            return (f, path.copy())

        min_thresh = float('inf')
        directions = [('Up', (-1, 0)), ('Down', (1, 0)),
                      ('Left', (0, -1)), ('Right', (0, 1))]

        for move, (di, dj) in directions:
            ni, nj = empty[0] + di, empty[1] + dj

            if 0 <= ni < n and 0 <= nj < n:
                if path and ((path[-1] == 'Up' and move == 'Down') or
                             (path[-1] == 'Down' and move == 'Up') or
                             (path[-1] == 'Left' and move == 'Right') or
                             (path[-1] == 'Right' and move == 'Left')):
                    continue

                new_board = [list(r) for r in node]
                new_board[empty[0]][empty[1]], new_board[ni][nj] = new_board[ni][nj], 0
                new_board_tuple = tuple(map(tuple, new_board))
                res_thresh, res_path = search(new_board_tuple, (ni, nj), g + 1,
                                              threshold, path + [move])

                if res_path is not None:
                    return (res_thresh, res_path)
                if res_thresh < min_thresh:
                    min_thresh = res_thresh

        return (min_thresh, None)

    while True:
        res_thresh, result = search(start, empty_pos, 0, threshold, [])
        if result is not None:
            return result
        if res_thresh == float('inf'):
            return None
        threshold = res_thresh


def get_key():
    """–û–∂–∏–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –∫–æ–¥."""
    return msvcrt.getch()


def print_board_with_highlight(board, n, current_pos, move_number, total_moves):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –¥–æ—Å–∫—É —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    print("‚îå" + "‚îÄ" * (n * 6 - 1) + "‚îê")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —Ö–æ–¥–∞
    header = f" –•–û–î {move_number}/{total_moves} "
    padding = (n * 6 - 1 - len(header)) // 2
    print("‚îÇ" + " " * padding + header + " " * padding + "‚îÇ")
    print("‚îú" + "‚îÄ" * (n * 6 - 1) + "‚î§")

    for i in range(n):
        print("‚îÇ", end="")
        for j in range(n):
            if board[i][j] == 0:
                cell = "   ‚ñà‚ñà   "
            else:
                cell = f"   {board[i][j]:2d}   "

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if (i, j) == current_pos:
                cell = f"\033[42m{cell}\033[0m"  # –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
            elif board[i][j] == 0:
                cell = f"\033[44m{cell}\033[0m"  # –°–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏

            print(cell, end="")
        print("‚îÇ")
        if i < n - 1:
            print("‚îú" + "‚îÄ" * (n * 6 - 1) + "‚î§")

    print("‚îî" + "‚îÄ" * (n * 6 - 1) + "‚îò")


def print_controls():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏."""
    print("\n" + "‚ïê" * 50)
    print(" üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
    print(" ‚¨ÖÔ∏è  –°—Ç—Ä–µ–ª–∫–∞ –í–õ–ï–í–û  - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥")
    print(" ‚û°Ô∏è  –°—Ç—Ä–µ–ª–∫–∞ –í–ü–†–ê–í–û - —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥")
    print(" üîÑ R - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    print(" üö™ Q - –≤—ã—Ö–æ–¥")
    print("‚ïê" * 50)


def display_solution_interactive(initial_board, solution, n):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ—à–µ–Ω–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏."""
    if not solution:
        print("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    current_step = 0
    total_steps = len(solution)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–æ—Å–∫–∏
    current_board = [row[:] for row in initial_board]
    empty_pos = next(((i, j) for i in range(n) for j in range(n) if current_board[i][j] == 0), None)

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    board_states = [([row[:] for row in current_board], empty_pos)]

    for move in solution:
        di, dj = 0, 0
        if move == 'Up':
            di, dj = -1, 0
        elif move == 'Down':
            di, dj = 1, 0
        elif move == 'Left':
            di, dj = 0, -1
        elif move == 'Right':
            di, dj = 0, 1

        ni, nj = empty_pos[0] + di, empty_pos[1] + dj
        current_board[empty_pos[0]][empty_pos[1]] = current_board[ni][nj]
        current_board[ni][nj] = 0
        empty_pos = (ni, nj)

        board_states.append(([row[:] for row in current_board], empty_pos))

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
    while True:
        clear_screen()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print("üéØ –†–ï–®–ï–ù–ò–ï –ü–Ø–¢–ù–ê–®–ï–ö - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
        print("‚ïê" * 50)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
        current_board, empty_pos = board_states[current_step]
        print_board_with_highlight(current_board, n, empty_pos, current_step, total_steps)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ
        if current_step > 0:
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥: {solution[current_step - 1]}")
        else:
            print(f"\nüìã –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

        print_controls()

        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = get_key()

        if key == b'q' or key == b'Q':  # –í—ã—Ö–æ–¥
            break
        elif key == b'r' or key == b'R':  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
            current_step = 0
        elif key == b'M' or key == b'P':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ (—Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥)
            if current_step < total_steps:
                current_step += 1
        elif key == b'K' or key == b'H':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥)
            if current_step > 0:
                current_step -= 1
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
        elif key == b'\xe0':
            second_key = get_key()
            if second_key == b'M':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
                if current_step < total_steps:
                    current_step += 1
            elif second_key == b'K':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
                if current_step > 0:
                    current_step -= 1
            elif second_key == b'P':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ (—Ç–∞–∫–∂–µ —Å–ª–µ–¥—É—é—â–∏–π)
                if current_step < total_steps:
                    current_step += 1
            elif second_key == b'H':  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö (—Ç–∞–∫–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
                if current_step > 0:
                    current_step -= 1


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    clear_screen()
    print("üéØ –†–ï–®–ê–¢–ï–õ–¨ –ü–Ø–¢–ù–ê–®–ï–ö")
    print("‚ïê" * 50)

    try:
        n = int(input("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è (2-4): "))
        if n < 2 or n > 4:
            print("‚ùå –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 4!")
            return
    except ValueError:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    print(f"\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è {n}x{n}:")
    print("   (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, 0 - –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞)")
    print("‚îÄ" * 40)

    board = []
    for i in range(n):
        while True:
            try:
                row_input = input(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: ").strip()
                if not row_input:
                    print("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                    continue

                row = list(map(int, row_input.split()))
                if len(row) != n:
                    print(f"‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ {n} —á–∏—Å–µ–ª!")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..n¬≤-1
                valid_numbers = set(range(n * n))
                if not all(num in valid_numbers for num in row):
                    print(f"‚ùå –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ {n * n - 1}!")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
                if len(set(row)) != len(row):
                    print("‚ùå –ß–∏—Å–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è!")
                    continue

                board.append(row)
                break
            except ValueError:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞!")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                return

    print("\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–∏–º–æ—Å—Ç—å...")
    if not is_solvable(board, n):
        print("‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—à–µ–Ω–∏—è!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–∏–º–∞!")
    print("‚è≥ –ò—â–µ–º —Ä–µ—à–µ–Ω–∏–µ... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")

    start_time = time.time()
    solution = solve_puzzle(board, n)
    end_time = time.time()

    if solution:
        solving_time = end_time - start_time
        print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {solving_time:.2f} —Å–µ–∫—É–Ω–¥!")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {len(solution)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤
        print("\nüó∫Ô∏è  –ö—Ä–∞—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤:")
        compact_moves = []
        count = 1
        current_move = solution[0]

        for i in range(1, len(solution)):
            if solution[i] == current_move:
                count += 1
            else:
                if count > 1:
                    compact_moves.append(f"{count}√ó{current_move}")
                else:
                    compact_moves.append(current_move)
                current_move = solution[i]
                count = 1

        if count > 1:
            compact_moves.append(f"{count}√ó{current_move}")
        else:
            compact_moves.append(current_move)

        print(" ‚Üí ".join(compact_moves))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        input("\nüéÆ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º...")
        display_solution_interactive(board, solution, n)

    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ!")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ.")

    print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—à–∞—Ç–µ–ª—è –ø—è—Ç–Ω–∞—à–µ–∫!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")