import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import threading
import time
import platform
import re
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from collections import deque
import json
import os
import webbrowser

class PingWindow:
    def __init__(self, root, ip_address, ip_name=None):
        self.root = root
        self.ip_address = ip_address
        self.ip_name = ip_name or ip_address
        self.is_pinging = False
        self.ping_thread = None
        
        self.create_window()
        
    def create_window(self):
        self.window = tk.Toplevel(self.root)
        self.window.title(f"Ping Monitor - {self.ip_name} ({self.ip_address})")
        self.window.geometry("400x300")
        self.window.resizable(True, True)
        
        # Main frame
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # IP display
        ip_frame = ttk.Frame(main_frame)
        ip_frame.pack(fill=tk.X, pady=5)
        ttk.Label(ip_frame, text=f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:", font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
        ttk.Label(ip_frame, text=f"{self.ip_name} ({self.ip_address})", font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=5)
        
        # Control buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        self.start_button = ttk.Button(button_frame, text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", command=self.start_ping)
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è –°—Ç–æ–ø", command=self.stop_ping, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # Statistics frame
        stats_frame = ttk.LabelFrame(main_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding="5")
        stats_frame.pack(fill=tk.X, pady=5)
        
        stats_grid = ttk.Frame(stats_frame)
        stats_grid.pack(fill=tk.X)
        
        ttk.Label(stats_grid, text="üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.sent_label = ttk.Label(stats_grid, text="0")
        self.sent_label.grid(row=0, column=1, sticky=tk.W, pady=2)
        
        ttk.Label(stats_grid, text="üì• –ü–æ–ª—É—á–µ–Ω–æ:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.received_label = ttk.Label(stats_grid, text="0")
        self.received_label.grid(row=1, column=1, sticky=tk.W, pady=2)
        
        ttk.Label(stats_grid, text="‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.lost_label = ttk.Label(stats_grid, text="0%")
        self.lost_label.grid(row=2, column=1, sticky=tk.W, pady=2)
        
        ttk.Label(stats_grid, text="üìä –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞:").grid(row=0, column=2, sticky=tk.W, padx=(20,0), pady=2)
        self.avg_ping_label = ttk.Label(stats_grid, text="0 ms")
        self.avg_ping_label.grid(row=0, column=3, sticky=tk.W, pady=2)
        
        ttk.Label(stats_grid, text="‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞:").grid(row=1, column=2, sticky=tk.W, padx=(20,0), pady=2)
        self.last_ping_label = ttk.Label(stats_grid, text="0 ms")
        self.last_ping_label.grid(row=1, column=3, sticky=tk.W, pady=2)
        
        # Log frame
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –ø–∏–Ω–≥–æ–≤", padding="5")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Text widget with scrollbar
        self.log_text = tk.Text(log_frame, height=8, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Initialize statistics
        self.sent_count = 0
        self.received_count = 0
        self.ping_times = []
        
        # Handle window close
        self.window.protocol("WM_DELETE_WINDOW", self.on_close)
        
    def get_ping_command(self, ip):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ping –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
        if platform.system().lower() == "windows":
            return ["ping", "-n", "1", "-w", "1000", ip]
        else:  # Linux/Mac
            return ["ping", "-c", "1", "-W", "1", ip]
        
    def extract_ping_time(self, output):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞ –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã"""
        output_lower = output.lower()
        
        if platform.system().lower() == "windows":
            patterns = [
                r'–≤—Ä–µ–º—è[=<>](\d+)–º?—Å',
                r'time[=<>](\d+)\s*ms',
                r'–≤—Ä–µ–º—è[=<>](\d+)\s*–º—Å'
            ]
        else:
            patterns = [
                r'time[=<>](\d+\.?\d*)\s*ms',
                r'time[=<>](\d+)\s*ms'
            ]
        
        for pattern in patterns:
            match = re.search(pattern, output_lower)
            if match:
                try:
                    return float(match.group(1))
                except ValueError:
                    continue
        
        if platform.system().lower() == "windows":
            match = re.search(r'(\d+)\s*–º?—Å\s*$', output_lower, re.MULTILINE)
            if match:
                try:
                    return float(match.group(1))
                except ValueError:
                    pass
        
        return None
        
    def ping_once(self, ip):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –ø–∏–Ω–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            start_time = time.time()
            result = subprocess.run(
                self.get_ping_command(ip),
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=5
            )
            ping_success = result.returncode == 0
            return ping_success, result.stdout, time.time() - start_time
        except subprocess.TimeoutExpired:
            return False, "Timeout", 0
        except Exception as e:
            return False, f"Error: {str(e)}", 0
        
    def ping_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∏–Ω–≥–∞"""
        while self.is_pinging:
            cycle_start = time.time()
            
            success, output, exec_time = self.ping_once(self.ip_address)
            self.sent_count += 1
            
            if success:
                self.received_count += 1
                ping_time = self.extract_ping_time(output)
                if ping_time is not None:
                    self.ping_times.append(ping_time)
                    log_message = f"[{time.strftime('%H:%M:%S')}] –û—Ç–≤–µ—Ç: –≤—Ä–µ–º—è={ping_time:.1f}–º—Å"
                    last_ping = f"{ping_time:.1f} ms"
                else:
                    estimated_time = exec_time * 1000
                    self.ping_times.append(estimated_time)
                    log_message = f"[{time.strftime('%H:%M:%S')}] –û—Ç–≤–µ—Ç: –≤—Ä–µ–º—è‚âà{estimated_time:.1f}–º—Å"
                    last_ping = f"{estimated_time:.1f} ms"
            else:
                log_message = f"[{time.strftime('%H:%M:%S')}] –¢–∞–π–º–∞—É—Ç"
                last_ping = "Timeout"
            
            self.window.after(0, self.update_ui, log_message, last_ping)
            
            elapsed = time.time() - cycle_start
            sleep_time = max(0, 1.0 - elapsed)
            if sleep_time > 0:
                time.sleep(sleep_time)
            
    def update_ui(self, log_message, last_ping):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        self.log_text.insert(tk.END, log_message + "\n")
        self.log_text.see(tk.END)
        
        self.sent_label.config(text=str(self.sent_count))
        self.received_label.config(text=str(self.received_count))
        
        if self.sent_count > 0:
            lost_percent = ((self.sent_count - self.received_count) / self.sent_count) * 100
            self.lost_label.config(text=f"{lost_percent:.1f}%")
        
        self.last_ping_label.config(text=last_ping)
        
        if self.ping_times:
            avg_ping = sum(self.ping_times) / len(self.ping_times)
            self.avg_ping_label.config(text=f"{avg_ping:.1f} ms")
        
    def start_ping(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∏–Ω–≥"""
        if self.is_pinging:
            return
            
        self.is_pinging = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        
        self.sent_count = 0
        self.received_count = 0
        self.ping_times = []
        self.log_text.delete(1.0, tk.END)
        
        self.ping_thread = threading.Thread(target=self.ping_loop, daemon=True)
        self.ping_thread.start()
        
    def stop_ping(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∏–Ω–≥"""
        self.is_pinging = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        
    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.stop_ping()
        self.window.destroy()

class PingGraph:
    def __init__(self, parent, width=3, height=1.5):
        self.parent = parent
        self.width = width
        self.height = height
        self.data = deque(maxlen=100)  # –ú–∞–∫—Å–∏–º—É–º 100 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        self.timestamps = deque(maxlen=100)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É matplotlib
        self.fig = Figure(figsize=(width, height), dpi=50)
        self.ax = self.fig.add_subplot(111)
        self.ax.set_facecolor('#f0f0f0')
        self.fig.patch.set_facecolor('#f0f0f0')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
        self.ax.set_ylim(0, 500)  # –î–∏–∞–ø–∞–∑–æ–Ω –ø–∏–Ω–≥–∞ –æ—Ç 0 –¥–æ 500 –º—Å
        self.ax.tick_params(axis='both', which='major', labelsize=6)
        self.ax.grid(True, alpha=0.3)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å–Ω–∏–∑—É
        self.ax.set_xticklabels([])
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç tkinter
        self.canvas = FigureCanvasTkAgg(self.fig, master=parent)
        self.canvas.draw()
        self.widget = self.canvas.get_tk_widget()
        self.widget.config(width=width*50, height=height*50)
        
    def add_point(self, ping_time, timestamp):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫"""
        if ping_time is not None:
            self.data.append(ping_time)
            self.timestamps.append(timestamp)
            self.update_plot()
    
    def update_plot(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫"""
        self.ax.clear()
        
        if self.data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            if self.timestamps:
                start_time = self.timestamps[0]
                relative_times = [t - start_time for t in self.timestamps]
                
                self.ax.plot(relative_times, self.data, 'b-', linewidth=1)
                self.ax.fill_between(relative_times, self.data, alpha=0.3)
        
        self.ax.set_ylim(0, max(500, max(self.data) * 1.2 if self.data else 500))
        self.ax.grid(True, alpha=0.3)
        self.ax.tick_params(axis='both', which='major', labelsize=6)
        self.ax.set_facecolor('#f0f0f0')
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å–Ω–∏–∑—É
        self.ax.set_xticklabels([])
        
        self.canvas.draw()
    
    def resize(self, width, height):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.width = width
        self.height = height
        self.fig.set_size_inches(width, height)
        self.widget.config(width=width*50, height=height*50)
        self.update_plot()

class PingMonitor:
    def __init__(self, root):
        self.root = root
        self.root.title("Multi IP Ping Monitor")
        self.root.geometry("900x700")  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.root.resizable(True, True)
        
        self.ping_windows = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
        self.status_indicators = []  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
        self.ping_graphs = []  # –ì—Ä–∞—Ñ–∏–∫–∏ –ø–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ IP
        self.status_thread = None
        self.is_monitoring = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.graph_update_frequency = 1  # —Å–µ–∫—É–Ω–¥—ã
        self.graph_time_window = 60     # —Å–µ–∫—É–Ω–¥—ã
        self.graph_width = 3  # —à–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.graph_height = 1.5  # –≤—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_file = "ping_monitor_settings.json"
        
        self.setup_ui()
        self.load_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        
    def setup_ui(self):
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = ttk.Label(main_frame, text="üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö IP-–∞–¥—Ä–µ—Å–æ–≤", 
                               font=('Arial', 12, 'bold'))
        title_label.pack(pady=(0, 10))
        
        # IP list frame
        list_frame = ttk.LabelFrame(main_frame, text="üìã –°–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Create main container for scrollable area
        container = ttk.Frame(list_frame)
        container.pack(fill=tk.BOTH, expand=True)
        
        # Create scrollable frame for IP list
        canvas = tk.Canvas(container)
        scrollbar = ttk.Scrollbar(container, orient=tk.VERTICAL, command=canvas.yview)
        self.scrollable_frame = ttk.Frame(canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack in correct order: scrollable area first, then scrollbar
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # IP entries list
        self.name_entries = []
        self.ip_entries = []
        self.ping_labels = []  # –ú–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–Ω–≥–∞
        self.browser_buttons = []  # –ö–Ω–æ–ø–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.delete_buttons = []
        self.row_frames = []  # Store reference to row frames for deletion
        
        # Control buttons frame - —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        left_control_frame = ttk.Frame(control_frame)
        left_control_frame.pack(side=tk.LEFT, padx=5)
        
        # Start monitoring button
        self.start_monitor_button = ttk.Button(left_control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                                             command=self.start_monitoring)
        self.start_monitor_button.pack(side=tk.LEFT, padx=5)
        
        # Stop monitoring button
        self.stop_monitor_button = ttk.Button(left_control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                                            command=self.stop_monitoring, state=tk.DISABLED)
        self.stop_monitor_button.pack(side=tk.LEFT, padx=5)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        center_control_frame = ttk.Frame(control_frame)
        center_control_frame.pack(side=tk.LEFT, padx=20)
        
        # Settings for graphs
        settings_label = ttk.Label(center_control_frame, text="üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤:", font=('Arial', 9))
        settings_label.pack(anchor=tk.W)
        
        settings_grid = ttk.Frame(center_control_frame)
        settings_grid.pack(fill=tk.X, pady=2)
        
        ttk.Label(settings_grid, text="‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ (—Å–µ–∫):").grid(row=0, column=0, sticky=tk.W, padx=2)
        self.freq_var = tk.StringVar(value="1")
        freq_entry = ttk.Entry(settings_grid, textvariable=self.freq_var, width=6)
        freq_entry.grid(row=0, column=1, sticky=tk.W, padx=2)
        
        ttk.Label(settings_grid, text="ü™ü –û–∫–Ω–æ (—Å–µ–∫):").grid(row=0, column=2, sticky=tk.W, padx=5)
        self.window_var = tk.StringVar(value="60")
        window_entry = ttk.Entry(settings_grid, textvariable=self.window_var, width=6)
        window_entry.grid(row=0, column=3, sticky=tk.W, padx=2)
        
        ttk.Button(settings_grid, text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", 
                  command=self.apply_graph_settings).grid(row=0, column=4, padx=5)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        right_control_frame = ttk.Frame(control_frame)
        right_control_frame.pack(side=tk.RIGHT, padx=5)
        
        # Save settings button
        ttk.Button(right_control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_settings).pack(side=tk.RIGHT, padx=5)
        
        # Add button
        ttk.Button(right_control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å IP", 
                  command=self.add_ip_row).pack(side=tk.RIGHT, padx=5)
        
        # Bottom frame for graph size settings
        bottom_frame = ttk.LabelFrame(main_frame, text="üìê –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤", padding="10")
        bottom_frame.pack(fill=tk.X, pady=10)
        
        size_grid = ttk.Frame(bottom_frame)
        size_grid.pack(fill=tk.X)
        
        ttk.Label(size_grid, text="üìè –®–∏—Ä–∏–Ω–∞:").grid(row=0, column=0, sticky=tk.W, padx=5)
        self.width_var = tk.StringVar(value=str(self.graph_width))
        width_entry = ttk.Entry(size_grid, textvariable=self.width_var, width=8)
        width_entry.grid(row=0, column=1, sticky=tk.W, padx=5)
        
        ttk.Label(size_grid, text="üìè –í—ã—Å–æ—Ç–∞:").grid(row=0, column=2, sticky=tk.W, padx=5)
        self.height_var = tk.StringVar(value=str(self.graph_height))
        height_entry = ttk.Entry(size_grid, textvariable=self.height_var, width=8)
        height_entry.grid(row=0, column=3, sticky=tk.W, padx=5)
        
        ttk.Button(size_grid, text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", 
                  command=self.apply_graph_size).grid(row=0, column=4, padx=10)
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
                for row_frame in self.row_frames:
                    row_frame.destroy()
                
                self.name_entries.clear()
                self.ip_entries.clear()
                self.ping_labels.clear()
                self.browser_buttons.clear()
                self.delete_buttons.clear()
                self.row_frames.clear()
                self.status_indicators.clear()
                self.ping_graphs.clear()
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if 'ip_list' in settings:
                    for ip_data in settings['ip_list']:
                        name = ip_data.get('name', '')
                        ip = ip_data.get('ip', '')
                        self.create_ip_row(name, ip)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                if 'graph_settings' in settings:
                    graph_settings = settings['graph_settings']
                    self.freq_var.set(str(graph_settings.get('frequency', 1)))
                    self.window_var.set(str(graph_settings.get('window', 60)))
                    self.width_var.set(str(graph_settings.get('width', 3)))
                    self.height_var.set(str(graph_settings.get('height', 1.5)))
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    self.apply_graph_settings()
                    self.apply_graph_size()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            else:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ IP –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                default_names = [
                    "Google DNS 1", "Cloudflare 1", "Yandex DNS", "OpenDNS 1", "Google DNS 2"
                ]
                
                default_ips = [
                    "8.8.8.8", "1.1.1.1", "77.88.8.8", "208.67.222.222", "8.8.4.4"
                ]
                
                for i in range(5):
                    self.create_ip_row(default_names[i], default_ips[i])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.save_settings()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            settings = {
                'ip_list': [],
                'graph_settings': {
                    'frequency': float(self.freq_var.get()),
                    'window': float(self.window_var.get()),
                    'width': float(self.width_var.get()),
                    'height': float(self.height_var.get())
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ IP
            for name_entry, ip_entry in zip(self.name_entries, self.ip_entries):
                name = name_entry.get().strip()
                ip = ip_entry.get().strip()
                if name or ip:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    settings['ip_list'].append({
                        'name': name,
                        'ip': ip
                    })
            
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
    def apply_graph_settings(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            new_freq = float(self.freq_var.get())
            new_window = float(self.window_var.get())
            
            if new_freq <= 0 or new_window <= 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
                
            self.graph_update_frequency = new_freq
            self.graph_time_window = new_window
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            max_points = int(new_window / new_freq)
            for graph in self.ping_graphs:
                graph.data = deque(graph.data, maxlen=max_points)
                graph.timestamps = deque(graph.timestamps, maxlen=max_points)
                graph.update_plot()
                
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
    
    def apply_graph_size(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–æ –≤—Å–µ–º"""
        try:
            new_width = float(self.width_var.get())
            new_height = float(self.height_var.get())
            
            if new_width <= 0 or new_height <= 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
                
            self.graph_width = new_width
            self.graph_height = new_height
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
            for graph in self.ping_graphs:
                graph.resize(new_width, new_height)
                
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        
    def create_status_indicator(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        canvas = tk.Canvas(parent, width=20, height=20, highlightthickness=0)
        canvas.pack(side=tk.LEFT, padx=5)
        
        # –†–∏—Å—É–µ–º —Å–µ—Ä—ã–π –∫—Ä—É–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        canvas.create_oval(2, 2, 18, 18, fill="gray", outline="")
        return canvas
        
    def update_status_indicator(self, canvas, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        canvas.delete("all")
        if status == "online":
            canvas.create_oval(2, 2, 18, 18, fill="green", outline="")
        elif status == "offline":
            canvas.create_oval(2, 2, 18, 18, fill="red", outline="")
        else:  # blinking state
            canvas.create_oval(2, 2, 18, 18, fill="gray", outline="")
        
    def create_ip_row(self, name="", ip=""):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∏–º–µ–Ω–∏ –∏ IP"""
        row_frame = ttk.Frame(self.scrollable_frame)
        row_frame.pack(fill=tk.X, pady=3)
        self.row_frames.append(row_frame)
        
        # Status indicator
        status_indicator = self.create_status_indicator(row_frame)
        self.status_indicators.append({"canvas": status_indicator, "status": "unknown", "blink_state": False})
        
        # Name entry
        name_entry = ttk.Entry(row_frame, width=20)
        name_entry.pack(side=tk.LEFT, padx=2)
        name_entry.insert(0, name)
        self.name_entries.append(name_entry)
        
        # IP entry
        ip_entry = ttk.Entry(row_frame, width=15)
        ip_entry.pack(side=tk.LEFT, padx=2)
        ip_entry.insert(0, ip)
        self.ip_entries.append(ip_entry)
        
        # Ping label
        ping_label = ttk.Label(row_frame, text="0 ms", width=8, anchor="center", justify="center")
        ping_label.pack(side=tk.LEFT, padx=0)
        self.ping_labels.append(ping_label)
        
        # Graph
        graph_frame = ttk.Frame(row_frame)
        graph_frame.pack(side=tk.LEFT, padx=0, fill=tk.X, expand=True)  # –£–±—Ä–∞–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
        
        max_points = int(self.graph_time_window / self.graph_update_frequency)
        ping_graph = PingGraph(graph_frame, width=self.graph_width, height=self.graph_height)
        ping_graph.widget.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.ping_graphs.append(ping_graph)
        
        # Browser button (—Å–ª–æ–≤–æ "–≤–µ–±" –≤–º–µ—Å—Ç–æ —Å–º–∞–π–ª–∏–∫–∞)
        browser_button = ttk.Button(row_frame, text="üåê –í–µ–±",
                                  command=lambda idx=len(self.name_entries)-1: self.open_browser(idx))
        browser_button.pack(side=tk.LEFT, padx=1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        self.browser_buttons.append(browser_button)
        
        # Delete button with "X"
        delete_button = ttk.Button(row_frame, text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                                 command=lambda idx=len(self.name_entries)-1: self.delete_ip_row(idx))
        delete_button.pack(side=tk.RIGHT, padx=1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        self.delete_buttons.append(delete_button)
        
        return row_frame
        
    def open_browser(self, index):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å IP-–∞–¥—Ä–µ—Å–æ–º"""
        ip = self.ip_entries[index].get().strip()
        if not ip:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å")
            return
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ URL (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        url = ip
        if not url.startswith(('http://', 'https://')):
            url = f'http://{url}'
        
        try:
            webbrowser.open(url)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
        
    def add_ip_row(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ scrollable –æ–±–ª–∞—Å—Ç–∏
        self.create_ip_row(f"–ù–æ–≤—ã–π IP {len(self.name_entries) + 1}", "")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.scrollable_frame.update_idletasks()
        canvas = self.scrollable_frame.winfo_parent()
        canvas.configure(scrollregion=canvas.bbox("all"))
        
    def delete_ip_row(self, index):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å IP-–∞–¥—Ä–µ—Å–æ–º"""
        if len(self.name_entries) <= 1:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π IP-–∞–¥—Ä–µ—Å")
            return
            
        # –£–¥–∞–ª—è–µ–º —Ñ—Ä–µ–π–º —Å—Ç—Ä–æ–∫–∏
        self.row_frames[index].destroy()
        
        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        self.row_frames.pop(index)
        self.name_entries.pop(index)
        self.ip_entries.pop(index)
        self.ping_labels.pop(index)
        self.browser_buttons.pop(index)
        self.delete_buttons.pop(index)
        self.status_indicators.pop(index)
        self.ping_graphs.pop(index)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫
        for i, (browser_button, delete_button) in enumerate(zip(self.browser_buttons, self.delete_buttons)):
            browser_button.configure(command=lambda idx=i: self.open_browser(idx))
            delete_button.configure(command=lambda idx=i: self.delete_ip_row(idx))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.scrollable_frame.update_idletasks()
        canvas = self.scrollable_frame.winfo_parent()
        canvas.configure(scrollregion=canvas.bbox("all"))
        
    def get_ping_command(self, ip):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ping –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
        if platform.system().lower() == "windows":
            return ["ping", "-n", "1", "-w", "1000", ip]
        else:
            return ["ping", "-c", "1", "-W", "1", ip]
        
    def extract_ping_time(self, output):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞ –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã"""
        output_lower = output.lower()
        
        if platform.system().lower() == "windows":
            patterns = [
                r'–≤—Ä–µ–º—è[=<>](\d+)–º?—Å',
                r'time[=<>](\d+)\s*ms',
                r'–≤—Ä–µ–º—è[=<>](\d+)\s*–º—Å'
            ]
        else:
            patterns = [
                r'time[=<>](\d+\.?\d*)\s*ms',
                r'time[=<>](\d+)\s*ms'
            ]
        
        for pattern in patterns:
            match = re.search(pattern, output_lower)
            if match:
                try:
                    return float(match.group(1))
                except ValueError:
                    continue
        return None
        
    def ping_single_ip(self, ip):
        """–ü–∏–Ω–≥—É–µ—Ç –æ–¥–∏–Ω IP –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            result = subprocess.run(
                self.get_ping_command(ip),
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=5
            )
            success = result.returncode == 0
            ping_time = self.extract_ping_time(result.stdout) if success else None
            return success, ping_time
        except:
            return False, None
    
    def update_status_display(self, index):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        indicator = self.status_indicators[index]
        if self.is_monitoring:
            # –í —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –º–∏–≥–∞–Ω–∏–µ
            if indicator["status"] == "online":
                # –ó–µ–ª–µ–Ω—ã–π/—Å–µ—Ä—ã–π –¥–ª—è –æ–Ω–ª–∞–π–Ω
                color = "green" if indicator["blink_state"] else "gray"
            else:
                # –ö—Ä–∞—Å–Ω—ã–π/—Å–µ—Ä—ã–π –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω
                color = "red" if indicator["blink_state"] else "gray"
            
            indicator["canvas"].delete("all")
            indicator["canvas"].create_oval(2, 2, 18, 18, fill=color, outline="")
            indicator["blink_state"] = not indicator["blink_state"]
        else:
            # –í–Ω–µ —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç
            if indicator["status"] == "online":
                self.update_status_indicator(indicator["canvas"], "online")
            elif indicator["status"] == "offline":
                self.update_status_indicator(indicator["canvas"], "offline")
            else:
                self.update_status_indicator(indicator["canvas"], "unknown")
    
    def toggle_editing(self, enabled):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        state = tk.NORMAL if enabled else tk.DISABLED
        
        for ip_entry in self.ip_entries:
            ip_entry.config(state=state)
        
        # –ü–æ–ª—è –∏–º–µ–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for name_entry in self.name_entries:
            name_entry.config(state=tk.NORMAL)
    
    def monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        blink_counter = 0
        last_graph_update = time.time()
        
        while self.is_monitoring:
            current_time = time.time()
            
            # –ö–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (2 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
            if blink_counter % 2 == 0:  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                for i, (name_entry, ip_entry) in enumerate(zip(self.name_entries, self.ip_entries)):
                    ip = ip_entry.get().strip()
                    if ip and i < len(self.status_indicators):
                        success, ping_time = self.ping_single_ip(ip)
                        self.status_indicators[i]["status"] = "online" if success else "offline"
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
                        if success and ping_time is not None:
                            ping_text = f"{ping_time:.1f} ms"
                        else:
                            ping_text = "Timeout"
                        
                        self.root.after(0, lambda idx=i, text=ping_text: self.ping_labels[idx].config(text=text))
                        self.root.after(0, self.update_status_display, i)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
            if current_time - last_graph_update >= self.graph_update_frequency:
                for i, (name_entry, ip_entry) in enumerate(zip(self.name_entries, self.ip_entries)):
                    ip = ip_entry.get().strip()
                    if ip and i < len(self.ping_graphs):
                        success, ping_time = self.ping_single_ip(ip)
                        if success and ping_time is not None:
                            self.root.after(0, lambda idx=i, pt=ping_time, ts=current_time: 
                                          self.ping_graphs[idx].add_point(pt, ts))
                
                last_graph_update = current_time
            
            blink_counter += 1
            time.sleep(0.5)  # 2 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.is_monitoring:
            return
        
        self.is_monitoring = True
        self.start_monitor_button.config(state=tk.DISABLED)
        self.stop_monitor_button.config(state=tk.NORMAL)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤
        self.toggle_editing(False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.status_thread = threading.Thread(target=self.monitoring_loop, daemon=True)
        self.status_thread.start()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞"""
        self.is_monitoring = False
        self.start_monitor_button.config(state=tk.NORMAL)
        self.stop_monitor_button.config(state=tk.DISABLED)
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤
        self.toggle_editing(True)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
        for i, indicator in enumerate(self.status_indicators):
            indicator["status"] = "unknown"
            indicator["blink_state"] = False
            self.root.after(0, self.update_status_display, i)
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–Ω–≥–∞
        for ping_label in self.ping_labels:
            ping_label.config(text="0 ms")

def main():
    root = tk.Tk()
    app = PingMonitor(root)
    root.mainloop()

if __name__ == "__main__":
    main()