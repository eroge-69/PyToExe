# card_for_dad.py
# –ó–∞–ø—É—Å–∫: python card_for_dad.py
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python 3 (tkinter –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É)

import tkinter as tk
import random
import math
from datetime import datetime

WIDTH, HEIGHT = 700, 450
CONFETTI_COUNT = 40
UPDATE_MS = 30

WISHES = [
    "–ó–¥–æ—Ä–æ–≤—å—è –∫—Ä–µ–ø–∫–æ–≥–æ, –∫–∞–∫ –¥—É–±!",
    "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å.",
    "–ü—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ.",
    "–û—Å—Ç–∞–≤–∞–π—Å—è —Ç–∞–∫–∏–º –∂–µ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º –∏ –º—É–¥—Ä—ã–º.",
    "–ü–æ–±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –∂–∏–∑–Ω–∏!"
]

class Confetti:
    def __init__(self, canvas):
        self.canvas = canvas
        self.x = random.randrange(0, WIDTH)
        self.y = random.randrange(-HEIGHT, 0)
        self.size = random.randrange(6, 14)
        self.vy = random.uniform(1, 4)
        self.vx = random.uniform(-1.5, 1.5)
        self.color = random.choice([
            "#FF4B4B", "#FFB84B", "#FFF44B", "#4BFFA5", "#4BD6FF", "#B44BFF"
        ])
        self.shape = canvas.create_oval(self.x, self.y,
                                        self.x + self.size, self.y + self.size,
                                        fill=self.color, outline="")

    def update(self):
        self.x += self.vx
        self.y += self.vy
        if self.y - self.size > HEIGHT:
            # –∑–∞–Ω–æ–≤–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É
            self.x = random.randrange(0, WIDTH)
            self.y = random.randrange(-100, -10)
            self.vy = random.uniform(1, 4)
            self.vx = random.uniform(-1.5, 1.5)
            self.size = random.randrange(6, 14)
            self.color = random.choice([
                "#FF4B4B", "#FFB84B", "#FFF44B", "#4BFFA5", "#4BD6FF", "#B44BFF"
            ])
            self.canvas.coords(self.shape, self.x, self.y,
                               self.x + self.size, self.y + self.size)
            self.canvas.itemconfig(self.shape, fill=self.color)
        else:
            self.canvas.move(self.shape, self.vx, self.vy)

class HeartAnimation:
    def __init__(self, canvas, cx, cy):
        self.canvas = canvas
        self.cx = cx
        self.cy = cy
        self.oval_ids = []
        self.t = 0
        self.running = False

    def start(self):
        if not self.running:
            self.t = 0
            self.running = True
            self.step()

    def step(self):
        if not self.running:
            return
        # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        for oid in self.oval_ids:
            try:
                self.canvas.delete(oid)
            except:
                pass
        self.oval_ids = []
        # —Ä–∏—Å—É–µ–º —Å–µ—Ä–¥—Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏, –º–∞—Å—à—Ç–∞–± –∑–∞–≤–∏—Å–∏—Ç –æ—Ç t
        scale = 0.6 + 0.02 * self.t  # —Ä–∞—Å—Ç—ë—Ç
        points = []
        for angle in [i * math.pi / 180 for i in range(0, 360, 6)]:
            x = 16 * math.sin(angle) ** 3
            y = 13 * math.cos(angle) - 5 * math.cos(2 * angle) - 2 * math.cos(3 * angle) - math.cos(4 * angle)
            px = self.cx + x * 7 * scale
            py = self.cy - y * 7 * scale
            points.append((px, py))
        # —Å–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–≤–∞–ª–æ–≤ –ø–æ —Ç–æ—á–∫–∞–º, —á—Ç–æ–±—ã –±—ã–ª–æ –º—è–≥–∫–æ
        for (px, py) in points[::2]:
            r = random.uniform(4, 9) * scale
            oid = self.canvas.create_oval(px - r, py - r, px + r, py + r, fill="#FF4B8B", outline="")
            self.oval_ids.append(oid)

        self.t += 1
        if self.t < 30:
            self.canvas.after(40, self.step)
        else:
            # –ø–ª–∞–≤–Ω–æ –∏—Å—á–µ–∑–∞–µ–º
            self.fade_out(15)

    def fade_out(self, steps_left):
        if steps_left <= 0:
            for oid in self.oval_ids:
                try:
                    self.canvas.delete(oid)
                except:
                    pass
            self.oval_ids = []
            self.running = False
            return
        # —É–º–µ–Ω—å—à–∞–µ–º –∞–ª—å—Ñ–æ-–ø–æ–¥–æ–±–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        for oid in list(self.oval_ids):
                try:
                    coords = self.canvas.coords(oid)
                    if coords:
                        cx = (coords[0] + coords[2]) / 2
                        cy = (coords[1] + coords[3]) / 2
                        r = (coords[2] - coords[0]) * 0.9
                        self.canvas.coords(oid, cx - r/2, cy - r/2, cx + r/2, cy + r/2)
                except:
                    pass
        self.canvas.after(80, lambda: self.fade_out(steps_left - 1))

def main():
    root = tk.Tk()
    root.title("–û—Ç–∫—Ä—ã—Ç–∫–∞ –ø–∞–ø–µ üéâ")
    root.resizable(False, False)

    canvas = tk.Canvas(root, width=WIDTH, height=HEIGHT, bg="#FDF7F0")
    canvas.pack()

    # –ë–æ–ª—å—à–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
    title = tk.Label(root, text="–° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø, –ü–ê–ü–ê!", font=("Helvetica", 20, "bold"))
    title.place(x=WIDTH//2, y=20, anchor="n")

    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å "–ü–∞–ø–∞" –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–º—è –ø—Ä—è–º–æ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ)
    name_label = tk.Label(root, text="–î–ª—è —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –ø–∞–ø—ã –Ω–∞ —Å–≤–µ—Ç–µ", font=("Helvetica", 12))
    name_label.place(x=WIDTH//2, y=55, anchor="n")

    # –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç-–ø–æ–∂–µ–ª–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    wish_text = ("–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Å—á–∞—Å—Ç—å—è, —Å–µ–º–µ–π–Ω–æ–≥–æ —É—é—Ç–∞ "
                 "–∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–¥–æ—Å—Ç–µ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É –∏ –º—É–¥—Ä–æ—Å—Ç—å.")
    msg = tk.Message(root, text=wish_text, width=560, font=("Helvetica", 11))
    msg.place(x=WIDTH//2, y=90, anchor="n")

    # –∫–Ω–æ–ø–∫–∏
    frame = tk.Frame(root)
    frame.place(x=WIDTH//2, y=HEIGHT - 70, anchor="s")

    heart_anim = HeartAnimation(canvas, cx=WIDTH//2, cy=HEIGHT//2 + 20)

    def on_more_wish():
        w = random.choice(WISHES)
        now = datetime.now().strftime("%d.%m.%Y")
        tk.messagebox.showinfo("–ï—â—ë –æ–¥–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ", f"{w}\n\n–° –ª—é–±–æ–≤—å—é,—Ç–≤–æ–π —Å—ã–Ω.\n\n{now}")

    import tkinter.messagebox

    more_btn = tk.Button(frame, text="–ï—â—ë –ø–æ–∂–µ–ª–∞–Ω–∏–µ", command=on_more_wish, width=18)
    more_btn.grid(row=0, column=0, padx=8, pady=6)

    def on_open_gift():
        heart_anim.start()

    gift_btn = tk.Button(frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫", command=on_open_gift, width=18)
    gift_btn.grid(row=0, column=1, padx=8, pady=6)

    # –ø–æ–¥–ø–∏—Å—å (–º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    signature = tk.Label(root, text="–° –ª—é–±–æ–≤—å—é, –í–∞–¥–∏–º ‚ô•", font=("Helvetica", 12, "italic"))
    signature.place(x=WIDTH - 20, y=HEIGHT - 20, anchor="se")

    # –ö–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti = [Confetti(canvas) for _ in range(CONFETTI_COUNT)]

    def update_all():
        for c in confetti:
            c.update()
        # –ª—ë–≥–∫–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –∑–∞–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        root.after(UPDATE_MS, update_all)

    update_all()

    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    def on_key(e):
        if e.keysym == "Escape":
            root.destroy()
    root.bind("<Key>", on_key)

    root.mainloop()

if __name__ == "__main__":
    main()
