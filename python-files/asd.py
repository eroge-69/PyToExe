import cv2
import numpy as np
import mss
from ultralytics import YOLO
import pyttsx3

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ ---
engine = pyttsx3.init()
voices = engine.getProperty('voices')
try:
    engine.setProperty('voice', voices[1].id)  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
except IndexError:
    engine.setProperty('voice', voices[0].id)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º—É–∂—Å–∫–æ–π
engine.setProperty('rate', 150)

def speak(text):
    engine.say(text)
    engine.runAndWait()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO ---
model = YOLO("yolov8n.pt")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
class_names = model.names

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ ---
with mss.mss() as sct:
    monitor = sct.monitors[1]

    print("üü¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã–¥–µ–ª–∏ –æ–±–ª–∞—Å—Ç—å —Å –∏–≥—Ä–æ–π.")

    while True:
        frame = np.array(sct.grab(monitor))
        results = model(frame)

        detected_cups = []

        for result in results:
            boxes = result.boxes
            for box in boxes:
                cls = int(box.cls[0])
                if class_names[cls] in ['cup', 'bottle']:  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    w = x2 - x1
                    h = y2 - y1

                    center_x = x1 + w // 2
                    center_y = y1 + h // 2

                    detected_cups.append((center_x, center_y))

                    # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)

        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–±–ª–∏–∂–∞–π—à–∏–π –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞)
        if detected_cups:
            screen_center = (frame.shape[1] // 2, frame.shape[0] // 2)
            closest = min(detected_cups, key=lambda p: (p[0]-screen_center[0])**2 + (p[1]-screen_center[1])**2)
            crystal_x, crystal_y = closest

            # –°–æ–æ–±—â–∞–µ–º –≥–æ–ª–æ—Å–æ–º
            speak(f"–ö—Ä–∏—Å—Ç–∞–ª–ª –∑–¥–µ—Å—å: {crystal_x}, {crystal_y}")

            # –†–∏—Å—É–µ–º –∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞
            cv2.circle(frame, (crystal_x, crystal_y), 10, (0, 255, 0), -1)

        cv2.imshow('UPX Crystal AI Tracker', frame)

        if cv2.waitKey(1) == 27:  # ESC
            break

cv2.destroyAllWindows()