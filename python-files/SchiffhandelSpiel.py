import random

# --- Konstanten ---

WAREN = {
    0: "Holz", 1: "Wein", 2: "Gew√ºrze", 3: "Stoffe", 4: "Eisen",
    5: "Salz", 6: "Fische", 7: "Getreide", 8: "Gold", 9: "Keramik"
}

ST√ÑDTE = {
    0: "M√ºnchen", 1: "Hamburg", 2: "Berlin", 3: "K√∂ln", 4: "Frankfurt",
    5: "Dresden", 6: "Leipzig", 7: "Stuttgart", 8: "Bremen", 9: "N√ºrnberg"
}

STADT_BONI = {
    2: {3: 0.10}  # Berlin gibt 10% mehr f√ºr Stoffe (ware 3)
}

MELDUNGEN = [
    "Starker Sturm verz√∂gert die Reise.",
    "G√ºnstige Handelsbedingungen in der Stadt.",
    "Piratenangriff! Einige Waren gehen verloren.",
    "Markt ist √ºberf√ºllt, Preise sinken.",
    "Gute Ernte, Preise f√ºr Getreide fallen.",
    "Seuchenwarnung! Handel eingeschr√§nkt.",
    "Neue Handelsroute er√∂ffnet.",
    "Preise f√ºr Gew√ºrze steigen.",
    "Zoll erh√∂ht, Handel wird teurer.",
    "Lagerfeuer am Hafen bringt Gl√ºck.",
]

while len(MELDUNGEN) < 50:
    MELDUNGEN.append(f"Zuf√§lliges Ereignis Nummer {len(MELDUNGEN) + 1}")

AUFTR√ÑGE = [
    {"ware": 0, "menge": 50, "stadt": 1, "belohnung": 500},
    {"ware": 4, "menge": 30, "stadt": 3, "belohnung": 700},
    {"ware": 2, "menge": 20, "stadt": 5, "belohnung": 600},
    {"ware": 9, "menge": 10, "stadt": 0, "belohnung": 1000},
    {"ware": 1, "menge": 40, "stadt": 7, "belohnung": 450},
]

while len(AUFTR√ÑGE) < 50:
    AUFTR√ÑGE.append({
        "ware": random.randint(0, 9),
        "menge": random.randint(10, 60),
        "stadt": random.randint(0, 9),
        "belohnung": random.randint(100, 1200)
    })

SCHWIERIGKEITSGRADE = {1: "Einfach", 2: "Mittel", 3: "Schwer"}

def get_startkapital(schwierigkeit):
    return {1: 5000, 2: 3000, 3: 1500}.get(schwierigkeit, 3000)

def get_preisschwankung(schwierigkeit):
    return {1: 0.1, 2: 0.25, 3: 0.5}.get(schwierigkeit, 0.25)

basis_preise = {
    stadt: {ware: random.randint(10, 100) for ware in WAREN}
    for stadt in ST√ÑDTE
}

class SchiffhandelSpiel:
    def __init__(self, schwierigkeit, max_runden, name):
        self.name = name
        self.schwierigkeit = schwierigkeit
        self.max_runden = max_runden
        self.runde = 0
        self.geld = get_startkapital(schwierigkeit)
        self.max_lager = 100
        self.lager = {ware: 0 for ware in WAREN}
        self.position = 0
        self.auftr√§ge = random.sample(AUFTR√ÑGE, 5)
        self.meldungen = MELDUNGEN
        self.preisverlauf = {
            stadt: {ware: [] for ware in WAREN}
            for stadt in ST√ÑDTE
        }
        self.schiff_upgrades = {
            "lager": 0,
            "schnelligkeit": 0,
            "piratenschutz": 0,
            "verkaufsbonus": 0
        }
        self.npc_h√§ndler = []   # Initialisiere leere NPC Liste
        self.npc_init()         # Erstelle NPC H√§ndler direkt beim Start

        print(f"Spiel gestartet von {self.name} ‚Äì {SCHWIERIGKEITSGRADE.get(schwierigkeit, 'Mittel')} ‚Äì Startkapital: {self.geld} Gold.")
        print(f"Startort: {ST√ÑDTE[self.position]}")

    def get_aktueller_preis(self, stadt, ware):
        basis = basis_preise[stadt][ware]
        schwankung = get_preisschwankung(self.schwierigkeit)
        faktor = 1 + random.uniform(-schwankung, schwankung)

        # Einfluss von NPC-H√§ndlern auf Preise:
        npc_einfluss = self.npc_preise_einfluss(stadt, ware)
        faktor *= (1 + npc_einfluss)

        preis = max(int(basis * faktor), 1)
        verlauf = self.preisverlauf[stadt][ware]
        verlauf.append(preis)
        if len(verlauf) > 5:
            verlauf.pop(0)
        return preis

    def npc_preise_einfluss(self, stadt, ware):
        einfluss = 0
        for npc in self.npc_h√§ndler:
            if npc["stadt"] == stadt and npc["ware"] == ware:
                einfluss += npc["preis_modifikator"]
        return einfluss

    def aktueller_lagerplatz(self):
        return sum(self.lager.values())

    def zeige_standort_und_geld(self):
        print(f"\nüìç Aktueller Ort: {ST√ÑDTE[self.position]} | üí∞ Geld: {self.geld} Gold | üö¢ Lagerplatz: {self.aktueller_lagerplatz()}/{self.max_lager}")

    def zeige_status(self):
        print(f"\nüë§ Spieler: {self.name}")
        print(f"üì¶ Runde {self.runde}/{self.max_runden if self.max_runden else '‚àû'}")
        print(f"üèôÔ∏è  Stadt: {ST√ÑDTE[self.position]}")
        print(f"üí∞ Geld: {self.geld} Gold")
        print(f"üì¶ Lagerplatz: {self.aktueller_lagerplatz()}/{self.max_lager}")
        print(f"üö¢ Schiff-Upgrades: Lager +{self.schiff_upgrades['lager']*50}, Geschwindigkeit +{self.schiff_upgrades['schnelligkeit']}, Piratenschutz +{self.schiff_upgrades['piratenschutz']}, Verkaufsbonus +{int(self.schiff_upgrades['verkaufsbonus']*100)}%")
        print("üì¶ Lagerbestand:")
        for ware, menge in self.lager.items():
            if menge > 0:
                print(f"  - {WAREN[ware]}: {menge}")
        print("\nüìú Auftr√§ge:")
        for i, auftrag in enumerate(self.auftr√§ge):
            print(f" {i}: {auftrag['menge']} {WAREN[auftrag['ware']]} nach {ST√ÑDTE[auftrag['stadt']]} (Belohnung: {auftrag['belohnung']} Gold)")
        upgrade_slots = max(0, 5 - sum(self.schiff_upgrades.values()))
        print(f"\nüîß Verf√ºgbare Schiff-Upgrades: {upgrade_slots} (jeweils +50 Lagerplatz, +1 Geschwindigkeit, +1 Piratenschutz, +5% Verkaufsbonus)")
        print(f"   Kosten: Lager 1000 Gold, Geschwindigkeit 1500 Gold, Piratenschutz 2000 Gold, Verkaufsbonus 1200 Gold")

    def zeige_karte(self):
        print("\nüó∫Ô∏è Minikarte:")
        for stadt_id, name in ST√ÑDTE.items():
            marker = "üõ≥Ô∏è" if stadt_id == self.position else "   "
            print(f"{marker} {stadt_id}: {name}")

    def zeige_handels√ºbersicht(self):
        print("\nüìä Handels√ºbersicht:")
        for ware, name in WAREN.items():
            verlauf = self.preisverlauf[self.position][ware]
            if verlauf:
                verlauf_str = " ‚Üí ".join(str(p) for p in verlauf)
                print(f"{name}: {verlauf_str}")

    def reise(self):
        self.zeige_standort_und_geld()
        self.zeige_karte()
        try:
            ziel = int(input("Wohin m√∂chtest du reisen? (ID): "))
            if ziel in ST√ÑDTE and ziel != self.position:
                reisen_runden = max(1, 2 - self.schiff_upgrades["schnelligkeit"])  # Schnellere Schiffe brauchen weniger Runden
                self.runde += reisen_runden
                self.position = ziel
                print(f"{self.name} ist angekommen in {ST√ÑDTE[self.position]} nach {reisen_runden} Runde(n).")
                self.ereignis_ausl√∂sen()
            else:
                print(f"{self.name}, ung√ºltiges Ziel oder du bist bereits dort.")
        except ValueError:
            print("Bitte g√ºltige Zahl eingeben.")

    def kaufen(self):
        self.zeige_standort_und_geld()
        print("\nüõí Waren zum Kauf:")
        for ware in WAREN:
            preis = self.get_aktueller_preis(self.position, ware)
            print(f" {ware}: {WAREN[ware]} ‚Äì {preis} Gold")
        print(" 99: Schiff-Upgrades kaufen")
        try:
            ware_id = int(input("Welche Ware kaufen? (ID): "))
            if ware_id == 99:
                self.schiff_upgrade_kaufen()
                return
            menge = int(input("Wie viel kaufen?: "))
            preis = self.get_aktueller_preis(self.position, ware_id)
            kosten = preis * menge
            if menge > 0 and self.geld >= kosten:
                if self.aktueller_lagerplatz() + menge > self.max_lager:
                    print("Nicht genug Lagerplatz!")
                else:
                    self.geld -= kosten
                    self.lager[ware_id] += menge
                    print(f"{menge} {WAREN[ware_id]} gekauft f√ºr {kosten} Gold.")
            else:
                print("Nicht genug Geld oder ung√ºltige Menge.")
        except ValueError:
            print("Ung√ºltige Eingabe!")

    def verkaufen(self):
        self.zeige_standort_und_geld()
        print("\nüì¶ Lagerbestand zum Verkauf:")
        for ware, menge in self.lager.items():
            if menge > 0:
                preis = self.get_aktueller_preis(self.position, ware)
                print(f" {ware}: {WAREN[ware]} ‚Äì {menge} St√ºck ‚Äì Aktueller Preis: {preis} Gold")

        try:
            ware_id = int(input("Welche Ware verkaufen? (ID): "))
            menge = int(input("Wie viel verkaufen?: "))
            if menge <= 0 or menge > self.lager.get(ware_id, 0):
                print("Ung√ºltige Menge.")
                return

            preis = self.get_aktueller_preis(self.position, ware_id)
            verkaufserl√∂s = preis * menge
            verkaufserl√∂s = int(verkaufserl√∂s * (1 + self.schiff_upgrades["verkaufsbonus"]))

            self.lager[ware_id] -= menge
            self.geld += verkaufserl√∂s
            print(f"{menge} {WAREN[ware_id]} verkauft f√ºr {verkaufserl√∂s} Gold.")

            # Auftr√§ge erf√ºllen
            rest = menge
            for auftrag in self.auftr√§ge[:]:
                if auftrag['ware'] == ware_id and auftrag['stadt'] == self.position and rest >= auftrag['menge']:
                    self.geld += auftrag['belohnung']
                    rest -= auftrag['menge']
                    print(f"Auftrag erf√ºllt: {auftrag['menge']} {WAREN[ware_id]} nach {ST√ÑDTE[self.position]}! Belohnung: {auftrag['belohnung']} Gold.")
                    self.auftr√§ge.remove(auftrag)
                if rest <= 0:
                    break
        except ValueError:
            print("Ung√ºltige Eingabe!")

    def schiff_upgrade_kaufen(self):
        max_upgrades = 5
        aktuell = sum(self.schiff_upgrades.values())
        frei = max_upgrades - aktuell
        if frei <= 0:
            print("Keine Upgrade-Slots mehr frei!")
            return
        print(f"\nüö¢ Schiff-Upgrades kaufen (noch {frei} Slots frei):")
        print(" 1: Lager +50 (1000 Gold)")
        print(" 2: Geschwindigkeit +1 (1500 Gold)")
        print(" 3: Piratenschutz +1 (2000 Gold)")
        print(" 4: Verkaufsbonus +5% (1200 Gold)")

        try:
            wahl = int(input("Upgrade w√§hlen: "))
            kosten = {1: 1000, 2: 1500, 3: 2000, 4: 1200}.get(wahl, None)
            if kosten is None:
                print("Ung√ºltige Wahl.")
                return
            if self.geld < kosten:
                print("Nicht genug Gold.")
                return
            if wahl == 1:
                self.schiff_upgrades["lager"] += 1
                self.max_lager += 50
            elif wahl == 2:
                self.schiff_upgrades["schnelligkeit"] += 1
            elif wahl == 3:
                self.schiff_upgrades["piratenschutz"] += 1
            elif wahl == 4:
                self.schiff_upgrades["verkaufsbonus"] += 0.05
            self.geld -= kosten
            print("Upgrade gekauft!")
        except ValueError:
            print("Ung√ºltige Eingabe!")

    def ereignis_ausl√∂sen(self):
        ereignis = random.choice(self.meldungen)
        print(f"\n‚ö†Ô∏è Ereignis: {ereignis}")

        if "Sturm" in ereignis:
            verlust = max(0, 5 - self.schiff_upgrades["piratenschutz"] * 3)
            for ware in list(self.lager):
                if self.lager[ware] > 0:
                    verloren = min(self.lager[ware], verlust)
                    self.lager[ware] -= verloren
                    if verloren > 0:
                        print(f"Durch Sturm verloren: {verloren} {WAREN[ware]}")
        elif "Piratenangriff" in ereignis:
            verlust = max(0, 3 - self.schiff_upgrades["piratenschutz"])
            for ware in list(self.lager):
                if self.lager[ware] > 0:
                    verloren = min(self.lager[ware], verlust)
                    self.lager[ware] -= verloren
                    if verloren > 0:
                        print(f"Piraten haben {verloren} {WAREN[ware]} gestohlen!")
        elif "g√ºnstige" in ereignis.lower():
            bonus = 0.2
            print(f"Die Preise in {ST√ÑDTE[self.position]} sind heute um {int(bonus*100)}% g√ºnstiger.")
            for ware in WAREN:
                basis_preise[self.position][ware] = int(basis_preise[self.position][ware] * (1 - bonus))
        # Weitere Ereignisse k√∂nnen erg√§nzt werden

    def npc_init(self):
        self.npc_h√§ndler.clear()
        for _ in range(random.randint(3, 8)):
            stadt = random.choice(list(ST√ÑDTE.keys()))
            ware = random.choice(list(WAREN.keys()))
            preis_modifikator = round(random.uniform(-0.3, 0.3), 2)
            self.npc_h√§ndler.append({"stadt": stadt, "ware": ware, "preis_modifikator": preis_modifikator})

    def spiel_starten(self):
        while self.runde < self.max_runden or self.max_runden == 0:
            self.runde += 1
            print(f"\n=== Runde {self.runde} ===")
            self.zeige_status()

            print("\nAktionen: 1) Reisen 2) Kaufen 3) Verkaufen 4) Auftr√§ge ansehen 5) Ende")
            try:
                wahl = int(input("Was m√∂chtest du tun? "))
            except ValueError:
                print("Ung√ºltige Eingabe!")
                continue

            if wahl == 1:
                self.reise()
            elif wahl == 2:
                self.kaufen()
            elif wahl == 3:
                self.verkaufen()
            elif wahl == 4:
                print("\nüìú Deine Auftr√§ge:")
                for auftrag in self.auftr√§ge:
                    print(f"- {auftrag['menge']} {WAREN[auftrag['ware']]} nach {ST√ÑDTE[auftrag['stadt']]} (Belohnung: {auftrag['belohnung']} Gold)")
            elif wahl == 5:
                print("Spiel wird beendet.")
                break
            else:
                print("Ung√ºltige Wahl.")

        print(f"\nSpiel beendet! Du hast {self.geld} Gold.")

# Beispiel-Spielstart:
if __name__ == "__main__":
    print("Willkommen zum Schiffhandel!")
    name = input("Gib deinen Namen ein: ")
    schwierigkeit = 0
    while schwierigkeit not in [1, 2, 3]:
        try:
            schwierigkeit = int(input("W√§hle Schwierigkeit (1=Einfach, 2=Mittel, 3=Schwer): "))
        except ValueError:
            pass
    max_runden = 0
    while True:
        try:
            max_runden = int(input("Maximale Runden (0 f√ºr unendlich): "))
            if max_runden >= 0:
                break
        except ValueError:
            pass

    spiel = SchiffhandelSpiel(schwierigkeit, max_runden, name)
    spiel.spiel_starten()
