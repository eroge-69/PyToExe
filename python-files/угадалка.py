import tkinter as tk
from tkinter import messagebox, ttk
import random

class NumberGuessingGameGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.min_range = 1
        self.max_range = 100
        self.max_attempts = 10
        self.secret_number = None
        self.attempts = 0
        self.game_mode = None
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_menu()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        style.configure('Subtitle.TLabel', font=('Arial', 12))
        style.configure('Big.TButton', font=('Arial', 12, 'bold'))
    
    def clear_frame(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def create_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.clear_frame()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, text="üéÆ –£–ì–ê–î–ê–ô –ß–ò–°–õ–û", style='Title.TLabel')
        title_label.pack(pady=20)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", style='Subtitle.TLabel')
        subtitle_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        frame_buttons = ttk.Frame(self.root)
        frame_buttons.pack(pady=30)
        
        btn_player = ttk.Button(frame_buttons, text="üéØ –Ø —É–≥–∞–¥—ã–≤–∞—é", 
                               command=self.start_player_mode, style='Big.TButton')
        btn_player.pack(pady=10, fill='x')
        
        btn_computer = ttk.Button(frame_buttons, text="ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–µ—Ç", 
                                 command=self.start_computer_mode, style='Big.TButton')
        btn_computer.pack(pady=10, fill='x')
        
        btn_exit = ttk.Button(frame_buttons, text="üö™ –í—ã—Ö–æ–¥", 
                             command=self.root.quit, style='Big.TButton')
        btn_exit.pack(pady=10, fill='x')
    
    def start_player_mode(self):
        """–†–µ–∂–∏–º: –∏–≥—Ä–æ–∫ —É–≥–∞–¥—ã–≤–∞–µ—Ç"""
        self.game_mode = "player"
        self.secret_number = random.randint(self.min_range, self.max_range)
        self.attempts = 0
        
        self.create_player_game_screen()
    
    def create_player_game_screen(self):
        """–≠–∫—Ä–∞–Ω –∏–≥—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä–æ–∫–∞"""
        self.clear_frame()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, text="üéØ –í–´ –£–ì–ê–î–´–í–ê–ï–¢–ï", style='Title.TLabel')
        title_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ
        info_label = ttk.Label(self.root, 
                              text=f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {self.min_range} –¥–æ {self.max_range}\n"
                                   f"–£ –≤–∞—Å {self.max_attempts} –ø–æ–ø—ã—Ç–æ–∫",
                              style='Subtitle.TLabel')
        info_label.pack(pady=5)
        
        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        self.attempts_label = ttk.Label(self.root, 
                                       text=f"–ü–æ–ø—ã—Ç–∫–∞: {self.attempts}/{self.max_attempts}",
                                       font=('Arial', 10, 'bold'))
        self.attempts_label.pack(pady=5)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = ttk.Frame(self.root)
        input_frame.pack(pady=20)
        
        ttk.Label(input_frame, text="–í–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ:").pack()
        
        self.guess_entry = ttk.Entry(input_frame, font=('Arial', 14), width=10, justify='center')
        self.guess_entry.pack(pady=5)
        self.guess_entry.bind('<Return>', lambda e: self.check_guess())
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        btn_check = ttk.Button(input_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", 
                              command=self.check_guess, style='Big.TButton')
        btn_check.pack(pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        self.hint_label = ttk.Label(self.root, text="", font=('Arial', 12, 'bold'), foreground='blue')
        self.hint_label.pack(pady=10)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
        self.history_frame = ttk.Frame(self.root)
        self.history_frame.pack(pady=10, fill='both', expand=True)
        
        ttk.Label(self.history_frame, text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:", font=('Arial', 10)).pack()
        
        self.history_text = tk.Text(self.history_frame, height=6, width=40, font=('Arial', 9))
        self.history_text.pack(pady=5)
        self.history_text.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        btn_back = ttk.Button(self.root, text="‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                             command=self.create_main_menu)
        btn_back.pack(pady=10)
    
    def check_guess(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        try:
            guess = int(self.guess_entry.get())
            self.attempts += 1
            
            if guess < self.min_range or guess > self.max_range:
                messagebox.showwarning("–û—à–∏–±–∫–∞", 
                                     f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {self.min_range} –¥–æ {self.max_range}!")
                self.attempts -= 1
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            self.attempts_label.config(text=f"–ü–æ–ø—ã—Ç–∫–∞: {self.attempts}/{self.max_attempts}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if guess == self.secret_number:
                self.show_victory()
            elif guess < self.secret_number:
                self.hint_label.config(text="‚¨ÜÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï", foreground='red')
            else:
                self.hint_label.config(text="‚¨áÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï", foreground='red')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(guess)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.guess_entry.delete(0, tk.END)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
            if self.attempts >= self.max_attempts and guess != self.secret_number:
                self.show_defeat()
                
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    
    def add_to_history(self, guess):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.history_text.config(state=tk.NORMAL)
        
        if guess == self.secret_number:
            status = "üéâ –£–ì–ê–î–ê–õ!"
            color = "green"
        elif guess < self.secret_number:
            status = "‚¨ÜÔ∏è –ú–ê–õ–û"
            color = "blue"
        else:
            status = "‚¨áÔ∏è –ú–ù–û–ì–û"
            color = "red"
        
        history_line = f"–ü–æ–ø—ã—Ç–∫–∞ {self.attempts}: {guess} - {status}\n"
        
        self.history_text.insert(tk.END, history_line)
        self.history_text.tag_add(f"color_{self.attempts}", "end-2l", "end-1l")
        self.history_text.tag_config(f"color_{self.attempts}", foreground=color)
        
        self.history_text.see(tk.END)
        self.history_text.config(state=tk.DISABLED)
    
    def show_victory(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥—É"""
        messagebox.showinfo("–ü–û–ë–ï–î–ê!", 
                          f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {self.secret_number} –∑–∞ {self.attempts} –ø–æ–ø—ã—Ç–æ–∫!")
        self.create_main_menu()
    
    def show_defeat(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏–µ"""
        messagebox.showinfo("–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê", 
                          f"üíî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ: {self.secret_number}")
        self.create_main_menu()
    
    def start_computer_mode(self):
        """–†–µ–∂–∏–º: –∫–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–µ—Ç"""
        self.game_mode = "computer"
        self.computer_low = self.min_range
        self.computer_high = self.max_range
        self.computer_attempts = 0
        
        self.create_computer_game_screen()
    
    def create_computer_game_screen(self):
        """–≠–∫—Ä–∞–Ω –∏–≥—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        self.clear_frame()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, text="ü§ñ –ö–û–ú–ü–¨–Æ–¢–ï–† –£–ì–ê–î–´–í–ê–ï–¢", style='Title.TLabel')
        title_label.pack(pady=10)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_label = ttk.Label(self.root, 
                                     text="–ó–∞–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
                                          "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø—Ä–æ–±—É–µ—Ç –µ–≥–æ —É–≥–∞–¥–∞—Ç—å",
                                     style='Subtitle.TLabel',
                                     justify='center')
        instruction_label.pack(pady=10)
        
        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        self.comp_attempts_label = ttk.Label(self.root, 
                                           text=f"–ü–æ–ø—ã—Ç–æ–∫: {self.computer_attempts}",
                                           font=('Arial', 12, 'bold'))
        self.comp_attempts_label.pack(pady=5)
        
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        self.comp_guess_label = ttk.Label(self.root, 
                                         text="",
                                         font=('Arial', 24, 'bold'),
                                         foreground='purple')
        self.comp_guess_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        buttons_frame = ttk.Frame(self.root)
        buttons_frame.pack(pady=20)
        
        btn_correct = ttk.Button(buttons_frame, text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", 
                               command=self.computer_correct, style='Big.TButton')
        btn_correct.grid(row=0, column=0, padx=10, pady=5)
        
        btn_higher = ttk.Button(buttons_frame, text="‚¨ÜÔ∏è –ú–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï", 
                               command=self.computer_higher, style='Big.TButton')
        btn_higher.grid(row=1, column=0, padx=10, pady=5)
        
        btn_lower = ttk.Button(buttons_frame, text="‚¨áÔ∏è –ú–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï", 
                              command=self.computer_lower, style='Big.TButton')
        btn_lower.grid(row=2, column=0, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        btn_back = ttk.Button(self.root, text="‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                             command=self.create_main_menu)
        btn_back.pack(pady=10)
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        self.make_computer_guess()
    
    def make_computer_guess(self):
        """–ö–æ–º–ø—å—é—Ç–µ—Ä –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        self.computer_attempts += 1
        computer_guess = (self.computer_low + self.computer_high) // 2
        
        self.comp_attempts_label.config(text=f"–ü–æ–ø—ã—Ç–æ–∫: {self.computer_attempts}")
        self.comp_guess_label.config(text=str(computer_guess))
        
        self.current_computer_guess = computer_guess
    
    def computer_correct(self):
        """–ò–≥—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥–∞–ª"""
        messagebox.showinfo("–£–°–ü–ï–•!", 
                          f"ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥–∞–ª –≤–∞—à–µ —á–∏—Å–ª–æ {self.current_computer_guess} –∑–∞ {self.computer_attempts} –ø–æ–ø—ã—Ç–æ–∫!")
        self.create_main_menu()
    
    def computer_higher(self):
        """–ò–≥—Ä–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ"""
        self.computer_low = self.current_computer_guess + 1
        if self.computer_low > self.computer_high:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏!")
            self.create_main_menu()
        else:
            self.make_computer_guess()
    
    def computer_lower(self):
        """–ò–≥—Ä–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ"""
        self.computer_high = self.current_computer_guess - 1
        if self.computer_high < self.computer_low:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏!")
            self.create_main_menu()
        else:
            self.make_computer_guess()

def main():
    root = tk.Tk()
    app = NumberGuessingGameGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
    