import tkinter as tk
from tkinter import messagebox
import random
import threading
import time
import keyboard
import sys
import os

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
try:
    from PIL import ImageGrab, ImageTk, Image
    import pyautogui
except ImportError:
    root_err = tk.Tk()
    root_err.withdraw()
    messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!\n\n–ó–∞–ø—É—Å—Ç–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:\npip install pyautogui pillow keyboard")
    sys.exit(1)

# --- GUI –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ---
def show_warning(title, message):
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    result = messagebox.askyesno(title, message)
    root.destroy()
    return result

# –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
if not show_warning(
    "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï 1/2",
    "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É:\n"
    "- 50 –æ–∫–æ–Ω\n- 150 –¥–≤–∏–∂–µ–Ω–∏–π –∫—É—Ä—Å–æ—Ä–∞\n- –ò–Ω–≤–µ—Ä—Å–∏—è —ç–∫—Ä–∞–Ω–∞\n- –°–º–µ–Ω–∞ –æ–±–æ–µ–≤\n\n"
    "–†–ê–ó–†–ï–®–ò–¢–¨ –ó–ê–ü–£–°–ö?\n(–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –í–ú!)"
):
    sys.exit(0)

# –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
allow_real_changes = show_warning(
    "üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï 2/2 ‚Äî –í–ê–ñ–ù–û!",
    "–†–ê–ó–†–ï–®–ò–¢–¨ –†–ï–ê–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø?\n"
    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º\n‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è —ç–∫—Ä–∞–Ω–∞\n‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤\n\n"
    "‚ùó –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ú–∞—à–∏–Ω–µ —Å –æ—Ç–∫–∞—Ç–æ–º (snapshot) ‚ùó\n\n"
    "–ï—Å–ª–∏ –æ—Ç–∫–∞–∂–µ—à—å ‚Äî –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–Ω—É—Ç—Ä–∏ –æ–∫–æ–Ω."
)

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
running = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ F10
def stop_on_f10():
    global running
    while running:
        if keyboard.is_pressed('F10'):
            print("\nüõë F10 –Ω–∞–∂–∞—Ç ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            running = False
            break
        time.sleep(0.1)

threading.Thread(target=stop_on_f10, daemon=True).start()

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
main_root = tk.Tk()
main_root.title("üß™ VM STRESS TEST ‚Äî –ù–ï –ó–ê–ö–†–´–í–ê–¢–¨")
main_root.geometry("350x180+50+50")
main_root.configure(bg="#111")
tk.Label(
    main_root,
    text="–¢–ï–°–¢ –ó–ê–ü–£–©–ï–ù\n–ù–∞–∂–º–∏—Ç–µ F10 –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
    font=("Consolas", 14),
    fg="#0f0",
    bg="#111"
).pack(expand=True, pady=20)

# –°–æ–∑–¥–∞–Ω–∏–µ 50 –æ–∫–æ–Ω
windows = []
for i in range(50):
    win = tk.Toplevel() if i > 0 else main_root
    win.title(f"–û–∫–Ω–æ {i+1}")
    win.geometry(f"150x80+{random.randint(0, 800)}+{random.randint(0, 600)}")
    label = tk.Label(win, text="‚ö†Ô∏è VM TEST", font=("Arial", 8), bg="#222", fg="white")
    label.pack(expand=True)
    windows.append(win)
    if i == 0:
        main_root = win

# –î–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–≤ (–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
def move_all_cursors():
    screen_width, screen_height = pyautogui.size() if allow_real_changes else (1920, 1080)
    while running:
        for _ in range(150):  # 150 "–¥–≤–∏–∂–µ–Ω–∏–π"
            x = random.randint(0, screen_width - 1)
            y = random.randint(0, screen_height - 1)
            if allow_real_changes:
                try:
                    pyautogui.moveTo(x, y, duration=0.005)
                except:
                    pass
            time.sleep(0.001)
        time.sleep(0.1)

# –ò–Ω–≤–µ—Ä—Å–∏—è —ç–∫—Ä–∞–Ω–∞ –∫–∞–∂–¥—ã–µ 0.05—Å (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
def invert_screen():
    if not allow_real_changes:
        return
    while running:
        try:
            # Windows: –≤–∫–ª—é—á–∏—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤ "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö" ‚Üí Ctrl+Alt+I
            pyautogui.hotkey('ctrl', 'alt', 'i')
        except:
            pass
        time.sleep(0.05)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤ –∫–∞–∂–¥—ã–µ 0.5—Å (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
def set_wallpaper_loop():
    if not allow_real_changes:
        return

    temp_dir = os.path.join(os.getcwd(), "temp_wallpapers")
    os.makedirs(temp_dir, exist_ok=True)

    i = 0
    while running:
        try:
            screenshot = pyautogui.screenshot()
            path = os.path.join(temp_dir, f"wall_{i % 5}.png")
            screenshot.save(path)

            # –¢–æ–ª—å–∫–æ Windows
            if os.name == 'nt':
                import ctypes
                ctypes.windll.user32.SystemParametersInfoW(20, 0, path, 3)
        except Exception as e:
            print(f"[–û–±–æ–∏] –û—à–∏–±–∫–∞: {e}")
        time.sleep(0.5)

# –§–µ–π–∫–æ–≤–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞)
def fake_invert():
    colors = ["#000", "#fff", "#f00", "#0f0", "#00f", "#ff0", "#0ff", "#f0f", "#888", "#222"]
    while running:
        color = random.choice(colors)
        for win in windows:
            try:
                win.config(bg=color)
                for child in win.winfo_children():
                    child.config(bg=color)
            except:
                pass
        time.sleep(0.05)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
if allow_real_changes:
    threading.Thread(target=move_all_cursors, daemon=True).start()
    threading.Thread(target=invert_screen, daemon=True).start()
    threading.Thread(target=set_wallpaper_loop, daemon=True).start()

threading.Thread(target=fake_invert, daemon=True).start()

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ F10
def check_stop():
    if not running:
        for win in windows:
            try:
                win.destroy()
            except:
                pass
        sys.exit(0)
    main_root.after(100, check_stop)

main_root.after(100, check_stop)

# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç)
print("‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ F10.")

# –ó–∞–ø—É—Å–∫ GUI
try:
    main_root.mainloop()
except KeyboardInterrupt:
    pass