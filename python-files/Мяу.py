import subprocess
import os
import serial
import serial.tools.list_ports
import time
import subprocess

HEX_FILE = "file1.hex"
BIN_FILE = "firmware.bin"
BAUDRATE = 115200
FONT_FILE = 'betaflight.mcm'
DUMP_FILE = 'file2.txt'

# MSP_API_VERSION = 1
# MSP_SET_ARMING_DISABLED = 209

TARGET_KEYWORDS = [
    "STM", "Silicon", "CP210", "CH340", "Virtual COM", "USB Serial", "Betaflight"
]


def convert_hex_to_bin(hex_file, bin_file):
    if not os.path.exists(hex_file):
        print(f"[!] –§–∞–π–ª .hex –Ω–µ –Ω–∞–π–¥–µ–Ω: {hex_file}")
        return False

    #print("[*] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .hex ‚Üí .bin ...")
    try:
        subprocess.run([
            "arm-none-eabi-objcopy",
            "-I", "ihex",
            "-O", "binary",
            hex_file, bin_file
        ], check=True)
        #print("[‚úì] –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:", bin_file)
        return True
    except FileNotFoundError:
        print("[!] –ö–æ–º–∞–Ω–¥–∞ 'arm-none-eabi-objcopy' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ ARM Toolchain –∏ –¥–æ–±–∞–≤—å –µ—ë –≤ PATH.")
    except subprocess.CalledProcessError as e:
        print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", e)
    return False

def check_dfu():
    try:
        output = subprocess.check_output(["dfu-util", "-l"], text=True)
        if "Found DFU" in output:
            print("[‚úì] –ü–æ–ª—ë—Ç–Ω–∏–∫ –≤ DFU-—Ä–µ–∂–∏–º–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
            return True
        else:
            print("[!] DFU-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            time.sleep(1)
            return False
    except FileNotFoundError:
        print("[!] dfu-util –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH.")
        return False

def flash_firmware(bin_file):
    if not os.path.exists(bin_file):
        print(f"[!] –§–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ .bin –Ω–µ –Ω–∞–π–¥–µ–Ω: {bin_file}")
        return False

    print("[*] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—à–∏–≤–∫—É...")
    try:
        subprocess.run([
            "dfu-util",
            "-a", "0",
            "-s", "0x08000000:leave",
            "-D", bin_file
        ], check=True)
        print("[‚úì] –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True
    except subprocess.CalledProcessError as e:
        print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—à–∏–≤–∫–µ:", e)
        return False

def find_fc_port(delay=1, max_attempts=1000):
    attempts = 0
    while attempts < max_attempts:
        if attempts > 0:
            print(f"‚ùå COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)

        ports = list(serial.tools.list_ports.comports())
        candidates = []

        for p in ports:
            if p.pid is not None and p.pid != 0:
                desc = p.description.lower()
                if any(k.lower() in desc for k in TARGET_KEYWORDS):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Ä—Ç: {p.device} ({p.description})")
                    return p.device
                candidates.append(p)

        if len(candidates) == 1:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {candidates[0].device} ({candidates[0].description})")
            return candidates[0].device

        if candidates:
            print("‚ö†Ô∏è –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å PID!=0:")
            for i, p in enumerate(candidates):
                print(f"{i+1}. {p.device}: {p.description}")

            try:
                selection = int(input("üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: ")) - 1
                if 0 <= selection < len(candidates):
                    return candidates[selection].device
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
        else:
            attempts += 1

    print("[!] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π COM-–ø–æ—Ä—Ç.")
    return None

def load_bin_file(path):
    with open(path, 'rb') as f:
        return f.read()

def load_txt_dump(path):
    with open(path, 'r', encoding='utf-8') as f:
        return f.read()

def send_osd_font(ser, font_data):
    if len(font_data) != 13824:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 256 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ 54 –±–∞–π—Ç–∞.")
        return False

    def build_msp_packet(cmd, payload):
        packet = bytearray()
        packet.extend(b"$M<")
        packet.append(len(payload))
        packet.append(cmd)
        packet.extend(payload)
        checksum = len(payload) ^ cmd
        for b in payload:
            checksum ^= b
        packet.append(checksum)
        return packet

    print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ MSP_DISPLAYPORT (0x6C)...")
    ser.write(build_msp_packet(0x6C, b''))
    time.sleep(0.1)

    print("üî† –ó–∞–≥—Ä—É–∑–∫–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ 0x57...")
    for i in range(256):
        payload = bytes([i]) + font_data[i*54:(i+1)*54]
        packet = build_msp_packet(0x57, payload)
        ser.write(packet)
        time.sleep(0.03)
        print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {i+1}/256", end='\r')

    print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM (0x46)...")
    ser.write(build_msp_packet(0x46, b''))
    time.sleep(3)

    print("‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.")
    return True

def print_progress(current, total, bar_len=40):
    filled_len = int(bar_len * current // total)
    bar = '‚ñà' * filled_len + '-' * (bar_len - filled_len)
    percent = int(current * 100 / total)
    print(f'\r[{bar}] {percent}% ({current}/{total})', end='', flush=True)

def msp_build(cmd, data=b''):
    size = len(data)
    checksum = size ^ cmd
    for b in data:
        checksum ^= b
    return b'$M<' + bytes([size, cmd]) + data + bytes([checksum])

def msp_send(ser, cmd, data=b''):
    packet = msp_build(cmd, data)
    ser.write(packet)

def msp_recv(ser):
    time.sleep(0.1)
    return ser.read_all()

def send_dump(ser, dump_text):
    try:
        print("‚è´ –ü–µ—Ä–µ—Ö–æ–¥ –≤ CLI —Ä–µ–∂–∏–º...")
        ser.write(b"#\n")
        ser.flush()
        time.sleep(1)
        output = ser.read_all().decode(errors='ignore')
        if output.strip():
            print("–û—Ç–≤–µ—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ CLI:", output.strip())
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –≤ CLI. –ü—Ä–æ–±—É–µ–º 'cli\\n'")
            ser.write(b"cli\n")
            ser.flush()
            time.sleep(0.5)
            output = ser.read_all().decode(errors='ignore')
            if output.strip():
                print("–û—Ç–≤–µ—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ CLI (cli):", output.strip())
            else:
                print("‚ùå CLI —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                return False

        print("‚è´ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–º–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        lines = dump_text.splitlines()
        for line in lines:
            ser.write((line + '\n').encode('utf-8'))
            ser.flush()
            time.sleep(0.02)
            response = ser.read_all().decode(errors='ignore')
            if response.strip():
                print(response.strip())

        print("‚è´ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã save...")
        ser.write(b"save\n")
        ser.flush()

        print("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã save, –ø–æ–ª—ë—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è...")
        time.sleep(5)

        try:
            ser.close()
        except Exception:
            pass

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–º–ø–∞: {e}")
        try:
            ser.close()
        except Exception:
            pass
        return False

def osd_cli_stage():
    port = find_fc_port()
    if not port:
        print("[!] COM-–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–∞–ø OSD/CLI –ø—Ä–æ–ø—É—â–µ–Ω.")
        return None

    if not os.path.isfile(FONT_FILE):
        print(f"[!] –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ '{FONT_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    if not os.path.isfile(DUMP_FILE):
        print(f"[!] –§–∞–π–ª –¥–∞–º–ø–∞ '{DUMP_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    font_data = load_bin_file(FONT_FILE)
    dump_text = load_txt_dump(DUMP_FILE)

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ—Ä—Ç–∞)
        with serial.Serial(port, BAUDRATE, timeout=2) as ser:
            print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {port} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à—Ä–∏—Ñ—Ç–∞.")
            font_result = send_osd_font(ser, font_data)
            if not font_result:
                print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ OSD —à—Ä–∏—Ñ—Ç–∞.")
                return None

        print("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...")
        time.sleep(5)

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–º–ø–∞
        with serial.Serial(port, BAUDRATE, timeout=2) as ser:
            print(f"üì° –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {port} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–º–ø–∞ CLI.")
            dump_result = send_dump(ser, dump_text)
            if dump_result:
                print("[‚úì] –≠—Ç–∞–ø OSD/CLI —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
                return port
            else:
                print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–º–ø–∞ CLI.")
                return None

    except serial.SerialException as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞: {e}")
        return None

def msp_packet(cmd, payload=b''):
    header = b'$M<'
    length = len(payload)
    packet = header + bytes([length]) + bytes([cmd]) + payload
    checksum = 0
    for b in packet[3:]:
        checksum ^= b
    packet += bytes([checksum])
    return packet

def calibration_stage(port):
    if not port:
        print("[!] –ù–µ—Ç –ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏.")
        return False

    try:
        ser = serial.Serial(port, BAUDRATE, timeout=2)
        time.sleep(2)

        pkt = msp_packet(205)
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º MSP_CALIBRATE_ACCELEROMETER")
        ser.write(pkt)
        ser.flush()

        time.sleep(2)
        resp = ser.read_all()
        print("–û—Ç–≤–µ—Ç:", resp)

        pkt_save = msp_packet(244)
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º MSP_SAVE")
        ser.write(pkt_save)
        ser.flush()

        time.sleep(2)
        resp_save = ser.read_all()
        print("–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:", resp_save)

        ser.close()
        print("[‚úì] –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return True
    except serial.SerialException as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
        return False

def main():
    success_count = 0
    while True:
        print("\n\033[94m[*] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—à–∏–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, developed by spektor...\033[0m\n")
        #print("\n[*] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—à–∏–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, developed by spektor...\n")

        if not convert_hex_to_bin(HEX_FILE, BIN_FILE):
            print("[!] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            time.sleep(1)
            #input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...")
            continue

        #input("–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ø–æ–ª—ë—Ç–Ω–∏–∫ –≤ DFU-—Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")

        if not check_dfu():
            #print("[!] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ DFU-—Ä–µ–∂–∏–º–µ. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            os.system("cls")
            #input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...")
            continue

        if not flash_firmware(BIN_FILE):
            print("[!] –ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            time.sleep(1)
            #input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...")
            continue

       # print("\n[!] –û—Ç–∫–ª—é—á–∏—Ç–µ –∏ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–ª—ë—Ç–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ COM-–ø–æ—Ä—Ç–∞.")
        print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º COM-–ø–æ—Ä—Ç–∞...")
        time.sleep(1)

        port = osd_cli_stage()
        if not port:
            print("[!] –≠—Ç–∞–ø OSD/CLI –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            time.sleep(1)
            #input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...")
            continue

        if not calibration_stage(port):
            print("[!] –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            time.sleep(1)
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å...")
            continue

        os.system("cls")
        print("\n[‚úì] ‚úÖ‚úÖ–í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        success_count += 1
        print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—à–∏–≤–æ–∫: {success_count}")
        time.sleep(2)
        os.startfile(r"C:\Users\user\Desktop\start.mcr")
       # input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...\n")

if __name__ == '__main__':
    main()
