import os
import subprocess
import platform
import psutil
import pyautogui
import time
import logging
from threading import Thread
from telegram import Update, Bot, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import wakeonlan
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
from win10toast import ToastNotifier
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
MAC_ADDRESS = "74-56-3C-30-D9-E3"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ü–ö
TOKEN = '7802473532:AAHkCO0zrFHrEAnq53x6zGvAjNkcmvQYqxE'
ALLOWED_USERS = [1624260908]  # –í–∞—à Telegram user ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @userinfobot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def auth_required(func):
    async def wrapper(update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            await update.message.reply_text('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!')
            return
        return await func(update, context)
    return wrapper

# –ö–æ–º–∞–Ω–¥–∞ /start
@auth_required
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [KeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞")],
        [KeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"), KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")],
        [KeyboardButton("üí§ –†–µ–∂–∏–º —Å–Ω–∞"), KeyboardButton("üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å +10%")],
        [KeyboardButton("üîá –ì—Ä–æ–º–∫–æ—Å—Ç—å -10%"), KeyboardButton("‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")],
        [KeyboardButton("üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"), KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
        [KeyboardButton("‚ö°Ô∏è –í–∫–ª—é—á–∏—Ç—å –ü–ö"), KeyboardButton("‚ö°Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")],
        [KeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"), KeyboardButton("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
        [KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        'üñ•Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º!\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ü–ö —á–µ—Ä–µ–∑ Wake-on-LAN
async def wake_up_pc(chat_id: int, bot: Bot):
    try:
        wakeonlan.send_magic_packet(MAC_ADDRESS)
        await bot.send_message(chat_id, '‚ö°Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –ü–ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    except Exception as e:
        await bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Wake-on-LAN –ø–∞–∫–µ—Ç–∞: {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def open_application(update: Update, context: CallbackContext):
    app_name = update.message.text.strip()
    try:
        if platform.system() == 'Windows':
            if ':\\' in app_name or ':/' in app_name or app_name.startswith('\\') or app_name.startswith('/'):
                if os.path.exists(app_name):
                    if app_name.lower().endswith(('.exe', '.bat', '.cmd')):
                        subprocess.Popen(app_name, shell=True)
                    else:
                        os.startfile(app_name)
                    await update.message.reply_text(f'‚úÖ –§–∞–π–ª {app_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
                else:
                    await update.message.reply_text(f'‚ùå –§–∞–π–ª {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            else:
                paths = [
                    os.path.join(os.environ['ProgramFiles'], app_name),
                    os.path.join(os.environ['ProgramFiles'], 'Google', 'Chrome', 'Application', app_name),
                    os.path.join(os.environ['ProgramFiles(x86)'], app_name),
                    os.path.join(os.environ['SystemRoot'], 'System32', app_name),
                    os.path.join(os.environ['SystemRoot'], app_name),
                    os.path.join(os.environ['APPDATA'], app_name),
                    os.path.join(os.environ['LOCALAPPDATA'], app_name)
                ]
                
                for path in os.environ['PATH'].split(';'):
                    if path:
                        paths.append(os.path.join(path, app_name))
                
                found = False
                for path in paths:
                    if os.path.exists(path):
                        os.startfile(path)
                        found = True
                        break
                
                if not found:
                    try:
                        where_result = subprocess.run(f"where {app_name}", shell=True, capture_output=True, text=True)
                        if where_result.returncode == 0:
                            app_path = where_result.stdout.splitlines()[0].strip()
                            os.startfile(app_path)
                            found = True
                    except:
                        pass
                
                if found:
                    await update.message.reply_text(f'‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!')
                else:
                    await update.message.reply_text(f'‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        
        else:  # –î–ª—è Linux/Mac
            try:
                if '/' in app_name:
                    if os.path.exists(app_name):
                        os.chmod(app_name, 0o755)
                        subprocess.Popen([os.path.abspath(app_name)], shell=True)
                        await update.message.reply_text(f'‚úÖ –§–∞–π–ª {app_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
                    else:
                        await update.message.reply_text(f'‚ùå –§–∞–π–ª {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                else:
                    subprocess.Popen(app_name, shell=True)
                    await update.message.reply_text(f'‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ {app_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
            except Exception as e:
                await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}')
        
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}')
    finally:
        context.user_data.pop('waiting_for_app', None)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
async def send_system_info(chat_id: int, bot: Bot):
    try:
        uname = platform.uname()
        system_info = f"""
üñ•Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ*:
- *–°–∏—Å—Ç–µ–º–∞*: {uname.system}
- *–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞*: {uname.node}
- *–í–µ—Ä—Å–∏—è*: {uname.version}
- *–†–µ–ª–∏–∑*: {uname.release}
- *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä*: {uname.processor}
- *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞*: {platform.architecture()[0]}

üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤*:
- *CPU*: {psutil.cpu_percent()}%
- *–ü–∞–º—è—Ç—å*: {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
- *–î–∏—Å–∫*: {psutil.disk_usage('/').percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ

üåê *–°–µ—Ç—å*:
- *IP-–∞–¥—Ä–µ—Å–∞*: {', '.join([addr.address for addr in psutil.net_if_addrs().get('Wi-Fi', []) if addr.family == 2])}
        """
        
        try:
            battery = psutil.sensors_battery()
            if battery:
                system_info += f"\nüîã *–ë–∞—Ç–∞—Ä–µ—è*: {battery.percent}% ({'–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è' if battery.power_plugged else '–Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è'})"
        except:
            pass
        
        await bot.send_message(chat_id, system_info, parse_mode='Markdown')
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async def send_screenshot(chat_id: int, bot: Bot):
    try:
        screenshot = pyautogui.screenshot()
        screenshot_path = 'screenshot.png'
        screenshot.save(screenshot_path)
        with open(screenshot_path, 'rb') as photo:
            await bot.send_photo(chat_id, photo)
        os.remove(screenshot_path)
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}')

def show_message_on_screen_thread(message):
    try:
        if platform.system() == 'Windows':
            toaster = ToastNotifier()
            toaster.show_toast(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö",
                message,
                duration=10,
                icon_path=None,
                threaded=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
async def shutdown_computer(chat_id: int, bot: Bot):
    try:
        await bot.send_message(chat_id, 'üîÑ –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
        if platform.system() == 'Windows':
            os.system('shutdown /s /t 1')
        else:
            os.system('shutdown -h now')
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}')

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
async def reboot_computer(chat_id: int, bot: Bot):
    try:
        await bot.send_message(chat_id, 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...')
        if platform.system() == 'Windows':
            os.system('shutdown /r /t 1')
        else:
            os.system('shutdown -r now')
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}')

# –†–µ–∂–∏–º —Å–Ω–∞
async def sleep_computer(chat_id: int, bot: Bot):
    try:
        await bot.send_message(chat_id, 'üí§ –ü–µ—Ä–µ–≤–æ–∂—É –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Ä–µ–∂–∏–º —Å–Ω–∞...')
        if platform.system() == 'Windows':
            os.system('rundll32.exe powrprof.dll,SetSuspendState 0,1,0')
        elif platform.system() == 'Darwin':
            os.system('pmset sleepnow')
        else:
            os.system('systemctl suspend')
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞: {e}')

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
async def change_volume(chat_id: int, bot: Bot, delta: int):
    try:
        if platform.system() == 'Windows':
            import ctypes
            ctypes.windll.user32.keybd_event(0xAD, 0, 0, 0) if delta < 0 else ctypes.windll.user32.keybd_event(0xAF, 0, 0, 0)
            ctypes.windll.user32.keybd_event(0xAD, 0, 2, 0) if delta < 0 else ctypes.windll.user32.keybd_event(0xAF, 0, 2, 0)
        elif platform.system() == 'Darwin':
            os.system(f"osascript -e 'set volume output volume ((output volume of (get volume settings)) + {delta})'")
        else:
            os.system(f"amixer set Master {abs(delta)}%{'+' if delta > 0 else '-'} unmute")
        
        await bot.send_message(chat_id, f'üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {delta}%')
    except Exception as e:
        await bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}')

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async def list_processes(chat_id: int, bot: Bot):
    try:
        processes = []
        for proc in psutil.process_iter(['name']):
            try:
                processes.append(proc.info['name'])
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        unique_processes = sorted(list(set(processes)))
        
        message = "üìä *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤*:\n\n"
        message += "\n".join(unique_processes)
        
        max_length = 4000
        if len(message) > max_length:
            parts = [message[i:i+max_length] for i in range(0, len(message), max_length)]
            for part in parts:
                await bot.send_message(chat_id, part, parse_mode='Markdown')
        else:
            await bot.send_message(chat_id, message, parse_mode='Markdown')
        
    except Exception as e:
        await bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@auth_required
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    
    if text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é":
        await start(update, context)
        return
    
    chat_id = update.message.chat_id
    
    if text == "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await send_system_info(chat_id, context.bot)
    elif text == "üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞":
        await send_screenshot(chat_id, context.bot)
    elif text == "üîå –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
        await shutdown_computer(chat_id, context.bot)
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
        await reboot_computer(chat_id, context.bot)
    elif text == "üí§ –†–µ–∂–∏–º —Å–Ω–∞":
        await sleep_computer(chat_id, context.bot)
    elif text == "üéµ –ì—Ä–æ–º–∫–æ—Å—Ç—å +10%":
        await change_volume(chat_id, context.bot, 10)
    elif text == "üîá –ì—Ä–æ–º–∫–æ—Å—Ç—å -10%":
        await change_volume(chat_id, context.bot, -10)
    elif text == "‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:')
        context.user_data['waiting_for_cmd'] = True
    elif text == "üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤":
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏):')
        context.user_data['waiting_for_path'] = True
    elif text == "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: notepad.exe –∏–ª–∏ chrome.exe), \n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: (–Ω–∞–ø—Ä–∏–º–µ—Ä: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe)')
        context.user_data['waiting_for_app'] = True
    elif text == "‚ö°Ô∏è –í–∫–ª—é—á–∏—Ç—å –ü–ö":
        await wake_up_pc(chat_id, context.bot)
    elif text == "‚ö°Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤":
        await list_processes(chat_id, context.bot)
    elif text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å":
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: chrome –∏–ª–∏ chrome.exe):')
        context.user_data['waiting_for_kill'] = True
    elif text == "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ:')
        context.user_data['waiting_for_msg'] = True
    elif 'waiting_for_cmd' in context.user_data:
        command = update.message.text
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True,
                timeout=30
            )
            output = result.stdout if result.stdout else result.stderr
            if len(output) > 4000:
                output = output[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            await update.message.reply_text(f'‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n```\n{output}\n```', parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}')
        finally:
            context.user_data.pop('waiting_for_cmd', None)
    elif 'waiting_for_path' in context.user_data:
        path = update.message.text if update.message.text else '.'
        try:
            files = os.listdir(path)
            files_str = "\n".join(files)
            if len(files_str) > 4000:
                files_str = files_str[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
            await update.message.reply_text(f'üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {path}:\n```\n{files_str}\n```', parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}')
        finally:
            context.user_data.pop('waiting_for_path', None)
    elif 'waiting_for_app' in context.user_data:
        await open_application(update, context)
    elif 'waiting_for_kill' in context.user_data:
        process_name = update.message.text.strip()
        try:
            if process_name.lower().endswith('.exe'):
                process_name = process_name[:-4]
            
            killed = False
            for proc in psutil.process_iter(['name', 'pid']):
                try:
                    proc_name = proc.info['name']
                    if proc_name.lower().endswith('.exe'):
                        proc_name = proc_name[:-4]
                    
                    if proc_name.lower() == process_name.lower():
                        proc.kill()
                        killed = True
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            
            if killed:
                await update.message.reply_text(f'‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!')
            else:
                await update.message.reply_text(f'‚ùå –ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç')
        
        except Exception as e:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}')
        finally:
            context.user_data.pop('waiting_for_kill', None)
    elif 'waiting_for_msg' in context.user_data:
        message = update.message.text
        try:
            Thread(target=show_message_on_screen_thread, args=(message,), daemon=True).start()
            await update.message.reply_text('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–∏–¥–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!')
        except Exception as e:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        finally:
            context.user_data.pop('waiting_for_msg', None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext):
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}', exc_info=context.error)
    if update and update.effective_message:
        await update.effective_message.reply_text('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.')

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == '__main__':
    main()