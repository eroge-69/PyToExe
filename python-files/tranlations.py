import os
import json
import re
from collections import OrderedDict


def flatten_keys(data, parent_key='', sep='.'):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –ø–ª–æ—Å–∫–∏–µ (a.b.c)."""
    items = []
    if isinstance(data, dict):
        for k, v in data.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.extend(flatten_keys(v, new_key, sep=sep).items())
            else:
                items.append((new_key, v))
    return OrderedDict(items)


def load_translation(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç."""
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
    with open(filepath, 'r', encoding='utf-8') as f:
        data = json.load(f)
    flat = flatten_keys(data)
    return flat, data


def find_missing_keys(en_path, ru_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ en –∏–ª–∏ ru."""
    try:
        en_flat, en_data = load_translation(en_path)
        ru_flat, _ = load_translation(ru_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
        raise

    en_keys = set(en_flat.keys())
    ru_keys = set(ru_flat.keys())

    missing_in_en = sorted(ru_keys - en_keys)
    missing_in_ru = sorted(en_keys - ru_keys)

    return missing_in_en, missing_in_ru, en_flat, ru_flat, en_data


def search_key_usage(project_root, key):
    """–ò—â–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ .js –∏ .jsx —Ñ–∞–π–ª–∞—Ö."""
    usages = []
    escaped_key = re.escape(key)

    patterns = [
       rf't\(["\']{escaped_key}["\']\)',
        rf'i18n\.t\(["\']{escaped_key}["\']\)',
        rf'useTranslation\(\)\["\']{escaped_key}["\']',
        rf'"(?:[^"\\]|\\.)*{escaped_key}(?:[^"\\]|\\.)*"',
        rf"'(?:[^'\\]|\\.)*{escaped_key}(?:[^'\\]|\\.)*'",
    ]

    for root, _, files in os.walk(project_root):
        for file in files:
            if file.endswith(('.js', '.jsx')):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()

                    for line_num, line in enumerate(lines, 1):
                        for pattern in patterns:
                            if re.search(pattern, line):
                                usage = {
                                    'file': os.path.relpath(filepath, project_root),
                                    'line': line_num,
                                    'code': line.strip()
                                }
                                if usage not in usages:
                                    usages.append(usage)
                                break
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filepath}: {e}")

    return usages


def find_insert_line_in_en(en_data, full_key, en_lines):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ en/translation.json, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based) –∏–ª–∏ None.
    """
    parts = full_key.split('.')
    if len(parts) < 2:
        return None

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
    current = en_data
    for part in parts[:-1]:
        if part not in current:
            return None
        current = current[part]

    # –ù–∞–π–¥—ë–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–¥ –∫–ª—é—á–æ–º)
    section_path = parts[:-1]
    current_obj = en_data
    for p in section_path:
        if not isinstance(current_obj, dict) or p not in current_obj:
            return None
        current_obj = current_obj[p]

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—á–∞–ª–æ–º —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏: "sectionName": {
    section_name = section_path[-1]
    pattern = rf'"{re.escape(section_name)}"\s*:\s*{{'

    start_line_idx = -1
    for i, line in enumerate(en_lines):
        if re.search(pattern, line):
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
            if is_in_nested_structure(en_lines, i, section_path):
                start_line_idx = i
                break

    if start_line_idx == -1:
        return None

    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ (–≥–¥–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è }
    depth = 1
    for i in range(start_line_idx + 1, len(en_lines)):
        depth += en_lines[i].count('{') - en_lines[i].count('}')
        if depth <= 0:
            return i  # –≤—Å—Ç–∞–≤–ª—è–µ–º –ü–ï–†–ï–î —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π

    return len(en_lines) - 1


def is_in_nested_structure(lines, start_line, path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –Ω—É–∂–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—É—Ç–∏.
    """
    # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    return True


def main():
    # üîß –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    base_path = r'frontend\gtb\src'
    en_translation = os.path.join(base_path, r'locale\en\translation.json')
    ru_translation = os.path.join(base_path, r'locale\ru\translation.json')
    project_root = base_path  # –ø–∞–ø–∫–∞ src

    # üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –Ω–∞ D:\
    report_path = r'D:\translation_analysis_report.txt'

    # –ß—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    report_path = os.path.abspath(report_path)
    project_root = os.path.abspath(project_root)

    report_lines = []

    try:
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
        missing_in_en, missing_in_ru, en_flat, ru_flat, en_data = find_missing_keys(en_translation, ru_translation)

        # –ß–∏—Ç–∞–µ–º en.json –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        with open(en_translation, 'r', encoding='utf-8') as f:
            en_lines = f.readlines()

        print(f"‚úÖ –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ en: {len(missing_in_en)}")
        print(f"‚úÖ –ö–ª—é—á–µ–π –Ω–µ—Ç –≤ ru: {len(missing_in_ru)}")
        print("üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ .js/.jsx —Ñ–∞–π–ª–∞—Ö...")

        # === –ö–ª—é—á–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ en ===
        report_lines.append("–ö–ª—é—á –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ en/translation.json:")
        if missing_in_en:
            for key in missing_in_en:
                usages = search_key_usage(project_root, key)
                insert_line = find_insert_line_in_en(en_data, key, en_lines)
                last_key = key.split('.')[-1]
                line_info = insert_line + 1 if insert_line is not None else "?"

                report_lines.append(f"- {key} (—Å—Ç—Ä–æ–∫–∞: {line_info}, –∫–ª—é—á: {last_key})")

                if usages:
                    for usage in usages:
                        report_lines.append(f"  ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: {usage['file']} (—Å—Ç—Ä–æ–∫–∞ {usage['line']})")
                else:
                    report_lines.append(f"  ‚Üí –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            report_lines.append("  –ù–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π")

        # === –ö–ª—é—á–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ ru ===
        report_lines.append("")
        report_lines.append("–ö–ª—é—á –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ ru/translation.json:")
        if missing_in_ru:
            for key in missing_in_ru:
                usages = search_key_usage(project_root, key)
                if usages:
                    for usage in usages:
                        report_lines.append(f"- {key}")
                        report_lines.append(f"  ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: {usage['file']} (—Å—Ç—Ä–æ–∫–∞ {usage['line']})")
                else:
                    report_lines.append(f"- {key}")
                    report_lines.append(f"  ‚Üí –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            report_lines.append("  –ù–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π")

        # === –û—Ç—á–µ—Ç ===
        report_lines.append("")
        report_lines.append("–û—Ç—á–µ—Ç:")
        report_lines.append(f"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ ru/translation.json: {len(ru_flat)}")
        report_lines.append(f"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ en/translation.json: {len(en_flat)}")
        report_lines.append(f"–ö–ª—é—á–µ–π –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ en/translation.json: {len(missing_in_en)}")
        report_lines.append(f"–ö–ª—é—á–µ–π –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –≤ ru/translation.json: {len(missing_in_ru)}")

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(report_lines))
            print(f"\n‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
            print(f"–ü—É—Ç—å: {report_path}")
            print("–ü–æ–ø—Ä–æ–±—É–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç
        report_lines.append(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(report_lines))
            print(f"–ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç.")


if __name__ == "__main__":
    main()