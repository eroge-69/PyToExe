#!/usr/bin/env python3
"""
‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ERP ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPSR Analysis System
‡πÇ‡∏î‡∏¢ MiniMax Agent

‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞:
1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ERP Report)
2. ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Account Code, Account Name, ‡πÅ‡∏•‡∏∞ Amount
3. ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà IPSR Analysis System ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå IPSR Analysis System ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import pandas as pd
import numpy as np
import re
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import os

class ERPToIPSRConverter:
    def __init__(self):
        self.source_file = "/workspace/user_input_files/‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö.xlsx"
        self.target_file = "/workspace/user_input_files/IPSR Analysis System.xlsx"
        self.output_file = "/workspace/data/IPSR_Analysis_System_Updated.xlsx"
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î category mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        self.category_mapping = {
            # ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
            '11': {'category': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'subcategory': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô'},
            '12': {'category': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'subcategory': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô'},
            '13': {'category': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 'subcategory': '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô'},
            
            # ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô  
            '21': {'category': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô', 'subcategory': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô'},
            '22': {'category': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô', 'subcategory': '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô'},
            
            # ‡∏ó‡∏∏‡∏ô
            '31': {'category': '‡∏ó‡∏∏‡∏ô', 'subcategory': '‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∞‡∏™‡∏°'},
            
            # ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            '41': {'category': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ', 'subcategory': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏Å'},
            '42': {'category': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ', 'subcategory': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô'},
            
            # ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
            '51': {'category': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', 'subcategory': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£'},
            '52': {'category': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', 'subcategory': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô'},
            '53': {'category': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢', 'subcategory': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô'}
        }
    
    def extract_financial_data(self):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö"""
        print("üîç ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö...")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        df = pd.read_excel(self.source_file, sheet_name='test system')
        
        extracted_data = []
        current_date = datetime.now()
        
        print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡πÅ‡∏ñ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Account Code ‡πÅ‡∏•‡∏∞ Amount
        account_pattern = r'(\d{10})'  # ‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å
        amount_pattern = r'([-]?\d{1,3}(?:,?\d{3})*\.?\d*)'  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        
        for idx, row in df.iterrows():
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡πá‡∏ô string
            row_text = ' '.join([str(val) for val in row.values if pd.notna(val)])
            
            if not row_text or row_text.strip() == '':
                continue
                
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Account Code
            account_matches = re.findall(account_pattern, row_text)
            
            if account_matches:
                account_code = account_matches[0]
                
                # ‡∏´‡∏≤ Account Name (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á Account Code)
                account_name_match = re.search(f'{account_code}\s+(.+?)(?:\s+{amount_pattern}|$)', row_text)
                account_name = ""
                if account_name_match:
                    account_name = account_name_match.group(1).strip()
                    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Account Name
                    account_name = re.sub(r'[=]+>', '', account_name).strip()
                
                # ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                amounts = re.findall(amount_pattern, row_text)
                if amounts:
                    # ‡πÄ‡∏≠‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
                    amount_str = amounts[-1].replace(',', '')
                    try:
                        amount = float(amount_str)
                        
                        # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏≤‡∏° Account Code
                        category_key = account_code[:2]
                        category_info = self.category_mapping.get(category_key, {
                            'category': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', 
                            'subcategory': '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                        })
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        extracted_data.append({
                            'Account_Code': account_code,
                            'Account_Name': account_name,
                            'Year': 2567,  # ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                            'Month': 10,   # ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (31.10.2024)
                            'Amount': amount,
                            'Category': category_info['category'],
                            'Subcategory': category_info['subcategory'],
                            'Data_Source': 'ERP',
                            'Import_Date': current_date.strftime('%d.%m.%Y'),
                            'Status': 'Imported'
                        })
                        
                    except ValueError:
                        continue
        
        print(f"‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(extracted_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return pd.DataFrame(extracted_data)
    
    def update_ipsr_system(self, financial_data):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô IPSR Analysis System"""
        print("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô IPSR Analysis System...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå IPSR
        if not os.path.exists("/workspace/data"):
            os.makedirs("/workspace/data")
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö IPSR
        import shutil
        shutil.copy2(self.target_file, self.output_file)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Monthly_Data sheet
        with pd.ExcelWriter(self.output_file, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
            financial_data.to_excel(writer, sheet_name='Monthly_Data', index=False)
        
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {self.output_file}")
        return self.output_file
    
    def generate_summary_report(self, financial_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ...")
        
        summary = {
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î': len(financial_data),
            '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå': financial_data[financial_data['Category'] == '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå']['Amount'].sum(),
            '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô': financial_data[financial_data['Category'] == '‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô']['Amount'].sum(),
            '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ': financial_data[financial_data['Category'] == '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ']['Amount'].sum(),
            '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢': financial_data[financial_data['Category'] == '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢']['Amount'].sum(),
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        category_summary = financial_data.groupby('Category').agg({
            'Amount': ['count', 'sum'],
            'Account_Code': 'nunique'
        }).round(2)
        
        return summary, category_summary
    
    def convert(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ERP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á IPSR Analysis System")
        print("="*70)
        
        try:
            # 1. ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            financial_data = self.extract_financial_data()
            
            if financial_data.empty:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ")
                return None
            
            # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï IPSR System
            output_file = self.update_ipsr_system(financial_data)
            
            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
            summary, category_summary = self.generate_summary_report(financial_data)
            
            # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("="*50)
            for key, value in summary.items():
                print(f"‚Ä¢ {key}: {value:,.2f}")
            
            print(f"\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
            print(category_summary)
            
            print(f"\nüíæ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {output_file}")
            print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
            
            return {
                'output_file': output_file,
                'data': financial_data,
                'summary': summary,
                'category_summary': category_summary
            }
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            raise

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    converter = ERPToIPSRConverter()
    result = converter.convert()
    
    if result:
        print(f"\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß: {result['output_file']}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
        print(f"\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):")
        print(result['data'].head().to_string(index=False))

if __name__ == "__main__":
    main()
