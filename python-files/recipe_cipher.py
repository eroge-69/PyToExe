import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import base64
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import json
import os
from datetime import datetime

class RecipeCipherApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–®–∏—Ñ—Ä–∞—Ç–æ—Ä")
        self.root.geometry("1000x750")
        self.root.minsize(800, 600)

        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è CustomTkinter
        self.custom_font = ("Consolas", 12)

        self.history = []
        self.load_history()
        self.current_file = None

        self.method_var = ctk.StringVar(value="–¶–µ–∑–∞—Ä—å")
        self.key_var = ctk.StringVar(value="3")

        self.setup_ui()

    def setup_ui(self):
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ctk.CTkFrame(main_frame)
        control_frame.pack(fill=tk.X, pady=(10, 10))

        # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.open_btn = ctk.CTkButton(
            control_frame, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
            command=self.open_file,
            fg_color="#607D8B", hover_color="#455A64"
        )
        self.open_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.save_btn = ctk.CTkButton(
            control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            command=self.save_result,
            fg_color="#009688", hover_color="#00796B"
        )
        self.save_btn.pack(side=tk.LEFT, padx=(0, 10))

        # –ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        ctk.CTkLabel(control_frame, text="–ú–µ—Ç–æ–¥:").pack(side=tk.LEFT, padx=(0, 5))
        self.method_menu = ctk.CTkOptionMenu(
            control_frame,
            variable=self.method_var,
            values=["–¶–µ–∑–∞—Ä—å", "–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞", "XOR", "Base64", "AES"],
            command=self.on_method_change
        )
        self.method_menu.pack(side=tk.LEFT, padx=(0, 10))

        # –ö–ª—é—á/–°–¥–≤–∏–≥
        ctk.CTkLabel(control_frame, text="–ö–ª—é—á/–°–¥–≤–∏–≥:").pack(side=tk.LEFT, padx=(0, 5))
        self.key_entry = ctk.CTkEntry(control_frame, textvariable=self.key_var, width=100)
        self.key_entry.pack(side=tk.LEFT, padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
        self.gen_key_btn = ctk.CTkButton(
            control_frame,
            text="üîë",
            width=40,
            command=self.generate_random_key
        )
        self.gen_key_btn.pack(side=tk.LEFT, padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.encrypt_btn = ctk.CTkButton(
            control_frame, text="üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å",
            command=self.encrypt,
            fg_color="#4CAF50", hover_color="#45a049"
        )
        self.encrypt_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.decrypt_btn = ctk.CTkButton(
            control_frame, text="üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å",
            command=self.decrypt,
            fg_color="#F44336", hover_color="#d32f2f"
        )
        self.decrypt_btn.pack(side=tk.LEFT, padx=(0, 10))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
        input_frame = ctk.CTkFrame(main_frame)
        input_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 10))

        # –ü–∞–Ω–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)
        input_control_frame = ctk.CTkFrame(input_frame)
        input_control_frame.pack(fill=tk.X, pady=(0, 5))

        ctk.CTkLabel(input_control_frame, text="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:").pack(side=tk.LEFT)
        self.file_label = ctk.CTkLabel(input_control_frame, text="–§–∞–π–ª –Ω–µ –æ—Ç–∫—Ä—ã—Ç", text_color="gray")
        self.file_label.pack(side=tk.RIGHT)

        copy_input_btn = ctk.CTkButton(
            input_control_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=lambda: self.copy_text(self.input_text),
            width=100
        )
        copy_input_btn.pack(side=tk.RIGHT, padx=(0, 5))

        paste_input_btn = ctk.CTkButton(
            input_control_frame, text="üñåÔ∏è –í—Å—Ç–∞–≤–∏—Ç—å",
            command=lambda: self.paste_text(self.input_text),
            width=100
        )
        paste_input_btn.pack(side=tk.RIGHT)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.input_text = tk.Text(
            input_frame,
            wrap=tk.WORD,
            bg="#2b2b2b",
            fg="white",
            insertbackground="white",
            bd=0,
            highlightthickness=0,
            padx=10,
            pady=10,
            font=("Consolas", 12)
        )
        self.input_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        self.input_text.bind("<Control-c>", lambda e: self.copy_text(self.input_text))
        self.input_text.bind("<Control-v>", lambda e: self.paste_text(self.input_text))

        # –ü–∞–Ω–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        output_control_frame = ctk.CTkFrame(input_frame)
        output_control_frame.pack(fill=tk.X, pady=(0, 5))

        ctk.CTkLabel(output_control_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").pack(side=tk.LEFT)

        copy_output_btn = ctk.CTkButton(
            output_control_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=lambda: self.copy_text(self.output_text),
            width=100
        )
        copy_output_btn.pack(side=tk.RIGHT)

        # –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ —Å —Ç–µ–º –∂–µ —à—Ä–∏—Ñ—Ç–æ–º
        self.output_text = ctk.CTkTextbox(
            input_frame,
            wrap=tk.WORD,
            font=self.custom_font
        )
        self.output_text.pack(fill=tk.BOTH, expand=True)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        self.tooltip = ctk.CTkLabel(
            main_frame,
            text="–û—Ç–∫—Ä–æ–π—Ç–µ .txt —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –î–ª—è XOR/AES –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n",
            text_color="#AAAAAA"
        )
        self.tooltip.pack(fill=tk.X, pady=(10, 0))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è –∫–ª—é—á–∞
        self.update_key_field()

    def on_method_change(self, method):
        self.update_key_field()
        if method in ["XOR", "AES"]:
            messagebox.showwarning(
                "–í–Ω–∏–º–∞–Ω–∏–µ!",
                f"‚ö†Ô∏è –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ {method} –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á!\n"
                "–ë–µ–∑ –∫–ª—é—á–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ù–ï–í–û–ó–ú–û–ñ–ù–û!"
            )

    def update_key_field(self, event=None):
        method = self.method_var.get()
        if method in ["XOR", "AES"]:
            self.key_entry.configure(placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ")
            self.gen_key_btn.pack(side=tk.LEFT, padx=(0, 10))
        elif method == "–¶–µ–∑–∞—Ä—å":
            self.key_entry.configure(placeholder_text="–°–¥–≤–∏–≥ (—á–∏—Å–ª–æ)")
            self.gen_key_btn.pack_forget()
        else:
            self.key_entry.configure(placeholder_text="")
            self.gen_key_btn.pack_forget()

    def generate_random_key(self):
        method = self.method_var.get()
        if method == "XOR":
            key = base64.b64encode(get_random_bytes(8)).decode()[:8]
        elif method == "AES":
            key = base64.b64encode(get_random_bytes(16)).decode()[:16]
        else:
            return
        self.key_var.set(key)
        messagebox.showinfo(
            "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á",
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: {key}\n\n"
            "‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ!\n"
            "–ë–µ–∑ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
        )

    def copy_text(self, widget):
        try:
            if isinstance(widget, ctk.CTkTextbox):
                text = widget.get("1.0", tk.END).strip()
            else:  # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Text
                text = widget.get("1.0", tk.END).strip()
            if text:
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: {e}")

    def paste_text(self, widget):
        try:
            text = self.root.clipboard_get()
            if text:
                widget.delete("1.0", tk.END)
                widget.insert("1.0", text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å: {e}")

    def open_file(self):
        file_path = filedialog.askopenfilename(
            title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                self.input_text.delete("1.0", tk.END)
                self.input_text.insert("1.0", content)
                self.current_file = file_path
                self.file_label.configure(text=f"–§–∞–π–ª: {os.path.basename(file_path)}")
                self.output_text.delete("1.0", tk.END)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

    def save_result(self):
        result = self.output_text.get("1.0", tk.END).strip()
        if not result:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return

        if self.current_file:
            save_path = self.current_file
        else:
            save_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )

        if save_path:
            try:
                with open(save_path, "w", encoding="utf-8") as f:
                    f.write(result)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\n{save_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def encrypt(self):
        method = self.method_var.get()
        key = self.key_var.get()
        text = self.input_text.get("1.0", tk.END).strip()
        if not text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!")
            return
        if method in ["XOR", "AES"] and not key:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á!")
            return
        try:
            result = self.apply_cipher(text, method, key, encrypt=True)
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert("1.0", result)
            self.add_to_history(method, key, text, result, "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: {e}")

    def decrypt(self):
        method = self.method_var.get()
        key = self.key_var.get()
        text = self.input_text.get("1.0", tk.END).strip()
        if not text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!")
            return
        if method in ["XOR", "AES"] and not key:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–î–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á!")
            return
        try:
            result = self.apply_cipher(text, method, key, encrypt=False)
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert("1.0", result)
            self.add_to_history(method, key, text, result, "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: {e}")

    def apply_cipher(self, text, method, key, encrypt):
        if method == "–¶–µ–∑–∞—Ä—å":
            return self.caesar_cipher(text, int(key), encrypt)
        elif method == "–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞":
            return self.transposition_cipher(text, encrypt)
        elif method == "XOR":
            return self.xor_cipher(text, key, encrypt)
        elif method == "Base64":
            return self.base64_cipher(text, encrypt)
        elif method == "AES":
            return self.aes_cipher(text, key.ljust(16)[:16], encrypt)
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥")

    def caesar_cipher(self, text, shift, encrypt):
        result = []
        shift_amount = shift if encrypt else -shift
        for char in text:
            if '–∞' <= char.lower() <= '—è':
                base = ord('–∞') if char.islower() else ord('–ê')
                new_char = chr((ord(char) - base + shift_amount) % 32 + base)
                result.append(new_char)
            elif 'a' <= char.lower() <= 'z':
                base = ord('a') if char.islower() else ord('A')
                new_char = chr((ord(char) - base + shift_amount) % 26 + base)
                result.append(new_char)
            else:
                result.append(char)
        return ''.join(result)

    def transposition_cipher(self, text, encrypt):
        return text[::-1] if encrypt else text[::-1]

    def xor_cipher(self, text, key, encrypt):
        return ''.join([chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(text)])

    def base64_cipher(self, text, encrypt):
        if encrypt:
            return base64.b64encode(text.encode('utf-8')).decode('utf-8')
        else:
            return base64.b64decode(text.encode('utf-8')).decode('utf-8')

    def aes_cipher(self, text, key, encrypt):
        cipher = AES.new(key.encode('utf-8'), AES.MODE_EAX)
        if encrypt:
            ciphertext, tag = cipher.encrypt_and_digest(text.encode('utf-8'))
            return base64.b64encode(cipher.nonce + tag + ciphertext).decode('utf-8')
        else:
            data = base64.b64decode(text.encode('utf-8'))
            nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
            cipher = AES.new(key.encode('utf-8'), AES.MODE_EAX, nonce)
            return cipher.decrypt_and_verify(ciphertext, tag).decode('utf-8')

    def add_to_history(self, method, key, input_text, output_text, action):
        self.history.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "method": method,
            "key": key,
            "input": input_text,
            "output": output_text,
            "action": action
        })
        self.save_history()

    def save_history(self):
        with open("history.json", "w", encoding="utf-8") as f:
            json.dump(self.history, f, ensure_ascii=False, indent=4)

    def load_history(self):
        if os.path.exists("history.json"):
            with open("history.json", "r", encoding="utf-8") as f:
                self.history = json.load(f)

if __name__ == "__main__":
    root = ctk.CTk()
    app = RecipeCipherApp(root)
    root.mainloop()